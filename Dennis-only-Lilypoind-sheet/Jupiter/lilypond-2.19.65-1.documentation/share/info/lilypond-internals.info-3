This is lilypond-internals.info, produced by makeinfo version 6.1 from
internals.texi.

INFO-DIR-SECTION LilyPond
START-INFO-DIR-ENTRY
* GNU LilyPond Internals Reference: (internals).          LilyPond Internals Reference.
END-INFO-DIR-ENTRY


File: lilypond-internals.info,  Node: VaticanaStaff,  Next: VaticanaVoice,  Prev: TabVoice,  Up: Contexts

2.1.31 VaticanaStaff
--------------------

Same as ‘Staff’ context, except that it is accommodated for typesetting
Gregorian Chant in the notational style of Editio Vaticana.

   This context also accepts commands for the following context(s):

   Staff.

   This context creates the following layout object(s):

   *note Accidental::, *note AccidentalCautionary::, *note
AccidentalPlacement::, *note AccidentalSuggestion::, *note BarLine::,
*note BassFigure::, *note BassFigureAlignment::, *note
BassFigureAlignmentPositioning::, *note BassFigureBracket::, *note
BassFigureContinuation::, *note BassFigureLine::, *note Clef::, *note
ClefModifier::, *note CueClef::, *note CueEndClef::, *note Custos::,
*note DotColumn::, *note FingeringColumn::, *note InstrumentName::,
*note KeyCancellation::, *note KeySignature::, *note
LedgerLineSpanner::, *note NoteCollision::, *note OttavaBracket::, *note
PianoPedalBracket::, *note RestCollision::, *note ScriptRow::, *note
SostenutoPedal::, *note SostenutoPedalLineSpanner::, *note
StaffSpacing::, *note StaffSymbol::, *note SustainPedal::, *note
SustainPedalLineSpanner::, *note UnaCordaPedal::, *note
UnaCordaPedalLineSpanner:: and *note VerticalAxisGroup::.

   This context sets the following properties:

   • Set grob-property ‘glyph-name-alist’ in *note Accidental:: to:
     '((-1/2 . "accidentals.vaticanaM1")
       (0 . "accidentals.vaticana0")
       (1/2 . "accidentals.mensural1"))
   • Set grob-property ‘glyph-name-alist’ in *note KeySignature:: to:
     '((-1/2 . "accidentals.vaticanaM1")
       (0 . "accidentals.vaticana0")
       (1/2 . "accidentals.mensural1"))
   • Set grob-property ‘line-count’ in *note StaffSymbol:: to ‘4’.
   • Set grob-property ‘neutral-direction’ in *note Custos:: to ‘-1’.
   • Set grob-property ‘neutral-position’ in *note Custos:: to ‘3’.
   • Set grob-property ‘style’ in *note Custos:: to ‘'vaticana’.
   • Set grob-property ‘style’ in *note Dots:: to ‘'vaticana’.
   • Set grob-property ‘thickness’ in *note StaffSymbol:: to ‘0.6’.
   • Set grob-property ‘transparent’ in *note BarLine:: to ‘#t’.
   • Set translator property ‘clefGlyph’ to ‘"clefs.vaticana.do"’.
   • Set translator property ‘clefPosition’ to ‘1’.
   • Set translator property ‘clefTransposition’ to ‘0’.
   • Set translator property ‘createSpacing’ to ‘#t’.
   • Set translator property ‘ignoreFiguredBassRest’ to ‘#f’.
   • Set translator property ‘instrumentName’ to ‘'()’.
   • Set translator property ‘localAlterations’ to ‘'()’.
   • Set translator property ‘middleCClefPosition’ to ‘1’.
   • Set translator property ‘middleCPosition’ to ‘1’.
   • Set translator property ‘shortInstrumentName’ to ‘'()’.

   This is not a ‘Bottom’ context; search for such a one will commence
after creating an implicit context of type *note VaticanaVoice::.

   Context VaticanaStaff can contain *note CueVoice::, *note NullVoice::
and *note VaticanaVoice::.

   This context is built from the following engraver(s):

     ‘*note Accidental_engraver::’
          Make accidentals.  Catch note heads, ties and notices
          key-change events.  This engraver usually lives at Staff
          level, but reads the settings for Accidental at ‘Voice’ level,
          so you can ‘\override’ them at ‘Voice’.

          Properties (read)

               ‘accidentalGrouping’ (symbol)
                    If set to ‘'voice’, accidentals on the same note in
                    different octaves may be horizontally staggered if
                    in different voices.

               ‘autoAccidentals’ (list)
                    List of different ways to typeset an accidental.

                    For determining when to print an accidental, several
                    different rules are tried.  The rule that gives the
                    highest number of accidentals is used.

                    Each entry in the list is either a symbol or a
                    procedure.

                    SYMBOL
                         The symbol is the name of the context in which
                         the following rules are to be applied.  For
                         example, if CONTEXT is *note
                         (lilypond-internals)Score:: then all staves
                         share accidentals, and if CONTEXT is *note
                         (lilypond-internals)Staff:: then all voices in
                         the same staff share accidentals, but staves do
                         not.

                    PROCEDURE
                         The procedure represents an accidental rule to
                         be applied to the previously specified context.

                         The procedure takes the following arguments:

                         ‘context’
                              The current context to which the rule
                              should be applied.

                         ‘pitch’
                              The pitch of the note to be evaluated.

                         ‘barnum’
                              The current bar number.

                         ‘measurepos’
                              The current measure position.

                         The procedure returns a pair of booleans.  The
                         first states whether an extra natural should be
                         added.  The second states whether an accidental
                         should be printed.  ‘(#t . #f)’ does not make
                         sense.

               ‘autoCautionaries’ (list)
                    List similar to ‘autoAccidentals’, but it controls
                    cautionary accidentals rather than normal ones.
                    Both lists are tried, and the one giving the most
                    accidentals wins.  In case of draw, a normal
                    accidental is typeset.

               ‘extraNatural’ (boolean)
                    Whether to typeset an extra natural sign before
                    accidentals that reduce the effect of a previous
                    alteration.

               ‘harmonicAccidentals’ (boolean)
                    If set, harmonic notes in chords get accidentals.

               ‘internalBarNumber’ (integer)
                    Contains the current barnumber.  This property is
                    used for internal timekeeping, among others by the
                    ‘Accidental_engraver’.

               ‘keyAlterations’ (list)
                    The current key signature.  This is an alist
                    containing ‘(STEP . ALTER)’ or ‘((OCTAVE . STEP) .
                    ALTER)’, where STEP is a number in the range 0 to 6
                    and ALTER a fraction, denoting alteration.  For
                    alterations, use symbols, e.g.  ‘keyAlterations =
                    #`((6 . ,FLAT))’.

               ‘localAlterations’ (list)
                    The key signature at this point in the measure.  The
                    format is the same as for ‘keyAlterations’, but can
                    also contain ‘((OCTAVE . NAME) . (ALTER BARNUMBER .
                    MEASUREPOSITION))’ pairs.

          Properties (write)

               ‘localAlterations’ (list)
                    The key signature at this point in the measure.  The
                    format is the same as for ‘keyAlterations’, but can
                    also contain ‘((OCTAVE . NAME) . (ALTER BARNUMBER .
                    MEASUREPOSITION))’ pairs.

          This engraver creates the following layout object(s):

          *note Accidental::, *note AccidentalCautionary::, *note
          AccidentalPlacement:: and *note AccidentalSuggestion::.

     ‘*note Axis_group_engraver::’
          Group all objects created in this context in a
          ‘VerticalAxisGroup’ spanner.

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘hasAxisGroup’ (boolean)
                    True if the current context is contained in an axis
                    group.

               ‘keepAliveInterfaces’ (list)
                    A list of symbols, signifying grob interfaces that
                    are worth keeping a staff with ‘remove-empty’ set
                    around for.

          Properties (write)

               ‘hasAxisGroup’ (boolean)
                    True if the current context is contained in an axis
                    group.

          This engraver creates the following layout object(s):

          *note VerticalAxisGroup::.

     ‘*note Bar_engraver::’
          Create barlines.  This engraver is controlled through the
          ‘whichBar’ property.  If it has no bar line to create, it will
          forbid a linebreak at this point.  This engraver is required
          to trigger the creation of clefs at the start of systems.

          Properties (read)

               ‘whichBar’ (string)
                    This property is read to determine what type of bar
                    line to create.

                    Example:

                         \set Staff.whichBar = ".|:"

                    This will create a start-repeat bar in this staff
                    only.  Valid values are described in
                    ‘scm/bar-line.scm’.

          Properties (write)

               ‘forbidBreak’ (boolean)
                    If set to ‘#t’, prevent a line break at this point.

          This engraver creates the following layout object(s):

          *note BarLine::.

     ‘*note Clef_engraver::’
          Determine and set reference point for pitches.

          Properties (read)

               ‘clefGlyph’ (string)
                    Name of the symbol within the music font.

               ‘clefPosition’ (number)
                    Where should the center of the clef symbol go,
                    measured in half staff spaces from the center of the
                    staff.

               ‘clefTransposition’ (integer)
                    Add this much extra transposition.  Values of 7 and
                    -7 are common.

               ‘clefTranspositionStyle’ (symbol)
                    Determines the way the ClefModifier grob is
                    displayed.  Possible values are ‘default’,
                    ‘parenthesized’ and ‘bracketed’.

               ‘explicitClefVisibility’ (vector)
                    ‘break-visibility’ function for clef changes.

               ‘forceClef’ (boolean)
                    Show clef symbol, even if it has not changed.  Only
                    active for the first clef after the property is set,
                    not for the full staff.

          This engraver creates the following layout object(s):

          *note Clef:: and *note ClefModifier::.

     ‘*note Collision_engraver::’
          Collect ‘NoteColumns’, and as soon as there are two or more,
          put them in a ‘NoteCollision’ object.

          This engraver creates the following layout object(s):

          *note NoteCollision::.

     ‘*note Cue_clef_engraver::’
          Determine and set reference point for pitches in cued voices.

          Properties (read)

               ‘clefTransposition’ (integer)
                    Add this much extra transposition.  Values of 7 and
                    -7 are common.

               ‘cueClefGlyph’ (string)
                    Name of the symbol within the music font.

               ‘cueClefPosition’ (number)
                    Where should the center of the clef symbol go,
                    measured in half staff spaces from the center of the
                    staff.

               ‘cueClefTransposition’ (integer)
                    Add this much extra transposition.  Values of 7 and
                    -7 are common.

               ‘cueClefTranspositionStyle’ (symbol)
                    Determines the way the ClefModifier grob is
                    displayed.  Possible values are ‘default’,
                    ‘parenthesized’ and ‘bracketed’.

               ‘explicitCueClefVisibility’ (vector)
                    ‘break-visibility’ function for cue clef changes.

               ‘middleCCuePosition’ (number)
                    The position of the middle C, as determined only by
                    the clef of the cue notes.  This can be calculated
                    by looking at ‘cueClefPosition’ and ‘cueClefGlyph’.

          This engraver creates the following layout object(s):

          *note ClefModifier::, *note CueClef:: and *note CueEndClef::.

     ‘*note Custos_engraver::’
          Engrave custodes.

          This engraver creates the following layout object(s):

          *note Custos::.

     ‘*note Dot_column_engraver::’
          Engrave dots on dotted notes shifted to the right of the note.
          If omitted, then dots appear on top of the notes.

          This engraver creates the following layout object(s):

          *note DotColumn::.

     ‘*note Figured_bass_engraver::’
          Make figured bass numbers.

          Music types accepted:

          *note bass-figure-event:: and *note rest-event::

          Properties (read)

               ‘figuredBassAlterationDirection’ (direction)
                    Where to put alterations relative to the main
                    figure.

               ‘figuredBassCenterContinuations’ (boolean)
                    Whether to vertically center pairs of extender
                    lines.  This does not work with three or more lines.

               ‘figuredBassFormatter’ (procedure)
                    A routine generating a markup for a bass figure.

               ‘ignoreFiguredBassRest’ (boolean)
                    Don’t swallow rest events.

               ‘implicitBassFigures’ (list)
                    A list of bass figures that are not printed as
                    numbers, but only as extender lines.

               ‘useBassFigureExtenders’ (boolean)
                    Whether to use extender lines for repeated bass
                    figures.

          This engraver creates the following layout object(s):

          *note BassFigure::, *note BassFigureAlignment::, *note
          BassFigureBracket::, *note BassFigureContinuation:: and *note
          BassFigureLine::.

     ‘*note Figured_bass_position_engraver::’
          Position figured bass alignments over notes.

          This engraver creates the following layout object(s):

          *note BassFigureAlignmentPositioning::.

     ‘*note Fingering_column_engraver::’
          Find potentially colliding scripts and put them into a
          ‘FingeringColumn’ object; that will fix the collisions.

          This engraver creates the following layout object(s):

          *note FingeringColumn::.

     ‘*note Font_size_engraver::’
          Put ‘fontSize’ into ‘font-size’ grob property.

          Properties (read)

               ‘fontSize’ (number)
                    The relative size of all grobs in a context.

     ‘*note Grob_pq_engraver::’
          Administrate when certain grobs (e.g., note heads) stop
          playing.

          Properties (read)

               ‘busyGrobs’ (list)
                    A queue of ‘(END-MOMENT . GROB)’ cons cells.  This
                    is for internal (C++) use only.  This property
                    contains the grobs which are still busy (e.g.  note
                    heads, spanners, etc.).

          Properties (write)

               ‘busyGrobs’ (list)
                    A queue of ‘(END-MOMENT . GROB)’ cons cells.  This
                    is for internal (C++) use only.  This property
                    contains the grobs which are still busy (e.g.  note
                    heads, spanners, etc.).

     ‘*note Instrument_name_engraver::’
          Create a system start text for instrument or vocal names.

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘instrumentName’ (markup)
                    The name to print left of a staff.  The
                    ‘instrumentName’ property labels the staff in the
                    first system, and the ‘shortInstrumentName’ property
                    labels following lines.

               ‘shortInstrumentName’ (markup)
                    See ‘instrumentName’.

               ‘shortVocalName’ (markup)
                    Name of a vocal line, short version.

               ‘vocalName’ (markup)
                    Name of a vocal line.

          This engraver creates the following layout object(s):

          *note InstrumentName::.

     ‘*note Key_engraver::’
          Engrave a key signature.

          Music types accepted:

          *note key-change-event::

          Properties (read)

               ‘createKeyOnClefChange’ (boolean)
                    Print a key signature whenever the clef is changed.

               ‘explicitKeySignatureVisibility’ (vector)
                    ‘break-visibility’ function for explicit key
                    changes.  ‘\override’ of the ‘break-visibility’
                    property will set the visibility for normal (i.e.,
                    at the start of the line) key signatures.

               ‘extraNatural’ (boolean)
                    Whether to typeset an extra natural sign before
                    accidentals that reduce the effect of a previous
                    alteration.

               ‘keyAlterationOrder’ (list)
                    An alist that defines in what order alterations
                    should be printed.  The format is ‘(STEP . ALTER)’,
                    where STEP is a number from 0 to 6 and ALTER from -2
                    (sharp) to 2 (flat).

               ‘keyAlterations’ (list)
                    The current key signature.  This is an alist
                    containing ‘(STEP . ALTER)’ or ‘((OCTAVE . STEP) .
                    ALTER)’, where STEP is a number in the range 0 to 6
                    and ALTER a fraction, denoting alteration.  For
                    alterations, use symbols, e.g.  ‘keyAlterations =
                    #`((6 . ,FLAT))’.

               ‘lastKeyAlterations’ (list)
                    Last key signature before a key signature change.

               ‘middleCClefPosition’ (number)
                    The position of the middle C, as determined only by
                    the clef.  This can be calculated by looking at
                    ‘clefPosition’ and ‘clefGlyph’.

               ‘printKeyCancellation’ (boolean)
                    Print restoration alterations before a key signature
                    change.

          Properties (write)

               ‘keyAlterations’ (list)
                    The current key signature.  This is an alist
                    containing ‘(STEP . ALTER)’ or ‘((OCTAVE . STEP) .
                    ALTER)’, where STEP is a number in the range 0 to 6
                    and ALTER a fraction, denoting alteration.  For
                    alterations, use symbols, e.g.  ‘keyAlterations =
                    #`((6 . ,FLAT))’.

               ‘lastKeyAlterations’ (list)
                    Last key signature before a key signature change.

               ‘tonic’ (pitch)
                    The tonic of the current scale.

          This engraver creates the following layout object(s):

          *note KeyCancellation:: and *note KeySignature::.

     ‘*note Ledger_line_engraver::’
          Create the spanner to draw ledger lines, and notices objects
          that need ledger lines.

          This engraver creates the following layout object(s):

          *note LedgerLineSpanner::.

     ‘*note Ottava_spanner_engraver::’
          Create a text spanner when the ottavation property changes.

          Properties (read)

               ‘currentMusicalColumn’ (graphical (layout) object)
                    Grob that is X-parent to all non-breakable items
                    (note heads, lyrics, etc.).

               ‘middleCOffset’ (number)
                    The offset of middle C from the position given by
                    ‘middleCClefPosition’ This is used for ottava
                    brackets.

               ‘ottavation’ (markup)
                    If set, the text for an ottava spanner.  Changing
                    this creates a new text spanner.

          This engraver creates the following layout object(s):

          *note OttavaBracket::.

     ‘*note Piano_pedal_align_engraver::’
          Align piano pedal symbols and brackets.

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

          This engraver creates the following layout object(s):

          *note SostenutoPedalLineSpanner::, *note
          SustainPedalLineSpanner:: and *note
          UnaCordaPedalLineSpanner::.

     ‘*note Piano_pedal_engraver::’
          Engrave piano pedal symbols and brackets.

          Music types accepted:

          *note sostenuto-event::, *note sustain-event:: and *note
          una-corda-event::

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘pedalSostenutoStrings’ (list)
                    See ‘pedalSustainStrings’.

               ‘pedalSostenutoStyle’ (symbol)
                    See ‘pedalSustainStyle’.

               ‘pedalSustainStrings’ (list)
                    A list of strings to print for sustain-pedal.
                    Format is ‘(UP UPDOWN DOWN)’, where each of the
                    three is the string to print when this is done with
                    the pedal.

               ‘pedalSustainStyle’ (symbol)
                    A symbol that indicates how to print sustain pedals:
                    ‘text’, ‘bracket’ or ‘mixed’ (both).

               ‘pedalUnaCordaStrings’ (list)
                    See ‘pedalSustainStrings’.

               ‘pedalUnaCordaStyle’ (symbol)
                    See ‘pedalSustainStyle’.

          This engraver creates the following layout object(s):

          *note PianoPedalBracket::, *note SostenutoPedal::, *note
          SustainPedal:: and *note UnaCordaPedal::.

     ‘*note Pure_from_neighbor_engraver::’
          Coordinates items that get their pure heights from their
          neighbors.

     ‘*note Rest_collision_engraver::’
          Handle collisions of rests.

          Properties (read)

               ‘busyGrobs’ (list)
                    A queue of ‘(END-MOMENT . GROB)’ cons cells.  This
                    is for internal (C++) use only.  This property
                    contains the grobs which are still busy (e.g.  note
                    heads, spanners, etc.).

          This engraver creates the following layout object(s):

          *note RestCollision::.

     ‘*note Script_row_engraver::’
          Determine order in horizontal side position elements.

          This engraver creates the following layout object(s):

          *note ScriptRow::.

     ‘*note Separating_line_group_engraver::’
          Generate objects for computing spacing parameters.

          Properties (read)

               ‘createSpacing’ (boolean)
                    Create ‘StaffSpacing’ objects?  Should be set for
                    staves.

          Properties (write)

               ‘hasStaffSpacing’ (boolean)
                    True if the current ‘CommandColumn’ contains items
                    that will affect spacing.

          This engraver creates the following layout object(s):

          *note StaffSpacing::.

     ‘*note Staff_collecting_engraver::’
          Maintain the ‘stavesFound’ variable.

          Properties (read)

               ‘stavesFound’ (list of grobs)
                    A list of all staff-symbols found.

          Properties (write)

               ‘stavesFound’ (list of grobs)
                    A list of all staff-symbols found.

     ‘*note Staff_symbol_engraver::’
          Create the constellation of five (default) staff lines.

          Music types accepted:

          *note staff-span-event::

          This engraver creates the following layout object(s):

          *note StaffSymbol::.


File: lilypond-internals.info,  Node: VaticanaVoice,  Next: Voice,  Prev: VaticanaStaff,  Up: Contexts

2.1.32 VaticanaVoice
--------------------

Same as ‘Voice’ context, except that it is accommodated for typesetting
Gregorian Chant in the notational style of Editio Vaticana.

   This context also accepts commands for the following context(s):

   Voice.

   This context creates the following layout object(s):

   *note Arpeggio::, *note Beam::, *note BendAfter::, *note
BreathingSign::, *note ClusterSpanner::, *note ClusterSpannerBeacon::,
*note CombineTextScript::, *note DotColumn::, *note Dots::, *note
DoublePercentRepeat::, *note DoublePercentRepeatCounter::, *note
DoubleRepeatSlash::, *note DynamicLineSpanner::, *note DynamicText::,
*note DynamicTextSpanner::, *note Episema::, *note Fingering::, *note
Glissando::, *note Hairpin::, *note InstrumentSwitch::, *note
LaissezVibrerTie::, *note LaissezVibrerTieColumn::, *note
MultiMeasureRest::, *note MultiMeasureRestNumber::, *note
MultiMeasureRestText::, *note NoteColumn::, *note NoteHead::, *note
NoteSpacing::, *note PercentRepeat::, *note PercentRepeatCounter::,
*note PhrasingSlur::, *note RepeatSlash::, *note RepeatTie::, *note
RepeatTieColumn::, *note Rest::, *note Script::, *note ScriptColumn::,
*note StringNumber::, *note StrokeFinger::, *note TextScript::, *note
Tie::, *note TieColumn::, *note TrillPitchAccidental::, *note
TrillPitchGroup::, *note TrillPitchHead::, *note TrillSpanner::, *note
TupletBracket::, *note TupletNumber::, *note VaticanaLigature:: and
*note VoiceFollower::.

   This context sets the following properties:

   • Set grob-property ‘padding’ in *note Script:: to ‘0.5’.
   • Set grob-property ‘style’ in *note NoteHead:: to
     ‘'vaticana.punctum’.
   • Set translator property ‘autoBeaming’ to ‘#f’.

   This is a ‘Bottom’ context; no contexts will be created implicitly
from it.

   This context cannot contain other contexts.

   This context is built from the following engraver(s):

     ‘*note Arpeggio_engraver::’
          Generate an Arpeggio symbol.

          Music types accepted:

          *note arpeggio-event::

          This engraver creates the following layout object(s):

          *note Arpeggio::.

     ‘*note Auto_beam_engraver::’
          Generate beams based on measure characteristics and observed
          Stems.  Uses ‘baseMoment’, ‘beatStructure’, ‘beamExceptions’,
          ‘measureLength’, and ‘measurePosition’ to decide when to start
          and stop a beam.  Overriding beaming is done through *note
          Stem_engraver:: properties ‘stemLeftBeamCount’ and
          ‘stemRightBeamCount’.

          Music types accepted:

          *note beam-forbid-event::

          Properties (read)

               ‘autoBeaming’ (boolean)
                    If set to true then beams are generated
                    automatically.

               ‘baseMoment’ (moment)
                    Smallest unit of time that will stand on its own as
                    a subdivided section.

               ‘beamExceptions’ (list)
                    An alist of exceptions to autobeam rules that
                    normally end on beats.

               ‘beamHalfMeasure’ (boolean)
                    Whether to allow a beam to begin halfway through the
                    measure in triple time, which could look like 6/8.

               ‘beatStructure’ (list)
                    List of ‘baseMoment’s that are combined to make
                    beats.

               ‘subdivideBeams’ (boolean)
                    If set, multiple beams will be subdivided at
                    ‘baseMoment’ positions by only drawing one beam over
                    the beat.

          This engraver creates the following layout object(s):

          *note Beam::.

     ‘*note Beam_engraver::’
          Handle ‘Beam’ events by engraving beams.  If omitted, then
          notes are printed with flags instead of beams.

          Music types accepted:

          *note beam-event::

          Properties (read)

               ‘baseMoment’ (moment)
                    Smallest unit of time that will stand on its own as
                    a subdivided section.

               ‘beamMelismaBusy’ (boolean)
                    Signal if a beam is present.

               ‘beatStructure’ (list)
                    List of ‘baseMoment’s that are combined to make
                    beats.

               ‘subdivideBeams’ (boolean)
                    If set, multiple beams will be subdivided at
                    ‘baseMoment’ positions by only drawing one beam over
                    the beat.

          Properties (write)

               ‘forbidBreak’ (boolean)
                    If set to ‘#t’, prevent a line break at this point.

          This engraver creates the following layout object(s):

          *note Beam::.

     ‘*note Bend_engraver::’
          Create fall spanners.

          Music types accepted:

          *note bend-after-event::

          This engraver creates the following layout object(s):

          *note BendAfter::.

     ‘*note Breathing_sign_engraver::’
          Create a breathing sign.

          Music types accepted:

          *note breathing-event::

          This engraver creates the following layout object(s):

          *note BreathingSign::.

     ‘*note Chord_tremolo_engraver::’
          Generate beams for tremolo repeats.

          Music types accepted:

          *note tremolo-span-event::

          This engraver creates the following layout object(s):

          *note Beam::.

     ‘*note Cluster_spanner_engraver::’
          Engrave a cluster using ‘Spanner’ notation.

          Music types accepted:

          *note cluster-note-event::

          This engraver creates the following layout object(s):

          *note ClusterSpanner:: and *note ClusterSpannerBeacon::.

     ‘*note Dots_engraver::’
          Create *note Dots:: objects for *note
          rhythmic-head-interface::s.

          This engraver creates the following layout object(s):

          *note Dots::.

     ‘*note Double_percent_repeat_engraver::’
          Make double measure repeats.

          Music types accepted:

          *note double-percent-event::

          Properties (read)

               ‘countPercentRepeats’ (boolean)
                    If set, produce counters for percent repeats.

               ‘measureLength’ (moment)
                    Length of one measure in the current time signature.

               ‘repeatCountVisibility’ (procedure)
                    A procedure taking as arguments an integer and
                    context, returning whether the corresponding percent
                    repeat number should be printed when
                    ‘countPercentRepeats’ is set.

          Properties (write)

               ‘forbidBreak’ (boolean)
                    If set to ‘#t’, prevent a line break at this point.

          This engraver creates the following layout object(s):

          *note DoublePercentRepeat:: and *note
          DoublePercentRepeatCounter::.

     ‘*note Dynamic_align_engraver::’
          Align hairpins and dynamic texts on a horizontal line.

          Properties (read)

               ‘currentMusicalColumn’ (graphical (layout) object)
                    Grob that is X-parent to all non-breakable items
                    (note heads, lyrics, etc.).

          This engraver creates the following layout object(s):

          *note DynamicLineSpanner::.

     ‘*note Dynamic_engraver::’
          Create hairpins, dynamic texts and dynamic text spanners.

          Music types accepted:

          *note absolute-dynamic-event::, *note break-span-event:: and
          *note span-dynamic-event::

          Properties (read)

               ‘crescendoSpanner’ (symbol)
                    The type of spanner to be used for crescendi.
                    Available values are ‘hairpin’ and ‘text’.  If
                    unset, a hairpin crescendo is used.

               ‘crescendoText’ (markup)
                    The text to print at start of non-hairpin crescendo,
                    i.e., ‘cresc.’.

               ‘currentMusicalColumn’ (graphical (layout) object)
                    Grob that is X-parent to all non-breakable items
                    (note heads, lyrics, etc.).

               ‘decrescendoSpanner’ (symbol)
                    The type of spanner to be used for decrescendi.
                    Available values are ‘hairpin’ and ‘text’.  If
                    unset, a hairpin decrescendo is used.

               ‘decrescendoText’ (markup)
                    The text to print at start of non-hairpin
                    decrescendo, i.e., ‘dim.’.

          This engraver creates the following layout object(s):

          *note DynamicText::, *note DynamicTextSpanner:: and *note
          Hairpin::.

     ‘*note Episema_engraver::’
          Create an _Editio Vaticana_-style episema line.

          Music types accepted:

          *note episema-event::

          This engraver creates the following layout object(s):

          *note Episema::.

     ‘*note Fingering_engraver::’
          Create fingering scripts.

          Music types accepted:

          *note fingering-event::

          This engraver creates the following layout object(s):

          *note Fingering::.

     ‘*note Font_size_engraver::’
          Put ‘fontSize’ into ‘font-size’ grob property.

          Properties (read)

               ‘fontSize’ (number)
                    The relative size of all grobs in a context.

     ‘*note Forbid_line_break_engraver::’
          Forbid line breaks when note heads are still playing at some
          point.

          Properties (read)

               ‘busyGrobs’ (list)
                    A queue of ‘(END-MOMENT . GROB)’ cons cells.  This
                    is for internal (C++) use only.  This property
                    contains the grobs which are still busy (e.g.  note
                    heads, spanners, etc.).

          Properties (write)

               ‘forbidBreak’ (boolean)
                    If set to ‘#t’, prevent a line break at this point.

     ‘*note Glissando_engraver::’
          Engrave glissandi.

          Music types accepted:

          *note glissando-event::

          Properties (read)

               ‘glissandoMap’ (list)
                    A map in the form of ’((source1 .  target1) (source2
                    .  target2) (sourcen .  targetn)) showing the
                    glissandi to be drawn for note columns.  The value
                    ’() will default to ’((0 .  0) (1 .  1) (n .  n)),
                    where n is the minimal number of note-heads in the
                    two note columns between which the glissandi occur.

          This engraver creates the following layout object(s):

          *note Glissando::.

     ‘*note Grace_auto_beam_engraver::’
          Generates one autobeam group across an entire grace phrase.
          As usual, any manual beaming or ‘\noBeam’ will block
          autobeaming, just like setting the context property
          ‘autoBeaming’ to ‘##f’.

          Music types accepted:

          *note beam-forbid-event::

          Properties (read)

               ‘autoBeaming’ (boolean)
                    If set to true then beams are generated
                    automatically.

          This engraver creates the following layout object(s):

          *note Beam::.

     ‘*note Grace_beam_engraver::’
          Handle ‘Beam’ events by engraving beams.  If omitted, then
          notes are printed with flags instead of beams.  Only engraves
          beams when we are at grace points in time.

          Music types accepted:

          *note beam-event::

          Properties (read)

               ‘baseMoment’ (moment)
                    Smallest unit of time that will stand on its own as
                    a subdivided section.

               ‘beamMelismaBusy’ (boolean)
                    Signal if a beam is present.

               ‘beatStructure’ (list)
                    List of ‘baseMoment’s that are combined to make
                    beats.

               ‘subdivideBeams’ (boolean)
                    If set, multiple beams will be subdivided at
                    ‘baseMoment’ positions by only drawing one beam over
                    the beat.

          This engraver creates the following layout object(s):

          *note Beam::.

     ‘*note Grace_engraver::’
          Set font size and other properties for grace notes.

          Properties (read)

               ‘graceSettings’ (list)
                    Overrides for grace notes.  This property should be
                    manipulated through the ‘add-grace-property’
                    function.

     ‘*note Grob_pq_engraver::’
          Administrate when certain grobs (e.g., note heads) stop
          playing.

          Properties (read)

               ‘busyGrobs’ (list)
                    A queue of ‘(END-MOMENT . GROB)’ cons cells.  This
                    is for internal (C++) use only.  This property
                    contains the grobs which are still busy (e.g.  note
                    heads, spanners, etc.).

          Properties (write)

               ‘busyGrobs’ (list)
                    A queue of ‘(END-MOMENT . GROB)’ cons cells.  This
                    is for internal (C++) use only.  This property
                    contains the grobs which are still busy (e.g.  note
                    heads, spanners, etc.).

     ‘*note Instrument_switch_engraver::’
          Create a cue text for taking instrument.

          Properties (read)

               ‘instrumentCueName’ (markup)
                    The name to print if another instrument is to be
                    taken.

          This engraver creates the following layout object(s):

          *note InstrumentSwitch::.

     ‘*note Laissez_vibrer_engraver::’
          Create laissez vibrer items.

          Music types accepted:

          *note laissez-vibrer-event::

          This engraver creates the following layout object(s):

          *note LaissezVibrerTie:: and *note LaissezVibrerTieColumn::.

     ‘*note Multi_measure_rest_engraver::’
          Engrave multi-measure rests that are produced with ‘R’.  It
          reads ‘measurePosition’ and ‘internalBarNumber’ to determine
          what number to print over the *note MultiMeasureRest::.

          Music types accepted:

          *note multi-measure-rest-event:: and *note
          multi-measure-text-event::

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘internalBarNumber’ (integer)
                    Contains the current barnumber.  This property is
                    used for internal timekeeping, among others by the
                    ‘Accidental_engraver’.

               ‘measurePosition’ (moment)
                    How much of the current measure have we had.  This
                    can be set manually to create incomplete measures.

               ‘restNumberThreshold’ (number)
                    If a multimeasure rest has more measures than this,
                    a number is printed.

               ‘whichBar’ (string)
                    This property is read to determine what type of bar
                    line to create.

                    Example:

                         \set Staff.whichBar = ".|:"

                    This will create a start-repeat bar in this staff
                    only.  Valid values are described in
                    ‘scm/bar-line.scm’.

          This engraver creates the following layout object(s):

          *note MultiMeasureRest::, *note MultiMeasureRestNumber:: and
          *note MultiMeasureRestText::.

     ‘*note New_fingering_engraver::’
          Create fingering scripts for notes in a new chord.  This
          engraver is ill-named, since it also takes care of
          articulations and harmonic note heads.

          Properties (read)

               ‘fingeringOrientations’ (list)
                    A list of symbols, containing ‘left’, ‘right’, ‘up’
                    and/or ‘down’.  This list determines where
                    fingerings are put relative to the chord being
                    fingered.

               ‘harmonicDots’ (boolean)
                    If set, harmonic notes in dotted chords get dots.

               ‘stringNumberOrientations’ (list)
                    See ‘fingeringOrientations’.

               ‘strokeFingerOrientations’ (list)
                    See ‘fingeringOrientations’.

          This engraver creates the following layout object(s):

          *note Fingering::, *note Script::, *note StringNumber:: and
          *note StrokeFinger::.

     ‘*note Note_head_line_engraver::’
          Engrave a line between two note heads in a staff switch if
          ‘followVoice’ is set.

          Properties (read)

               ‘followVoice’ (boolean)
                    If set, note heads are tracked across staff switches
                    by a thin line.

          This engraver creates the following layout object(s):

          *note VoiceFollower::.

     ‘*note Note_heads_engraver::’
          Generate note heads.

          Music types accepted:

          *note note-event::

          Properties (read)

               ‘middleCPosition’ (number)
                    The place of the middle C, measured in half
                    staff-spaces.  Usually determined by looking at
                    ‘middleCClefPosition’ and ‘middleCOffset’.

               ‘staffLineLayoutFunction’ (procedure)
                    Layout of staff lines, ‘traditional’, or ‘semitone’.

          This engraver creates the following layout object(s):

          *note NoteHead::.

     ‘*note Note_spacing_engraver::’
          Generate ‘NoteSpacing’, an object linking horizontal lines for
          use in spacing.

          This engraver creates the following layout object(s):

          *note NoteSpacing::.

     ‘*note Part_combine_engraver::’
          Part combine engraver for orchestral scores: Print markings
          ‘a2’, ‘Solo’, ‘Solo II’, and ‘unisono’.

          Music types accepted:

          *note note-event:: and *note part-combine-event::

          Properties (read)

               ‘aDueText’ (markup)
                    Text to print at a unisono passage.

               ‘partCombineTextsOnNote’ (boolean)
                    Print part-combine texts only on the next note
                    rather than immediately on rests or skips.

               ‘printPartCombineTexts’ (boolean)
                    Set ‘Solo’ and ‘A due’ texts in the part combiner?

               ‘soloIIText’ (markup)
                    The text for the start of a solo for voice ‘two’
                    when part-combining.

               ‘soloText’ (markup)
                    The text for the start of a solo when
                    part-combining.

          This engraver creates the following layout object(s):

          *note CombineTextScript::.

     ‘*note Percent_repeat_engraver::’
          Make whole measure repeats.

          Music types accepted:

          *note percent-event::

          Properties (read)

               ‘countPercentRepeats’ (boolean)
                    If set, produce counters for percent repeats.

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘repeatCountVisibility’ (procedure)
                    A procedure taking as arguments an integer and
                    context, returning whether the corresponding percent
                    repeat number should be printed when
                    ‘countPercentRepeats’ is set.

          This engraver creates the following layout object(s):

          *note PercentRepeat:: and *note PercentRepeatCounter::.

     ‘*note Phrasing_slur_engraver::’
          Print phrasing slurs.  Similar to *note Slur_engraver::.

          Music types accepted:

          *note note-event:: and *note phrasing-slur-event::

          This engraver creates the following layout object(s):

          *note PhrasingSlur::.

     ‘*note Pitched_trill_engraver::’
          Print the bracketed note head after a note head with trill.

          This engraver creates the following layout object(s):

          *note TrillPitchAccidental::, *note TrillPitchGroup:: and
          *note TrillPitchHead::.

     ‘*note Repeat_tie_engraver::’
          Create repeat ties.

          Music types accepted:

          *note repeat-tie-event::

          This engraver creates the following layout object(s):

          *note RepeatTie:: and *note RepeatTieColumn::.

     ‘*note Rest_engraver::’
          Engrave rests.

          Music types accepted:

          *note rest-event::

          Properties (read)

               ‘middleCPosition’ (number)
                    The place of the middle C, measured in half
                    staff-spaces.  Usually determined by looking at
                    ‘middleCClefPosition’ and ‘middleCOffset’.

          This engraver creates the following layout object(s):

          *note Rest::.

     ‘*note Rhythmic_column_engraver::’
          Generate ‘NoteColumn’, an object that groups stems, note
          heads, and rests.

          This engraver creates the following layout object(s):

          *note NoteColumn::.

     ‘*note Script_column_engraver::’
          Find potentially colliding scripts and put them into a
          ‘ScriptColumn’ object; that will fix the collisions.

          This engraver creates the following layout object(s):

          *note ScriptColumn::.

     ‘*note Script_engraver::’
          Handle note scripted articulations.

          Music types accepted:

          *note articulation-event::

          Properties (read)

               ‘scriptDefinitions’ (list)
                    The description of scripts.  This is used by the
                    ‘Script_engraver’ for typesetting note-superscripts
                    and subscripts.  See ‘scm/script.scm’ for more
                    information.

          This engraver creates the following layout object(s):

          *note Script::.

     ‘*note Slash_repeat_engraver::’
          Make beat repeats.

          Music types accepted:

          *note repeat-slash-event::

          This engraver creates the following layout object(s):

          *note DoubleRepeatSlash:: and *note RepeatSlash::.

     ‘*note Spanner_break_forbid_engraver::’
          Forbid breaks in certain spanners.

     ‘*note Text_engraver::’
          Create text scripts.

          Music types accepted:

          *note text-script-event::

          This engraver creates the following layout object(s):

          *note TextScript::.

     ‘*note Tie_engraver::’
          Generate ties between note heads of equal pitch.

          Music types accepted:

          *note tie-event::

          Properties (read)

               ‘skipTypesetting’ (boolean)
                    If true, no typesetting is done, speeding up the
                    interpretation phase.  Useful for debugging large
                    scores.

               ‘tieWaitForNote’ (boolean)
                    If true, tied notes do not have to follow each other
                    directly.  This can be used for writing out
                    arpeggios.

          Properties (write)

               ‘tieMelismaBusy’ (boolean)
                    Signal whether a tie is present.

          This engraver creates the following layout object(s):

          *note Tie:: and *note TieColumn::.

     ‘*note Trill_spanner_engraver::’
          Create trill spanner from an event.

          Music types accepted:

          *note trill-span-event::

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘currentMusicalColumn’ (graphical (layout) object)
                    Grob that is X-parent to all non-breakable items
                    (note heads, lyrics, etc.).

          This engraver creates the following layout object(s):

          *note TrillSpanner::.

     ‘*note Tuplet_engraver::’
          Catch tuplet events and generate appropriate bracket.

          Music types accepted:

          *note tuplet-span-event::

          Properties (read)

               ‘tupletFullLength’ (boolean)
                    If set, the tuplet is printed up to the start of the
                    next note.

               ‘tupletFullLengthNote’ (boolean)
                    If set, end at the next note, otherwise end on the
                    matter (time signatures, etc.)  before the note.

          This engraver creates the following layout object(s):

          *note TupletBracket:: and *note TupletNumber::.

     ‘*note Vaticana_ligature_engraver::’
          Handle ligatures by glueing special ligature heads together.

          Music types accepted:

          *note ligature-event:: and *note pes-or-flexa-event::

          This engraver creates the following layout object(s):

          *note DotColumn:: and *note VaticanaLigature::.


File: lilypond-internals.info,  Node: Voice,  Prev: VaticanaVoice,  Up: Contexts

2.1.33 Voice
------------

Corresponds to a voice on a staff.  This context handles the conversion
of dynamic signs, stems, beams, super- and subscripts, slurs, ties, and
rests.

   You have to instantiate this explicitly if you want to have multiple
voices on the same staff.

   This context creates the following layout object(s):

   *note Arpeggio::, *note Beam::, *note BendAfter::, *note
BreathingSign::, *note ClusterSpanner::, *note ClusterSpannerBeacon::,
*note CombineTextScript::, *note Dots::, *note DoublePercentRepeat::,
*note DoublePercentRepeatCounter::, *note DoubleRepeatSlash::, *note
DynamicLineSpanner::, *note DynamicText::, *note DynamicTextSpanner::,
*note Fingering::, *note Flag::, *note Glissando::, *note Hairpin::,
*note InstrumentSwitch::, *note LaissezVibrerTie::, *note
LaissezVibrerTieColumn::, *note LigatureBracket::, *note
MultiMeasureRest::, *note MultiMeasureRestNumber::, *note
MultiMeasureRestText::, *note NoteColumn::, *note NoteHead::, *note
NoteSpacing::, *note PercentRepeat::, *note PercentRepeatCounter::,
*note PhrasingSlur::, *note RepeatSlash::, *note RepeatTie::, *note
RepeatTieColumn::, *note Rest::, *note Script::, *note ScriptColumn::,
*note Slur::, *note Stem::, *note StemStub::, *note StemTremolo::, *note
StringNumber::, *note StrokeFinger::, *note TextScript::, *note
TextSpanner::, *note Tie::, *note TieColumn::, *note
TrillPitchAccidental::, *note TrillPitchGroup::, *note TrillPitchHead::,
*note TrillSpanner::, *note TupletBracket::, *note TupletNumber:: and
*note VoiceFollower::.

   This is a ‘Bottom’ context; no contexts will be created implicitly
from it.

   This context cannot contain other contexts.

   This context is built from the following engraver(s):

     ‘*note Arpeggio_engraver::’
          Generate an Arpeggio symbol.

          Music types accepted:

          *note arpeggio-event::

          This engraver creates the following layout object(s):

          *note Arpeggio::.

     ‘*note Auto_beam_engraver::’
          Generate beams based on measure characteristics and observed
          Stems.  Uses ‘baseMoment’, ‘beatStructure’, ‘beamExceptions’,
          ‘measureLength’, and ‘measurePosition’ to decide when to start
          and stop a beam.  Overriding beaming is done through *note
          Stem_engraver:: properties ‘stemLeftBeamCount’ and
          ‘stemRightBeamCount’.

          Music types accepted:

          *note beam-forbid-event::

          Properties (read)

               ‘autoBeaming’ (boolean)
                    If set to true then beams are generated
                    automatically.

               ‘baseMoment’ (moment)
                    Smallest unit of time that will stand on its own as
                    a subdivided section.

               ‘beamExceptions’ (list)
                    An alist of exceptions to autobeam rules that
                    normally end on beats.

               ‘beamHalfMeasure’ (boolean)
                    Whether to allow a beam to begin halfway through the
                    measure in triple time, which could look like 6/8.

               ‘beatStructure’ (list)
                    List of ‘baseMoment’s that are combined to make
                    beats.

               ‘subdivideBeams’ (boolean)
                    If set, multiple beams will be subdivided at
                    ‘baseMoment’ positions by only drawing one beam over
                    the beat.

          This engraver creates the following layout object(s):

          *note Beam::.

     ‘*note Beam_engraver::’
          Handle ‘Beam’ events by engraving beams.  If omitted, then
          notes are printed with flags instead of beams.

          Music types accepted:

          *note beam-event::

          Properties (read)

               ‘baseMoment’ (moment)
                    Smallest unit of time that will stand on its own as
                    a subdivided section.

               ‘beamMelismaBusy’ (boolean)
                    Signal if a beam is present.

               ‘beatStructure’ (list)
                    List of ‘baseMoment’s that are combined to make
                    beats.

               ‘subdivideBeams’ (boolean)
                    If set, multiple beams will be subdivided at
                    ‘baseMoment’ positions by only drawing one beam over
                    the beat.

          Properties (write)

               ‘forbidBreak’ (boolean)
                    If set to ‘#t’, prevent a line break at this point.

          This engraver creates the following layout object(s):

          *note Beam::.

     ‘*note Bend_engraver::’
          Create fall spanners.

          Music types accepted:

          *note bend-after-event::

          This engraver creates the following layout object(s):

          *note BendAfter::.

     ‘*note Breathing_sign_engraver::’
          Create a breathing sign.

          Music types accepted:

          *note breathing-event::

          This engraver creates the following layout object(s):

          *note BreathingSign::.

     ‘*note Chord_tremolo_engraver::’
          Generate beams for tremolo repeats.

          Music types accepted:

          *note tremolo-span-event::

          This engraver creates the following layout object(s):

          *note Beam::.

     ‘*note Cluster_spanner_engraver::’
          Engrave a cluster using ‘Spanner’ notation.

          Music types accepted:

          *note cluster-note-event::

          This engraver creates the following layout object(s):

          *note ClusterSpanner:: and *note ClusterSpannerBeacon::.

     ‘*note Dots_engraver::’
          Create *note Dots:: objects for *note
          rhythmic-head-interface::s.

          This engraver creates the following layout object(s):

          *note Dots::.

     ‘*note Double_percent_repeat_engraver::’
          Make double measure repeats.

          Music types accepted:

          *note double-percent-event::

          Properties (read)

               ‘countPercentRepeats’ (boolean)
                    If set, produce counters for percent repeats.

               ‘measureLength’ (moment)
                    Length of one measure in the current time signature.

               ‘repeatCountVisibility’ (procedure)
                    A procedure taking as arguments an integer and
                    context, returning whether the corresponding percent
                    repeat number should be printed when
                    ‘countPercentRepeats’ is set.

          Properties (write)

               ‘forbidBreak’ (boolean)
                    If set to ‘#t’, prevent a line break at this point.

          This engraver creates the following layout object(s):

          *note DoublePercentRepeat:: and *note
          DoublePercentRepeatCounter::.

     ‘*note Dynamic_align_engraver::’
          Align hairpins and dynamic texts on a horizontal line.

          Properties (read)

               ‘currentMusicalColumn’ (graphical (layout) object)
                    Grob that is X-parent to all non-breakable items
                    (note heads, lyrics, etc.).

          This engraver creates the following layout object(s):

          *note DynamicLineSpanner::.

     ‘*note Dynamic_engraver::’
          Create hairpins, dynamic texts and dynamic text spanners.

          Music types accepted:

          *note absolute-dynamic-event::, *note break-span-event:: and
          *note span-dynamic-event::

          Properties (read)

               ‘crescendoSpanner’ (symbol)
                    The type of spanner to be used for crescendi.
                    Available values are ‘hairpin’ and ‘text’.  If
                    unset, a hairpin crescendo is used.

               ‘crescendoText’ (markup)
                    The text to print at start of non-hairpin crescendo,
                    i.e., ‘cresc.’.

               ‘currentMusicalColumn’ (graphical (layout) object)
                    Grob that is X-parent to all non-breakable items
                    (note heads, lyrics, etc.).

               ‘decrescendoSpanner’ (symbol)
                    The type of spanner to be used for decrescendi.
                    Available values are ‘hairpin’ and ‘text’.  If
                    unset, a hairpin decrescendo is used.

               ‘decrescendoText’ (markup)
                    The text to print at start of non-hairpin
                    decrescendo, i.e., ‘dim.’.

          This engraver creates the following layout object(s):

          *note DynamicText::, *note DynamicTextSpanner:: and *note
          Hairpin::.

     ‘*note Fingering_engraver::’
          Create fingering scripts.

          Music types accepted:

          *note fingering-event::

          This engraver creates the following layout object(s):

          *note Fingering::.

     ‘*note Font_size_engraver::’
          Put ‘fontSize’ into ‘font-size’ grob property.

          Properties (read)

               ‘fontSize’ (number)
                    The relative size of all grobs in a context.

     ‘*note Forbid_line_break_engraver::’
          Forbid line breaks when note heads are still playing at some
          point.

          Properties (read)

               ‘busyGrobs’ (list)
                    A queue of ‘(END-MOMENT . GROB)’ cons cells.  This
                    is for internal (C++) use only.  This property
                    contains the grobs which are still busy (e.g.  note
                    heads, spanners, etc.).

          Properties (write)

               ‘forbidBreak’ (boolean)
                    If set to ‘#t’, prevent a line break at this point.

     ‘*note Glissando_engraver::’
          Engrave glissandi.

          Music types accepted:

          *note glissando-event::

          Properties (read)

               ‘glissandoMap’ (list)
                    A map in the form of ’((source1 .  target1) (source2
                    .  target2) (sourcen .  targetn)) showing the
                    glissandi to be drawn for note columns.  The value
                    ’() will default to ’((0 .  0) (1 .  1) (n .  n)),
                    where n is the minimal number of note-heads in the
                    two note columns between which the glissandi occur.

          This engraver creates the following layout object(s):

          *note Glissando::.

     ‘*note Grace_auto_beam_engraver::’
          Generates one autobeam group across an entire grace phrase.
          As usual, any manual beaming or ‘\noBeam’ will block
          autobeaming, just like setting the context property
          ‘autoBeaming’ to ‘##f’.

          Music types accepted:

          *note beam-forbid-event::

          Properties (read)

               ‘autoBeaming’ (boolean)
                    If set to true then beams are generated
                    automatically.

          This engraver creates the following layout object(s):

          *note Beam::.

     ‘*note Grace_beam_engraver::’
          Handle ‘Beam’ events by engraving beams.  If omitted, then
          notes are printed with flags instead of beams.  Only engraves
          beams when we are at grace points in time.

          Music types accepted:

          *note beam-event::

          Properties (read)

               ‘baseMoment’ (moment)
                    Smallest unit of time that will stand on its own as
                    a subdivided section.

               ‘beamMelismaBusy’ (boolean)
                    Signal if a beam is present.

               ‘beatStructure’ (list)
                    List of ‘baseMoment’s that are combined to make
                    beats.

               ‘subdivideBeams’ (boolean)
                    If set, multiple beams will be subdivided at
                    ‘baseMoment’ positions by only drawing one beam over
                    the beat.

          This engraver creates the following layout object(s):

          *note Beam::.

     ‘*note Grace_engraver::’
          Set font size and other properties for grace notes.

          Properties (read)

               ‘graceSettings’ (list)
                    Overrides for grace notes.  This property should be
                    manipulated through the ‘add-grace-property’
                    function.

     ‘*note Grob_pq_engraver::’
          Administrate when certain grobs (e.g., note heads) stop
          playing.

          Properties (read)

               ‘busyGrobs’ (list)
                    A queue of ‘(END-MOMENT . GROB)’ cons cells.  This
                    is for internal (C++) use only.  This property
                    contains the grobs which are still busy (e.g.  note
                    heads, spanners, etc.).

          Properties (write)

               ‘busyGrobs’ (list)
                    A queue of ‘(END-MOMENT . GROB)’ cons cells.  This
                    is for internal (C++) use only.  This property
                    contains the grobs which are still busy (e.g.  note
                    heads, spanners, etc.).

     ‘*note Instrument_switch_engraver::’
          Create a cue text for taking instrument.

          Properties (read)

               ‘instrumentCueName’ (markup)
                    The name to print if another instrument is to be
                    taken.

          This engraver creates the following layout object(s):

          *note InstrumentSwitch::.

     ‘*note Laissez_vibrer_engraver::’
          Create laissez vibrer items.

          Music types accepted:

          *note laissez-vibrer-event::

          This engraver creates the following layout object(s):

          *note LaissezVibrerTie:: and *note LaissezVibrerTieColumn::.

     ‘*note Ligature_bracket_engraver::’
          Handle ‘Ligature_events’ by engraving ‘Ligature’ brackets.

          Music types accepted:

          *note ligature-event::

          This engraver creates the following layout object(s):

          *note LigatureBracket::.

     ‘*note Multi_measure_rest_engraver::’
          Engrave multi-measure rests that are produced with ‘R’.  It
          reads ‘measurePosition’ and ‘internalBarNumber’ to determine
          what number to print over the *note MultiMeasureRest::.

          Music types accepted:

          *note multi-measure-rest-event:: and *note
          multi-measure-text-event::

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘internalBarNumber’ (integer)
                    Contains the current barnumber.  This property is
                    used for internal timekeeping, among others by the
                    ‘Accidental_engraver’.

               ‘measurePosition’ (moment)
                    How much of the current measure have we had.  This
                    can be set manually to create incomplete measures.

               ‘restNumberThreshold’ (number)
                    If a multimeasure rest has more measures than this,
                    a number is printed.

               ‘whichBar’ (string)
                    This property is read to determine what type of bar
                    line to create.

                    Example:

                         \set Staff.whichBar = ".|:"

                    This will create a start-repeat bar in this staff
                    only.  Valid values are described in
                    ‘scm/bar-line.scm’.

          This engraver creates the following layout object(s):

          *note MultiMeasureRest::, *note MultiMeasureRestNumber:: and
          *note MultiMeasureRestText::.

     ‘*note New_fingering_engraver::’
          Create fingering scripts for notes in a new chord.  This
          engraver is ill-named, since it also takes care of
          articulations and harmonic note heads.

          Properties (read)

               ‘fingeringOrientations’ (list)
                    A list of symbols, containing ‘left’, ‘right’, ‘up’
                    and/or ‘down’.  This list determines where
                    fingerings are put relative to the chord being
                    fingered.

               ‘harmonicDots’ (boolean)
                    If set, harmonic notes in dotted chords get dots.

               ‘stringNumberOrientations’ (list)
                    See ‘fingeringOrientations’.

               ‘strokeFingerOrientations’ (list)
                    See ‘fingeringOrientations’.

          This engraver creates the following layout object(s):

          *note Fingering::, *note Script::, *note StringNumber:: and
          *note StrokeFinger::.

     ‘*note Note_head_line_engraver::’
          Engrave a line between two note heads in a staff switch if
          ‘followVoice’ is set.

          Properties (read)

               ‘followVoice’ (boolean)
                    If set, note heads are tracked across staff switches
                    by a thin line.

          This engraver creates the following layout object(s):

          *note VoiceFollower::.

     ‘*note Note_heads_engraver::’
          Generate note heads.

          Music types accepted:

          *note note-event::

          Properties (read)

               ‘middleCPosition’ (number)
                    The place of the middle C, measured in half
                    staff-spaces.  Usually determined by looking at
                    ‘middleCClefPosition’ and ‘middleCOffset’.

               ‘staffLineLayoutFunction’ (procedure)
                    Layout of staff lines, ‘traditional’, or ‘semitone’.

          This engraver creates the following layout object(s):

          *note NoteHead::.

     ‘*note Note_spacing_engraver::’
          Generate ‘NoteSpacing’, an object linking horizontal lines for
          use in spacing.

          This engraver creates the following layout object(s):

          *note NoteSpacing::.

     ‘*note Part_combine_engraver::’
          Part combine engraver for orchestral scores: Print markings
          ‘a2’, ‘Solo’, ‘Solo II’, and ‘unisono’.

          Music types accepted:

          *note note-event:: and *note part-combine-event::

          Properties (read)

               ‘aDueText’ (markup)
                    Text to print at a unisono passage.

               ‘partCombineTextsOnNote’ (boolean)
                    Print part-combine texts only on the next note
                    rather than immediately on rests or skips.

               ‘printPartCombineTexts’ (boolean)
                    Set ‘Solo’ and ‘A due’ texts in the part combiner?

               ‘soloIIText’ (markup)
                    The text for the start of a solo for voice ‘two’
                    when part-combining.

               ‘soloText’ (markup)
                    The text for the start of a solo when
                    part-combining.

          This engraver creates the following layout object(s):

          *note CombineTextScript::.

     ‘*note Percent_repeat_engraver::’
          Make whole measure repeats.

          Music types accepted:

          *note percent-event::

          Properties (read)

               ‘countPercentRepeats’ (boolean)
                    If set, produce counters for percent repeats.

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘repeatCountVisibility’ (procedure)
                    A procedure taking as arguments an integer and
                    context, returning whether the corresponding percent
                    repeat number should be printed when
                    ‘countPercentRepeats’ is set.

          This engraver creates the following layout object(s):

          *note PercentRepeat:: and *note PercentRepeatCounter::.

     ‘*note Phrasing_slur_engraver::’
          Print phrasing slurs.  Similar to *note Slur_engraver::.

          Music types accepted:

          *note note-event:: and *note phrasing-slur-event::

          This engraver creates the following layout object(s):

          *note PhrasingSlur::.

     ‘*note Pitched_trill_engraver::’
          Print the bracketed note head after a note head with trill.

          This engraver creates the following layout object(s):

          *note TrillPitchAccidental::, *note TrillPitchGroup:: and
          *note TrillPitchHead::.

     ‘*note Repeat_tie_engraver::’
          Create repeat ties.

          Music types accepted:

          *note repeat-tie-event::

          This engraver creates the following layout object(s):

          *note RepeatTie:: and *note RepeatTieColumn::.

     ‘*note Rest_engraver::’
          Engrave rests.

          Music types accepted:

          *note rest-event::

          Properties (read)

               ‘middleCPosition’ (number)
                    The place of the middle C, measured in half
                    staff-spaces.  Usually determined by looking at
                    ‘middleCClefPosition’ and ‘middleCOffset’.

          This engraver creates the following layout object(s):

          *note Rest::.

     ‘*note Rhythmic_column_engraver::’
          Generate ‘NoteColumn’, an object that groups stems, note
          heads, and rests.

          This engraver creates the following layout object(s):

          *note NoteColumn::.

     ‘*note Script_column_engraver::’
          Find potentially colliding scripts and put them into a
          ‘ScriptColumn’ object; that will fix the collisions.

          This engraver creates the following layout object(s):

          *note ScriptColumn::.

     ‘*note Script_engraver::’
          Handle note scripted articulations.

          Music types accepted:

          *note articulation-event::

          Properties (read)

               ‘scriptDefinitions’ (list)
                    The description of scripts.  This is used by the
                    ‘Script_engraver’ for typesetting note-superscripts
                    and subscripts.  See ‘scm/script.scm’ for more
                    information.

          This engraver creates the following layout object(s):

          *note Script::.

     ‘*note Slash_repeat_engraver::’
          Make beat repeats.

          Music types accepted:

          *note repeat-slash-event::

          This engraver creates the following layout object(s):

          *note DoubleRepeatSlash:: and *note RepeatSlash::.

     ‘*note Slur_engraver::’
          Build slur grobs from slur events.

          Music types accepted:

          *note note-event:: and *note slur-event::

          Properties (read)

               ‘doubleSlurs’ (boolean)
                    If set, two slurs are created for every slurred
                    note, one above and one below the chord.

               ‘slurMelismaBusy’ (boolean)
                    Signal if a slur is present.

          This engraver creates the following layout object(s):

          *note Slur::.

     ‘*note Spanner_break_forbid_engraver::’
          Forbid breaks in certain spanners.

     ‘*note Stem_engraver::’
          Create stems, flags and single-stem tremolos.  It also works
          together with the beam engraver for overriding beaming.

          Music types accepted:

          *note tremolo-event:: and *note tuplet-span-event::

          Properties (read)

               ‘stemLeftBeamCount’ (integer)
                    Specify the number of beams to draw on the left side
                    of the next note.  Overrides automatic beaming.  The
                    value is only used once, and then it is erased.

               ‘stemRightBeamCount’ (integer)
                    See ‘stemLeftBeamCount’.

               ‘whichBar’ (string)
                    This property is read to determine what type of bar
                    line to create.

                    Example:

                         \set Staff.whichBar = ".|:"

                    This will create a start-repeat bar in this staff
                    only.  Valid values are described in
                    ‘scm/bar-line.scm’.

          This engraver creates the following layout object(s):

          *note Flag::, *note Stem::, *note StemStub:: and *note
          StemTremolo::.

     ‘*note Text_engraver::’
          Create text scripts.

          Music types accepted:

          *note text-script-event::

          This engraver creates the following layout object(s):

          *note TextScript::.

     ‘*note Text_spanner_engraver::’
          Create text spanner from an event.

          Music types accepted:

          *note text-span-event::

          Properties (read)

               ‘currentMusicalColumn’ (graphical (layout) object)
                    Grob that is X-parent to all non-breakable items
                    (note heads, lyrics, etc.).

          This engraver creates the following layout object(s):

          *note TextSpanner::.

     ‘*note Tie_engraver::’
          Generate ties between note heads of equal pitch.

          Music types accepted:

          *note tie-event::

          Properties (read)

               ‘skipTypesetting’ (boolean)
                    If true, no typesetting is done, speeding up the
                    interpretation phase.  Useful for debugging large
                    scores.

               ‘tieWaitForNote’ (boolean)
                    If true, tied notes do not have to follow each other
                    directly.  This can be used for writing out
                    arpeggios.

          Properties (write)

               ‘tieMelismaBusy’ (boolean)
                    Signal whether a tie is present.

          This engraver creates the following layout object(s):

          *note Tie:: and *note TieColumn::.

     ‘*note Trill_spanner_engraver::’
          Create trill spanner from an event.

          Music types accepted:

          *note trill-span-event::

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘currentMusicalColumn’ (graphical (layout) object)
                    Grob that is X-parent to all non-breakable items
                    (note heads, lyrics, etc.).

          This engraver creates the following layout object(s):

          *note TrillSpanner::.

     ‘*note Tuplet_engraver::’
          Catch tuplet events and generate appropriate bracket.

          Music types accepted:

          *note tuplet-span-event::

          Properties (read)

               ‘tupletFullLength’ (boolean)
                    If set, the tuplet is printed up to the start of the
                    next note.

               ‘tupletFullLengthNote’ (boolean)
                    If set, end at the next note, otherwise end on the
                    matter (time signatures, etc.)  before the note.

          This engraver creates the following layout object(s):

          *note TupletBracket:: and *note TupletNumber::.


File: lilypond-internals.info,  Node: Engravers and Performers,  Next: Tunable context properties,  Prev: Contexts,  Up: Translation

2.2 Engravers and Performers
============================

See *note (lilypond-notation)Modifying context plug-ins::.

* Menu:

* Accidental_engraver::               
* Ambitus_engraver::                  
* Arpeggio_engraver::                 
* Auto_beam_engraver::                
* Axis_group_engraver::               
* Balloon_engraver::                  
* Bar_engraver::                      
* Bar_number_engraver::               
* Beam_collision_engraver::           
* Beam_engraver::                     
* Beam_performer::                    
* Bend_engraver::                     
* Break_align_engraver::              
* Breathing_sign_engraver::           
* Chord_name_engraver::               
* Chord_tremolo_engraver::            
* Clef_engraver::                     
* Cluster_spanner_engraver::          
* Collision_engraver::                
* Completion_heads_engraver::         
* Completion_rest_engraver::          
* Concurrent_hairpin_engraver::       
* Control_track_performer::           
* Cue_clef_engraver::                 
* Custos_engraver::                   
* Default_bar_line_engraver::         
* Dot_column_engraver::               
* Dots_engraver::                     
* Double_percent_repeat_engraver::    
* Drum_note_performer::               
* Drum_notes_engraver::               
* Dynamic_align_engraver::            
* Dynamic_engraver::                  
* Dynamic_performer::                 
* Episema_engraver::                  
* Extender_engraver::                 
* Figured_bass_engraver::             
* Figured_bass_position_engraver::    
* Fingering_column_engraver::         
* Fingering_engraver::                
* Font_size_engraver::                
* Footnote_engraver::                 
* Forbid_line_break_engraver::        
* Fretboard_engraver::                
* Glissando_engraver::                
* Grace_auto_beam_engraver::          
* Grace_beam_engraver::               
* Grace_engraver::                    
* Grace_spacing_engraver::            
* Grid_line_span_engraver::           
* Grid_point_engraver::               
* Grob_pq_engraver::                  
* Horizontal_bracket_engraver::       
* Hyphen_engraver::                   
* Instrument_name_engraver::          
* Instrument_switch_engraver::        
* Keep_alive_together_engraver::      
* Key_engraver::                      
* Key_performer::                     
* Kievan_ligature_engraver::          
* Laissez_vibrer_engraver::           
* Ledger_line_engraver::              
* Ligature_bracket_engraver::         
* Lyric_engraver::                    
* Lyric_performer::                   
* Mark_engraver::                     
* Measure_counter_engraver::          
* Measure_grouping_engraver::         
* Melody_engraver::                   
* Mensural_ligature_engraver::        
* Metronome_mark_engraver::           
* Midi_control_change_performer::     
* Multi_measure_rest_engraver::       
* New_fingering_engraver::            
* Note_head_line_engraver::           
* Note_heads_engraver::               
* Note_name_engraver::                
* Note_performer::                    
* Note_spacing_engraver::             
* Ottava_spanner_engraver::           
* Output_property_engraver::          
* Page_turn_engraver::                
* Paper_column_engraver::             
* Parenthesis_engraver::              
* Part_combine_engraver::             
* Percent_repeat_engraver::           
* Phrasing_slur_engraver::            
* Piano_pedal_align_engraver::        
* Piano_pedal_engraver::              
* Piano_pedal_performer::             
* Pitch_squash_engraver::             
* Pitched_trill_engraver::            
* Pure_from_neighbor_engraver::       
* Repeat_acknowledge_engraver::       
* Repeat_tie_engraver::               
* Rest_collision_engraver::           
* Rest_engraver::                     
* Rhythmic_column_engraver::          
* Script_column_engraver::            
* Script_engraver::                   
* Script_row_engraver::               
* Separating_line_group_engraver::    
* Slash_repeat_engraver::             
* Slur_engraver::                     
* Slur_performer::                    
* Spacing_engraver::                  
* Span_arpeggio_engraver::            
* Span_bar_engraver::                 
* Span_bar_stub_engraver::            
* Span_stem_engraver::                
* Spanner_break_forbid_engraver::     
* Staff_collecting_engraver::         
* Staff_performer::                   
* Staff_symbol_engraver::             
* Stanza_number_align_engraver::      
* Stanza_number_engraver::            
* Stem_engraver::                     
* System_start_delimiter_engraver::   
* Tab_note_heads_engraver::           
* Tab_staff_symbol_engraver::         
* Tab_tie_follow_engraver::           
* Tempo_performer::                   
* Text_engraver::                     
* Text_spanner_engraver::             
* Tie_engraver::                      
* Tie_performer::                     
* Time_signature_engraver::           
* Time_signature_performer::          
* Timing_translator::                 
* Trill_spanner_engraver::            
* Tuplet_engraver::                   
* Tweak_engraver::                    
* Vaticana_ligature_engraver::        
* Vertical_align_engraver::           
* Volta_engraver::                    


File: lilypond-internals.info,  Node: Accidental_engraver,  Next: Ambitus_engraver,  Up: Engravers and Performers

2.2.1 Accidental_engraver
-------------------------

Make accidentals.  Catch note heads, ties and notices key-change events.
This engraver usually lives at Staff level, but reads the settings for
Accidental at ‘Voice’ level, so you can ‘\override’ them at ‘Voice’.

   Properties (read)

     ‘accidentalGrouping’ (symbol)
          If set to ‘'voice’, accidentals on the same note in different
          octaves may be horizontally staggered if in different voices.

     ‘autoAccidentals’ (list)
          List of different ways to typeset an accidental.

          For determining when to print an accidental, several different
          rules are tried.  The rule that gives the highest number of
          accidentals is used.

          Each entry in the list is either a symbol or a procedure.

          SYMBOL
               The symbol is the name of the context in which the
               following rules are to be applied.  For example, if
               CONTEXT is *note (lilypond-internals)Score:: then all
               staves share accidentals, and if CONTEXT is *note
               (lilypond-internals)Staff:: then all voices in the same
               staff share accidentals, but staves do not.

          PROCEDURE
               The procedure represents an accidental rule to be applied
               to the previously specified context.

               The procedure takes the following arguments:

               ‘context’
                    The current context to which the rule should be
                    applied.

               ‘pitch’
                    The pitch of the note to be evaluated.

               ‘barnum’
                    The current bar number.

               ‘measurepos’
                    The current measure position.

               The procedure returns a pair of booleans.  The first
               states whether an extra natural should be added.  The
               second states whether an accidental should be printed.
               ‘(#t . #f)’ does not make sense.

     ‘autoCautionaries’ (list)
          List similar to ‘autoAccidentals’, but it controls cautionary
          accidentals rather than normal ones.  Both lists are tried,
          and the one giving the most accidentals wins.  In case of
          draw, a normal accidental is typeset.

     ‘extraNatural’ (boolean)
          Whether to typeset an extra natural sign before accidentals
          that reduce the effect of a previous alteration.

     ‘harmonicAccidentals’ (boolean)
          If set, harmonic notes in chords get accidentals.

     ‘internalBarNumber’ (integer)
          Contains the current barnumber.  This property is used for
          internal timekeeping, among others by the
          ‘Accidental_engraver’.

     ‘keyAlterations’ (list)
          The current key signature.  This is an alist containing ‘(STEP
          . ALTER)’ or ‘((OCTAVE . STEP) . ALTER)’, where STEP is a
          number in the range 0 to 6 and ALTER a fraction, denoting
          alteration.  For alterations, use symbols, e.g.
          ‘keyAlterations = #`((6 . ,FLAT))’.

     ‘localAlterations’ (list)
          The key signature at this point in the measure.  The format is
          the same as for ‘keyAlterations’, but can also contain
          ‘((OCTAVE . NAME) . (ALTER BARNUMBER . MEASUREPOSITION))’
          pairs.

   Properties (write)

     ‘localAlterations’ (list)
          The key signature at this point in the measure.  The format is
          the same as for ‘keyAlterations’, but can also contain
          ‘((OCTAVE . NAME) . (ALTER BARNUMBER . MEASUREPOSITION))’
          pairs.

   This engraver creates the following layout object(s):

   *note Accidental::, *note AccidentalCautionary::, *note
AccidentalPlacement:: and *note AccidentalSuggestion::.

   ‘Accidental_engraver’ is part of the following context(s): *note
GregorianTranscriptionStaff::, *note KievanStaff::, *note
MensuralStaff::, *note PetrucciStaff::, *note Staff:: and *note
VaticanaStaff::.


File: lilypond-internals.info,  Node: Ambitus_engraver,  Next: Arpeggio_engraver,  Prev: Accidental_engraver,  Up: Engravers and Performers

2.2.2 Ambitus_engraver
----------------------

Create an ambitus.

   Properties (read)

     ‘keyAlterations’ (list)
          The current key signature.  This is an alist containing ‘(STEP
          . ALTER)’ or ‘((OCTAVE . STEP) . ALTER)’, where STEP is a
          number in the range 0 to 6 and ALTER a fraction, denoting
          alteration.  For alterations, use symbols, e.g.
          ‘keyAlterations = #`((6 . ,FLAT))’.

     ‘middleCClefPosition’ (number)
          The position of the middle C, as determined only by the clef.
          This can be calculated by looking at ‘clefPosition’ and
          ‘clefGlyph’.

     ‘middleCOffset’ (number)
          The offset of middle C from the position given by
          ‘middleCClefPosition’ This is used for ottava brackets.

   This engraver creates the following layout object(s):

   *note AccidentalPlacement::, *note Ambitus::, *note
AmbitusAccidental::, *note AmbitusLine:: and *note AmbitusNoteHead::.

   ‘Ambitus_engraver’ is not part of any context.


File: lilypond-internals.info,  Node: Arpeggio_engraver,  Next: Auto_beam_engraver,  Prev: Ambitus_engraver,  Up: Engravers and Performers

2.2.3 Arpeggio_engraver
-----------------------

Generate an Arpeggio symbol.

   Music types accepted:

   *note arpeggio-event::

   This engraver creates the following layout object(s):

   *note Arpeggio::.

   ‘Arpeggio_engraver’ is part of the following context(s): *note
CueVoice::, *note GregorianTranscriptionVoice::, *note KievanVoice::,
*note MensuralVoice::, *note PetrucciVoice::, *note TabVoice::, *note
VaticanaVoice:: and *note Voice::.


File: lilypond-internals.info,  Node: Auto_beam_engraver,  Next: Axis_group_engraver,  Prev: Arpeggio_engraver,  Up: Engravers and Performers

2.2.4 Auto_beam_engraver
------------------------

Generate beams based on measure characteristics and observed Stems.
Uses ‘baseMoment’, ‘beatStructure’, ‘beamExceptions’, ‘measureLength’,
and ‘measurePosition’ to decide when to start and stop a beam.
Overriding beaming is done through *note Stem_engraver:: properties
‘stemLeftBeamCount’ and ‘stemRightBeamCount’.

   Music types accepted:

   *note beam-forbid-event::

   Properties (read)

     ‘autoBeaming’ (boolean)
          If set to true then beams are generated automatically.

     ‘baseMoment’ (moment)
          Smallest unit of time that will stand on its own as a
          subdivided section.

     ‘beamExceptions’ (list)
          An alist of exceptions to autobeam rules that normally end on
          beats.

     ‘beamHalfMeasure’ (boolean)
          Whether to allow a beam to begin halfway through the measure
          in triple time, which could look like 6/8.

     ‘beatStructure’ (list)
          List of ‘baseMoment’s that are combined to make beats.

     ‘subdivideBeams’ (boolean)
          If set, multiple beams will be subdivided at ‘baseMoment’
          positions by only drawing one beam over the beat.

   This engraver creates the following layout object(s):

   *note Beam::.

   ‘Auto_beam_engraver’ is part of the following context(s): *note
CueVoice::, *note DrumVoice::, *note GregorianTranscriptionVoice::,
*note KievanVoice::, *note MensuralVoice::, *note PetrucciVoice::, *note
TabVoice::, *note VaticanaVoice:: and *note Voice::.


File: lilypond-internals.info,  Node: Axis_group_engraver,  Next: Balloon_engraver,  Prev: Auto_beam_engraver,  Up: Engravers and Performers

2.2.5 Axis_group_engraver
-------------------------

Group all objects created in this context in a ‘VerticalAxisGroup’
spanner.

   Properties (read)

     ‘currentCommandColumn’ (graphical (layout) object)
          Grob that is X-parent to all current breakable (clef, key
          signature, etc.)  items.

     ‘hasAxisGroup’ (boolean)
          True if the current context is contained in an axis group.

     ‘keepAliveInterfaces’ (list)
          A list of symbols, signifying grob interfaces that are worth
          keeping a staff with ‘remove-empty’ set around for.

   Properties (write)

     ‘hasAxisGroup’ (boolean)
          True if the current context is contained in an axis group.

   This engraver creates the following layout object(s):

   *note VerticalAxisGroup::.

   ‘Axis_group_engraver’ is part of the following context(s): *note
ChordNames::, *note DrumStaff::, *note Dynamics::, *note FiguredBass::,
*note FretBoards::, *note GregorianTranscriptionStaff::, *note
KievanStaff::, *note Lyrics::, *note MensuralStaff::, *note NoteNames::,
*note OneStaff::, *note PetrucciStaff::, *note RhythmicStaff::, *note
Staff::, *note TabStaff:: and *note VaticanaStaff::.


File: lilypond-internals.info,  Node: Balloon_engraver,  Next: Bar_engraver,  Prev: Axis_group_engraver,  Up: Engravers and Performers

2.2.6 Balloon_engraver
----------------------

Create balloon texts.

   Music types accepted:

   *note annotate-output-event::

   This engraver creates the following layout object(s):

   *note BalloonTextItem::.

   ‘Balloon_engraver’ is not part of any context.


File: lilypond-internals.info,  Node: Bar_engraver,  Next: Bar_number_engraver,  Prev: Balloon_engraver,  Up: Engravers and Performers

2.2.7 Bar_engraver
------------------

Create barlines.  This engraver is controlled through the ‘whichBar’
property.  If it has no bar line to create, it will forbid a linebreak
at this point.  This engraver is required to trigger the creation of
clefs at the start of systems.

   Properties (read)

     ‘whichBar’ (string)
          This property is read to determine what type of bar line to
          create.

          Example:

               \set Staff.whichBar = ".|:"

          This will create a start-repeat bar in this staff only.  Valid
          values are described in ‘scm/bar-line.scm’.

   Properties (write)

     ‘forbidBreak’ (boolean)
          If set to ‘#t’, prevent a line break at this point.

   This engraver creates the following layout object(s):

   *note BarLine::.

   ‘Bar_engraver’ is part of the following context(s): *note
DrumStaff::, *note Dynamics::, *note GregorianTranscriptionStaff::,
*note KievanStaff::, *note MensuralStaff::, *note PetrucciStaff::, *note
RhythmicStaff::, *note Staff::, *note TabStaff:: and *note
VaticanaStaff::.


File: lilypond-internals.info,  Node: Bar_number_engraver,  Next: Beam_collision_engraver,  Prev: Bar_engraver,  Up: Engravers and Performers

2.2.8 Bar_number_engraver
-------------------------

A bar number is created whenever ‘measurePosition’ is zero and when
there is a bar line (i.e., when ‘whichBar’ is set).  It is put on top of
all staves, and appears only at the left side of the staff.  The staves
are taken from ‘stavesFound’, which is maintained by *note
Staff_collecting_engraver::.

   Music types accepted:

   *note alternative-event::

   Properties (read)

     ‘alternativeNumberingStyle’ (symbol)
          The style of an alternative’s bar numbers.  Can be ‘numbers’
          for going back to the same number or ‘numbers-with-letters’
          for going back to the same number with letter suffixes.  No
          setting will not go back in measure-number time.

     ‘barNumberFormatter’ (procedure)
          A procedure that takes a bar number, measure position, and
          alternative number and returns a markup of the bar number to
          print.

     ‘barNumberVisibility’ (procedure)
          A procedure that takes a bar number and a measure position and
          returns whether the corresponding bar number should be
          printed.  Note that the actual print-out of bar numbers is
          controlled with the ‘break-visibility’ property.

          The following procedures are predefined:

          ‘all-bar-numbers-visible’
               Enable bar numbers for all bars, including the first one
               and broken bars (which get bar numbers in parentheses).

          ‘first-bar-number-invisible’
               Enable bar numbers for all bars (including broken bars)
               except the first one.  If the first bar is broken, it
               doesn’t get a bar number either.

          ‘first-bar-number-invisible-save-broken-bars’
               Enable bar numbers for all bars (including broken bars)
               except the first one.  A broken first bar gets a bar
               number.

          ‘first-bar-number-invisible-and-no-parenthesized-bar-numbers’
               Enable bar numbers for all bars except the first bar and
               broken bars.  This is the default.

          ‘(every-nth-bar-number-visible N)’
               Assuming N is value 2, for example, this enables bar
               numbers for bars 2, 4, 6, etc.

          ‘(modulo-bar-number-visible N M)’
               If bar numbers 1, 4, 7, etc., should be enabled, N (the
               modulo) must be set to 3 and M (the division remainder)
               to 1.

     ‘currentBarNumber’ (integer)
          Contains the current barnumber.  This property is incremented
          at every bar line.

     ‘stavesFound’ (list of grobs)
          A list of all staff-symbols found.

     ‘whichBar’ (string)
          This property is read to determine what type of bar line to
          create.

          Example:

               \set Staff.whichBar = ".|:"

          This will create a start-repeat bar in this staff only.  Valid
          values are described in ‘scm/bar-line.scm’.

   Properties (write)

     ‘currentBarNumber’ (integer)
          Contains the current barnumber.  This property is incremented
          at every bar line.

   This engraver creates the following layout object(s):

   *note BarNumber::.

   ‘Bar_number_engraver’ is part of the following context(s): *note
Score::.


File: lilypond-internals.info,  Node: Beam_collision_engraver,  Next: Beam_engraver,  Prev: Bar_number_engraver,  Up: Engravers and Performers

2.2.9 Beam_collision_engraver
-----------------------------

Help beams avoid colliding with notes and clefs in other voices.

   ‘Beam_collision_engraver’ is part of the following context(s): *note
Score::.


File: lilypond-internals.info,  Node: Beam_engraver,  Next: Beam_performer,  Prev: Beam_collision_engraver,  Up: Engravers and Performers

2.2.10 Beam_engraver
--------------------

Handle ‘Beam’ events by engraving beams.  If omitted, then notes are
printed with flags instead of beams.

   Music types accepted:

   *note beam-event::

   Properties (read)

     ‘baseMoment’ (moment)
          Smallest unit of time that will stand on its own as a
          subdivided section.

     ‘beamMelismaBusy’ (boolean)
          Signal if a beam is present.

     ‘beatStructure’ (list)
          List of ‘baseMoment’s that are combined to make beats.

     ‘subdivideBeams’ (boolean)
          If set, multiple beams will be subdivided at ‘baseMoment’
          positions by only drawing one beam over the beat.

   Properties (write)

     ‘forbidBreak’ (boolean)
          If set to ‘#t’, prevent a line break at this point.

   This engraver creates the following layout object(s):

   *note Beam::.

   ‘Beam_engraver’ is part of the following context(s): *note
CueVoice::, *note DrumVoice::, *note GregorianTranscriptionVoice::,
*note KievanVoice::, *note MensuralVoice::, *note NullVoice::, *note
PetrucciVoice::, *note TabVoice::, *note VaticanaVoice:: and *note
Voice::.


File: lilypond-internals.info,  Node: Beam_performer,  Next: Bend_engraver,  Prev: Beam_engraver,  Up: Engravers and Performers

2.2.11 Beam_performer
---------------------

Music types accepted:

   *note beam-event::

   ‘Beam_performer’ is not part of any context.


File: lilypond-internals.info,  Node: Bend_engraver,  Next: Break_align_engraver,  Prev: Beam_performer,  Up: Engravers and Performers

2.2.12 Bend_engraver
--------------------

Create fall spanners.

   Music types accepted:

   *note bend-after-event::

   This engraver creates the following layout object(s):

   *note BendAfter::.

   ‘Bend_engraver’ is part of the following context(s): *note
CueVoice::, *note DrumVoice::, *note GregorianTranscriptionVoice::,
*note KievanVoice::, *note MensuralVoice::, *note PetrucciVoice::, *note
TabVoice::, *note VaticanaVoice:: and *note Voice::.


File: lilypond-internals.info,  Node: Break_align_engraver,  Next: Breathing_sign_engraver,  Prev: Bend_engraver,  Up: Engravers and Performers

2.2.13 Break_align_engraver
---------------------------

Align grobs with corresponding ‘break-align-symbols’ into groups, and
order the groups according to ‘breakAlignOrder’.  The left edge of the
alignment gets a separate group, with a symbol ‘left-edge’.

   This engraver creates the following layout object(s):

   *note BreakAlignGroup::, *note BreakAlignment:: and *note LeftEdge::.

   ‘Break_align_engraver’ is part of the following context(s): *note
Score::.


File: lilypond-internals.info,  Node: Breathing_sign_engraver,  Next: Chord_name_engraver,  Prev: Break_align_engraver,  Up: Engravers and Performers

2.2.14 Breathing_sign_engraver
------------------------------

Create a breathing sign.

   Music types accepted:

   *note breathing-event::

   This engraver creates the following layout object(s):

   *note BreathingSign::.

   ‘Breathing_sign_engraver’ is part of the following context(s): *note
CueVoice::, *note DrumVoice::, *note GregorianTranscriptionVoice::,
*note KievanVoice::, *note MensuralVoice::, *note PetrucciVoice::, *note
TabVoice::, *note VaticanaVoice:: and *note Voice::.


File: lilypond-internals.info,  Node: Chord_name_engraver,  Next: Chord_tremolo_engraver,  Prev: Breathing_sign_engraver,  Up: Engravers and Performers

2.2.15 Chord_name_engraver
--------------------------

Catch note and rest events and generate the appropriate chordname.

   Music types accepted:

   *note note-event:: and *note rest-event::

   Properties (read)

     ‘chordChanges’ (boolean)
          Only show changes in chords scheme?

     ‘chordNameExceptions’ (list)
          An alist of chord exceptions.  Contains ‘(CHORD . MARKUP)’
          entries.

     ‘chordNameExceptions’ (list)
          An alist of chord exceptions.  Contains ‘(CHORD . MARKUP)’
          entries.

     ‘chordNameFunction’ (procedure)
          The function that converts lists of pitches to chord names.

     ‘chordNoteNamer’ (procedure)
          A function that converts from a pitch object to a text markup.
          Used for single pitches.

     ‘chordRootNamer’ (procedure)
          A function that converts from a pitch object to a text markup.
          Used for chords.

     ‘lastChord’ (markup)
          Last chord, used for detecting chord changes.

     ‘majorSevenSymbol’ (markup)
          How should the major 7th be formatted in a chord name?

     ‘noChordSymbol’ (markup)
          Markup to be displayed for rests in a ChordNames context.

   Properties (write)

     ‘lastChord’ (markup)
          Last chord, used for detecting chord changes.

   This engraver creates the following layout object(s):

   *note ChordName::.

   ‘Chord_name_engraver’ is part of the following context(s): *note
ChordNames::.


File: lilypond-internals.info,  Node: Chord_tremolo_engraver,  Next: Clef_engraver,  Prev: Chord_name_engraver,  Up: Engravers and Performers

2.2.16 Chord_tremolo_engraver
-----------------------------

Generate beams for tremolo repeats.

   Music types accepted:

   *note tremolo-span-event::

   This engraver creates the following layout object(s):

   *note Beam::.

   ‘Chord_tremolo_engraver’ is part of the following context(s): *note
CueVoice::, *note DrumVoice::, *note GregorianTranscriptionVoice::,
*note KievanVoice::, *note MensuralVoice::, *note PetrucciVoice::, *note
TabVoice::, *note VaticanaVoice:: and *note Voice::.


File: lilypond-internals.info,  Node: Clef_engraver,  Next: Cluster_spanner_engraver,  Prev: Chord_tremolo_engraver,  Up: Engravers and Performers

2.2.17 Clef_engraver
--------------------

Determine and set reference point for pitches.

   Properties (read)

     ‘clefGlyph’ (string)
          Name of the symbol within the music font.

     ‘clefPosition’ (number)
          Where should the center of the clef symbol go, measured in
          half staff spaces from the center of the staff.

     ‘clefTransposition’ (integer)
          Add this much extra transposition.  Values of 7 and -7 are
          common.

     ‘clefTranspositionStyle’ (symbol)
          Determines the way the ClefModifier grob is displayed.
          Possible values are ‘default’, ‘parenthesized’ and
          ‘bracketed’.

     ‘explicitClefVisibility’ (vector)
          ‘break-visibility’ function for clef changes.

     ‘forceClef’ (boolean)
          Show clef symbol, even if it has not changed.  Only active for
          the first clef after the property is set, not for the full
          staff.

   This engraver creates the following layout object(s):

   *note Clef:: and *note ClefModifier::.

   ‘Clef_engraver’ is part of the following context(s): *note
DrumStaff::, *note GregorianTranscriptionStaff::, *note KievanStaff::,
*note MensuralStaff::, *note PetrucciStaff::, *note Staff::, *note
TabStaff:: and *note VaticanaStaff::.


File: lilypond-internals.info,  Node: Cluster_spanner_engraver,  Next: Collision_engraver,  Prev: Clef_engraver,  Up: Engravers and Performers

2.2.18 Cluster_spanner_engraver
-------------------------------

Engrave a cluster using ‘Spanner’ notation.

   Music types accepted:

   *note cluster-note-event::

   This engraver creates the following layout object(s):

   *note ClusterSpanner:: and *note ClusterSpannerBeacon::.

   ‘Cluster_spanner_engraver’ is part of the following context(s): *note
CueVoice::, *note GregorianTranscriptionVoice::, *note KievanVoice::,
*note MensuralVoice::, *note PetrucciVoice::, *note TabVoice::, *note
VaticanaVoice:: and *note Voice::.


File: lilypond-internals.info,  Node: Collision_engraver,  Next: Completion_heads_engraver,  Prev: Cluster_spanner_engraver,  Up: Engravers and Performers

2.2.19 Collision_engraver
-------------------------

Collect ‘NoteColumns’, and as soon as there are two or more, put them in
a ‘NoteCollision’ object.

   This engraver creates the following layout object(s):

   *note NoteCollision::.

   ‘Collision_engraver’ is part of the following context(s): *note
DrumStaff::, *note GregorianTranscriptionStaff::, *note KievanStaff::,
*note MensuralStaff::, *note PetrucciStaff::, *note Staff::, *note
TabStaff:: and *note VaticanaStaff::.


File: lilypond-internals.info,  Node: Completion_heads_engraver,  Next: Completion_rest_engraver,  Prev: Collision_engraver,  Up: Engravers and Performers

2.2.20 Completion_heads_engraver
--------------------------------

This engraver replaces ‘Note_heads_engraver’.  It plays some trickery to
break long notes and automatically tie them into the next measure.

   Music types accepted:

   *note note-event::

   Properties (read)

     ‘completionFactor’ (an exact rational or procedure)
          When ‘Completion_heads_engraver’ and
          ‘Completion_rest_engraver’ need to split a note or rest with a
          scaled duration, such as ‘c2*3’, this specifies the scale
          factor to use for the newly-split notes and rests created by
          the engraver.

          If ‘#f’, the completion engraver uses the scale-factor of each
          duration being split.

          If set to a callback procedure, that procedure is called with
          the context of the completion engraver, and the duration to be
          split.

     ‘completionUnit’ (moment)
          Sub-bar unit of completion.

     ‘measureLength’ (moment)
          Length of one measure in the current time signature.

     ‘measurePosition’ (moment)
          How much of the current measure have we had.  This can be set
          manually to create incomplete measures.

     ‘middleCPosition’ (number)
          The place of the middle C, measured in half staff-spaces.
          Usually determined by looking at ‘middleCClefPosition’ and
          ‘middleCOffset’.

     ‘timing’ (boolean)
          Keep administration of measure length, position, bar number,
          etc.?  Switch off for cadenzas.

   Properties (write)

     ‘completionBusy’ (boolean)
          Whether a completion-note head is playing.

   This engraver creates the following layout object(s):

   *note NoteHead::, *note Tie:: and *note TieColumn::.

   ‘Completion_heads_engraver’ is not part of any context.


File: lilypond-internals.info,  Node: Completion_rest_engraver,  Next: Concurrent_hairpin_engraver,  Prev: Completion_heads_engraver,  Up: Engravers and Performers

2.2.21 Completion_rest_engraver
-------------------------------

This engraver replaces ‘Rest_engraver’.  It plays some trickery to break
long rests into the next measure.

   Music types accepted:

   *note rest-event::

   Properties (read)

     ‘completionFactor’ (an exact rational or procedure)
          When ‘Completion_heads_engraver’ and
          ‘Completion_rest_engraver’ need to split a note or rest with a
          scaled duration, such as ‘c2*3’, this specifies the scale
          factor to use for the newly-split notes and rests created by
          the engraver.

          If ‘#f’, the completion engraver uses the scale-factor of each
          duration being split.

          If set to a callback procedure, that procedure is called with
          the context of the completion engraver, and the duration to be
          split.

     ‘completionUnit’ (moment)
          Sub-bar unit of completion.

     ‘measureLength’ (moment)
          Length of one measure in the current time signature.

     ‘measurePosition’ (moment)
          How much of the current measure have we had.  This can be set
          manually to create incomplete measures.

     ‘middleCPosition’ (number)
          The place of the middle C, measured in half staff-spaces.
          Usually determined by looking at ‘middleCClefPosition’ and
          ‘middleCOffset’.

   Properties (write)

     ‘restCompletionBusy’ (boolean)
          Signal whether a completion-rest is active.

   This engraver creates the following layout object(s):

   *note Rest::.

   ‘Completion_rest_engraver’ is not part of any context.


File: lilypond-internals.info,  Node: Concurrent_hairpin_engraver,  Next: Control_track_performer,  Prev: Completion_rest_engraver,  Up: Engravers and Performers

2.2.22 Concurrent_hairpin_engraver
----------------------------------

Collect concurrent hairpins.

   ‘Concurrent_hairpin_engraver’ is part of the following context(s):
*note Score::.


File: lilypond-internals.info,  Node: Control_track_performer,  Next: Cue_clef_engraver,  Prev: Concurrent_hairpin_engraver,  Up: Engravers and Performers

2.2.23 Control_track_performer
------------------------------

‘Control_track_performer’ is not part of any context.


File: lilypond-internals.info,  Node: Cue_clef_engraver,  Next: Custos_engraver,  Prev: Control_track_performer,  Up: Engravers and Performers

2.2.24 Cue_clef_engraver
------------------------

Determine and set reference point for pitches in cued voices.

   Properties (read)

     ‘clefTransposition’ (integer)
          Add this much extra transposition.  Values of 7 and -7 are
          common.

     ‘cueClefGlyph’ (string)
          Name of the symbol within the music font.

     ‘cueClefPosition’ (number)
          Where should the center of the clef symbol go, measured in
          half staff spaces from the center of the staff.

     ‘cueClefTransposition’ (integer)
          Add this much extra transposition.  Values of 7 and -7 are
          common.

     ‘cueClefTranspositionStyle’ (symbol)
          Determines the way the ClefModifier grob is displayed.
          Possible values are ‘default’, ‘parenthesized’ and
          ‘bracketed’.

     ‘explicitCueClefVisibility’ (vector)
          ‘break-visibility’ function for cue clef changes.

     ‘middleCCuePosition’ (number)
          The position of the middle C, as determined only by the clef
          of the cue notes.  This can be calculated by looking at
          ‘cueClefPosition’ and ‘cueClefGlyph’.

   This engraver creates the following layout object(s):

   *note ClefModifier::, *note CueClef:: and *note CueEndClef::.

   ‘Cue_clef_engraver’ is part of the following context(s): *note
DrumStaff::, *note GregorianTranscriptionStaff::, *note KievanStaff::,
*note MensuralStaff::, *note PetrucciStaff::, *note Staff::, *note
TabStaff:: and *note VaticanaStaff::.


File: lilypond-internals.info,  Node: Custos_engraver,  Next: Default_bar_line_engraver,  Prev: Cue_clef_engraver,  Up: Engravers and Performers

2.2.25 Custos_engraver
----------------------

Engrave custodes.

   This engraver creates the following layout object(s):

   *note Custos::.

   ‘Custos_engraver’ is part of the following context(s): *note
MensuralStaff::, *note PetrucciStaff:: and *note VaticanaStaff::.


File: lilypond-internals.info,  Node: Default_bar_line_engraver,  Next: Dot_column_engraver,  Prev: Custos_engraver,  Up: Engravers and Performers

2.2.26 Default_bar_line_engraver
--------------------------------

This engraver determines what kind of automatic bar lines should be
produced, and sets ‘whichBar’ accordingly.  It should be at the same
level as *note Timing_translator::.

   Properties (read)

     ‘automaticBars’ (boolean)
          If set to false then bar lines will not be printed
          automatically; they must be explicitly created with a ‘\bar’
          command.  Unlike the ‘\cadenzaOn’ keyword, measures are still
          counted.  Bar line generation will resume according to that
          count if this property is unset.

     ‘barAlways’ (boolean)
          If set to true a bar line is drawn after each note.

     ‘defaultBarType’ (string)
          Set the default type of bar line.  See ‘whichBar’ for
          information on available bar types.

          This variable is read by *note
          (lilypond-internals)Timing_translator:: at *note
          (lilypond-internals)Score:: level.

     ‘measureLength’ (moment)
          Length of one measure in the current time signature.

     ‘measurePosition’ (moment)
          How much of the current measure have we had.  This can be set
          manually to create incomplete measures.

     ‘timing’ (boolean)
          Keep administration of measure length, position, bar number,
          etc.?  Switch off for cadenzas.

     ‘whichBar’ (string)
          This property is read to determine what type of bar line to
          create.

          Example:

               \set Staff.whichBar = ".|:"

          This will create a start-repeat bar in this staff only.  Valid
          values are described in ‘scm/bar-line.scm’.

   ‘Default_bar_line_engraver’ is part of the following context(s):
*note Score::.


File: lilypond-internals.info,  Node: Dot_column_engraver,  Next: Dots_engraver,  Prev: Default_bar_line_engraver,  Up: Engravers and Performers

2.2.27 Dot_column_engraver
--------------------------

Engrave dots on dotted notes shifted to the right of the note.  If
omitted, then dots appear on top of the notes.

   This engraver creates the following layout object(s):

   *note DotColumn::.

   ‘Dot_column_engraver’ is part of the following context(s): *note
DrumStaff::, *note GregorianTranscriptionStaff::, *note KievanStaff::,
*note MensuralStaff::, *note PetrucciStaff::, *note RhythmicStaff::,
*note Staff::, *note TabStaff:: and *note VaticanaStaff::.


File: lilypond-internals.info,  Node: Dots_engraver,  Next: Double_percent_repeat_engraver,  Prev: Dot_column_engraver,  Up: Engravers and Performers

2.2.28 Dots_engraver
--------------------

Create *note Dots:: objects for *note rhythmic-head-interface::s.

   This engraver creates the following layout object(s):

   *note Dots::.

   ‘Dots_engraver’ is part of the following context(s): *note
CueVoice::, *note DrumVoice::, *note GregorianTranscriptionVoice::,
*note KievanVoice::, *note MensuralVoice::, *note PetrucciVoice::, *note
TabVoice::, *note VaticanaVoice:: and *note Voice::.


File: lilypond-internals.info,  Node: Double_percent_repeat_engraver,  Next: Drum_note_performer,  Prev: Dots_engraver,  Up: Engravers and Performers

2.2.29 Double_percent_repeat_engraver
-------------------------------------

Make double measure repeats.

   Music types accepted:

   *note double-percent-event::

   Properties (read)

     ‘countPercentRepeats’ (boolean)
          If set, produce counters for percent repeats.

     ‘measureLength’ (moment)
          Length of one measure in the current time signature.

     ‘repeatCountVisibility’ (procedure)
          A procedure taking as arguments an integer and context,
          returning whether the corresponding percent repeat number
          should be printed when ‘countPercentRepeats’ is set.

   Properties (write)

     ‘forbidBreak’ (boolean)
          If set to ‘#t’, prevent a line break at this point.

   This engraver creates the following layout object(s):

   *note DoublePercentRepeat:: and *note DoublePercentRepeatCounter::.

   ‘Double_percent_repeat_engraver’ is part of the following context(s):
*note CueVoice::, *note DrumVoice::, *note
GregorianTranscriptionVoice::, *note KievanVoice::, *note
MensuralVoice::, *note PetrucciVoice::, *note TabVoice::, *note
VaticanaVoice:: and *note Voice::.


File: lilypond-internals.info,  Node: Drum_note_performer,  Next: Drum_notes_engraver,  Prev: Double_percent_repeat_engraver,  Up: Engravers and Performers

2.2.30 Drum_note_performer
--------------------------

Play drum notes.

   Music types accepted:

   *note note-event::

   ‘Drum_note_performer’ is not part of any context.


File: lilypond-internals.info,  Node: Drum_notes_engraver,  Next: Dynamic_align_engraver,  Prev: Drum_note_performer,  Up: Engravers and Performers

2.2.31 Drum_notes_engraver
--------------------------

Generate drum note heads.

   Music types accepted:

   *note note-event::

   Properties (read)

     ‘drumStyleTable’ (hash table)
          A hash table which maps drums to layout settings.  Predefined
          values: ‘drums-style’, ‘agostini-drums-style’,
          ‘timbales-style’, ‘congas-style’, ‘bongos-style’, and
          ‘percussion-style’.

          The layout style is a hash table, containing the drum-pitches
          (e.g., the symbol ‘hihat’) as keys, and a list
          ‘(NOTEHEAD-STYLE SCRIPT VERTICAL-POSITION)’ as values.

   This engraver creates the following layout object(s):

   *note NoteHead:: and *note Script::.

   ‘Drum_notes_engraver’ is part of the following context(s): *note
DrumVoice::.


File: lilypond-internals.info,  Node: Dynamic_align_engraver,  Next: Dynamic_engraver,  Prev: Drum_notes_engraver,  Up: Engravers and Performers

2.2.32 Dynamic_align_engraver
-----------------------------

Align hairpins and dynamic texts on a horizontal line.

   Properties (read)

     ‘currentMusicalColumn’ (graphical (layout) object)
          Grob that is X-parent to all non-breakable items (note heads,
          lyrics, etc.).

   This engraver creates the following layout object(s):

   *note DynamicLineSpanner::.

   ‘Dynamic_align_engraver’ is part of the following context(s): *note
CueVoice::, *note DrumVoice::, *note Dynamics::, *note
GregorianTranscriptionVoice::, *note KievanVoice::, *note
MensuralVoice::, *note PetrucciVoice::, *note TabVoice::, *note
VaticanaVoice:: and *note Voice::.


File: lilypond-internals.info,  Node: Dynamic_engraver,  Next: Dynamic_performer,  Prev: Dynamic_align_engraver,  Up: Engravers and Performers

2.2.33 Dynamic_engraver
-----------------------

Create hairpins, dynamic texts and dynamic text spanners.

   Music types accepted:

   *note absolute-dynamic-event::, *note break-span-event:: and *note
span-dynamic-event::

   Properties (read)

     ‘crescendoSpanner’ (symbol)
          The type of spanner to be used for crescendi.  Available
          values are ‘hairpin’ and ‘text’.  If unset, a hairpin
          crescendo is used.

     ‘crescendoText’ (markup)
          The text to print at start of non-hairpin crescendo, i.e.,
          ‘cresc.’.

     ‘currentMusicalColumn’ (graphical (layout) object)
          Grob that is X-parent to all non-breakable items (note heads,
          lyrics, etc.).

     ‘decrescendoSpanner’ (symbol)
          The type of spanner to be used for decrescendi.  Available
          values are ‘hairpin’ and ‘text’.  If unset, a hairpin
          decrescendo is used.

     ‘decrescendoText’ (markup)
          The text to print at start of non-hairpin decrescendo, i.e.,
          ‘dim.’.

   This engraver creates the following layout object(s):

   *note DynamicText::, *note DynamicTextSpanner:: and *note Hairpin::.

   ‘Dynamic_engraver’ is part of the following context(s): *note
CueVoice::, *note DrumVoice::, *note Dynamics::, *note
GregorianTranscriptionVoice::, *note KievanVoice::, *note
MensuralVoice::, *note PetrucciVoice::, *note TabVoice::, *note
VaticanaVoice:: and *note Voice::.


File: lilypond-internals.info,  Node: Dynamic_performer,  Next: Episema_engraver,  Prev: Dynamic_engraver,  Up: Engravers and Performers

2.2.34 Dynamic_performer
------------------------

Music types accepted:

   *note absolute-dynamic-event::, *note crescendo-event:: and *note
decrescendo-event::

   Properties (read)

     ‘dynamicAbsoluteVolumeFunction’ (procedure)
          A procedure that takes one argument, the text value of a
          dynamic event, and returns the absolute volume of that dynamic
          event.

     ‘instrumentEqualizer’ (procedure)
          A function taking a string (instrument name), and returning a
          ‘(MIN . MAX)’ pair of numbers for the loudness range of the
          instrument.

     ‘midiInstrument’ (string)
          Name of the MIDI instrument to use.

     ‘midiMaximumVolume’ (number)
          Analogous to ‘midiMinimumVolume’.

     ‘midiMinimumVolume’ (number)
          Set the minimum loudness for MIDI. Ranges from 0 to 1.

   ‘Dynamic_performer’ is not part of any context.


File: lilypond-internals.info,  Node: Episema_engraver,  Next: Extender_engraver,  Prev: Dynamic_performer,  Up: Engravers and Performers

2.2.35 Episema_engraver
-----------------------

Create an _Editio Vaticana_-style episema line.

   Music types accepted:

   *note episema-event::

   This engraver creates the following layout object(s):

   *note Episema::.

   ‘Episema_engraver’ is part of the following context(s): *note
GregorianTranscriptionVoice:: and *note VaticanaVoice::.


File: lilypond-internals.info,  Node: Extender_engraver,  Next: Figured_bass_engraver,  Prev: Episema_engraver,  Up: Engravers and Performers

2.2.36 Extender_engraver
------------------------

Create lyric extenders.

   Music types accepted:

   *note completize-extender-event:: and *note extender-event::

   Properties (read)

     ‘extendersOverRests’ (boolean)
          Whether to continue extenders as they cross a rest.

   This engraver creates the following layout object(s):

   *note LyricExtender::.

   ‘Extender_engraver’ is part of the following context(s): *note
Lyrics::.


File: lilypond-internals.info,  Node: Figured_bass_engraver,  Next: Figured_bass_position_engraver,  Prev: Extender_engraver,  Up: Engravers and Performers

2.2.37 Figured_bass_engraver
----------------------------

Make figured bass numbers.

   Music types accepted:

   *note bass-figure-event:: and *note rest-event::

   Properties (read)

     ‘figuredBassAlterationDirection’ (direction)
          Where to put alterations relative to the main figure.

     ‘figuredBassCenterContinuations’ (boolean)
          Whether to vertically center pairs of extender lines.  This
          does not work with three or more lines.

     ‘figuredBassFormatter’ (procedure)
          A routine generating a markup for a bass figure.

     ‘ignoreFiguredBassRest’ (boolean)
          Don’t swallow rest events.

     ‘implicitBassFigures’ (list)
          A list of bass figures that are not printed as numbers, but
          only as extender lines.

     ‘useBassFigureExtenders’ (boolean)
          Whether to use extender lines for repeated bass figures.

   This engraver creates the following layout object(s):

   *note BassFigure::, *note BassFigureAlignment::, *note
BassFigureBracket::, *note BassFigureContinuation:: and *note
BassFigureLine::.

   ‘Figured_bass_engraver’ is part of the following context(s): *note
DrumStaff::, *note FiguredBass::, *note GregorianTranscriptionStaff::,
*note KievanStaff::, *note MensuralStaff::, *note PetrucciStaff::, *note
Staff::, *note TabStaff:: and *note VaticanaStaff::.


File: lilypond-internals.info,  Node: Figured_bass_position_engraver,  Next: Fingering_column_engraver,  Prev: Figured_bass_engraver,  Up: Engravers and Performers

2.2.38 Figured_bass_position_engraver
-------------------------------------

Position figured bass alignments over notes.

   This engraver creates the following layout object(s):

   *note BassFigureAlignmentPositioning::.

   ‘Figured_bass_position_engraver’ is part of the following context(s):
*note DrumStaff::, *note GregorianTranscriptionStaff::, *note
KievanStaff::, *note MensuralStaff::, *note PetrucciStaff::, *note
Staff::, *note TabStaff:: and *note VaticanaStaff::.


File: lilypond-internals.info,  Node: Fingering_column_engraver,  Next: Fingering_engraver,  Prev: Figured_bass_position_engraver,  Up: Engravers and Performers

2.2.39 Fingering_column_engraver
--------------------------------

Find potentially colliding scripts and put them into a ‘FingeringColumn’
object; that will fix the collisions.

   This engraver creates the following layout object(s):

   *note FingeringColumn::.

   ‘Fingering_column_engraver’ is part of the following context(s):
*note DrumStaff::, *note GregorianTranscriptionStaff::, *note
KievanStaff::, *note MensuralStaff::, *note PetrucciStaff::, *note
Staff::, *note TabStaff:: and *note VaticanaStaff::.


File: lilypond-internals.info,  Node: Fingering_engraver,  Next: Font_size_engraver,  Prev: Fingering_column_engraver,  Up: Engravers and Performers

2.2.40 Fingering_engraver
-------------------------

Create fingering scripts.

   Music types accepted:

   *note fingering-event::

   This engraver creates the following layout object(s):

   *note Fingering::.

   ‘Fingering_engraver’ is part of the following context(s): *note
CueVoice::, *note GregorianTranscriptionVoice::, *note KievanVoice::,
*note MensuralVoice::, *note PetrucciVoice::, *note VaticanaVoice:: and
*note Voice::.


File: lilypond-internals.info,  Node: Font_size_engraver,  Next: Footnote_engraver,  Prev: Fingering_engraver,  Up: Engravers and Performers

2.2.41 Font_size_engraver
-------------------------

Put ‘fontSize’ into ‘font-size’ grob property.

   Properties (read)

     ‘fontSize’ (number)
          The relative size of all grobs in a context.

   ‘Font_size_engraver’ is part of the following context(s): *note
CueVoice::, *note DrumStaff::, *note DrumVoice::, *note Dynamics::,
*note FretBoards::, *note GregorianTranscriptionStaff::, *note
GregorianTranscriptionVoice::, *note KievanStaff::, *note KievanVoice::,
*note Lyrics::, *note MensuralStaff::, *note MensuralVoice::, *note
PetrucciStaff::, *note PetrucciVoice::, *note RhythmicStaff::, *note
Staff::, *note TabStaff::, *note TabVoice::, *note VaticanaStaff::,
*note VaticanaVoice:: and *note Voice::.


File: lilypond-internals.info,  Node: Footnote_engraver,  Next: Forbid_line_break_engraver,  Prev: Font_size_engraver,  Up: Engravers and Performers

2.2.42 Footnote_engraver
------------------------

Create footnote texts.

   Properties (read)

     ‘currentMusicalColumn’ (graphical (layout) object)
          Grob that is X-parent to all non-breakable items (note heads,
          lyrics, etc.).

   This engraver creates the following layout object(s):

   *note FootnoteItem:: and *note FootnoteSpanner::.

   ‘Footnote_engraver’ is part of the following context(s): *note
Score::.


File: lilypond-internals.info,  Node: Forbid_line_break_engraver,  Next: Fretboard_engraver,  Prev: Footnote_engraver,  Up: Engravers and Performers

2.2.43 Forbid_line_break_engraver
---------------------------------

Forbid line breaks when note heads are still playing at some point.

   Properties (read)

     ‘busyGrobs’ (list)
          A queue of ‘(END-MOMENT . GROB)’ cons cells.  This is for
          internal (C++) use only.  This property contains the grobs
          which are still busy (e.g.  note heads, spanners, etc.).

   Properties (write)

     ‘forbidBreak’ (boolean)
          If set to ‘#t’, prevent a line break at this point.

   ‘Forbid_line_break_engraver’ is part of the following context(s):
*note CueVoice::, *note DrumVoice::, *note
GregorianTranscriptionVoice::, *note KievanVoice::, *note
MensuralVoice::, *note PetrucciVoice::, *note TabVoice::, *note
VaticanaVoice:: and *note Voice::.


File: lilypond-internals.info,  Node: Fretboard_engraver,  Next: Glissando_engraver,  Prev: Forbid_line_break_engraver,  Up: Engravers and Performers

2.2.44 Fretboard_engraver
-------------------------

Generate fret diagram from one or more events of type ‘NoteEvent’.

   Music types accepted:

   *note fingering-event::, *note note-event:: and *note
string-number-event::

   Properties (read)

     ‘chordChanges’ (boolean)
          Only show changes in chords scheme?

     ‘defaultStrings’ (list)
          A list of strings to use in calculating frets for tablatures
          and fretboards if no strings are provided in the notes for the
          current moment.

     ‘highStringOne’ (boolean)
          Whether the first string is the string with highest pitch on
          the instrument.  This used by the automatic string selector
          for tablature notation.

     ‘maximumFretStretch’ (number)
          Don’t allocate frets further than this from specified frets.

     ‘minimumFret’ (number)
          The tablature auto string-selecting mechanism selects the
          highest string with a fret at least ‘minimumFret’.

     ‘noteToFretFunction’ (procedure)
          Convert list of notes and list of defined strings to full list
          of strings and fret numbers.  Parameters: The context, a list
          of note events, a list of tabstring events, and the fretboard
          grob if a fretboard is desired.

     ‘predefinedDiagramTable’ (hash table)
          The hash table of predefined fret diagrams to use in
          FretBoards.

     ‘stringTunings’ (list)
          The tablature strings tuning.  It is a list of the pitches of
          each string (starting with the lowest numbered one).

     ‘tablatureFormat’ (procedure)
          A function formatting a tablature note head.  Called with
          three arguments: context, string number and, fret number.  It
          returns the text as a markup.

   This engraver creates the following layout object(s):

   *note FretBoard::.

   ‘Fretboard_engraver’ is part of the following context(s): *note
FretBoards::.


File: lilypond-internals.info,  Node: Glissando_engraver,  Next: Grace_auto_beam_engraver,  Prev: Fretboard_engraver,  Up: Engravers and Performers

2.2.45 Glissando_engraver
-------------------------

Engrave glissandi.

   Music types accepted:

   *note glissando-event::

   Properties (read)

     ‘glissandoMap’ (list)
          A map in the form of ’((source1 .  target1) (source2 .
          target2) (sourcen .  targetn)) showing the glissandi to be
          drawn for note columns.  The value ’() will default to ’((0 .
          0) (1 .  1) (n .  n)), where n is the minimal number of
          note-heads in the two note columns between which the glissandi
          occur.

   This engraver creates the following layout object(s):

   *note Glissando::.

   ‘Glissando_engraver’ is part of the following context(s): *note
CueVoice::, *note GregorianTranscriptionVoice::, *note KievanVoice::,
*note MensuralVoice::, *note PetrucciVoice::, *note TabVoice::, *note
VaticanaVoice:: and *note Voice::.


File: lilypond-internals.info,  Node: Grace_auto_beam_engraver,  Next: Grace_beam_engraver,  Prev: Glissando_engraver,  Up: Engravers and Performers

2.2.46 Grace_auto_beam_engraver
-------------------------------

Generates one autobeam group across an entire grace phrase.  As usual,
any manual beaming or ‘\noBeam’ will block autobeaming, just like
setting the context property ‘autoBeaming’ to ‘##f’.

   Music types accepted:

   *note beam-forbid-event::

   Properties (read)

     ‘autoBeaming’ (boolean)
          If set to true then beams are generated automatically.

   This engraver creates the following layout object(s):

   *note Beam::.

   ‘Grace_auto_beam_engraver’ is part of the following context(s): *note
CueVoice::, *note DrumVoice::, *note GregorianTranscriptionVoice::,
*note KievanVoice::, *note MensuralVoice::, *note PetrucciVoice::, *note
TabVoice::, *note VaticanaVoice:: and *note Voice::.


File: lilypond-internals.info,  Node: Grace_beam_engraver,  Next: Grace_engraver,  Prev: Grace_auto_beam_engraver,  Up: Engravers and Performers

2.2.47 Grace_beam_engraver
--------------------------

Handle ‘Beam’ events by engraving beams.  If omitted, then notes are
printed with flags instead of beams.  Only engraves beams when we are at
grace points in time.

   Music types accepted:

   *note beam-event::

   Properties (read)

     ‘baseMoment’ (moment)
          Smallest unit of time that will stand on its own as a
          subdivided section.

     ‘beamMelismaBusy’ (boolean)
          Signal if a beam is present.

     ‘beatStructure’ (list)
          List of ‘baseMoment’s that are combined to make beats.

     ‘subdivideBeams’ (boolean)
          If set, multiple beams will be subdivided at ‘baseMoment’
          positions by only drawing one beam over the beat.

   This engraver creates the following layout object(s):

   *note Beam::.

   ‘Grace_beam_engraver’ is part of the following context(s): *note
CueVoice::, *note DrumVoice::, *note GregorianTranscriptionVoice::,
*note KievanVoice::, *note MensuralVoice::, *note PetrucciVoice::, *note
TabVoice::, *note VaticanaVoice:: and *note Voice::.


File: lilypond-internals.info,  Node: Grace_engraver,  Next: Grace_spacing_engraver,  Prev: Grace_beam_engraver,  Up: Engravers and Performers

2.2.48 Grace_engraver
---------------------

Set font size and other properties for grace notes.

   Properties (read)

     ‘graceSettings’ (list)
          Overrides for grace notes.  This property should be
          manipulated through the ‘add-grace-property’ function.

   ‘Grace_engraver’ is part of the following context(s): *note
CueVoice::, *note DrumVoice::, *note GregorianTranscriptionVoice::,
*note KievanVoice::, *note MensuralVoice::, *note PetrucciVoice::, *note
TabVoice::, *note VaticanaVoice:: and *note Voice::.


File: lilypond-internals.info,  Node: Grace_spacing_engraver,  Next: Grid_line_span_engraver,  Prev: Grace_engraver,  Up: Engravers and Performers

2.2.49 Grace_spacing_engraver
-----------------------------

Bookkeeping of shortest starting and playing notes in grace note runs.

   Properties (read)

     ‘currentMusicalColumn’ (graphical (layout) object)
          Grob that is X-parent to all non-breakable items (note heads,
          lyrics, etc.).

   This engraver creates the following layout object(s):

   *note GraceSpacing::.

   ‘Grace_spacing_engraver’ is part of the following context(s): *note
Score::.


File: lilypond-internals.info,  Node: Grid_line_span_engraver,  Next: Grid_point_engraver,  Prev: Grace_spacing_engraver,  Up: Engravers and Performers

2.2.50 Grid_line_span_engraver
------------------------------

This engraver makes cross-staff lines: It catches all normal lines and
draws a single span line across them.

   This engraver creates the following layout object(s):

   *note GridLine::.

   ‘Grid_line_span_engraver’ is not part of any context.


File: lilypond-internals.info,  Node: Grid_point_engraver,  Next: Grob_pq_engraver,  Prev: Grid_line_span_engraver,  Up: Engravers and Performers

2.2.51 Grid_point_engraver
--------------------------

Generate grid points.

   Properties (read)

     ‘gridInterval’ (moment)
          Interval for which to generate ‘GridPoint’s.

   This engraver creates the following layout object(s):

   *note GridPoint::.

   ‘Grid_point_engraver’ is not part of any context.


File: lilypond-internals.info,  Node: Grob_pq_engraver,  Next: Horizontal_bracket_engraver,  Prev: Grid_point_engraver,  Up: Engravers and Performers

2.2.52 Grob_pq_engraver
-----------------------

Administrate when certain grobs (e.g., note heads) stop playing.

   Properties (read)

     ‘busyGrobs’ (list)
          A queue of ‘(END-MOMENT . GROB)’ cons cells.  This is for
          internal (C++) use only.  This property contains the grobs
          which are still busy (e.g.  note heads, spanners, etc.).

   Properties (write)

     ‘busyGrobs’ (list)
          A queue of ‘(END-MOMENT . GROB)’ cons cells.  This is for
          internal (C++) use only.  This property contains the grobs
          which are still busy (e.g.  note heads, spanners, etc.).

   ‘Grob_pq_engraver’ is part of the following context(s): *note
CueVoice::, *note DrumStaff::, *note DrumVoice::, *note
GregorianTranscriptionStaff::, *note GregorianTranscriptionVoice::,
*note KievanStaff::, *note KievanVoice::, *note MensuralStaff::, *note
MensuralVoice::, *note NullVoice::, *note PetrucciStaff::, *note
PetrucciVoice::, *note Staff::, *note TabStaff::, *note TabVoice::,
*note VaticanaStaff::, *note VaticanaVoice:: and *note Voice::.


File: lilypond-internals.info,  Node: Horizontal_bracket_engraver,  Next: Hyphen_engraver,  Prev: Grob_pq_engraver,  Up: Engravers and Performers

2.2.53 Horizontal_bracket_engraver
----------------------------------

Create horizontal brackets over notes for musical analysis purposes.

   Music types accepted:

   *note note-grouping-event::

   This engraver creates the following layout object(s):

   *note HorizontalBracket:: and *note HorizontalBracketText::.

   ‘Horizontal_bracket_engraver’ is not part of any context.


File: lilypond-internals.info,  Node: Hyphen_engraver,  Next: Instrument_name_engraver,  Prev: Horizontal_bracket_engraver,  Up: Engravers and Performers

2.2.54 Hyphen_engraver
----------------------

Create lyric hyphens and distance constraints between words.

   Music types accepted:

   *note hyphen-event::

   This engraver creates the following layout object(s):

   *note LyricHyphen:: and *note LyricSpace::.

   ‘Hyphen_engraver’ is part of the following context(s): *note
Lyrics::.


File: lilypond-internals.info,  Node: Instrument_name_engraver,  Next: Instrument_switch_engraver,  Prev: Hyphen_engraver,  Up: Engravers and Performers

2.2.55 Instrument_name_engraver
-------------------------------

Create a system start text for instrument or vocal names.

   Properties (read)

     ‘currentCommandColumn’ (graphical (layout) object)
          Grob that is X-parent to all current breakable (clef, key
          signature, etc.)  items.

     ‘instrumentName’ (markup)
          The name to print left of a staff.  The ‘instrumentName’
          property labels the staff in the first system, and the
          ‘shortInstrumentName’ property labels following lines.

     ‘shortInstrumentName’ (markup)
          See ‘instrumentName’.

     ‘shortVocalName’ (markup)
          Name of a vocal line, short version.

     ‘vocalName’ (markup)
          Name of a vocal line.

   This engraver creates the following layout object(s):

   *note InstrumentName::.

   ‘Instrument_name_engraver’ is part of the following context(s): *note
ChoirStaff::, *note DrumStaff::, *note FretBoards::, *note GrandStaff::,
*note GregorianTranscriptionStaff::, *note KievanStaff::, *note
Lyrics::, *note MensuralStaff::, *note PetrucciStaff::, *note
PianoStaff::, *note RhythmicStaff::, *note Staff::, *note StaffGroup::,
*note TabStaff:: and *note VaticanaStaff::.


File: lilypond-internals.info,  Node: Instrument_switch_engraver,  Next: Keep_alive_together_engraver,  Prev: Instrument_name_engraver,  Up: Engravers and Performers

2.2.56 Instrument_switch_engraver
---------------------------------

Create a cue text for taking instrument.

   Properties (read)

     ‘instrumentCueName’ (markup)
          The name to print if another instrument is to be taken.

   This engraver creates the following layout object(s):

   *note InstrumentSwitch::.

   ‘Instrument_switch_engraver’ is part of the following context(s):
*note CueVoice::, *note DrumVoice::, *note
GregorianTranscriptionVoice::, *note KievanVoice::, *note
MensuralVoice::, *note PetrucciVoice::, *note TabVoice::, *note
VaticanaVoice:: and *note Voice::.


File: lilypond-internals.info,  Node: Keep_alive_together_engraver,  Next: Key_engraver,  Prev: Instrument_switch_engraver,  Up: Engravers and Performers

2.2.57 Keep_alive_together_engraver
-----------------------------------

This engraver collects all ‘Hara_kiri_group_spanner’s that are created
in contexts at or below its own.  These spanners are then tied together
so that one will be removed only if all are removed.  For example, if a
‘StaffGroup’ uses this engraver, then the staves in the group will all
be visible as long as there is a note in at least one of them.

   ‘Keep_alive_together_engraver’ is part of the following context(s):
*note PianoStaff::.


File: lilypond-internals.info,  Node: Key_engraver,  Next: Key_performer,  Prev: Keep_alive_together_engraver,  Up: Engravers and Performers

2.2.58 Key_engraver
-------------------

Engrave a key signature.

   Music types accepted:

   *note key-change-event::

   Properties (read)

     ‘createKeyOnClefChange’ (boolean)
          Print a key signature whenever the clef is changed.

     ‘explicitKeySignatureVisibility’ (vector)
          ‘break-visibility’ function for explicit key changes.
          ‘\override’ of the ‘break-visibility’ property will set the
          visibility for normal (i.e., at the start of the line) key
          signatures.

     ‘extraNatural’ (boolean)
          Whether to typeset an extra natural sign before accidentals
          that reduce the effect of a previous alteration.

     ‘keyAlterationOrder’ (list)
          An alist that defines in what order alterations should be
          printed.  The format is ‘(STEP . ALTER)’, where STEP is a
          number from 0 to 6 and ALTER from -2 (sharp) to 2 (flat).

     ‘keyAlterations’ (list)
          The current key signature.  This is an alist containing ‘(STEP
          . ALTER)’ or ‘((OCTAVE . STEP) . ALTER)’, where STEP is a
          number in the range 0 to 6 and ALTER a fraction, denoting
          alteration.  For alterations, use symbols, e.g.
          ‘keyAlterations = #`((6 . ,FLAT))’.

     ‘lastKeyAlterations’ (list)
          Last key signature before a key signature change.

     ‘middleCClefPosition’ (number)
          The position of the middle C, as determined only by the clef.
          This can be calculated by looking at ‘clefPosition’ and
          ‘clefGlyph’.

     ‘printKeyCancellation’ (boolean)
          Print restoration alterations before a key signature change.

   Properties (write)

     ‘keyAlterations’ (list)
          The current key signature.  This is an alist containing ‘(STEP
          . ALTER)’ or ‘((OCTAVE . STEP) . ALTER)’, where STEP is a
          number in the range 0 to 6 and ALTER a fraction, denoting
          alteration.  For alterations, use symbols, e.g.
          ‘keyAlterations = #`((6 . ,FLAT))’.

     ‘lastKeyAlterations’ (list)
          Last key signature before a key signature change.

     ‘tonic’ (pitch)
          The tonic of the current scale.

   This engraver creates the following layout object(s):

   *note KeyCancellation:: and *note KeySignature::.

   ‘Key_engraver’ is part of the following context(s): *note
GregorianTranscriptionStaff::, *note KievanStaff::, *note
MensuralStaff::, *note PetrucciStaff::, *note Staff:: and *note
VaticanaStaff::.


File: lilypond-internals.info,  Node: Key_performer,  Next: Kievan_ligature_engraver,  Prev: Key_engraver,  Up: Engravers and Performers

2.2.59 Key_performer
--------------------

Music types accepted:

   *note key-change-event::

   ‘Key_performer’ is not part of any context.


File: lilypond-internals.info,  Node: Kievan_ligature_engraver,  Next: Laissez_vibrer_engraver,  Prev: Key_performer,  Up: Engravers and Performers

2.2.60 Kievan_ligature_engraver
-------------------------------

Handle ‘Kievan_ligature_events’ by glueing Kievan heads together.

   Music types accepted:

   *note ligature-event::

   This engraver creates the following layout object(s):

   *note KievanLigature::.

   ‘Kievan_ligature_engraver’ is part of the following context(s): *note
KievanVoice::.


File: lilypond-internals.info,  Node: Laissez_vibrer_engraver,  Next: Ledger_line_engraver,  Prev: Kievan_ligature_engraver,  Up: Engravers and Performers

2.2.61 Laissez_vibrer_engraver
------------------------------

Create laissez vibrer items.

   Music types accepted:

   *note laissez-vibrer-event::

   This engraver creates the following layout object(s):

   *note LaissezVibrerTie:: and *note LaissezVibrerTieColumn::.

   ‘Laissez_vibrer_engraver’ is part of the following context(s): *note
CueVoice::, *note DrumVoice::, *note GregorianTranscriptionVoice::,
*note KievanVoice::, *note MensuralVoice::, *note PetrucciVoice::, *note
TabVoice::, *note VaticanaVoice:: and *note Voice::.


File: lilypond-internals.info,  Node: Ledger_line_engraver,  Next: Ligature_bracket_engraver,  Prev: Laissez_vibrer_engraver,  Up: Engravers and Performers

2.2.62 Ledger_line_engraver
---------------------------

Create the spanner to draw ledger lines, and notices objects that need
ledger lines.

   This engraver creates the following layout object(s):

   *note LedgerLineSpanner::.

   ‘Ledger_line_engraver’ is part of the following context(s): *note
DrumStaff::, *note GregorianTranscriptionStaff::, *note KievanStaff::,
*note MensuralStaff::, *note PetrucciStaff::, *note RhythmicStaff::,
*note Staff::, *note TabStaff:: and *note VaticanaStaff::.


File: lilypond-internals.info,  Node: Ligature_bracket_engraver,  Next: Lyric_engraver,  Prev: Ledger_line_engraver,  Up: Engravers and Performers

2.2.63 Ligature_bracket_engraver
--------------------------------

Handle ‘Ligature_events’ by engraving ‘Ligature’ brackets.

   Music types accepted:

   *note ligature-event::

   This engraver creates the following layout object(s):

   *note LigatureBracket::.

   ‘Ligature_bracket_engraver’ is part of the following context(s):
*note CueVoice::, *note GregorianTranscriptionVoice::, *note TabVoice::
and *note Voice::.


File: lilypond-internals.info,  Node: Lyric_engraver,  Next: Lyric_performer,  Prev: Ligature_bracket_engraver,  Up: Engravers and Performers

2.2.64 Lyric_engraver
---------------------

Engrave text for lyrics.

   Music types accepted:

   *note lyric-event::

   Properties (read)

     ‘ignoreMelismata’ (boolean)
          Ignore melismata for this *note (lilypond-internals)Lyrics::
          line.

     ‘lyricMelismaAlignment’ (number)
          Alignment to use for a melisma syllable.

     ‘searchForVoice’ (boolean)
          Signal whether a search should be made of all contexts in the
          context hierarchy for a voice to provide rhythms for the
          lyrics.

   This engraver creates the following layout object(s):

   *note LyricText::.

   ‘Lyric_engraver’ is part of the following context(s): *note Lyrics::.


File: lilypond-internals.info,  Node: Lyric_performer,  Next: Mark_engraver,  Prev: Lyric_engraver,  Up: Engravers and Performers

2.2.65 Lyric_performer
----------------------

Music types accepted:

   *note lyric-event::

   ‘Lyric_performer’ is not part of any context.


File: lilypond-internals.info,  Node: Mark_engraver,  Next: Measure_counter_engraver,  Prev: Lyric_performer,  Up: Engravers and Performers

2.2.66 Mark_engraver
--------------------

Create ‘RehearsalMark’ objects.  It puts them on top of all staves
(which is taken from the property ‘stavesFound’).  If moving this
engraver to a different context, *note Staff_collecting_engraver:: must
move along, otherwise all marks end up on the same Y location.

   Music types accepted:

   *note mark-event::

   Properties (read)

     ‘markFormatter’ (procedure)
          A procedure taking as arguments the context and the rehearsal
          mark.  It should return the formatted mark as a markup object.

     ‘rehearsalMark’ (integer)
          The last rehearsal mark printed.

     ‘stavesFound’ (list of grobs)
          A list of all staff-symbols found.

   This engraver creates the following layout object(s):

   *note RehearsalMark::.

   ‘Mark_engraver’ is part of the following context(s): *note Score::.


File: lilypond-internals.info,  Node: Measure_counter_engraver,  Next: Measure_grouping_engraver,  Prev: Mark_engraver,  Up: Engravers and Performers

2.2.67 Measure_counter_engraver
-------------------------------

This engraver numbers ranges of measures, which is useful in parts as an
aid for counting repeated measures.  There is no requirement that the
affected measures be repeated, however.  The user delimits the area to
receive a count with ‘\startMeasureCount’ and ‘\stopMeasureCount’.

   Music types accepted:

   *note measure-counter-event::

   Properties (read)

     ‘currentBarNumber’ (integer)
          Contains the current barnumber.  This property is incremented
          at every bar line.

     ‘currentCommandColumn’ (graphical (layout) object)
          Grob that is X-parent to all current breakable (clef, key
          signature, etc.)  items.

     ‘measurePosition’ (moment)
          How much of the current measure have we had.  This can be set
          manually to create incomplete measures.

   This engraver creates the following layout object(s):

   *note MeasureCounter::.

   ‘Measure_counter_engraver’ is not part of any context.


File: lilypond-internals.info,  Node: Measure_grouping_engraver,  Next: Melody_engraver,  Prev: Measure_counter_engraver,  Up: Engravers and Performers

2.2.68 Measure_grouping_engraver
--------------------------------

Create ‘MeasureGrouping’ to indicate beat subdivision.

   Properties (read)

     ‘baseMoment’ (moment)
          Smallest unit of time that will stand on its own as a
          subdivided section.

     ‘beatStructure’ (list)
          List of ‘baseMoment’s that are combined to make beats.

     ‘currentMusicalColumn’ (graphical (layout) object)
          Grob that is X-parent to all non-breakable items (note heads,
          lyrics, etc.).

     ‘measurePosition’ (moment)
          How much of the current measure have we had.  This can be set
          manually to create incomplete measures.

   This engraver creates the following layout object(s):

   *note MeasureGrouping::.

   ‘Measure_grouping_engraver’ is not part of any context.


File: lilypond-internals.info,  Node: Melody_engraver,  Next: Mensural_ligature_engraver,  Prev: Measure_grouping_engraver,  Up: Engravers and Performers

2.2.69 Melody_engraver
----------------------

Create information for context dependent typesetting decisions.

   This engraver creates the following layout object(s):

   *note MelodyItem::.

   ‘Melody_engraver’ is not part of any context.


File: lilypond-internals.info,  Node: Mensural_ligature_engraver,  Next: Metronome_mark_engraver,  Prev: Melody_engraver,  Up: Engravers and Performers

2.2.70 Mensural_ligature_engraver
---------------------------------

Handle ‘Mensural_ligature_events’ by glueing special ligature heads
together.

   Music types accepted:

   *note ligature-event::

   This engraver creates the following layout object(s):

   *note MensuralLigature::.

   ‘Mensural_ligature_engraver’ is part of the following context(s):
*note MensuralVoice:: and *note PetrucciVoice::.


File: lilypond-internals.info,  Node: Metronome_mark_engraver,  Next: Midi_control_change_performer,  Prev: Mensural_ligature_engraver,  Up: Engravers and Performers

2.2.71 Metronome_mark_engraver
------------------------------

Engrave metronome marking.  This delegates the formatting work to the
function in the ‘metronomeMarkFormatter’ property.  The mark is put over
all staves.  The staves are taken from the ‘stavesFound’ property, which
is maintained by *note Staff_collecting_engraver::.

   Music types accepted:

   *note tempo-change-event::

   Properties (read)

     ‘currentCommandColumn’ (graphical (layout) object)
          Grob that is X-parent to all current breakable (clef, key
          signature, etc.)  items.

     ‘currentMusicalColumn’ (graphical (layout) object)
          Grob that is X-parent to all non-breakable items (note heads,
          lyrics, etc.).

     ‘metronomeMarkFormatter’ (procedure)
          How to produce a metronome markup.  Called with two arguments:
          a ‘TempoChangeEvent’ and context.

     ‘stavesFound’ (list of grobs)
          A list of all staff-symbols found.

     ‘tempoHideNote’ (boolean)
          Hide the note = count in tempo marks.

   This engraver creates the following layout object(s):

   *note MetronomeMark::.

   ‘Metronome_mark_engraver’ is part of the following context(s): *note
Score::.


File: lilypond-internals.info,  Node: Midi_control_change_performer,  Next: Multi_measure_rest_engraver,  Prev: Metronome_mark_engraver,  Up: Engravers and Performers

2.2.72 Midi_control_change_performer
------------------------------------

This performer listens to SetProperty events on context properties for
generating MIDI control changes and prepares them for MIDI output.

   Properties (read)

     ‘midiBalance’ (number)
          Stereo balance for the MIDI channel associated with the
          current context.  Ranges from -1 to 1, where the values -1
          (‘#LEFT’), 0 (‘#CENTER’) and 1 (‘#RIGHT’) correspond to
          leftmost emphasis, center balance, and rightmost emphasis,
          respectively.

     ‘midiChorusLevel’ (number)
          Chorus effect level for the MIDI channel associated with the
          current context.  Ranges from 0 to 1 (0=off, 1=full effect).

     ‘midiExpression’ (number)
          Expression control for the MIDI channel associated with the
          current context.  Ranges from 0 to 1 (0=off, 1=full effect).

     ‘midiPanPosition’ (number)
          Pan position for the MIDI channel associated with the current
          context.  Ranges from -1 to 1, where the values -1
          (‘#LEFT’), 0 (‘#CENTER’) and 1 (‘#RIGHT’) correspond to hard
          left, center, and hard right, respectively.

     ‘midiReverbLevel’ (number)
          Reverb effect level for the MIDI channel associated with the
          current context.  Ranges from 0 to 1 (0=off, 1=full effect).

   ‘Midi_control_change_performer’ is not part of any context.


File: lilypond-internals.info,  Node: Multi_measure_rest_engraver,  Next: New_fingering_engraver,  Prev: Midi_control_change_performer,  Up: Engravers and Performers

2.2.73 Multi_measure_rest_engraver
----------------------------------

Engrave multi-measure rests that are produced with ‘R’.  It reads
‘measurePosition’ and ‘internalBarNumber’ to determine what number to
print over the *note MultiMeasureRest::.

   Music types accepted:

   *note multi-measure-rest-event:: and *note multi-measure-text-event::

   Properties (read)

     ‘currentCommandColumn’ (graphical (layout) object)
          Grob that is X-parent to all current breakable (clef, key
          signature, etc.)  items.

     ‘internalBarNumber’ (integer)
          Contains the current barnumber.  This property is used for
          internal timekeeping, among others by the
          ‘Accidental_engraver’.

     ‘measurePosition’ (moment)
          How much of the current measure have we had.  This can be set
          manually to create incomplete measures.

     ‘restNumberThreshold’ (number)
          If a multimeasure rest has more measures than this, a number
          is printed.

     ‘whichBar’ (string)
          This property is read to determine what type of bar line to
          create.

          Example:

               \set Staff.whichBar = ".|:"

          This will create a start-repeat bar in this staff only.  Valid
          values are described in ‘scm/bar-line.scm’.

   This engraver creates the following layout object(s):

   *note MultiMeasureRest::, *note MultiMeasureRestNumber:: and *note
MultiMeasureRestText::.

   ‘Multi_measure_rest_engraver’ is part of the following context(s):
*note CueVoice::, *note DrumVoice::, *note
GregorianTranscriptionVoice::, *note KievanVoice::, *note
MensuralVoice::, *note PetrucciVoice::, *note TabVoice::, *note
VaticanaVoice:: and *note Voice::.


File: lilypond-internals.info,  Node: New_fingering_engraver,  Next: Note_head_line_engraver,  Prev: Multi_measure_rest_engraver,  Up: Engravers and Performers

2.2.74 New_fingering_engraver
-----------------------------

Create fingering scripts for notes in a new chord.  This engraver is
ill-named, since it also takes care of articulations and harmonic note
heads.

   Properties (read)

     ‘fingeringOrientations’ (list)
          A list of symbols, containing ‘left’, ‘right’, ‘up’ and/or
          ‘down’.  This list determines where fingerings are put
          relative to the chord being fingered.

     ‘harmonicDots’ (boolean)
          If set, harmonic notes in dotted chords get dots.

     ‘stringNumberOrientations’ (list)
          See ‘fingeringOrientations’.

     ‘strokeFingerOrientations’ (list)
          See ‘fingeringOrientations’.

   This engraver creates the following layout object(s):

   *note Fingering::, *note Script::, *note StringNumber:: and *note
StrokeFinger::.

   ‘New_fingering_engraver’ is part of the following context(s): *note
CueVoice::, *note GregorianTranscriptionVoice::, *note KievanVoice::,
*note MensuralVoice::, *note PetrucciVoice::, *note VaticanaVoice:: and
*note Voice::.


File: lilypond-internals.info,  Node: Note_head_line_engraver,  Next: Note_heads_engraver,  Prev: New_fingering_engraver,  Up: Engravers and Performers

2.2.75 Note_head_line_engraver
------------------------------

Engrave a line between two note heads in a staff switch if ‘followVoice’
is set.

   Properties (read)

     ‘followVoice’ (boolean)
          If set, note heads are tracked across staff switches by a thin
          line.

   This engraver creates the following layout object(s):

   *note VoiceFollower::.

   ‘Note_head_line_engraver’ is part of the following context(s): *note
CueVoice::, *note GregorianTranscriptionVoice::, *note KievanVoice::,
*note MensuralVoice::, *note PetrucciVoice::, *note TabVoice::, *note
VaticanaVoice:: and *note Voice::.


File: lilypond-internals.info,  Node: Note_heads_engraver,  Next: Note_name_engraver,  Prev: Note_head_line_engraver,  Up: Engravers and Performers

2.2.76 Note_heads_engraver
--------------------------

Generate note heads.

   Music types accepted:

   *note note-event::

   Properties (read)

     ‘middleCPosition’ (number)
          The place of the middle C, measured in half staff-spaces.
          Usually determined by looking at ‘middleCClefPosition’ and
          ‘middleCOffset’.

     ‘staffLineLayoutFunction’ (procedure)
          Layout of staff lines, ‘traditional’, or ‘semitone’.

   This engraver creates the following layout object(s):

   *note NoteHead::.

   ‘Note_heads_engraver’ is part of the following context(s): *note
CueVoice::, *note GregorianTranscriptionVoice::, *note KievanVoice::,
*note MensuralVoice::, *note NullVoice::, *note PetrucciVoice::, *note
VaticanaVoice:: and *note Voice::.


File: lilypond-internals.info,  Node: Note_name_engraver,  Next: Note_performer,  Prev: Note_heads_engraver,  Up: Engravers and Performers

2.2.77 Note_name_engraver
-------------------------

Print pitches as words.

   Music types accepted:

   *note note-event::

   Properties (read)

     ‘printOctaveNames’ (boolean)
          Print octave marks for the ‘NoteNames’ context.

   This engraver creates the following layout object(s):

   *note NoteName::.

   ‘Note_name_engraver’ is part of the following context(s): *note
NoteNames::.


File: lilypond-internals.info,  Node: Note_performer,  Next: Note_spacing_engraver,  Prev: Note_name_engraver,  Up: Engravers and Performers

2.2.78 Note_performer
---------------------

Music types accepted:

   *note articulation-event::, *note breathing-event::, *note
note-event:: and *note tie-event::

   ‘Note_performer’ is not part of any context.


File: lilypond-internals.info,  Node: Note_spacing_engraver,  Next: Ottava_spanner_engraver,  Prev: Note_performer,  Up: Engravers and Performers

2.2.79 Note_spacing_engraver
----------------------------

Generate ‘NoteSpacing’, an object linking horizontal lines for use in
spacing.

   This engraver creates the following layout object(s):

   *note NoteSpacing::.

   ‘Note_spacing_engraver’ is part of the following context(s): *note
CueVoice::, *note DrumVoice::, *note GregorianTranscriptionVoice::,
*note KievanVoice::, *note MensuralVoice::, *note PetrucciVoice::, *note
TabVoice::, *note VaticanaVoice:: and *note Voice::.


File: lilypond-internals.info,  Node: Ottava_spanner_engraver,  Next: Output_property_engraver,  Prev: Note_spacing_engraver,  Up: Engravers and Performers

2.2.80 Ottava_spanner_engraver
------------------------------

Create a text spanner when the ottavation property changes.

   Properties (read)

     ‘currentMusicalColumn’ (graphical (layout) object)
          Grob that is X-parent to all non-breakable items (note heads,
          lyrics, etc.).

     ‘middleCOffset’ (number)
          The offset of middle C from the position given by
          ‘middleCClefPosition’ This is used for ottava brackets.

     ‘ottavation’ (markup)
          If set, the text for an ottava spanner.  Changing this creates
          a new text spanner.

   This engraver creates the following layout object(s):

   *note OttavaBracket::.

   ‘Ottava_spanner_engraver’ is part of the following context(s): *note
GregorianTranscriptionStaff::, *note KievanStaff::, *note
MensuralStaff::, *note PetrucciStaff::, *note Staff:: and *note
VaticanaStaff::.


File: lilypond-internals.info,  Node: Output_property_engraver,  Next: Page_turn_engraver,  Prev: Ottava_spanner_engraver,  Up: Engravers and Performers

2.2.81 Output_property_engraver
-------------------------------

Apply a procedure to any grob acknowledged.

   Music types accepted:

   *note apply-output-event::

   ‘Output_property_engraver’ is part of the following context(s): *note
Score::.


File: lilypond-internals.info,  Node: Page_turn_engraver,  Next: Paper_column_engraver,  Prev: Output_property_engraver,  Up: Engravers and Performers

2.2.82 Page_turn_engraver
-------------------------

Decide where page turns are allowed to go.

   Music types accepted:

   *note break-event::

   Properties (read)

     ‘minimumPageTurnLength’ (moment)
          Minimum length of a rest for a page turn to be allowed.

     ‘minimumRepeatLengthForPageTurn’ (moment)
          Minimum length of a repeated section for a page turn to be
          allowed within that section.

   ‘Page_turn_engraver’ is not part of any context.


File: lilypond-internals.info,  Node: Paper_column_engraver,  Next: Parenthesis_engraver,  Prev: Page_turn_engraver,  Up: Engravers and Performers

2.2.83 Paper_column_engraver
----------------------------

Take care of generating columns.

   This engraver decides whether a column is breakable.  The default is
that a column is always breakable.  However, every ‘Bar_engraver’ that
does not have a barline at a certain point will set ‘forbidBreaks’ in
the score context to stop line breaks.  In practice, this means that you
can make a break point by creating a bar line (assuming that there are
no beams or notes that prevent a break point).

   Music types accepted:

   *note break-event:: and *note label-event::

   Properties (read)

     ‘forbidBreak’ (boolean)
          If set to ‘#t’, prevent a line break at this point.

   Properties (write)

     ‘currentCommandColumn’ (graphical (layout) object)
          Grob that is X-parent to all current breakable (clef, key
          signature, etc.)  items.

     ‘currentMusicalColumn’ (graphical (layout) object)
          Grob that is X-parent to all non-breakable items (note heads,
          lyrics, etc.).

     ‘forbidBreak’ (boolean)
          If set to ‘#t’, prevent a line break at this point.

   This engraver creates the following layout object(s):

   *note NonMusicalPaperColumn:: and *note PaperColumn::.

   ‘Paper_column_engraver’ is part of the following context(s): *note
Score::.


File: lilypond-internals.info,  Node: Parenthesis_engraver,  Next: Part_combine_engraver,  Prev: Paper_column_engraver,  Up: Engravers and Performers

2.2.84 Parenthesis_engraver
---------------------------

Parenthesize objects whose music cause has the ‘parenthesize’ property.

   This engraver creates the following layout object(s):

   *note ParenthesesItem::.

   ‘Parenthesis_engraver’ is part of the following context(s): *note
Score::.


File: lilypond-internals.info,  Node: Part_combine_engraver,  Next: Percent_repeat_engraver,  Prev: Parenthesis_engraver,  Up: Engravers and Performers

2.2.85 Part_combine_engraver
----------------------------

Part combine engraver for orchestral scores: Print markings ‘a2’,
‘Solo’, ‘Solo II’, and ‘unisono’.

   Music types accepted:

   *note note-event:: and *note part-combine-event::

   Properties (read)

     ‘aDueText’ (markup)
          Text to print at a unisono passage.

     ‘partCombineTextsOnNote’ (boolean)
          Print part-combine texts only on the next note rather than
          immediately on rests or skips.

     ‘printPartCombineTexts’ (boolean)
          Set ‘Solo’ and ‘A due’ texts in the part combiner?

     ‘soloIIText’ (markup)
          The text for the start of a solo for voice ‘two’ when
          part-combining.

     ‘soloText’ (markup)
          The text for the start of a solo when part-combining.

   This engraver creates the following layout object(s):

   *note CombineTextScript::.

   ‘Part_combine_engraver’ is part of the following context(s): *note
CueVoice::, *note DrumVoice::, *note GregorianTranscriptionVoice::,
*note KievanVoice::, *note MensuralVoice::, *note PetrucciVoice::, *note
TabVoice::, *note VaticanaVoice:: and *note Voice::.


File: lilypond-internals.info,  Node: Percent_repeat_engraver,  Next: Phrasing_slur_engraver,  Prev: Part_combine_engraver,  Up: Engravers and Performers

2.2.86 Percent_repeat_engraver
------------------------------

Make whole measure repeats.

   Music types accepted:

   *note percent-event::

   Properties (read)

     ‘countPercentRepeats’ (boolean)
          If set, produce counters for percent repeats.

     ‘currentCommandColumn’ (graphical (layout) object)
          Grob that is X-parent to all current breakable (clef, key
          signature, etc.)  items.

     ‘repeatCountVisibility’ (procedure)
          A procedure taking as arguments an integer and context,
          returning whether the corresponding percent repeat number
          should be printed when ‘countPercentRepeats’ is set.

   This engraver creates the following layout object(s):

   *note PercentRepeat:: and *note PercentRepeatCounter::.

   ‘Percent_repeat_engraver’ is part of the following context(s): *note
CueVoice::, *note DrumVoice::, *note GregorianTranscriptionVoice::,
*note KievanVoice::, *note MensuralVoice::, *note PetrucciVoice::, *note
TabVoice::, *note VaticanaVoice:: and *note Voice::.


File: lilypond-internals.info,  Node: Phrasing_slur_engraver,  Next: Piano_pedal_align_engraver,  Prev: Percent_repeat_engraver,  Up: Engravers and Performers

2.2.87 Phrasing_slur_engraver
-----------------------------

Print phrasing slurs.  Similar to *note Slur_engraver::.

   Music types accepted:

   *note note-event:: and *note phrasing-slur-event::

   This engraver creates the following layout object(s):

   *note PhrasingSlur::.

   ‘Phrasing_slur_engraver’ is part of the following context(s): *note
CueVoice::, *note DrumVoice::, *note GregorianTranscriptionVoice::,
*note KievanVoice::, *note MensuralVoice::, *note PetrucciVoice::, *note
TabVoice::, *note VaticanaVoice:: and *note Voice::.


File: lilypond-internals.info,  Node: Piano_pedal_align_engraver,  Next: Piano_pedal_engraver,  Prev: Phrasing_slur_engraver,  Up: Engravers and Performers

2.2.88 Piano_pedal_align_engraver
---------------------------------

Align piano pedal symbols and brackets.

   Properties (read)

     ‘currentCommandColumn’ (graphical (layout) object)
          Grob that is X-parent to all current breakable (clef, key
          signature, etc.)  items.

   This engraver creates the following layout object(s):

   *note SostenutoPedalLineSpanner::, *note SustainPedalLineSpanner::
and *note UnaCordaPedalLineSpanner::.

   ‘Piano_pedal_align_engraver’ is part of the following context(s):
*note DrumStaff::, *note GregorianTranscriptionStaff::, *note
KievanStaff::, *note MensuralStaff::, *note PetrucciStaff::, *note
Staff::, *note TabStaff:: and *note VaticanaStaff::.


File: lilypond-internals.info,  Node: Piano_pedal_engraver,  Next: Piano_pedal_performer,  Prev: Piano_pedal_align_engraver,  Up: Engravers and Performers

2.2.89 Piano_pedal_engraver
---------------------------

Engrave piano pedal symbols and brackets.

   Music types accepted:

   *note sostenuto-event::, *note sustain-event:: and *note
una-corda-event::

   Properties (read)

     ‘currentCommandColumn’ (graphical (layout) object)
          Grob that is X-parent to all current breakable (clef, key
          signature, etc.)  items.

     ‘pedalSostenutoStrings’ (list)
          See ‘pedalSustainStrings’.

     ‘pedalSostenutoStyle’ (symbol)
          See ‘pedalSustainStyle’.

     ‘pedalSustainStrings’ (list)
          A list of strings to print for sustain-pedal.  Format is ‘(UP
          UPDOWN DOWN)’, where each of the three is the string to print
          when this is done with the pedal.

     ‘pedalSustainStyle’ (symbol)
          A symbol that indicates how to print sustain pedals: ‘text’,
          ‘bracket’ or ‘mixed’ (both).

     ‘pedalUnaCordaStrings’ (list)
          See ‘pedalSustainStrings’.

     ‘pedalUnaCordaStyle’ (symbol)
          See ‘pedalSustainStyle’.

   This engraver creates the following layout object(s):

   *note PianoPedalBracket::, *note SostenutoPedal::, *note
SustainPedal:: and *note UnaCordaPedal::.

   ‘Piano_pedal_engraver’ is part of the following context(s): *note
Dynamics::, *note GregorianTranscriptionStaff::, *note KievanStaff::,
*note MensuralStaff::, *note PetrucciStaff::, *note Staff::, *note
TabStaff:: and *note VaticanaStaff::.


File: lilypond-internals.info,  Node: Piano_pedal_performer,  Next: Pitch_squash_engraver,  Prev: Piano_pedal_engraver,  Up: Engravers and Performers

2.2.90 Piano_pedal_performer
----------------------------

Music types accepted:

   *note sostenuto-event::, *note sustain-event:: and *note
una-corda-event::

   ‘Piano_pedal_performer’ is not part of any context.


File: lilypond-internals.info,  Node: Pitch_squash_engraver,  Next: Pitched_trill_engraver,  Prev: Piano_pedal_performer,  Up: Engravers and Performers

2.2.91 Pitch_squash_engraver
----------------------------

Set the vertical position of note heads to ‘squashedPosition’, if that
property is set.  This can be used to make a single-line staff
demonstrating the rhythm of a melody.

   Properties (read)

     ‘squashedPosition’ (integer)
          Vertical position of squashing for *note
          (lilypond-internals)Pitch_squash_engraver::.

   ‘Pitch_squash_engraver’ is part of the following context(s): *note
NullVoice:: and *note RhythmicStaff::.


File: lilypond-internals.info,  Node: Pitched_trill_engraver,  Next: Pure_from_neighbor_engraver,  Prev: Pitch_squash_engraver,  Up: Engravers and Performers

2.2.92 Pitched_trill_engraver
-----------------------------

Print the bracketed note head after a note head with trill.

   This engraver creates the following layout object(s):

   *note TrillPitchAccidental::, *note TrillPitchGroup:: and *note
TrillPitchHead::.

   ‘Pitched_trill_engraver’ is part of the following context(s): *note
CueVoice::, *note DrumVoice::, *note GregorianTranscriptionVoice::,
*note KievanVoice::, *note MensuralVoice::, *note PetrucciVoice::, *note
VaticanaVoice:: and *note Voice::.


File: lilypond-internals.info,  Node: Pure_from_neighbor_engraver,  Next: Repeat_acknowledge_engraver,  Prev: Pitched_trill_engraver,  Up: Engravers and Performers

2.2.93 Pure_from_neighbor_engraver
----------------------------------

Coordinates items that get their pure heights from their neighbors.

   ‘Pure_from_neighbor_engraver’ is part of the following context(s):
*note DrumStaff::, *note GregorianTranscriptionStaff::, *note
KievanStaff::, *note Lyrics::, *note MensuralStaff::, *note
PetrucciStaff::, *note Staff::, *note TabStaff:: and *note
VaticanaStaff::.


File: lilypond-internals.info,  Node: Repeat_acknowledge_engraver,  Next: Repeat_tie_engraver,  Prev: Pure_from_neighbor_engraver,  Up: Engravers and Performers

2.2.94 Repeat_acknowledge_engraver
----------------------------------

Acknowledge repeated music, and convert the contents of ‘repeatCommands’
into an appropriate setting for ‘whichBar’.

   Properties (read)

     ‘doubleRepeatSegnoType’ (string)
          Set the default bar line for the combinations double repeat
          with segno.  Default is ‘:|.S.|:’.

     ‘doubleRepeatType’ (string)
          Set the default bar line for double repeats.

     ‘endRepeatSegnoType’ (string)
          Set the default bar line for the combinations ending of repeat
          with segno.  Default is ‘:|.S’.

     ‘endRepeatType’ (string)
          Set the default bar line for the ending of repeats.

     ‘repeatCommands’ (list)
          This property is a list of commands of the form ‘(list 'volta
          X)’, where X is a string or ‘#f’.  ‘'end-repeat’ is also
          accepted as a command.

     ‘segnoType’ (string)
          Set the default bar line for a requested segno.  Default is
          ‘S’.

     ‘startRepeatSegnoType’ (string)
          Set the default bar line for the combinations beginning of
          repeat with segno.  Default is ‘S.|:’.

     ‘startRepeatType’ (string)
          Set the default bar line for the beginning of repeats.

     ‘whichBar’ (string)
          This property is read to determine what type of bar line to
          create.

          Example:

               \set Staff.whichBar = ".|:"

          This will create a start-repeat bar in this staff only.  Valid
          values are described in ‘scm/bar-line.scm’.

   ‘Repeat_acknowledge_engraver’ is part of the following context(s):
*note Score::.


File: lilypond-internals.info,  Node: Repeat_tie_engraver,  Next: Rest_collision_engraver,  Prev: Repeat_acknowledge_engraver,  Up: Engravers and Performers

2.2.95 Repeat_tie_engraver
--------------------------

Create repeat ties.

   Music types accepted:

   *note repeat-tie-event::

   This engraver creates the following layout object(s):

   *note RepeatTie:: and *note RepeatTieColumn::.

   ‘Repeat_tie_engraver’ is part of the following context(s): *note
CueVoice::, *note DrumVoice::, *note GregorianTranscriptionVoice::,
*note KievanVoice::, *note MensuralVoice::, *note PetrucciVoice::, *note
TabVoice::, *note VaticanaVoice:: and *note Voice::.


File: lilypond-internals.info,  Node: Rest_collision_engraver,  Next: Rest_engraver,  Prev: Repeat_tie_engraver,  Up: Engravers and Performers

2.2.96 Rest_collision_engraver
------------------------------

Handle collisions of rests.

   Properties (read)

     ‘busyGrobs’ (list)
          A queue of ‘(END-MOMENT . GROB)’ cons cells.  This is for
          internal (C++) use only.  This property contains the grobs
          which are still busy (e.g.  note heads, spanners, etc.).

   This engraver creates the following layout object(s):

   *note RestCollision::.

   ‘Rest_collision_engraver’ is part of the following context(s): *note
DrumStaff::, *note GregorianTranscriptionStaff::, *note KievanStaff::,
*note MensuralStaff::, *note PetrucciStaff::, *note Staff::, *note
TabStaff:: and *note VaticanaStaff::.


File: lilypond-internals.info,  Node: Rest_engraver,  Next: Rhythmic_column_engraver,  Prev: Rest_collision_engraver,  Up: Engravers and Performers

2.2.97 Rest_engraver
--------------------

Engrave rests.

   Music types accepted:

   *note rest-event::

   Properties (read)

     ‘middleCPosition’ (number)
          The place of the middle C, measured in half staff-spaces.
          Usually determined by looking at ‘middleCClefPosition’ and
          ‘middleCOffset’.

   This engraver creates the following layout object(s):

   *note Rest::.

   ‘Rest_engraver’ is part of the following context(s): *note
CueVoice::, *note DrumVoice::, *note GregorianTranscriptionVoice::,
*note KievanVoice::, *note MensuralVoice::, *note PetrucciVoice::, *note
TabVoice::, *note VaticanaVoice:: and *note Voice::.


File: lilypond-internals.info,  Node: Rhythmic_column_engraver,  Next: Script_column_engraver,  Prev: Rest_engraver,  Up: Engravers and Performers

2.2.98 Rhythmic_column_engraver
-------------------------------

Generate ‘NoteColumn’, an object that groups stems, note heads, and
rests.

   This engraver creates the following layout object(s):

   *note NoteColumn::.

   ‘Rhythmic_column_engraver’ is part of the following context(s): *note
CueVoice::, *note DrumVoice::, *note GregorianTranscriptionVoice::,
*note KievanVoice::, *note MensuralVoice::, *note PetrucciVoice::, *note
TabVoice::, *note VaticanaVoice:: and *note Voice::.


File: lilypond-internals.info,  Node: Script_column_engraver,  Next: Script_engraver,  Prev: Rhythmic_column_engraver,  Up: Engravers and Performers

2.2.99 Script_column_engraver
-----------------------------

Find potentially colliding scripts and put them into a ‘ScriptColumn’
object; that will fix the collisions.

   This engraver creates the following layout object(s):

   *note ScriptColumn::.

   ‘Script_column_engraver’ is part of the following context(s): *note
CueVoice::, *note DrumVoice::, *note GregorianTranscriptionVoice::,
*note KievanVoice::, *note MensuralVoice::, *note PetrucciVoice::, *note
TabVoice::, *note VaticanaVoice:: and *note Voice::.


File: lilypond-internals.info,  Node: Script_engraver,  Next: Script_row_engraver,  Prev: Script_column_engraver,  Up: Engravers and Performers

2.2.100 Script_engraver
-----------------------

Handle note scripted articulations.

   Music types accepted:

   *note articulation-event::

   Properties (read)

     ‘scriptDefinitions’ (list)
          The description of scripts.  This is used by the
          ‘Script_engraver’ for typesetting note-superscripts and
          subscripts.  See ‘scm/script.scm’ for more information.

   This engraver creates the following layout object(s):

   *note Script::.

   ‘Script_engraver’ is part of the following context(s): *note
CueVoice::, *note DrumVoice::, *note Dynamics::, *note
GregorianTranscriptionVoice::, *note KievanVoice::, *note
MensuralVoice::, *note PetrucciVoice::, *note TabVoice::, *note
VaticanaVoice:: and *note Voice::.


File: lilypond-internals.info,  Node: Script_row_engraver,  Next: Separating_line_group_engraver,  Prev: Script_engraver,  Up: Engravers and Performers

2.2.101 Script_row_engraver
---------------------------

Determine order in horizontal side position elements.

   This engraver creates the following layout object(s):

   *note ScriptRow::.

   ‘Script_row_engraver’ is part of the following context(s): *note
DrumStaff::, *note GregorianTranscriptionStaff::, *note KievanStaff::,
*note MensuralStaff::, *note PetrucciStaff::, *note Staff::, *note
TabStaff:: and *note VaticanaStaff::.


File: lilypond-internals.info,  Node: Separating_line_group_engraver,  Next: Slash_repeat_engraver,  Prev: Script_row_engraver,  Up: Engravers and Performers

2.2.102 Separating_line_group_engraver
--------------------------------------

Generate objects for computing spacing parameters.

   Properties (read)

     ‘createSpacing’ (boolean)
          Create ‘StaffSpacing’ objects?  Should be set for staves.

   Properties (write)

     ‘hasStaffSpacing’ (boolean)
          True if the current ‘CommandColumn’ contains items that will
          affect spacing.

   This engraver creates the following layout object(s):

   *note StaffSpacing::.

   ‘Separating_line_group_engraver’ is part of the following context(s):
*note ChordNames::, *note DrumStaff::, *note FiguredBass::, *note
FretBoards::, *note GregorianTranscriptionStaff::, *note KievanStaff::,
*note MensuralStaff::, *note NoteNames::, *note PetrucciStaff::, *note
RhythmicStaff::, *note Staff::, *note TabStaff:: and *note
VaticanaStaff::.


File: lilypond-internals.info,  Node: Slash_repeat_engraver,  Next: Slur_engraver,  Prev: Separating_line_group_engraver,  Up: Engravers and Performers

2.2.103 Slash_repeat_engraver
-----------------------------

Make beat repeats.

   Music types accepted:

   *note repeat-slash-event::

   This engraver creates the following layout object(s):

   *note DoubleRepeatSlash:: and *note RepeatSlash::.

   ‘Slash_repeat_engraver’ is part of the following context(s): *note
CueVoice::, *note DrumVoice::, *note GregorianTranscriptionVoice::,
*note KievanVoice::, *note MensuralVoice::, *note PetrucciVoice::, *note
TabVoice::, *note VaticanaVoice:: and *note Voice::.


File: lilypond-internals.info,  Node: Slur_engraver,  Next: Slur_performer,  Prev: Slash_repeat_engraver,  Up: Engravers and Performers

2.2.104 Slur_engraver
---------------------

Build slur grobs from slur events.

   Music types accepted:

   *note note-event:: and *note slur-event::

   Properties (read)

     ‘doubleSlurs’ (boolean)
          If set, two slurs are created for every slurred note, one
          above and one below the chord.

     ‘slurMelismaBusy’ (boolean)
          Signal if a slur is present.

   This engraver creates the following layout object(s):

   *note Slur::.

   ‘Slur_engraver’ is part of the following context(s): *note
CueVoice::, *note DrumVoice::, *note GregorianTranscriptionVoice::,
*note KievanVoice::, *note NullVoice::, *note PetrucciVoice::, *note
TabVoice:: and *note Voice::.


File: lilypond-internals.info,  Node: Slur_performer,  Next: Spacing_engraver,  Prev: Slur_engraver,  Up: Engravers and Performers

2.2.105 Slur_performer
----------------------

Music types accepted:

   *note slur-event::

   ‘Slur_performer’ is not part of any context.


File: lilypond-internals.info,  Node: Spacing_engraver,  Next: Span_arpeggio_engraver,  Prev: Slur_performer,  Up: Engravers and Performers

2.2.106 Spacing_engraver
------------------------

Make a ‘SpacingSpanner’ and do bookkeeping of shortest starting and
playing notes.

   Music types accepted:

   *note spacing-section-event::

   Properties (read)

     ‘currentCommandColumn’ (graphical (layout) object)
          Grob that is X-parent to all current breakable (clef, key
          signature, etc.)  items.

     ‘currentMusicalColumn’ (graphical (layout) object)
          Grob that is X-parent to all non-breakable items (note heads,
          lyrics, etc.).

     ‘proportionalNotationDuration’ (moment)
          Global override for shortest-playing duration.  This is used
          for switching on proportional notation.

   This engraver creates the following layout object(s):

   *note SpacingSpanner::.

   ‘Spacing_engraver’ is part of the following context(s): *note
Score::.


File: lilypond-internals.info,  Node: Span_arpeggio_engraver,  Next: Span_bar_engraver,  Prev: Spacing_engraver,  Up: Engravers and Performers

2.2.107 Span_arpeggio_engraver
------------------------------

Make arpeggios that span multiple staves.

   Properties (read)

     ‘connectArpeggios’ (boolean)
          If set, connect arpeggios across piano staff.

   This engraver creates the following layout object(s):

   *note Arpeggio::.

   ‘Span_arpeggio_engraver’ is part of the following context(s): *note
GrandStaff::, *note PianoStaff:: and *note StaffGroup::.


File: lilypond-internals.info,  Node: Span_bar_engraver,  Next: Span_bar_stub_engraver,  Prev: Span_arpeggio_engraver,  Up: Engravers and Performers

2.2.108 Span_bar_engraver
-------------------------

Make cross-staff bar lines: It catches all normal bar lines and draws a
single span bar across them.

   This engraver creates the following layout object(s):

   *note SpanBar::.

   ‘Span_bar_engraver’ is part of the following context(s): *note
GrandStaff::, *note PianoStaff:: and *note StaffGroup::.


File: lilypond-internals.info,  Node: Span_bar_stub_engraver,  Next: Span_stem_engraver,  Prev: Span_bar_engraver,  Up: Engravers and Performers

2.2.109 Span_bar_stub_engraver
------------------------------

Make stubs for span bars in all contexts that the span bars cross.

   This engraver creates the following layout object(s):

   *note SpanBarStub::.

   ‘Span_bar_stub_engraver’ is part of the following context(s): *note
GrandStaff::, *note PianoStaff:: and *note StaffGroup::.


File: lilypond-internals.info,  Node: Span_stem_engraver,  Next: Spanner_break_forbid_engraver,  Prev: Span_bar_stub_engraver,  Up: Engravers and Performers

2.2.110 Span_stem_engraver
--------------------------

Connect cross-staff stems to the stems above in the system

   This engraver creates the following layout object(s):

   *note Stem::.

   ‘Span_stem_engraver’ is not part of any context.


File: lilypond-internals.info,  Node: Spanner_break_forbid_engraver,  Next: Staff_collecting_engraver,  Prev: Span_stem_engraver,  Up: Engravers and Performers

2.2.111 Spanner_break_forbid_engraver
-------------------------------------

Forbid breaks in certain spanners.

   ‘Spanner_break_forbid_engraver’ is part of the following context(s):
*note CueVoice::, *note DrumVoice::, *note
GregorianTranscriptionVoice::, *note KievanVoice::, *note
MensuralVoice::, *note PetrucciVoice::, *note TabVoice::, *note
VaticanaVoice:: and *note Voice::.


File: lilypond-internals.info,  Node: Staff_collecting_engraver,  Next: Staff_performer,  Prev: Spanner_break_forbid_engraver,  Up: Engravers and Performers

2.2.112 Staff_collecting_engraver
---------------------------------

Maintain the ‘stavesFound’ variable.

   Properties (read)

     ‘stavesFound’ (list of grobs)
          A list of all staff-symbols found.

   Properties (write)

     ‘stavesFound’ (list of grobs)
          A list of all staff-symbols found.

   ‘Staff_collecting_engraver’ is part of the following context(s):
*note DrumStaff::, *note GregorianTranscriptionStaff::, *note
KievanStaff::, *note MensuralStaff::, *note PetrucciStaff::, *note
Score::, *note Staff::, *note TabStaff:: and *note VaticanaStaff::.


File: lilypond-internals.info,  Node: Staff_performer,  Next: Staff_symbol_engraver,  Prev: Staff_collecting_engraver,  Up: Engravers and Performers

2.2.113 Staff_performer
-----------------------

‘Staff_performer’ is not part of any context.


File: lilypond-internals.info,  Node: Staff_symbol_engraver,  Next: Stanza_number_align_engraver,  Prev: Staff_performer,  Up: Engravers and Performers

2.2.114 Staff_symbol_engraver
-----------------------------

Create the constellation of five (default) staff lines.

   Music types accepted:

   *note staff-span-event::

   This engraver creates the following layout object(s):

   *note StaffSymbol::.

   ‘Staff_symbol_engraver’ is part of the following context(s): *note
DrumStaff::, *note GregorianTranscriptionStaff::, *note KievanStaff::,
*note MensuralStaff::, *note PetrucciStaff::, *note RhythmicStaff::,
*note Staff::, *note TabStaff:: and *note VaticanaStaff::.


File: lilypond-internals.info,  Node: Stanza_number_align_engraver,  Next: Stanza_number_engraver,  Prev: Staff_symbol_engraver,  Up: Engravers and Performers

2.2.115 Stanza_number_align_engraver
------------------------------------

This engraver ensures that stanza numbers are neatly aligned.

   ‘Stanza_number_align_engraver’ is part of the following context(s):
*note Score::.


File: lilypond-internals.info,  Node: Stanza_number_engraver,  Next: Stem_engraver,  Prev: Stanza_number_align_engraver,  Up: Engravers and Performers

2.2.116 Stanza_number_engraver
------------------------------

Engrave stanza numbers.

   Properties (read)

     ‘stanza’ (markup)
          Stanza ‘number’ to print before the start of a verse.  Use in
          ‘Lyrics’ context.

   This engraver creates the following layout object(s):

   *note StanzaNumber::.

   ‘Stanza_number_engraver’ is part of the following context(s): *note
Lyrics::.


File: lilypond-internals.info,  Node: Stem_engraver,  Next: System_start_delimiter_engraver,  Prev: Stanza_number_engraver,  Up: Engravers and Performers

2.2.117 Stem_engraver
---------------------

Create stems, flags and single-stem tremolos.  It also works together
with the beam engraver for overriding beaming.

   Music types accepted:

   *note tremolo-event:: and *note tuplet-span-event::

   Properties (read)

     ‘stemLeftBeamCount’ (integer)
          Specify the number of beams to draw on the left side of the
          next note.  Overrides automatic beaming.  The value is only
          used once, and then it is erased.

     ‘stemRightBeamCount’ (integer)
          See ‘stemLeftBeamCount’.

     ‘whichBar’ (string)
          This property is read to determine what type of bar line to
          create.

          Example:

               \set Staff.whichBar = ".|:"

          This will create a start-repeat bar in this staff only.  Valid
          values are described in ‘scm/bar-line.scm’.

   This engraver creates the following layout object(s):

   *note Flag::, *note Stem::, *note StemStub:: and *note StemTremolo::.

   ‘Stem_engraver’ is part of the following context(s): *note
CueVoice::, *note DrumVoice::, *note GregorianTranscriptionVoice::,
*note KievanVoice::, *note MensuralVoice::, *note PetrucciVoice::, *note
TabVoice:: and *note Voice::.


File: lilypond-internals.info,  Node: System_start_delimiter_engraver,  Next: Tab_note_heads_engraver,  Prev: Stem_engraver,  Up: Engravers and Performers

2.2.118 System_start_delimiter_engraver
---------------------------------------

Create a system start delimiter (i.e., a ‘SystemStartBar’,
‘SystemStartBrace’, ‘SystemStartBracket’ or ‘SystemStartSquare’
spanner).

   Properties (read)

     ‘currentCommandColumn’ (graphical (layout) object)
          Grob that is X-parent to all current breakable (clef, key
          signature, etc.)  items.

     ‘systemStartDelimiter’ (symbol)
          Which grob to make for the start of the system/staff?  Set to
          ‘SystemStartBrace’, ‘SystemStartBracket’ or ‘SystemStartBar’.

     ‘systemStartDelimiterHierarchy’ (pair)
          A nested list, indicating the nesting of a start delimiters.

   This engraver creates the following layout object(s):

   *note SystemStartBar::, *note SystemStartBrace::, *note
SystemStartBracket:: and *note SystemStartSquare::.

   ‘System_start_delimiter_engraver’ is part of the following
context(s): *note ChoirStaff::, *note GrandStaff::, *note PianoStaff::,
*note Score:: and *note StaffGroup::.


File: lilypond-internals.info,  Node: Tab_note_heads_engraver,  Next: Tab_staff_symbol_engraver,  Prev: System_start_delimiter_engraver,  Up: Engravers and Performers

2.2.119 Tab_note_heads_engraver
-------------------------------

Generate one or more tablature note heads from event of type
‘NoteEvent’.

   Music types accepted:

   *note fingering-event::, *note note-event:: and *note
string-number-event::

   Properties (read)

     ‘defaultStrings’ (list)
          A list of strings to use in calculating frets for tablatures
          and fretboards if no strings are provided in the notes for the
          current moment.

     ‘fretLabels’ (list)
          A list of strings or Scheme-formatted markups containing, in
          the correct order, the labels to be used for lettered frets in
          tablature.

     ‘highStringOne’ (boolean)
          Whether the first string is the string with highest pitch on
          the instrument.  This used by the automatic string selector
          for tablature notation.

     ‘middleCPosition’ (number)
          The place of the middle C, measured in half staff-spaces.
          Usually determined by looking at ‘middleCClefPosition’ and
          ‘middleCOffset’.

     ‘minimumFret’ (number)
          The tablature auto string-selecting mechanism selects the
          highest string with a fret at least ‘minimumFret’.

     ‘noteToFretFunction’ (procedure)
          Convert list of notes and list of defined strings to full list
          of strings and fret numbers.  Parameters: The context, a list
          of note events, a list of tabstring events, and the fretboard
          grob if a fretboard is desired.

     ‘stringOneTopmost’ (boolean)
          Whether the first string is printed on the top line of the
          tablature.

     ‘stringTunings’ (list)
          The tablature strings tuning.  It is a list of the pitches of
          each string (starting with the lowest numbered one).

     ‘tablatureFormat’ (procedure)
          A function formatting a tablature note head.  Called with
          three arguments: context, string number and, fret number.  It
          returns the text as a markup.

     ‘tabStaffLineLayoutFunction’ (procedure)
          A function determining the staff position of a tablature note
          head.  Called with two arguments: the context and the string.

   This engraver creates the following layout object(s):

   *note TabNoteHead::.

   ‘Tab_note_heads_engraver’ is part of the following context(s): *note
TabVoice::.


File: lilypond-internals.info,  Node: Tab_staff_symbol_engraver,  Next: Tab_tie_follow_engraver,  Prev: Tab_note_heads_engraver,  Up: Engravers and Performers

2.2.120 Tab_staff_symbol_engraver
---------------------------------

Create a tablature staff symbol, but look at ‘stringTunings’ for the
number of lines.

   Properties (read)

     ‘stringTunings’ (list)
          The tablature strings tuning.  It is a list of the pitches of
          each string (starting with the lowest numbered one).

   This engraver creates the following layout object(s):

   *note StaffSymbol::.

   ‘Tab_staff_symbol_engraver’ is part of the following context(s):
*note TabStaff::.


File: lilypond-internals.info,  Node: Tab_tie_follow_engraver,  Next: Tempo_performer,  Prev: Tab_staff_symbol_engraver,  Up: Engravers and Performers

2.2.121 Tab_tie_follow_engraver
-------------------------------

Adjust TabNoteHead properties when a tie is followed by a slur or
glissando.

   ‘Tab_tie_follow_engraver’ is part of the following context(s): *note
TabVoice::.


File: lilypond-internals.info,  Node: Tempo_performer,  Next: Text_engraver,  Prev: Tab_tie_follow_engraver,  Up: Engravers and Performers

2.2.122 Tempo_performer
-----------------------

Properties (read)

     ‘tempoWholesPerMinute’ (moment)
          The tempo in whole notes per minute.

   ‘Tempo_performer’ is not part of any context.


File: lilypond-internals.info,  Node: Text_engraver,  Next: Text_spanner_engraver,  Prev: Tempo_performer,  Up: Engravers and Performers

2.2.123 Text_engraver
---------------------

Create text scripts.

   Music types accepted:

   *note text-script-event::

   This engraver creates the following layout object(s):

   *note TextScript::.

   ‘Text_engraver’ is part of the following context(s): *note
CueVoice::, *note DrumVoice::, *note Dynamics::, *note
GregorianTranscriptionVoice::, *note KievanVoice::, *note
MensuralVoice::, *note PetrucciVoice::, *note TabVoice::, *note
VaticanaVoice:: and *note Voice::.


File: lilypond-internals.info,  Node: Text_spanner_engraver,  Next: Tie_engraver,  Prev: Text_engraver,  Up: Engravers and Performers

2.2.124 Text_spanner_engraver
-----------------------------

Create text spanner from an event.

   Music types accepted:

   *note text-span-event::

   Properties (read)

     ‘currentMusicalColumn’ (graphical (layout) object)
          Grob that is X-parent to all non-breakable items (note heads,
          lyrics, etc.).

   This engraver creates the following layout object(s):

   *note TextSpanner::.

   ‘Text_spanner_engraver’ is part of the following context(s): *note
CueVoice::, *note DrumVoice::, *note Dynamics::, *note
GregorianTranscriptionVoice::, *note KievanVoice::, *note
MensuralVoice::, *note PetrucciVoice::, *note TabVoice:: and *note
Voice::.


File: lilypond-internals.info,  Node: Tie_engraver,  Next: Tie_performer,  Prev: Text_spanner_engraver,  Up: Engravers and Performers

2.2.125 Tie_engraver
--------------------

Generate ties between note heads of equal pitch.

   Music types accepted:

   *note tie-event::

   Properties (read)

     ‘skipTypesetting’ (boolean)
          If true, no typesetting is done, speeding up the
          interpretation phase.  Useful for debugging large scores.

     ‘tieWaitForNote’ (boolean)
          If true, tied notes do not have to follow each other directly.
          This can be used for writing out arpeggios.

   Properties (write)

     ‘tieMelismaBusy’ (boolean)
          Signal whether a tie is present.

   This engraver creates the following layout object(s):

   *note Tie:: and *note TieColumn::.

   ‘Tie_engraver’ is part of the following context(s): *note CueVoice::,
*note DrumVoice::, *note GregorianTranscriptionVoice::, *note
KievanVoice::, *note MensuralVoice::, *note NoteNames::, *note
NullVoice::, *note PetrucciVoice::, *note TabVoice::, *note
VaticanaVoice:: and *note Voice::.


File: lilypond-internals.info,  Node: Tie_performer,  Next: Time_signature_engraver,  Prev: Tie_engraver,  Up: Engravers and Performers

2.2.126 Tie_performer
---------------------

Generate ties between note heads of equal pitch.

   Music types accepted:

   *note tie-event::

   Properties (read)

     ‘tieWaitForNote’ (boolean)
          If true, tied notes do not have to follow each other directly.
          This can be used for writing out arpeggios.

   Properties (write)

     ‘tieMelismaBusy’ (boolean)
          Signal whether a tie is present.

   ‘Tie_performer’ is not part of any context.


File: lilypond-internals.info,  Node: Time_signature_engraver,  Next: Time_signature_performer,  Prev: Tie_performer,  Up: Engravers and Performers

2.2.127 Time_signature_engraver
-------------------------------

Create a *note TimeSignature:: whenever ‘timeSignatureFraction’ changes.

   Music types accepted:

   *note time-signature-event::

   Properties (read)

     ‘initialTimeSignatureVisibility’ (vector)
          break visibility for the initial time signature.

     ‘partialBusy’ (boolean)
          Signal that \partial acts at the current timestep.

     ‘timeSignatureFraction’ (fraction, as pair)
          A pair of numbers, signifying the time signature.  For
          example, ‘'(4 . 4)’ is a 4/4 time signature.

   This engraver creates the following layout object(s):

   *note TimeSignature::.

   ‘Time_signature_engraver’ is part of the following context(s): *note
DrumStaff::, *note GregorianTranscriptionStaff::, *note MensuralStaff::,
*note PetrucciStaff::, *note RhythmicStaff::, *note Staff:: and *note
TabStaff::.


File: lilypond-internals.info,  Node: Time_signature_performer,  Next: Timing_translator,  Prev: Time_signature_engraver,  Up: Engravers and Performers

2.2.128 Time_signature_performer
--------------------------------

‘Time_signature_performer’ is not part of any context.


File: lilypond-internals.info,  Node: Timing_translator,  Next: Trill_spanner_engraver,  Prev: Time_signature_performer,  Up: Engravers and Performers

2.2.129 Timing_translator
-------------------------

This engraver adds the alias ‘Timing’ to its containing context.
Responsible for synchronizing timing information from staves.  Normally
in ‘Score’.  In order to create polyrhythmic music, this engraver should
be removed from ‘Score’ and placed in ‘Staff’.

   Properties (read)

     ‘baseMoment’ (moment)
          Smallest unit of time that will stand on its own as a
          subdivided section.

     ‘currentBarNumber’ (integer)
          Contains the current barnumber.  This property is incremented
          at every bar line.

     ‘internalBarNumber’ (integer)
          Contains the current barnumber.  This property is used for
          internal timekeeping, among others by the
          ‘Accidental_engraver’.

     ‘measureLength’ (moment)
          Length of one measure in the current time signature.

     ‘measurePosition’ (moment)
          How much of the current measure have we had.  This can be set
          manually to create incomplete measures.

     ‘timeSignatureFraction’ (fraction, as pair)
          A pair of numbers, signifying the time signature.  For
          example, ‘'(4 . 4)’ is a 4/4 time signature.

   Properties (write)

     ‘baseMoment’ (moment)
          Smallest unit of time that will stand on its own as a
          subdivided section.

     ‘currentBarNumber’ (integer)
          Contains the current barnumber.  This property is incremented
          at every bar line.

     ‘internalBarNumber’ (integer)
          Contains the current barnumber.  This property is used for
          internal timekeeping, among others by the
          ‘Accidental_engraver’.

     ‘measureLength’ (moment)
          Length of one measure in the current time signature.

     ‘measurePosition’ (moment)
          How much of the current measure have we had.  This can be set
          manually to create incomplete measures.

     ‘timeSignatureFraction’ (fraction, as pair)
          A pair of numbers, signifying the time signature.  For
          example, ‘'(4 . 4)’ is a 4/4 time signature.

   ‘Timing_translator’ is part of the following context(s): *note
Score::.


File: lilypond-internals.info,  Node: Trill_spanner_engraver,  Next: Tuplet_engraver,  Prev: Timing_translator,  Up: Engravers and Performers

2.2.130 Trill_spanner_engraver
------------------------------

Create trill spanner from an event.

   Music types accepted:

   *note trill-span-event::

   Properties (read)

     ‘currentCommandColumn’ (graphical (layout) object)
          Grob that is X-parent to all current breakable (clef, key
          signature, etc.)  items.

     ‘currentMusicalColumn’ (graphical (layout) object)
          Grob that is X-parent to all non-breakable items (note heads,
          lyrics, etc.).

   This engraver creates the following layout object(s):

   *note TrillSpanner::.

   ‘Trill_spanner_engraver’ is part of the following context(s): *note
CueVoice::, *note DrumVoice::, *note GregorianTranscriptionVoice::,
*note KievanVoice::, *note MensuralVoice::, *note PetrucciVoice::, *note
TabVoice::, *note VaticanaVoice:: and *note Voice::.


File: lilypond-internals.info,  Node: Tuplet_engraver,  Next: Tweak_engraver,  Prev: Trill_spanner_engraver,  Up: Engravers and Performers

2.2.131 Tuplet_engraver
-----------------------

Catch tuplet events and generate appropriate bracket.

   Music types accepted:

   *note tuplet-span-event::

   Properties (read)

     ‘tupletFullLength’ (boolean)
          If set, the tuplet is printed up to the start of the next
          note.

     ‘tupletFullLengthNote’ (boolean)
          If set, end at the next note, otherwise end on the matter
          (time signatures, etc.)  before the note.

   This engraver creates the following layout object(s):

   *note TupletBracket:: and *note TupletNumber::.

   ‘Tuplet_engraver’ is part of the following context(s): *note
CueVoice::, *note DrumVoice::, *note GregorianTranscriptionVoice::,
*note KievanVoice::, *note MensuralVoice::, *note PetrucciVoice::, *note
TabVoice::, *note VaticanaVoice:: and *note Voice::.


File: lilypond-internals.info,  Node: Tweak_engraver,  Next: Vaticana_ligature_engraver,  Prev: Tuplet_engraver,  Up: Engravers and Performers

2.2.132 Tweak_engraver
----------------------

Read the ‘tweaks’ property from the originating event, and set
properties.

   ‘Tweak_engraver’ is part of the following context(s): *note Score::.


File: lilypond-internals.info,  Node: Vaticana_ligature_engraver,  Next: Vertical_align_engraver,  Prev: Tweak_engraver,  Up: Engravers and Performers

2.2.133 Vaticana_ligature_engraver
----------------------------------

Handle ligatures by glueing special ligature heads together.

   Music types accepted:

   *note ligature-event:: and *note pes-or-flexa-event::

   This engraver creates the following layout object(s):

   *note DotColumn:: and *note VaticanaLigature::.

   ‘Vaticana_ligature_engraver’ is part of the following context(s):
*note VaticanaVoice::.


File: lilypond-internals.info,  Node: Vertical_align_engraver,  Next: Volta_engraver,  Prev: Vaticana_ligature_engraver,  Up: Engravers and Performers

2.2.134 Vertical_align_engraver
-------------------------------

Catch groups (staves, lyrics lines, etc.)  and stack them vertically.

   Properties (read)

     ‘alignAboveContext’ (string)
          Where to insert newly created context in vertical alignment.

     ‘alignBelowContext’ (string)
          Where to insert newly created context in vertical alignment.

     ‘hasAxisGroup’ (boolean)
          True if the current context is contained in an axis group.

   This engraver creates the following layout object(s):

   *note VerticalAlignment::.

   ‘Vertical_align_engraver’ is part of the following context(s): *note
ChoirStaff::, *note GrandStaff::, *note PianoStaff::, *note Score:: and
*note StaffGroup::.


File: lilypond-internals.info,  Node: Volta_engraver,  Prev: Vertical_align_engraver,  Up: Engravers and Performers

2.2.135 Volta_engraver
----------------------

Make volta brackets.

   Properties (read)

     ‘repeatCommands’ (list)
          This property is a list of commands of the form ‘(list 'volta
          X)’, where X is a string or ‘#f’.  ‘'end-repeat’ is also
          accepted as a command.

     ‘stavesFound’ (list of grobs)
          A list of all staff-symbols found.

     ‘voltaSpannerDuration’ (moment)
          This specifies the maximum duration to use for the brackets
          printed for ‘\alternative’.  This can be used to shrink the
          length of brackets in the situation where one alternative is
          very large.

   This engraver creates the following layout object(s):

   *note VoltaBracket:: and *note VoltaBracketSpanner::.

   ‘Volta_engraver’ is part of the following context(s): *note Score::.


File: lilypond-internals.info,  Node: Tunable context properties,  Next: Internal context properties,  Prev: Engravers and Performers,  Up: Translation

2.3 Tunable context properties
==============================

‘accidentalGrouping’ (symbol)
     If set to ‘'voice’, accidentals on the same note in different
     octaves may be horizontally staggered if in different voices.

‘additionalBassStrings’ (list)
     The additional tablature bass-strings, which will not get a seprate
     line in TabStaff.  It is a list of the pitches of each string
     (starting with the lowest numbered one).

‘additionalPitchPrefix’ (string)
     Text with which to prefix additional pitches within a chord name.

‘aDueText’ (markup)
     Text to print at a unisono passage.

‘alignAboveContext’ (string)
     Where to insert newly created context in vertical alignment.

‘alignBassFigureAccidentals’ (boolean)
     If true, then the accidentals are aligned in bass figure context.

‘alignBelowContext’ (string)
     Where to insert newly created context in vertical alignment.

‘alternativeNumberingStyle’ (symbol)
     The style of an alternative’s bar numbers.  Can be ‘numbers’ for
     going back to the same number or ‘numbers-with-letters’ for going
     back to the same number with letter suffixes.  No setting will not
     go back in measure-number time.

‘alternativeRestores’ (symbol list)
     Timing variables that are restored to their value at the start of
     the first alternative in subsequent alternatives.

‘associatedVoice’ (string)
     Name of the context (see ‘associatedVoiceType’ for its type,
     usually ‘Voice’) that has the melody for this ‘Lyrics’ line.

‘associatedVoiceType’ (symbol)
     Type of the context that has the melody for this ‘Lyrics’ line.

‘autoAccidentals’ (list)
     List of different ways to typeset an accidental.

     For determining when to print an accidental, several different
     rules are tried.  The rule that gives the highest number of
     accidentals is used.

     Each entry in the list is either a symbol or a procedure.

     SYMBOL
          The symbol is the name of the context in which the following
          rules are to be applied.  For example, if CONTEXT is *note
          (lilypond-internals)Score:: then all staves share accidentals,
          and if CONTEXT is *note (lilypond-internals)Staff:: then all
          voices in the same staff share accidentals, but staves do not.

     PROCEDURE
          The procedure represents an accidental rule to be applied to
          the previously specified context.

          The procedure takes the following arguments:

          ‘context’
               The current context to which the rule should be applied.

          ‘pitch’
               The pitch of the note to be evaluated.

          ‘barnum’
               The current bar number.

          ‘measurepos’
               The current measure position.

          The procedure returns a pair of booleans.  The first states
          whether an extra natural should be added.  The second states
          whether an accidental should be printed.  ‘(#t . #f)’ does not
          make sense.

‘autoBeamCheck’ (procedure)
     A procedure taking three arguments, CONTEXT, DIR [start/stop (-1 or
     1)], and TEST [shortest note in the beam].  A non-‘#f’ return value
     starts or stops the auto beam.

‘autoBeaming’ (boolean)
     If set to true then beams are generated automatically.

‘autoCautionaries’ (list)
     List similar to ‘autoAccidentals’, but it controls cautionary
     accidentals rather than normal ones.  Both lists are tried, and the
     one giving the most accidentals wins.  In case of draw, a normal
     accidental is typeset.

‘automaticBars’ (boolean)
     If set to false then bar lines will not be printed automatically;
     they must be explicitly created with a ‘\bar’ command.  Unlike the
     ‘\cadenzaOn’ keyword, measures are still counted.  Bar line
     generation will resume according to that count if this property is
     unset.

‘barAlways’ (boolean)
     If set to true a bar line is drawn after each note.

‘barCheckSynchronize’ (boolean)
     If true then reset ‘measurePosition’ when finding a bar check.

‘barNumberFormatter’ (procedure)
     A procedure that takes a bar number, measure position, and
     alternative number and returns a markup of the bar number to print.

‘barNumberVisibility’ (procedure)
     A procedure that takes a bar number and a measure position and
     returns whether the corresponding bar number should be printed.
     Note that the actual print-out of bar numbers is controlled with
     the ‘break-visibility’ property.

     The following procedures are predefined:

     ‘all-bar-numbers-visible’
          Enable bar numbers for all bars, including the first one and
          broken bars (which get bar numbers in parentheses).

     ‘first-bar-number-invisible’
          Enable bar numbers for all bars (including broken bars) except
          the first one.  If the first bar is broken, it doesn’t get a
          bar number either.

     ‘first-bar-number-invisible-save-broken-bars’
          Enable bar numbers for all bars (including broken bars) except
          the first one.  A broken first bar gets a bar number.

     ‘first-bar-number-invisible-and-no-parenthesized-bar-numbers’
          Enable bar numbers for all bars except the first bar and
          broken bars.  This is the default.

     ‘(every-nth-bar-number-visible N)’
          Assuming N is value 2, for example, this enables bar numbers
          for bars 2, 4, 6, etc.

     ‘(modulo-bar-number-visible N M)’
          If bar numbers 1, 4, 7, etc., should be enabled, N (the
          modulo) must be set to 3 and M (the division remainder) to 1.

‘baseMoment’ (moment)
     Smallest unit of time that will stand on its own as a subdivided
     section.

‘bassFigureFormatFunction’ (procedure)
     A procedure that is called to produce the formatting for a
     ‘BassFigure’ grob.  It takes a list of ‘BassFigureEvent’s, a
     context, and the grob to format.

‘beamExceptions’ (list)
     An alist of exceptions to autobeam rules that normally end on
     beats.

‘beamHalfMeasure’ (boolean)
     Whether to allow a beam to begin halfway through the measure in
     triple time, which could look like 6/8.

‘beatStructure’ (list)
     List of ‘baseMoment’s that are combined to make beats.

‘chordChanges’ (boolean)
     Only show changes in chords scheme?

‘chordNameExceptions’ (list)
     An alist of chord exceptions.  Contains ‘(CHORD . MARKUP)’ entries.

‘chordNameExceptionsFull’ (list)
     An alist of full chord exceptions.  Contains ‘(CHORD . MARKUP)’
     entries.

‘chordNameExceptionsPartial’ (list)
     An alist of partial chord exceptions.  Contains ‘(CHORD .
     (PREFIX-MARKUP SUFFIX-MARKUP))’ entries.

‘chordNameFunction’ (procedure)
     The function that converts lists of pitches to chord names.

‘chordNameLowercaseMinor’ (boolean)
     Downcase roots of minor chords?

‘chordNameSeparator’ (markup)
     The markup object used to separate parts of a chord name.

‘chordNoteNamer’ (procedure)
     A function that converts from a pitch object to a text markup.
     Used for single pitches.

‘chordPrefixSpacer’ (number)
     The space added between the root symbol and the prefix of a chord
     name.

‘chordRootNamer’ (procedure)
     A function that converts from a pitch object to a text markup.
     Used for chords.

‘clefGlyph’ (string)
     Name of the symbol within the music font.

‘clefPosition’ (number)
     Where should the center of the clef symbol go, measured in half
     staff spaces from the center of the staff.

‘clefTransposition’ (integer)
     Add this much extra transposition.  Values of 7 and -7 are common.

‘clefTranspositionFormatter’ (procedure)
     A procedure that takes the Transposition number as a string and the
     style as a symbol and returns a markup.

‘clefTranspositionStyle’ (symbol)
     Determines the way the ClefModifier grob is displayed.  Possible
     values are ‘default’, ‘parenthesized’ and ‘bracketed’.

‘completionBusy’ (boolean)
     Whether a completion-note head is playing.

‘completionFactor’ (an exact rational or procedure)
     When ‘Completion_heads_engraver’ and ‘Completion_rest_engraver’
     need to split a note or rest with a scaled duration, such as
     ‘c2*3’, this specifies the scale factor to use for the newly-split
     notes and rests created by the engraver.

     If ‘#f’, the completion engraver uses the scale-factor of each
     duration being split.

     If set to a callback procedure, that procedure is called with the
     context of the completion engraver, and the duration to be split.

‘completionUnit’ (moment)
     Sub-bar unit of completion.

‘connectArpeggios’ (boolean)
     If set, connect arpeggios across piano staff.

‘countPercentRepeats’ (boolean)
     If set, produce counters for percent repeats.

‘createKeyOnClefChange’ (boolean)
     Print a key signature whenever the clef is changed.

‘createSpacing’ (boolean)
     Create ‘StaffSpacing’ objects?  Should be set for staves.

‘crescendoSpanner’ (symbol)
     The type of spanner to be used for crescendi.  Available values are
     ‘hairpin’ and ‘text’.  If unset, a hairpin crescendo is used.

‘crescendoText’ (markup)
     The text to print at start of non-hairpin crescendo, i.e.,
     ‘cresc.’.

‘cueClefGlyph’ (string)
     Name of the symbol within the music font.

‘cueClefPosition’ (number)
     Where should the center of the clef symbol go, measured in half
     staff spaces from the center of the staff.

‘cueClefTransposition’ (integer)
     Add this much extra transposition.  Values of 7 and -7 are common.

‘cueClefTranspositionFormatter’ (procedure)
     A procedure that takes the Transposition number as a string and the
     style as a symbol and returns a markup.

‘cueClefTranspositionStyle’ (symbol)
     Determines the way the ClefModifier grob is displayed.  Possible
     values are ‘default’, ‘parenthesized’ and ‘bracketed’.

‘currentBarNumber’ (integer)
     Contains the current barnumber.  This property is incremented at
     every bar line.

‘decrescendoSpanner’ (symbol)
     The type of spanner to be used for decrescendi.  Available values
     are ‘hairpin’ and ‘text’.  If unset, a hairpin decrescendo is used.

‘decrescendoText’ (markup)
     The text to print at start of non-hairpin decrescendo, i.e.,
     ‘dim.’.

‘defaultBarType’ (string)
     Set the default type of bar line.  See ‘whichBar’ for information
     on available bar types.

     This variable is read by *note
     (lilypond-internals)Timing_translator:: at *note
     (lilypond-internals)Score:: level.

‘defaultStrings’ (list)
     A list of strings to use in calculating frets for tablatures and
     fretboards if no strings are provided in the notes for the current
     moment.

‘doubleRepeatSegnoType’ (string)
     Set the default bar line for the combinations double repeat with
     segno.  Default is ‘:|.S.|:’.

‘doubleRepeatType’ (string)
     Set the default bar line for double repeats.

‘doubleSlurs’ (boolean)
     If set, two slurs are created for every slurred note, one above and
     one below the chord.

‘drumPitchTable’ (hash table)
     A table mapping percussion instruments (symbols) to pitches.

‘drumStyleTable’ (hash table)
     A hash table which maps drums to layout settings.  Predefined
     values: ‘drums-style’, ‘agostini-drums-style’, ‘timbales-style’,
     ‘congas-style’, ‘bongos-style’, and ‘percussion-style’.

     The layout style is a hash table, containing the drum-pitches
     (e.g., the symbol ‘hihat’) as keys, and a list ‘(NOTEHEAD-STYLE
     SCRIPT VERTICAL-POSITION)’ as values.

‘endRepeatSegnoType’ (string)
     Set the default bar line for the combinations ending of repeat with
     segno.  Default is ‘:|.S’.

‘endRepeatType’ (string)
     Set the default bar line for the ending of repeats.

‘explicitClefVisibility’ (vector)
     ‘break-visibility’ function for clef changes.

‘explicitCueClefVisibility’ (vector)
     ‘break-visibility’ function for cue clef changes.

‘explicitKeySignatureVisibility’ (vector)
     ‘break-visibility’ function for explicit key changes.  ‘\override’
     of the ‘break-visibility’ property will set the visibility for
     normal (i.e., at the start of the line) key signatures.

‘extendersOverRests’ (boolean)
     Whether to continue extenders as they cross a rest.

‘extraNatural’ (boolean)
     Whether to typeset an extra natural sign before accidentals that
     reduce the effect of a previous alteration.

‘figuredBassAlterationDirection’ (direction)
     Where to put alterations relative to the main figure.

‘figuredBassCenterContinuations’ (boolean)
     Whether to vertically center pairs of extender lines.  This does
     not work with three or more lines.

‘figuredBassFormatter’ (procedure)
     A routine generating a markup for a bass figure.

‘figuredBassPlusDirection’ (direction)
     Where to put plus signs relative to the main figure.

‘fingeringOrientations’ (list)
     A list of symbols, containing ‘left’, ‘right’, ‘up’ and/or ‘down’.
     This list determines where fingerings are put relative to the chord
     being fingered.

‘firstClef’ (boolean)
     If true, create a new clef when starting a staff.

‘followVoice’ (boolean)
     If set, note heads are tracked across staff switches by a thin
     line.

‘fontSize’ (number)
     The relative size of all grobs in a context.

‘forbidBreak’ (boolean)
     If set to ‘#t’, prevent a line break at this point.

‘forceClef’ (boolean)
     Show clef symbol, even if it has not changed.  Only active for the
     first clef after the property is set, not for the full staff.

‘fretLabels’ (list)
     A list of strings or Scheme-formatted markups containing, in the
     correct order, the labels to be used for lettered frets in
     tablature.

‘glissandoMap’ (list)
     A map in the form of ’((source1 .  target1) (source2 .  target2)
     (sourcen .  targetn)) showing the glissandi to be drawn for note
     columns.  The value ’() will default to ’((0 .  0) (1 .  1) (n .
     n)), where n is the minimal number of note-heads in the two note
     columns between which the glissandi occur.

‘gridInterval’ (moment)
     Interval for which to generate ‘GridPoint’s.

‘handleNegativeFrets’ (symbol)
     How the automatic fret calculator should handle calculated negative
     frets.  Values include ‘'ignore’, to leave them out of the diagram
     completely, ‘'include’, to include them as calculated, and
     ‘'recalculate’, to ignore the specified string and find a string
     where they will fit with a positive fret number.

‘harmonicAccidentals’ (boolean)
     If set, harmonic notes in chords get accidentals.

‘harmonicDots’ (boolean)
     If set, harmonic notes in dotted chords get dots.

‘highStringOne’ (boolean)
     Whether the first string is the string with highest pitch on the
     instrument.  This used by the automatic string selector for
     tablature notation.

‘ignoreBarChecks’ (boolean)
     Ignore bar checks.

‘ignoreFiguredBassRest’ (boolean)
     Don’t swallow rest events.

‘ignoreMelismata’ (boolean)
     Ignore melismata for this *note (lilypond-internals)Lyrics:: line.

‘implicitBassFigures’ (list)
     A list of bass figures that are not printed as numbers, but only as
     extender lines.

‘includeGraceNotes’ (boolean)
     Do not ignore grace notes for *note (lilypond-internals)Lyrics::.

‘initialTimeSignatureVisibility’ (vector)
     break visibility for the initial time signature.

‘instrumentCueName’ (markup)
     The name to print if another instrument is to be taken.

‘instrumentEqualizer’ (procedure)
     A function taking a string (instrument name), and returning a ‘(MIN
     . MAX)’ pair of numbers for the loudness range of the instrument.

‘instrumentName’ (markup)
     The name to print left of a staff.  The ‘instrumentName’ property
     labels the staff in the first system, and the ‘shortInstrumentName’
     property labels following lines.

‘instrumentTransposition’ (pitch)
     Define the transposition of the instrument.  Its value is the pitch
     that sounds when the instrument plays written middle C. This is
     used to transpose the MIDI output, and ‘\quote’s.

‘internalBarNumber’ (integer)
     Contains the current barnumber.  This property is used for internal
     timekeeping, among others by the ‘Accidental_engraver’.

‘keepAliveInterfaces’ (list)
     A list of symbols, signifying grob interfaces that are worth
     keeping a staff with ‘remove-empty’ set around for.

‘keyAlterationOrder’ (list)
     An alist that defines in what order alterations should be printed.
     The format is ‘(STEP . ALTER)’, where STEP is a number from 0 to 6
     and ALTER from -2 (sharp) to 2 (flat).

‘keyAlterations’ (list)
     The current key signature.  This is an alist containing ‘(STEP .
     ALTER)’ or ‘((OCTAVE . STEP) . ALTER)’, where STEP is a number in
     the range 0 to 6 and ALTER a fraction, denoting alteration.  For
     alterations, use symbols, e.g.  ‘keyAlterations = #`((6 . ,FLAT))’.

‘lyricMelismaAlignment’ (number)
     Alignment to use for a melisma syllable.

‘magnifyStaffValue’ (positive number)
     The most recent value set with ‘\magnifyStaff’.

‘majorSevenSymbol’ (markup)
     How should the major 7th be formatted in a chord name?

‘markFormatter’ (procedure)
     A procedure taking as arguments the context and the rehearsal mark.
     It should return the formatted mark as a markup object.

‘maximumFretStretch’ (number)
     Don’t allocate frets further than this from specified frets.

‘measureLength’ (moment)
     Length of one measure in the current time signature.

‘measurePosition’ (moment)
     How much of the current measure have we had.  This can be set
     manually to create incomplete measures.

‘melismaBusyProperties’ (list)
     A list of properties (symbols) to determine whether a melisma is
     playing.  Setting this property will influence how lyrics are
     aligned to notes.  For example, if set to ‘'(melismaBusy
     beamMelismaBusy)’, only manual melismata and manual beams are
     considered.  Possible values include ‘melismaBusy’,
     ‘slurMelismaBusy’, ‘tieMelismaBusy’, and ‘beamMelismaBusy’.

‘metronomeMarkFormatter’ (procedure)
     How to produce a metronome markup.  Called with two arguments: a
     ‘TempoChangeEvent’ and context.

‘middleCClefPosition’ (number)
     The position of the middle C, as determined only by the clef.  This
     can be calculated by looking at ‘clefPosition’ and ‘clefGlyph’.

‘middleCCuePosition’ (number)
     The position of the middle C, as determined only by the clef of the
     cue notes.  This can be calculated by looking at ‘cueClefPosition’
     and ‘cueClefGlyph’.

‘middleCOffset’ (number)
     The offset of middle C from the position given by
     ‘middleCClefPosition’ This is used for ottava brackets.

‘middleCPosition’ (number)
     The place of the middle C, measured in half staff-spaces.  Usually
     determined by looking at ‘middleCClefPosition’ and ‘middleCOffset’.

‘midiBalance’ (number)
     Stereo balance for the MIDI channel associated with the current
     context.  Ranges from -1 to 1, where the values -1 (‘#LEFT’), 0
     (‘#CENTER’) and 1 (‘#RIGHT’) correspond to leftmost emphasis,
     center balance, and rightmost emphasis, respectively.

‘midiChannelMapping’ (symbol)
     How to map MIDI channels: per ‘staff’ (default), ‘instrument’ or
     ‘voice’.

‘midiChorusLevel’ (number)
     Chorus effect level for the MIDI channel associated with the
     current context.  Ranges from 0 to 1 (0=off, 1=full effect).

‘midiExpression’ (number)
     Expression control for the MIDI channel associated with the current
     context.  Ranges from 0 to 1 (0=off, 1=full effect).

‘midiInstrument’ (string)
     Name of the MIDI instrument to use.

‘midiMaximumVolume’ (number)
     Analogous to ‘midiMinimumVolume’.

‘midiMergeUnisons’ (boolean)
     If true, output only one MIDI note-on event when notes with the
     same pitch, in the same MIDI-file track, overlap.

‘midiMinimumVolume’ (number)
     Set the minimum loudness for MIDI. Ranges from 0 to 1.

‘midiPanPosition’ (number)
     Pan position for the MIDI channel associated with the current
     context.  Ranges from -1 to 1, where the values -1 (‘#LEFT’), 0
     (‘#CENTER’) and 1 (‘#RIGHT’) correspond to hard left, center, and
     hard right, respectively.

‘midiReverbLevel’ (number)
     Reverb effect level for the MIDI channel associated with the
     current context.  Ranges from 0 to 1 (0=off, 1=full effect).

‘minimumFret’ (number)
     The tablature auto string-selecting mechanism selects the highest
     string with a fret at least ‘minimumFret’.

‘minimumPageTurnLength’ (moment)
     Minimum length of a rest for a page turn to be allowed.

‘minimumRepeatLengthForPageTurn’ (moment)
     Minimum length of a repeated section for a page turn to be allowed
     within that section.

‘minorChordModifier’ (markup)
     Markup displayed following the root for a minor chord

‘noChordSymbol’ (markup)
     Markup to be displayed for rests in a ChordNames context.

‘noteToFretFunction’ (procedure)
     Convert list of notes and list of defined strings to full list of
     strings and fret numbers.  Parameters: The context, a list of note
     events, a list of tabstring events, and the fretboard grob if a
     fretboard is desired.

‘nullAccidentals’ (boolean)
     The ‘Accidental_engraver’ generates no accidentals for notes in
     contexts were this is set.  In addition to supressing the printed
     accidental, this option removes any effect the note would have had
     on accidentals in other voices.

‘ottavation’ (markup)
     If set, the text for an ottava spanner.  Changing this creates a
     new text spanner.

‘output’ (music output)
     The output produced by a score-level translator during music
     interpretation.

‘partCombineForced’ (symbol)
     Override for the partcombine decision.  Can be ‘apart’, ‘chords’,
     ‘unisono’, ‘solo1’, or ‘solo2’.

‘partCombineTextsOnNote’ (boolean)
     Print part-combine texts only on the next note rather than
     immediately on rests or skips.

‘pedalSostenutoStrings’ (list)
     See ‘pedalSustainStrings’.

‘pedalSostenutoStyle’ (symbol)
     See ‘pedalSustainStyle’.

‘pedalSustainStrings’ (list)
     A list of strings to print for sustain-pedal.  Format is ‘(UP
     UPDOWN DOWN)’, where each of the three is the string to print when
     this is done with the pedal.

‘pedalSustainStyle’ (symbol)
     A symbol that indicates how to print sustain pedals: ‘text’,
     ‘bracket’ or ‘mixed’ (both).

‘pedalUnaCordaStrings’ (list)
     See ‘pedalSustainStrings’.

‘pedalUnaCordaStyle’ (symbol)
     See ‘pedalSustainStyle’.

‘predefinedDiagramTable’ (hash table)
     The hash table of predefined fret diagrams to use in FretBoards.

‘printKeyCancellation’ (boolean)
     Print restoration alterations before a key signature change.

‘printOctaveNames’ (boolean)
     Print octave marks for the ‘NoteNames’ context.

‘printPartCombineTexts’ (boolean)
     Set ‘Solo’ and ‘A due’ texts in the part combiner?

‘proportionalNotationDuration’ (moment)
     Global override for shortest-playing duration.  This is used for
     switching on proportional notation.

‘rehearsalMark’ (integer)
     The last rehearsal mark printed.

‘repeatCommands’ (list)
     This property is a list of commands of the form ‘(list 'volta X)’,
     where X is a string or ‘#f’.  ‘'end-repeat’ is also accepted as a
     command.

‘repeatCountVisibility’ (procedure)
     A procedure taking as arguments an integer and context, returning
     whether the corresponding percent repeat number should be printed
     when ‘countPercentRepeats’ is set.

‘restCompletionBusy’ (boolean)
     Signal whether a completion-rest is active.

‘restNumberThreshold’ (number)
     If a multimeasure rest has more measures than this, a number is
     printed.

‘restrainOpenStrings’ (boolean)
     Exclude open strings from the automatic fret calculator.

‘searchForVoice’ (boolean)
     Signal whether a search should be made of all contexts in the
     context hierarchy for a voice to provide rhythms for the lyrics.

‘segnoType’ (string)
     Set the default bar line for a requested segno.  Default is ‘S’.

‘shapeNoteStyles’ (vector)
     Vector of symbols, listing style for each note head relative to the
     tonic (qv.)  of the scale.

‘shortInstrumentName’ (markup)
     See ‘instrumentName’.

‘shortVocalName’ (markup)
     Name of a vocal line, short version.

‘skipBars’ (boolean)
     If set to true, then skip the empty bars that are produced by
     multimeasure notes and rests.  These bars will not appear on the
     printed output.  If not set (the default), multimeasure notes and
     rests expand into their full length, printing the appropriate
     number of empty bars so that synchronization with other voices is
     preserved.

          {
            r1 r1*3 R1*3
            \set Score.skipBars= ##t
            r1*3 R1*3
          }

‘skipTypesetting’ (boolean)
     If true, no typesetting is done, speeding up the interpretation
     phase.  Useful for debugging large scores.

‘slashChordSeparator’ (markup)
     The markup object used to separate a chord name from its root note
     in case of inversions or slash chords.

‘soloIIText’ (markup)
     The text for the start of a solo for voice ‘two’ when
     part-combining.

‘soloText’ (markup)
     The text for the start of a solo when part-combining.

‘squashedPosition’ (integer)
     Vertical position of squashing for *note
     (lilypond-internals)Pitch_squash_engraver::.

‘staffLineLayoutFunction’ (procedure)
     Layout of staff lines, ‘traditional’, or ‘semitone’.

‘stanza’ (markup)
     Stanza ‘number’ to print before the start of a verse.  Use in
     ‘Lyrics’ context.

‘startRepeatSegnoType’ (string)
     Set the default bar line for the combinations beginning of repeat
     with segno.  Default is ‘S.|:’.

‘startRepeatType’ (string)
     Set the default bar line for the beginning of repeats.

‘stemLeftBeamCount’ (integer)
     Specify the number of beams to draw on the left side of the next
     note.  Overrides automatic beaming.  The value is only used once,
     and then it is erased.

‘stemRightBeamCount’ (integer)
     See ‘stemLeftBeamCount’.

‘strictBeatBeaming’ (boolean)
     Should partial beams reflect the beat structure even if it causes
     flags to hang out?

‘stringNumberOrientations’ (list)
     See ‘fingeringOrientations’.

‘stringOneTopmost’ (boolean)
     Whether the first string is printed on the top line of the
     tablature.

‘stringTunings’ (list)
     The tablature strings tuning.  It is a list of the pitches of each
     string (starting with the lowest numbered one).

‘strokeFingerOrientations’ (list)
     See ‘fingeringOrientations’.

‘subdivideBeams’ (boolean)
     If set, multiple beams will be subdivided at ‘baseMoment’ positions
     by only drawing one beam over the beat.

‘suggestAccidentals’ (boolean)
     If set, accidentals are typeset as cautionary suggestions over the
     note.

‘supportNonIntegerFret’ (boolean)
     If set in ‘Score’ the ‘TabStaff’ will print micro-tones as ‘2½’

‘suspendRestMerging’ (boolean)
     When using the Merge_rest_engraver do not merge rests when this is
     set to true.

‘systemStartDelimiter’ (symbol)
     Which grob to make for the start of the system/staff?  Set to
     ‘SystemStartBrace’, ‘SystemStartBracket’ or ‘SystemStartBar’.

‘systemStartDelimiterHierarchy’ (pair)
     A nested list, indicating the nesting of a start delimiters.

‘tablatureFormat’ (procedure)
     A function formatting a tablature note head.  Called with three
     arguments: context, string number and, fret number.  It returns the
     text as a markup.

‘tabStaffLineLayoutFunction’ (procedure)
     A function determining the staff position of a tablature note head.
     Called with two arguments: the context and the string.

‘tempoHideNote’ (boolean)
     Hide the note = count in tempo marks.

‘tempoWholesPerMinute’ (moment)
     The tempo in whole notes per minute.

‘tieWaitForNote’ (boolean)
     If true, tied notes do not have to follow each other directly.
     This can be used for writing out arpeggios.

‘timeSignatureFraction’ (fraction, as pair)
     A pair of numbers, signifying the time signature.  For example,
     ‘'(4 . 4)’ is a 4/4 time signature.

‘timeSignatureSettings’ (list)
     A nested alist of settings for time signatures.  Contains elements
     for various time signatures.  The element for each time signature
     contains entries for ‘baseMoment’, ‘beatStructure’, and
     ‘beamExceptions’.

‘timing’ (boolean)
     Keep administration of measure length, position, bar number, etc.?
     Switch off for cadenzas.

‘tonic’ (pitch)
     The tonic of the current scale.

‘topLevelAlignment’ (boolean)
     If true, the VERTICAL_ALIGN_ENGRAVER will create a
     VERTICALALIGNMENT; otherwise, it will create a STAFFGROUPER

‘tupletFullLength’ (boolean)
     If set, the tuplet is printed up to the start of the next note.

‘tupletFullLengthNote’ (boolean)
     If set, end at the next note, otherwise end on the matter (time
     signatures, etc.)  before the note.

‘tupletSpannerDuration’ (moment)
     Normally, a tuplet bracket is as wide as the ‘\times’ expression
     that gave rise to it.  By setting this property, you can make
     brackets last shorter.

          {
            \set tupletSpannerDuration = #(ly:make-moment 1 4)
            \times 2/3 { c8 c c c c c }
          }

‘useBassFigureExtenders’ (boolean)
     Whether to use extender lines for repeated bass figures.

‘vocalName’ (markup)
     Name of a vocal line.

‘voltaSpannerDuration’ (moment)
     This specifies the maximum duration to use for the brackets printed
     for ‘\alternative’.  This can be used to shrink the length of
     brackets in the situation where one alternative is very large.

‘whichBar’ (string)
     This property is read to determine what type of bar line to create.

     Example:

          \set Staff.whichBar = ".|:"

     This will create a start-repeat bar in this staff only.  Valid
     values are described in ‘scm/bar-line.scm’.


File: lilypond-internals.info,  Node: Internal context properties,  Prev: Tunable context properties,  Up: Translation

2.4 Internal context properties
===============================

‘associatedVoiceContext’ (context)
     The context object of the ‘Voice’ that has the melody for this
     ‘Lyrics’.

‘barCheckLastFail’ (moment)
     Where in the measure did the last barcheck fail?

‘beamMelismaBusy’ (boolean)
     Signal if a beam is present.

‘busyGrobs’ (list)
     A queue of ‘(END-MOMENT . GROB)’ cons cells.  This is for internal
     (C++) use only.  This property contains the grobs which are still
     busy (e.g.  note heads, spanners, etc.).

‘currentCommandColumn’ (graphical (layout) object)
     Grob that is X-parent to all current breakable (clef, key
     signature, etc.)  items.

‘currentMusicalColumn’ (graphical (layout) object)
     Grob that is X-parent to all non-breakable items (note heads,
     lyrics, etc.).

‘dynamicAbsoluteVolumeFunction’ (procedure)
     A procedure that takes one argument, the text value of a dynamic
     event, and returns the absolute volume of that dynamic event.

‘finalizations’ (list)
     A list of expressions to evaluate before proceeding to next time
     step.  This is an internal variable.

‘graceSettings’ (list)
     Overrides for grace notes.  This property should be manipulated
     through the ‘add-grace-property’ function.

‘hasAxisGroup’ (boolean)
     True if the current context is contained in an axis group.

‘hasStaffSpacing’ (boolean)
     True if the current ‘CommandColumn’ contains items that will affect
     spacing.

‘lastChord’ (markup)
     Last chord, used for detecting chord changes.

‘lastKeyAlterations’ (list)
     Last key signature before a key signature change.

‘localAlterations’ (list)
     The key signature at this point in the measure.  The format is the
     same as for ‘keyAlterations’, but can also contain ‘((OCTAVE .
     NAME) . (ALTER BARNUMBER . MEASUREPOSITION))’ pairs.

‘melismaBusy’ (boolean)
     Signifies whether a melisma is active.  This can be used to signal
     melismas on top of those automatically detected.

‘partialBusy’ (boolean)
     Signal that \partial acts at the current timestep.

‘quotedCueEventTypes’ (list)
     A list of symbols, representing the event types that should be
     duplicated for ‘\cueDuring’ commands.

‘quotedEventTypes’ (list)
     A list of symbols, representing the event types that should be
     duplicated for ‘\quoteDuring’ commands.  This is also a fallback
     for ‘\cueDuring’ if ‘quotedCueEventTypes’ is not set

‘rootSystem’ (graphical (layout) object)
     The System object.

‘scriptDefinitions’ (list)
     The description of scripts.  This is used by the ‘Script_engraver’
     for typesetting note-superscripts and subscripts.  See
     ‘scm/script.scm’ for more information.

‘slurMelismaBusy’ (boolean)
     Signal if a slur is present.

‘stavesFound’ (list of grobs)
     A list of all staff-symbols found.

‘tieMelismaBusy’ (boolean)
     Signal whether a tie is present.


File: lilypond-internals.info,  Node: Backend,  Next: Scheme functions,  Prev: Translation,  Up: Top

3 Backend
*********

* Menu:

* All layout objects::            Description and defaults for all graphical objects (grobs).
* Graphical Object Interfaces::   Building blocks of graphical objects.
* User backend properties::       All tunable properties in a big list.
* Internal backend properties::   All internal layout properties in a big list.


File: lilypond-internals.info,  Node: All layout objects,  Next: Graphical Object Interfaces,  Up: Backend

3.1 All layout objects
======================

* Menu:

* Accidental::                       
* AccidentalCautionary::             
* AccidentalPlacement::              
* AccidentalSuggestion::             
* Ambitus::                          
* AmbitusAccidental::                
* AmbitusLine::                      
* AmbitusNoteHead::                  
* Arpeggio::                         
* BalloonTextItem::                  
* BarLine::                          
* BarNumber::                        
* BassFigure::                       
* BassFigureAlignment::              
* BassFigureAlignmentPositioning::   
* BassFigureBracket::                
* BassFigureContinuation::           
* BassFigureLine::                   
* Beam::                             
* BendAfter::                        
* BreakAlignGroup::                  
* BreakAlignment::                   
* BreathingSign::                    
* ChordName::                        
* Clef::                             
* ClefModifier::                     
* ClusterSpanner::                   
* ClusterSpannerBeacon::             
* CombineTextScript::                
* CueClef::                          
* CueEndClef::                       
* Custos::                           
* DotColumn::                        
* Dots::                             
* DoublePercentRepeat::              
* DoublePercentRepeatCounter::       
* DoubleRepeatSlash::                
* DynamicLineSpanner::               
* DynamicText::                      
* DynamicTextSpanner::               
* Episema::                          
* Fingering::                        
* FingeringColumn::                  
* Flag::                             
* FootnoteItem::                     
* FootnoteSpanner::                  
* FretBoard::                        
* Glissando::                        
* GraceSpacing::                     
* GridLine::                         
* GridPoint::                        
* Hairpin::                          
* HorizontalBracket::                
* HorizontalBracketText::            
* InstrumentName::                   
* InstrumentSwitch::                 
* KeyCancellation::                  
* KeySignature::                     
* KievanLigature::                   
* LaissezVibrerTie::                 
* LaissezVibrerTieColumn::           
* LedgerLineSpanner::                
* LeftEdge::                         
* LigatureBracket::                  
* LyricExtender::                    
* LyricHyphen::                      
* LyricSpace::                       
* LyricText::                        
* MeasureCounter::                   
* MeasureGrouping::                  
* MelodyItem::                       
* MensuralLigature::                 
* MetronomeMark::                    
* MultiMeasureRest::                 
* MultiMeasureRestNumber::           
* MultiMeasureRestText::             
* NonMusicalPaperColumn::            
* NoteCollision::                    
* NoteColumn::                       
* NoteHead::                         
* NoteName::                         
* NoteSpacing::                      
* OttavaBracket::                    
* PaperColumn::                      
* ParenthesesItem::                  
* PercentRepeat::                    
* PercentRepeatCounter::             
* PhrasingSlur::                     
* PianoPedalBracket::                
* RehearsalMark::                    
* RepeatSlash::                      
* RepeatTie::                        
* RepeatTieColumn::                  
* Rest::                             
* RestCollision::                    
* Script::                           
* ScriptColumn::                     
* ScriptRow::                        
* Slur::                             
* SostenutoPedal::                   
* SostenutoPedalLineSpanner::        
* SpacingSpanner::                   
* SpanBar::                          
* SpanBarStub::                      
* StaffGrouper::                     
* StaffSpacing::                     
* StaffSymbol::                      
* StanzaNumber::                     
* Stem::                             
* StemStub::                         
* StemTremolo::                      
* StringNumber::                     
* StrokeFinger::                     
* SustainPedal::                     
* SustainPedalLineSpanner::          
* System::                           
* SystemStartBar::                   
* SystemStartBrace::                 
* SystemStartBracket::               
* SystemStartSquare::                
* TabNoteHead::                      
* TextScript::                       
* TextSpanner::                      
* Tie::                              
* TieColumn::                        
* TimeSignature::                    
* TrillPitchAccidental::             
* TrillPitchGroup::                  
* TrillPitchHead::                   
* TrillSpanner::                     
* TupletBracket::                    
* TupletNumber::                     
* UnaCordaPedal::                    
* UnaCordaPedalLineSpanner::         
* VaticanaLigature::                 
* VerticalAlignment::                
* VerticalAxisGroup::                
* VoiceFollower::                    
* VoltaBracket::                     
* VoltaBracketSpanner::              


File: lilypond-internals.info,  Node: Accidental,  Next: AccidentalCautionary,  Up: All layout objects

3.1.1 Accidental
----------------

Accidental objects are created by: *note Accidental_engraver::.

   Standard settings:

     ‘after-line-breaking’ (boolean):
          ‘ly:accidental-interface::remove-tied’

          Dummy property, used to trigger callback for
          ‘after-line-breaking’.

     ‘alteration’ (number):
          ‘accidental-interface::calc-alteration’

          Alteration numbers for accidental.

     ‘avoid-slur’ (symbol):
          ‘'inside’

          Method of handling slur collisions.  Choices are ‘inside’,
          ‘outside’, ‘around’, and ‘ignore’.  ‘inside’ adjusts the slur
          if needed to keep the grob inside the slur.  ‘outside’ moves
          the grob vertically to the outside of the slur.  ‘around’
          moves the grob vertically to the outside of the slur only if
          there is a collision.  ‘ignore’ does not move either.  In
          grobs whose notational significance depends on vertical
          position (such as accidentals, clefs, etc.), ‘outside’ and
          ‘around’ behave like ‘ignore’.

     ‘extra-spacing-width’ (pair of numbers):
          '(-0.2 . 0.0)

          In the horizontal spacing problem, we pad each item by this
          amount (by adding the ‘car’ on the left side of the item and
          adding the ‘cdr’ on the right side of the item).  In order to
          make a grob take up no horizontal space at all, set this to
          ‘(+inf.0 . -inf.0)’.

     ‘glyph-name’ (string):
          ‘accidental-interface::glyph-name’

          The glyph name within the font.

          In the context of (span) bar lines, GLYPH-NAME represents a
          processed form of ‘glyph’, where decisions about line breaking
          etc.  are already taken.

     ‘glyph-name-alist’ (list):
          '((0 . "accidentals.natural")
            (-1/2 . "accidentals.flat")
            (1/2 . "accidentals.sharp")
            (1 . "accidentals.doublesharp")
            (-1 . "accidentals.flatflat")
            (3/4
             .
             "accidentals.sharp.slashslash.stemstemstem")
            (1/4 . "accidentals.sharp.slashslash.stem")
            (-1/4 . "accidentals.mirroredflat")
            (-3/4 . "accidentals.mirroredflat.flat"))

          An alist of key-string pairs.

     ‘horizontal-skylines’ (pair of skylines):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:accidental-interface::horizontal-skylines> >’

          Two skylines, one to the left and one to the right of this
          grob.

     ‘stencil’ (stencil):
          ‘ly:accidental-interface::print’

          The symbol to print.

     ‘vertical-skylines’ (pair of skylines):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::vertical-skylines-from-stencil> #<primitive-procedure
          ly:grob::pure-simple-vertical-skylines-from-extents> >’

          Two skylines, one above and one below this grob.

     ‘X-offset’ (number):
          ‘ly:grob::x-parent-positioning’

          The horizontal amount that this object is moved relative to
          its X-parent.

     ‘Y-extent’ (pair of numbers):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:accidental-interface::height> >’

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

   This object supports the following interface(s): *note
accidental-interface::, *note font-interface::, *note grob-interface::,
*note inline-accidental-interface:: and *note item-interface::.


File: lilypond-internals.info,  Node: AccidentalCautionary,  Next: AccidentalPlacement,  Prev: Accidental,  Up: All layout objects

3.1.2 AccidentalCautionary
--------------------------

AccidentalCautionary objects are created by: *note
Accidental_engraver::.

   Standard settings:

     ‘after-line-breaking’ (boolean):
          ‘ly:accidental-interface::remove-tied’

          Dummy property, used to trigger callback for
          ‘after-line-breaking’.

     ‘alteration’ (number):
          ‘accidental-interface::calc-alteration’

          Alteration numbers for accidental.

     ‘avoid-slur’ (symbol):
          ‘'inside’

          Method of handling slur collisions.  Choices are ‘inside’,
          ‘outside’, ‘around’, and ‘ignore’.  ‘inside’ adjusts the slur
          if needed to keep the grob inside the slur.  ‘outside’ moves
          the grob vertically to the outside of the slur.  ‘around’
          moves the grob vertically to the outside of the slur only if
          there is a collision.  ‘ignore’ does not move either.  In
          grobs whose notational significance depends on vertical
          position (such as accidentals, clefs, etc.), ‘outside’ and
          ‘around’ behave like ‘ignore’.

     ‘glyph-name-alist’ (list):
          '((0 . "accidentals.natural")
            (-1/2 . "accidentals.flat")
            (1/2 . "accidentals.sharp")
            (1 . "accidentals.doublesharp")
            (-1 . "accidentals.flatflat")
            (3/4
             .
             "accidentals.sharp.slashslash.stemstemstem")
            (1/4 . "accidentals.sharp.slashslash.stem")
            (-1/4 . "accidentals.mirroredflat")
            (-3/4 . "accidentals.mirroredflat.flat"))

          An alist of key-string pairs.

     ‘parenthesized’ (boolean):
          ‘#t’

          Parenthesize this grob.

     ‘stencil’ (stencil):
          ‘ly:accidental-interface::print’

          The symbol to print.

     ‘X-offset’ (number):
          ‘ly:grob::x-parent-positioning’

          The horizontal amount that this object is moved relative to
          its X-parent.

     ‘Y-extent’ (pair of numbers):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:accidental-interface::height> >’

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

   This object supports the following interface(s): *note
accidental-interface::, *note font-interface::, *note grob-interface::,
*note inline-accidental-interface:: and *note item-interface::.


File: lilypond-internals.info,  Node: AccidentalPlacement,  Next: AccidentalSuggestion,  Prev: AccidentalCautionary,  Up: All layout objects

3.1.3 AccidentalPlacement
-------------------------

AccidentalPlacement objects are created by: *note Accidental_engraver::
and *note Ambitus_engraver::.

   Standard settings:

     ‘direction’ (direction):
          ‘-1’

          If ‘side-axis’ is ‘0’ (or ‘X’), then this property determines
          whether the object is placed ‘LEFT’, ‘CENTER’ or ‘RIGHT’ with
          respect to the other object.  Otherwise, it determines whether
          the object is placed ‘UP’, ‘CENTER’ or ‘DOWN’.  Numerical
          values may also be used: ‘UP’=‘1’, ‘DOWN’=‘-1’, ‘LEFT’=‘-1’,
          ‘RIGHT’=‘1’, ‘CENTER’=‘0’.

     ‘right-padding’ (dimension, in staff space):
          ‘0.15’

          Space to insert on the right side of an object (e.g., between
          note and its accidentals).

     ‘script-priority’ (number):
          ‘-100’

          A key for determining the order of scripts in a stack, by
          being added to the position of the script in the user input,
          the sum being the overall priority.  Smaller means closer to
          the head.

     ‘X-extent’ (pair of numbers):
          ‘ly:axis-group-interface::width’

          Extent (size) in the X direction, measured in staff-space
          units, relative to object’s reference point.

   This object supports the following interface(s): *note
accidental-placement-interface::, *note grob-interface:: and *note
item-interface::.


File: lilypond-internals.info,  Node: AccidentalSuggestion,  Next: Ambitus,  Prev: AccidentalPlacement,  Up: All layout objects

3.1.4 AccidentalSuggestion
--------------------------

AccidentalSuggestion objects are created by: *note
Accidental_engraver::.

   Standard settings:

     ‘after-line-breaking’ (boolean):
          ‘ly:accidental-interface::remove-tied’

          Dummy property, used to trigger callback for
          ‘after-line-breaking’.

     ‘alteration’ (number):
          ‘accidental-interface::calc-alteration’

          Alteration numbers for accidental.

     ‘direction’ (direction):
          ‘1’

          If ‘side-axis’ is ‘0’ (or ‘X’), then this property determines
          whether the object is placed ‘LEFT’, ‘CENTER’ or ‘RIGHT’ with
          respect to the other object.  Otherwise, it determines whether
          the object is placed ‘UP’, ‘CENTER’ or ‘DOWN’.  Numerical
          values may also be used: ‘UP’=‘1’, ‘DOWN’=‘-1’, ‘LEFT’=‘-1’,
          ‘RIGHT’=‘1’, ‘CENTER’=‘0’.

     ‘font-size’ (number):
          ‘-2’

          The font size, compared to the ‘normal’ size.  ‘0’ is
          style-sheet’s normal size, ‘-1’ is smaller, ‘+1’ is bigger.
          Each step of 1 is approximately 12% larger; 6 steps are
          exactly a factor 2 larger.  If the context property ‘fontSize’
          is set, its value is added to this before the glyph is
          printed.  Fractional values are allowed.

     ‘glyph-name-alist’ (list):
          '((0 . "accidentals.natural")
            (-1/2 . "accidentals.flat")
            (1/2 . "accidentals.sharp")
            (1 . "accidentals.doublesharp")
            (-1 . "accidentals.flatflat")
            (3/4
             .
             "accidentals.sharp.slashslash.stemstemstem")
            (1/4 . "accidentals.sharp.slashslash.stem")
            (-1/4 . "accidentals.mirroredflat")
            (-3/4 . "accidentals.mirroredflat.flat"))

          An alist of key-string pairs.

     ‘outside-staff-priority’ (number):
          ‘0’

          If set, the grob is positioned outside the staff in such a way
          as to avoid all collisions.  In case of a potential collision,
          the grob with the smaller ‘outside-staff-priority’ is closer
          to the staff.

     ‘parent-alignment-X’ (number):
          ‘0’

          Specify on which point of the parent the object is aligned.
          The value ‘-1’ means aligned on parent’s left edge,
          ‘0’ on center, and ‘1’ right edge, in X direction.  Other
          numerical values may also be specified - the unit is half the
          parent’s width.  If unset, the value from ‘self-alignment-X’
          property will be used.

     ‘script-priority’ (number):
          ‘0’

          A key for determining the order of scripts in a stack, by
          being added to the position of the script in the user input,
          the sum being the overall priority.  Smaller means closer to
          the head.

     ‘self-alignment-X’ (number):
          ‘0’

          Specify alignment of an object.  The value ‘-1’ means left
          aligned, ‘0’ centered, and ‘1’ right-aligned in X direction.
          Other numerical values may also be specified - the unit is
          half the object width.

     ‘side-axis’ (number):
          ‘1’

          If the value is ‘X’ (or equivalently ‘0’), the object is
          placed horizontally next to the other object.  If the value is
          ‘Y’ or ‘1’, it is placed vertically.

     ‘staff-padding’ (dimension, in staff space):
          ‘0.25’

          Maintain this much space between reference points and the
          staff.  Its effect is to align objects of differing sizes
          (like the dynamics p and f) on their baselines.

     ‘stencil’ (stencil):
          ‘ly:accidental-interface::print’

          The symbol to print.

     ‘X-offset’ (number):
          ‘ly:self-alignment-interface::aligned-on-x-parent’

          The horizontal amount that this object is moved relative to
          its X-parent.

     ‘Y-extent’ (pair of numbers):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:accidental-interface::height> >’

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

     ‘Y-offset’ (number):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:side-position-interface::y-aligned-side>
          #<primitive-procedure
          ly:side-position-interface::pure-y-aligned-side> >’

          The vertical amount that this object is moved relative to its
          Y-parent.

   This object supports the following interface(s): *note
accidental-interface::, *note accidental-suggestion-interface::, *note
font-interface::, *note grob-interface::, *note item-interface::, *note
outside-staff-interface::, *note script-interface::, *note
self-alignment-interface:: and *note side-position-interface::.


File: lilypond-internals.info,  Node: Ambitus,  Next: AmbitusAccidental,  Prev: AccidentalSuggestion,  Up: All layout objects

3.1.5 Ambitus
-------------

Ambitus objects are created by: *note Ambitus_engraver::.

   Standard settings:

     ‘axes’ (list):
          '(0 1)

          List of axis numbers.  In the case of alignment grobs, this
          should contain only one number.

     ‘break-align-symbol’ (symbol):
          ‘'ambitus’

          This key is used for aligning, ordering, and spacing breakable
          items.  See *note
          (lilypond-internals)break-alignment-interface::.

     ‘break-visibility’ (vector):
          #(#f #f #t)

          A vector of 3 booleans,
          ‘#(END-OF-LINE UNBROKEN BEGIN-OF-LINE)’.  ‘#t’ means visible,
          ‘#f’ means killed.

     ‘non-musical’ (boolean):
          ‘#t’

          True if the grob belongs to a ‘NonMusicalPaperColumn’.

     ‘space-alist’ (list):
          '((cue-end-clef extra-space . 0.5)
            (clef extra-space . 0.5)
            (cue-clef extra-space . 0.5)
            (key-signature extra-space . 0.0)
            (staff-bar extra-space . 0.0)
            (time-signature extra-space . 0.0)
            (first-note fixed-space . 0.0))

          An alist that specifies distances from this grob to other
          breakable items, using the format:

               '((BREAK-ALIGN-SYMBOL . (SPACING-STYLE . SPACE))
                 (BREAK-ALIGN-SYMBOL . (SPACING-STYLE . SPACE))
                 ...)

          Standard choices for ‘BREAK-ALIGN-SYMBOL’ are listed in *note
          (lilypond-internals)break-alignment-interface::.
          Additionally, three special break-align symbols available to
          ‘space-alist’ are:

               ‘first-note’
                    used when the grob is just left of the first note on
                    a line

               ‘next-note’
                    used when the grob is just left of any other note;
                    if not set, the value of ‘first-note’ gets used

               ‘right-edge’
                    used when the grob is the last item on the line
                    (only compatible with the ‘extra-space’ spacing
                    style)

          Choices for ‘SPACING-STYLE’ are:

               ‘extra-space’
                    Put this much space between the two grobs.  The
                    space is stretchable when paired with ‘first-note’
                    or ‘next-note’; otherwise it is fixed.

               ‘minimum-space’
                    Put at least this much space between the left sides
                    of both grobs, without allowing them to collide.
                    The space is stretchable when paired with
                    ‘first-note’ or ‘next-note’; otherwise it is fixed.
                    Not compatible with ‘right-edge’.

               ‘fixed-space’
                    Only compatible with ‘first-note’ and ‘next-note’.
                    Put this much fixed space between the grob and the
                    note.

               ‘minimum-fixed-space’
                    Only compatible with ‘first-note’ and ‘next-note’.
                    Put at least this much fixed space between the left
                    side of the grob and the left side of the note,
                    without allowing them to collide.

               ‘semi-fixed-space’
                    Only compatible with ‘first-note’ and ‘next-note’.
                    Put this much space between the grob and the note,
                    such that half of the space is fixed and half is
                    stretchable.

          Rules for this spacing are much more complicated than this.
          See [Wanske] page 126–134, [Ross] page 143–147.

     ‘X-extent’ (pair of numbers):
          ‘ly:axis-group-interface::width’

          Extent (size) in the X direction, measured in staff-space
          units, relative to object’s reference point.

     ‘Y-extent’ (pair of numbers):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:axis-group-interface::height> #<primitive-procedure
          ly:axis-group-interface::pure-height> >’

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

   This object supports the following interface(s): *note
ambitus-interface::, *note axis-group-interface::, *note
break-aligned-interface::, *note grob-interface:: and *note
item-interface::.


File: lilypond-internals.info,  Node: AmbitusAccidental,  Next: AmbitusLine,  Prev: Ambitus,  Up: All layout objects

3.1.6 AmbitusAccidental
-----------------------

AmbitusAccidental objects are created by: *note Ambitus_engraver::.

   Standard settings:

     ‘direction’ (direction):
          ‘-1’

          If ‘side-axis’ is ‘0’ (or ‘X’), then this property determines
          whether the object is placed ‘LEFT’, ‘CENTER’ or ‘RIGHT’ with
          respect to the other object.  Otherwise, it determines whether
          the object is placed ‘UP’, ‘CENTER’ or ‘DOWN’.  Numerical
          values may also be used: ‘UP’=‘1’, ‘DOWN’=‘-1’, ‘LEFT’=‘-1’,
          ‘RIGHT’=‘1’, ‘CENTER’=‘0’.

     ‘glyph-name-alist’ (list):
          '((0 . "accidentals.natural")
            (-1/2 . "accidentals.flat")
            (1/2 . "accidentals.sharp")
            (1 . "accidentals.doublesharp")
            (-1 . "accidentals.flatflat")
            (3/4
             .
             "accidentals.sharp.slashslash.stemstemstem")
            (1/4 . "accidentals.sharp.slashslash.stem")
            (-1/4 . "accidentals.mirroredflat")
            (-3/4 . "accidentals.mirroredflat.flat"))

          An alist of key-string pairs.

     ‘padding’ (dimension, in staff space):
          ‘0.5’

          Add this much extra space between objects that are next to
          each other.

     ‘side-axis’ (number):
          ‘0’

          If the value is ‘X’ (or equivalently ‘0’), the object is
          placed horizontally next to the other object.  If the value is
          ‘Y’ or ‘1’, it is placed vertically.

     ‘stencil’ (stencil):
          ‘ly:accidental-interface::print’

          The symbol to print.

     ‘X-offset’ (number):
          ‘ly:grob::x-parent-positioning’

          The horizontal amount that this object is moved relative to
          its X-parent.

     ‘Y-extent’ (pair of numbers):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:accidental-interface::height> >’

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

   This object supports the following interface(s): *note
accidental-interface::, *note break-aligned-interface::, *note
font-interface::, *note grob-interface::, *note item-interface:: and
*note side-position-interface::.


File: lilypond-internals.info,  Node: AmbitusLine,  Next: AmbitusNoteHead,  Prev: AmbitusAccidental,  Up: All layout objects

3.1.7 AmbitusLine
-----------------

AmbitusLine objects are created by: *note Ambitus_engraver::.

   Standard settings:

     ‘gap’ (dimension, in staff space):
          ‘ambitus-line::calc-gap’

          Size of a gap in a variable symbol.

     ‘length-fraction’ (number):
          ‘0.7’

          Multiplier for lengths.  Used for determining ledger lines and
          stem lengths.

     ‘maximum-gap’ (number):
          ‘0.45’

          Maximum value allowed for ‘gap’ property.

     ‘stencil’ (stencil):
          ‘ambitus::print’

          The symbol to print.

     ‘thickness’ (number):
          ‘2’

          For grobs made up of lines, this is the thickness of the line.
          For slurs and ties, this is the distance between the two arcs
          of the curve’s outline at its thickest point, not counting the
          diameter of the virtual “pen” that draws the arcs.  This
          property is expressed as a multiple of the current staff-line
          thickness (i.e.  the visual output is influenced by changes to
          ‘STAFF.StaffSymbol.thickness’).

     ‘X-offset’ (number):
          ‘ly:self-alignment-interface::centered-on-x-parent’

          The horizontal amount that this object is moved relative to
          its X-parent.

   This object supports the following interface(s): *note
ambitus-interface::, *note font-interface::, *note grob-interface:: and
*note item-interface::.


File: lilypond-internals.info,  Node: AmbitusNoteHead,  Next: Arpeggio,  Prev: AmbitusLine,  Up: All layout objects

3.1.8 AmbitusNoteHead
---------------------

AmbitusNoteHead objects are created by: *note Ambitus_engraver::.

   Standard settings:

     ‘duration-log’ (integer):
          ‘2’

          The 2-log of the note head duration, i.e., ‘0’ = whole note,
          ‘1’ = half note, etc.

     ‘glyph-name’ (string):
          ‘note-head::calc-glyph-name’

          The glyph name within the font.

          In the context of (span) bar lines, GLYPH-NAME represents a
          processed form of ‘glyph’, where decisions about line breaking
          etc.  are already taken.

     ‘ignore-ambitus’ (boolean):
          ‘#t’

          If set, don’t consider this notehead for ambitus calculation.

     ‘stencil’ (stencil):
          ‘ly:note-head::print’

          The symbol to print.

     ‘Y-extent’ (pair of numbers):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::stencil-height> >’

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

     ‘Y-offset’ (number):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:staff-symbol-referencer::callback> >’

          The vertical amount that this object is moved relative to its
          Y-parent.

   This object supports the following interface(s): *note
ambitus-interface::, *note font-interface::, *note grob-interface::,
*note item-interface::, *note ledgered-interface::, *note
note-head-interface::, *note rhythmic-head-interface:: and *note
staff-symbol-referencer-interface::.


File: lilypond-internals.info,  Node: Arpeggio,  Next: BalloonTextItem,  Prev: AmbitusNoteHead,  Up: All layout objects

3.1.9 Arpeggio
--------------

Arpeggio objects are created by: *note Arpeggio_engraver:: and *note
Span_arpeggio_engraver::.

   Standard settings:

     ‘direction’ (direction):
          ‘-1’

          If ‘side-axis’ is ‘0’ (or ‘X’), then this property determines
          whether the object is placed ‘LEFT’, ‘CENTER’ or ‘RIGHT’ with
          respect to the other object.  Otherwise, it determines whether
          the object is placed ‘UP’, ‘CENTER’ or ‘DOWN’.  Numerical
          values may also be used: ‘UP’=‘1’, ‘DOWN’=‘-1’, ‘LEFT’=‘-1’,
          ‘RIGHT’=‘1’, ‘CENTER’=‘0’.

     ‘padding’ (dimension, in staff space):
          ‘0.5’

          Add this much extra space between objects that are next to
          each other.

     ‘positions’ (pair of numbers):
          ‘ly:arpeggio::calc-positions’

          Pair of staff coordinates ‘(LEFT . RIGHT)’, where both LEFT
          and RIGHT are in ‘staff-space’ units of the current staff.
          For slurs, this value selects which slur candidate to use; if
          extreme positions are requested, the closest one is taken.

     ‘protrusion’ (number):
          ‘0.4’

          In an arpeggio bracket, the length of the horizontal edges.

     ‘script-priority’ (number):
          ‘0’

          A key for determining the order of scripts in a stack, by
          being added to the position of the script in the user input,
          the sum being the overall priority.  Smaller means closer to
          the head.

     ‘side-axis’ (number):
          ‘0’

          If the value is ‘X’ (or equivalently ‘0’), the object is
          placed horizontally next to the other object.  If the value is
          ‘Y’ or ‘1’, it is placed vertically.

     ‘staff-position’ (number):
          ‘0.0’

          Vertical position, measured in half staff spaces, counted from
          the middle line.

     ‘stencil’ (stencil):
          ‘ly:arpeggio::print’

          The symbol to print.

     ‘X-extent’ (pair of numbers):
          ‘ly:arpeggio::width’

          Extent (size) in the X direction, measured in staff-space
          units, relative to object’s reference point.

     ‘X-offset’ (number):
          ‘ly:side-position-interface::x-aligned-side’

          The horizontal amount that this object is moved relative to
          its X-parent.

     ‘Y-extent’ (pair of numbers):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::stencil-height> #<primitive-procedure
          ly:arpeggio::pure-height> >’

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

     ‘Y-offset’ (number):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:staff-symbol-referencer::callback> >’

          The vertical amount that this object is moved relative to its
          Y-parent.

   This object supports the following interface(s): *note
arpeggio-interface::, *note font-interface::, *note grob-interface::,
*note item-interface::, *note side-position-interface:: and *note
staff-symbol-referencer-interface::.


File: lilypond-internals.info,  Node: BalloonTextItem,  Next: BarLine,  Prev: Arpeggio,  Up: All layout objects

3.1.10 BalloonTextItem
----------------------

BalloonTextItem objects are created by: *note Balloon_engraver::.

   Standard settings:

     ‘annotation-balloon’ (boolean):
          ‘#t’

          Print the balloon around an annotation.

     ‘annotation-line’ (boolean):
          ‘#t’

          Print the line from an annotation to the grob that it
          annotates.

     ‘extra-spacing-width’ (pair of numbers):
          '(+inf.0 . -inf.0)

          In the horizontal spacing problem, we pad each item by this
          amount (by adding the ‘car’ on the left side of the item and
          adding the ‘cdr’ on the right side of the item).  In order to
          make a grob take up no horizontal space at all, set this to
          ‘(+inf.0 . -inf.0)’.

     ‘stencil’ (stencil):
          ‘ly:balloon-interface::print’

          The symbol to print.

     ‘text’ (markup):
          ‘#<procedure #f (grob)>’

          Text markup.  See *note (lilypond-notation)Formatting text::.

     ‘X-offset’ (number):
          ‘#<procedure #f (grob)>’

          The horizontal amount that this object is moved relative to
          its X-parent.

     ‘Y-extent’ (pair of numbers):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::stencil-height> >’

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

     ‘Y-offset’ (number):
          ‘#<procedure #f (grob)>’

          The vertical amount that this object is moved relative to its
          Y-parent.

   This object supports the following interface(s): *note
balloon-interface::, *note font-interface::, *note grob-interface::,
*note item-interface:: and *note text-interface::.


File: lilypond-internals.info,  Node: BarLine,  Next: BarNumber,  Prev: BalloonTextItem,  Up: All layout objects

3.1.11 BarLine
--------------

BarLine objects are created by: *note Bar_engraver::.

   Standard settings:

     ‘allow-span-bar’ (boolean):
          ‘#t’

          If false, no inter-staff bar line will be created below this
          bar line.

     ‘bar-extent’ (pair of numbers):
          ‘ly:bar-line::calc-bar-extent’

          The Y-extent of the actual bar line.  This may differ from
          ‘Y-extent’ because it does not include the dots in a repeat
          bar line.

     ‘break-align-anchor’ (number):
          ‘ly:bar-line::calc-anchor’

          Grobs aligned to this breakable item will have their X-offsets
          shifted by this number.  In bar lines, for example, this is
          used to position grobs relative to the (visual) center of the
          bar line.

     ‘break-align-symbol’ (symbol):
          ‘'staff-bar’

          This key is used for aligning, ordering, and spacing breakable
          items.  See *note
          (lilypond-internals)break-alignment-interface::.

     ‘break-visibility’ (vector):
          ‘bar-line::calc-break-visibility’

          A vector of 3 booleans,
          ‘#(END-OF-LINE UNBROKEN BEGIN-OF-LINE)’.  ‘#t’ means visible,
          ‘#f’ means killed.

     ‘extra-spacing-height’ (pair of numbers):
          ‘pure-from-neighbor-interface::account-for-span-bar’

          In the horizontal spacing problem, we increase the height of
          each item by this amount (by adding the ‘car’ to the bottom of
          the item and adding the ‘cdr’ to the top of the item).  In
          order to make a grob infinitely high (to prevent the
          horizontal spacing problem from placing any other grobs above
          or below this grob), set this to ‘(-inf.0 . +inf.0)’.

     ‘gap’ (dimension, in staff space):
          ‘0.4’

          Size of a gap in a variable symbol.

     ‘glyph’ (string):
          ‘"|"’

          A string determining what ‘style’ of glyph is typeset.  Valid
          choices depend on the function that is reading this property.

          In combination with (span) bar lines, it is a string
          resembling the bar line appearance in ASCII form.

     ‘glyph-name’ (string):
          ‘bar-line::calc-glyph-name’

          The glyph name within the font.

          In the context of (span) bar lines, GLYPH-NAME represents a
          processed form of ‘glyph’, where decisions about line breaking
          etc.  are already taken.

     ‘hair-thickness’ (number):
          ‘1.9’

          Thickness of the thin line in a bar line, expressed as a
          multiple of the default staff-line thickness (i.e.  the visual
          output is _not_ influenced by changes to
          ‘STAFF.StaffSymbol.thickness’).

     ‘kern’ (dimension, in staff space):
          ‘3.0’

          The space between individual elements in any compound bar
          line, expressed as a multiple of the default staff-line
          thickness (i.e.  the visual output is _not_ influenced by
          changes to ‘STAFF.StaffSymbol.thickness’).

     ‘layer’ (integer):
          ‘0’

          An integer which determines the order of printing objects.
          Objects with the lowest value of layer are drawn first, then
          objects with progressively higher values are drawn, so objects
          with higher values overwrite objects with lower values.  By
          default most objects are assigned a layer value of 1.

     ‘non-musical’ (boolean):
          ‘#t’

          True if the grob belongs to a ‘NonMusicalPaperColumn’.

     ‘rounded’ (boolean)
          Decide whether lines should be drawn rounded or not.

     ‘segno-kern’ (number):
          ‘3.0’

          The space between the two thin lines of the segno bar line
          symbol, expressed as a multiple of the default staff-line
          thickness (i.e.  the visual output is _not_ influenced by
          changes to ‘STAFF.StaffSymbol.thickness’).

     ‘space-alist’ (list):
          '((time-signature extra-space . 0.75)
            (custos minimum-space . 2.0)
            (clef extra-space . 1.0)
            (key-signature extra-space . 1.0)
            (key-cancellation extra-space . 1.0)
            (first-note fixed-space . 1.3)
            (next-note semi-fixed-space . 0.9)
            (right-edge extra-space . 0.0))

          An alist that specifies distances from this grob to other
          breakable items, using the format:

               '((BREAK-ALIGN-SYMBOL . (SPACING-STYLE . SPACE))
                 (BREAK-ALIGN-SYMBOL . (SPACING-STYLE . SPACE))
                 ...)

          Standard choices for ‘BREAK-ALIGN-SYMBOL’ are listed in *note
          (lilypond-internals)break-alignment-interface::.
          Additionally, three special break-align symbols available to
          ‘space-alist’ are:

               ‘first-note’
                    used when the grob is just left of the first note on
                    a line

               ‘next-note’
                    used when the grob is just left of any other note;
                    if not set, the value of ‘first-note’ gets used

               ‘right-edge’
                    used when the grob is the last item on the line
                    (only compatible with the ‘extra-space’ spacing
                    style)

          Choices for ‘SPACING-STYLE’ are:

               ‘extra-space’
                    Put this much space between the two grobs.  The
                    space is stretchable when paired with ‘first-note’
                    or ‘next-note’; otherwise it is fixed.

               ‘minimum-space’
                    Put at least this much space between the left sides
                    of both grobs, without allowing them to collide.
                    The space is stretchable when paired with
                    ‘first-note’ or ‘next-note’; otherwise it is fixed.
                    Not compatible with ‘right-edge’.

               ‘fixed-space’
                    Only compatible with ‘first-note’ and ‘next-note’.
                    Put this much fixed space between the grob and the
                    note.

               ‘minimum-fixed-space’
                    Only compatible with ‘first-note’ and ‘next-note’.
                    Put at least this much fixed space between the left
                    side of the grob and the left side of the note,
                    without allowing them to collide.

               ‘semi-fixed-space’
                    Only compatible with ‘first-note’ and ‘next-note’.
                    Put this much space between the grob and the note,
                    such that half of the space is fixed and half is
                    stretchable.

          Rules for this spacing are much more complicated than this.
          See [Wanske] page 126–134, [Ross] page 143–147.

     ‘stencil’ (stencil):
          ‘ly:bar-line::print’

          The symbol to print.

     ‘thick-thickness’ (number):
          ‘6.0’

          Thickness of the thick line in a bar line, expressed as a
          multiple of the default staff-line thickness (i.e.  the visual
          output is _not_ influenced by changes to
          ‘STAFF.StaffSymbol.thickness’).

     ‘Y-extent’ (pair of numbers):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::stencil-height> >’

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

   This object supports the following interface(s): *note
bar-line-interface::, *note break-aligned-interface::, *note
font-interface::, *note grob-interface::, *note item-interface:: and
*note pure-from-neighbor-interface::.

