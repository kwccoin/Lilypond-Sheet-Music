This is lilypond-contributor.info, produced by makeinfo version 6.1 from
contributor.texi.

Copyright © 2007–2015 by the authors.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.1 or any later version published by the Free Software
     Foundation; with no Invariant Sections.  A copy of the license is
     included in the section entitled “GNU Free Documentation License”.


File: lilypond-contributor.info,  Node: Top,  Next: Introduction to contributing,  Up: (dir)

LilyPond — Contributor’s Guide
******************************

This manual documents contributing to LilyPond version 2.19.65.  It
discusses technical issues and policies that contributors should follow.

   This manual is not intended to be read sequentially; new contributors
should only read the sections which are relevant to them.  For more
information about different jobs, see *note (lilypond-contributor)Help
us::.

* Menu:

* Introduction to contributing::
* Quick start::
* Working with source code::
* Compiling::
* Documentation work::
* Website work::
* LSR work::
* Issues::
* Regression tests::
* Programming work::
* Release work::
* Build system notes::
* Modifying the Emmentaler font::
* Administrative policies::

Appendices

* LilyPond grammar::
* GNU Free Documentation License:: License of this document.

   For more information about how this manual fits with the other
documentation, or to read this manual in other formats, see *note
(lilypond-web)Manuals::.

   If you are missing any manuals, the complete documentation can be
found at <http://lilypond.org/>.


File: lilypond-contributor.info,  Node: Introduction to contributing,  Next: Quick start,  Prev: Top,  Up: Top

1 Introduction to contributing
******************************

This chapter presents a quick overview of ways that people can help
LilyPond.

* Menu:

* Help us::
* Overview of work flow::
* Summary for experienced developers::
* Mentors::


File: lilypond-contributor.info,  Node: Help us,  Next: Overview of work flow,  Up: Introduction to contributing

1.1 Help us
===========

We need you!
------------

Thank you for your interest in helping us — we would love to see you get
involved!  Your contribution will help a large group of users make
beautifully typeset music.

   Even working on small tasks can have a big impact: taking care of
them allows experienced developers work on advanced tasks, instead of
spending time on those simple tasks.

   For a multi-faceted project like LilyPond, sometimes it’s tough to
know where to begin.  In addition to the avenues proposed below, you can
send an e-mail to the lilypond-devel@gnu.org
(https://lists.gnu.org/mailman/listinfo/lilypond-devel) mailing list,
and we’ll help you to get started.

Simple tasks
------------

*No programming skills* required!

   • Mailing list support: answer questions from fellow users.

   • Bug reporting: help users create proper *note (lilypond-web)Bug
     reports::, and/or join the Bug Squad to organize *note
     (lilypond-contributor)Issues::.

   • Documentation: small changes can be proposed by following the
     guidelines for *note (lilypond-contributor)Documentation
     suggestions::.

   • LilyPond Snippet Repository (LSR): create and fix snippets
     following the guidelines in *note (lilypond-contributor)Adding and
     editing snippets::.

   • Discussions, reviews, and testing: the developers often ask for
     feedback about new documentation, potential syntax changes, and
     testing new features.  Please contribute to these discussions!

Advanced tasks
--------------

These jobs generally require that you have the source code and can
compile LilyPond.

          Note: We suggest that contributors using Windows or MacOS X do
          *not* attempt to set up their own development environment;
          instead, use Lilydev as discussed in *note
          (lilypond-contributor)Quick start::.

   Contributors using Linux or FreeBSD may also use Lilydev, but if they
prefer their own development environment, they should read *note
(lilypond-contributor)Working with source code::, and *note
(lilypond-contributor)Compiling::.

   Begin by reading *note (lilypond-contributor)Summary for experienced
developers::.

   • Documentation: for large changes, see *note
     (lilypond-contributor)Documentation work::.

   • Website: the website is built from the normal documentation source.
     See the info about documentation, and also *note
     (lilypond-contributor)Website work::.

   • Translations: see *note (lilypond-contributor)Translating the
     documentation::, and *note (lilypond-contributor)Translating the
     website::.

   • Bugfixes or new features: read *note
     (lilypond-contributor)Programming work::.


File: lilypond-contributor.info,  Node: Overview of work flow,  Next: Summary for experienced developers,  Prev: Help us,  Up: Introduction to contributing

1.2 Overview of work flow
=========================

     Advanced note: Experienced developers should skip to *note Summary
     for experienced developers::.

   Git is a _version control system_ that tracks the history of a
program’s source code.  The LilyPond source code is maintained as a Git
repository, which contains:

   • all of the source files needed to build LilyPond, and

   • a record of the entire history of every change made to every file
     since the program was born.

   The ‘official’ LilyPond Git repository is hosted by the GNU Savannah
software forge at <http://git.sv.gnu.org>.

   Changes made within one contributor’s copy of the repository can be
shared with other contributors using _patches_.  A patch is a text file
that indicates what changes have been made.  If a contributor’s patch is
approved for inclusion (usually through the mailing list), someone on
the current development team will _push_ the patch to the official
repository.

   The Savannah software forge provides two separate interfaces for
viewing the LilyPond Git repository online: cgit
(http://git.sv.gnu.org/cgit/lilypond.git/) and gitweb
(http://git.sv.gnu.org/gitweb/?p=lilypond.git).

   Git is a complex and powerful tool, but tends to be confusing at
first, particularly for users not familiar with the command line and/or
version control systems.  We have created the ‘lily-git’ graphical user
interface to ease this difficulty.

   _Compiling_ (‘building’) LilyPond allows developers to see how
changes to the source code affect the program itself.  Compiling is also
needed to package the program for specific operating systems or
distributions.  LilyPond can be compiled from a local Git repository
(for developers), or from a downloaded tarball (for packagers).
Compiling LilyPond is a rather involved process, and most contributor
tasks do not require it.

   Contributors can contact the developers through the ‘lilypond-devel’
mailing list.  The mailing list archive is located at
<http://lists.gnu.org/archive/html/lilypond-devel/>.  If you have a
question for the developers, search the archives first to see if the
issue has already been discussed.  Otherwise, send an email to
<lilypond-devel@gnu.org>.  You can subscribe to the developers’ mailing
list here: <http://lists.gnu.org/mailman/listinfo/lilypond-devel>.

          Note: Contributors on Windows or MacOS X wishing to compile
          code or documentation are strongly advised to use our Debian
          LilyPond Developer Remix, as discussed in *note Quick start::.


File: lilypond-contributor.info,  Node: Summary for experienced developers,  Next: Mentors,  Prev: Overview of work flow,  Up: Introduction to contributing

1.3 Summary for experienced developers
======================================

If you are already familiar with typical open-source tools, here’s what
you need to know:

   • *source repository*: hosted by GNU savannah.

          <http://git.savannah.gnu.org/gitweb/?p=lilypond.git>

   • *issue tracker*: currently hosted by Sourceforge.

          <https://sourceforge.net/p/testlilyissues/issues/>

   • *patch review*: Reitveld – the collaborative code review tool.

          <https://codereview.appspot.com>

   • *environment variables*: many maintenance scripts, and many
     instructions in this guide rely on predefined *note Environment
     variables::.

   • *mailing lists*: given on *note (lilypond-web)Contact::.

   • *Git branches*:

        • ‘master’: always base your work from this branch, but *never
          push* directly to it.  Patches are always pushed directly to
          the ‘staging’ branch instead.

        • ‘staging’: always push to this branch after a successful patch
          review cycle (see below).

        • ‘translation’: Translators should base their work on this
          branch only and push any translation patches directly to it as
          well.

        • ‘dev/foo’: feel free to push any new branch name under ‘dev/’.

   • *regression tests*: also known as “regtests”.  A collection of more
     than a thousand ‘.ly’ files that are used to track LilyPond’s
     engraving output between released stable and unstable versions as
     well as checked for all patches submitted for testing.

     If a patch introduces any unintentional changes to any of the
     regtests it is very likely it will be rejected (to be fixed) –
     always make sure that, if you expect any regression test changes,
     that they are explained clearly as part of the patch description
     when submitting for testing.  For more information see *note
     Regression tests::.

   • *reviews*: after finishing work on a patch or branch:

       1. upload it with our custom ‘git-cl’ ‘helper-script’; see *note
          git-cl::.  In addition to uploading patches to the Google’s
          Rietveld code review tool the script will also update the
          issue tracker (or add a new issue as appropriate) so that any
          reference to the patch is not lost.  The current “status” of
          any patch submitted is always managed on the issue tracker;
          also see *note Issues::.

          Once submitted the patch will be given a status of ‘Patch-new’
          and will enter the “Patch Countdown”.  More information on
          this can be found in the section *note Uploading a patch for
          review::.

       2. Patches are generally tested within 24 hours of submission.
          Once it has passed the basic tests – make, make doc and a make
          test-baseline/check –, the tracker will be updated and the
          patch’s status will change to ‘Patch-review’ for other
          developers to examine.

       3. Every third day, the “Patch Meister” will examine the issue
          tracker and the Rietveld code review tool for the submitted
          patch, looking for any comments by other developers.
          Depending on what has been posted, the patch will be either;
          “moved on” to the next patch status (‘Patch-countdown’); set
          back to ‘Patch-needs_work’; or if more discussion is needed,
          left at ‘Patch-review’.  In all cases the issue tracker (not
          the Rietveld code review tool) will be updated by the Patch
          Meister accordingly.

       4. Once another three days have passed, any patch that has been
          given ‘Patch-countdown’ status will be changed to
          ‘Patch-push’, the issue tracker is updated, and the developer
          can now push it directly to the ‘staging’ branch (or email the
          patch – created with ‘git format-patch’ command – to one of
          the other developers who can push it for you).

       5. Automatic scripts run every few hours to merge the ‘staging’
          branch with ‘master’.

          Advanced note: This process does means that most patches will
          take about a week before finally being merged into ‘master’.
          With the limited resources for reviewing patches available and
          a history of unintended breakages in the ‘master’ branch (from
          patches that have not had time to be reviewed properly), this
          is the best compromise we have found.


File: lilypond-contributor.info,  Node: Mentors,  Prev: Summary for experienced developers,  Up: Introduction to contributing

1.4 Mentors
===========

We have a semi-formal system of mentorship, similar to the medieval
“journeyman/master” training system.  New contributors will have a
dedicated mentor to help them “learn the ropes”.

          Note: This is subject to the availability of mentors; certain
          jobs have more potential mentors than others.

Contributor responsibilities
----------------------------

  1. Ask your mentor which sections of the CG you should read.

  2. If you get stuck for longer than 10 minutes, ask your mentor.  They
     might not be able to help you with all problems, but we find that
     new contributors often get stuck with something that could be
     solved/explained with 2 or 3 sentences from a mentor.

  3. If you have been working on a task much longer than was originally
     estimated, stop and ask your mentor.  There may have been a
     miscommunication, or there may be some time-saving tips that could
     vastly simply your task.

  4. Send patches to your mentor for initial comments.

  5. Inform your mentor if you’re going to be away for a month, or if
     you leave entirely.  Contributing to lilypond isn’t for everybody;
     just let your mentor know so that we can reassign that work to
     somebody else.

  6. Inform your mentor if you’re willing to do more work – we always
     have way more work than we have helpers available.  We try to avoid
     overwhelming new contributors, so you’ll be given less work than we
     think you can handle.

Mentor responsibilities
-----------------------

  1. Respond to questions from your contributor(s) promptly, even if the
     response is just “sorry, I don’t know” or “sorry, I’m very busy for
     the next 3 days; I’ll get back to you then”.  Make sure they feel
     valued.

  2. Inform your contributor(s) about the expected turnaround for your
     emails – do you work on lilypond every day, or every weekend, or
     what?  Also, if you’ll be unavailable for longer than usual (say,
     if you normally reply within 24 hours, but you’ll be at a
     conference for a week), let your contributors know.  Again, make
     sure they feel valued, and that your silence (if they ask a
     question during that period) isn’t their fault.

  3. Inform your contributor(s) if they need to do anything unusual for
     the builds, such as doing a “make clean / doc-clean” or switching
     git branches (not expected, but just in case...)

  4. You don’t need to be able to completely approve patches.  Make sure
     the patch meets whatever you know of the guidelines (for doc style,
     code indentation, whatever), and then send it on to -devel for more
     comments.  If you feel confident about the patch, you can push it
     directly (this is mainly intended for docs and translations; code
     patches should almost always go to -devel before being pushed).

  5. Keep track of patches from your contributor.  Either upload them to
     Rietveld yourself, or help+encourage them to upload the patches
     themselves.  When a patch is on Rietveld, it’s your responbility to
     get comments for it, and to add a link to the patch to the google
     tracker.  (tag it “patch-new”, or “patch-review” if you feel very
     confident in it)

  6. Encourage your contributor to review patches, particularly your
     own!  It doesn’t matter if they’re not familiar with C++ / scheme /
     build system / doc stuff – simply going through the process is
     valuable.  Besides, anybody can find a typo!

  7. Contact your contributor at least once a week.  The goal is just to
     get a conversation started – there’s nothing wrong with simply
     copy&pasting this into an email:

          Hey there,

          How are things going?  If you sent a patch and got a review, do
          you know what you need to fix?  If you sent a patch but have no
          reviews yet, do you know when you will get reviews?  If you are
          working on a patch, what step(s) are you working on?


File: lilypond-contributor.info,  Node: Quick start,  Next: Working with source code,  Prev: Introduction to contributing,  Up: Top

2 Quick start
*************

Want to submit a patch for LilyPond?  Great!  Never created a patch
before?  Never compiled software before?  No problem!  This chapter is
for you and will help you do this as quickly and easily as possible.

* Menu:

* LilyDev::
* lily-git::
* git-cl::
* Compiling with LilyDev::
* Now start work!::


File: lilypond-contributor.info,  Node: LilyDev,  Next: lily-git,  Up: Quick start

2.1 LilyDev
===========

There is a ‘remix’ of Debian GNU/Linux – known as “LilyDev” for short –
which includes all the necessary software and tools to compile LilyPond,
the documentation and the website (also see *note Website work::).

          Note: LilyDev does not include the software for the Grand
          Unified Builder – also see *note Grand Unified Builder
          (GUB)::.

   While compiling LilyPond on Mac OS and Windows is possible, both
environments are complex to set up.  LilyDev can be easily installed and
run inside a ‘virtual machine’ on either of these operating systems
relatively easily using readily available virtualization software.  We
recommend using VirtualBox as it is available for all major operating
systems and is very easy to install & configure.

   The LilyDev disk image can also be written to a USB device or ‘burnt’
to a DVD – it is approximately 900 MB in size – and installed just like
any standard GNU/Linux distribution.

   The current image is based on a 32-bit version of Debian 8 (‘Jessie’)
and the disk image was generated using Debian live-build 4
(http://live.debian.net/).

Download the LilyDev disk image file (a ‘.iso’ file) from here:

     <https://github.com/fedelibre/LilyDev/releases/latest>

          Note: Apart from installing and configuring LilyDev in
          VirtualBox, the rest of the chapter assumes that you are
          comfortable using the command-line and is intended for users
          who may have never created a patch or compiled software
          before.  More experienced developers (who prefer to use their
          own development environment) may still find it instructive to
          skim over the following information.

   If you are not familiar with GNU/Linux, it may be beneficial to read
a few “introduction to Linux” type web pages.

* Menu:

* Installing LilyDev in VirtualBox::
* Configuring LilyDev in VirtualBox::


File: lilypond-contributor.info,  Node: Installing LilyDev in VirtualBox,  Next: Configuring LilyDev in VirtualBox,  Up: LilyDev

Installing LilyDev in VirtualBox
--------------------------------

This section discusses how to install and use LilyDev with VirtualBox.

          Note: If you already know how to install a virtual machine
          using a disc image inside VirtualBox (or your own
          virtualization software) then you can skip this section and go
          straight to *note lily-git::.

  1. Download VirtualBox from here:

          <http://www.virtualbox.org/wiki/Downloads>

               Note: In virtualization terminology, the operating system
               where VirtualBox is installed is known as the *host*.
               LilyDev will be installed ‘inside’ VirtualBox as a
               *guest*.

  2. Start the VirtualBox software and click ‘New’ to create a new
     “virtual machine”.

     The ‘New Virtual Machine Wizard’ will walk you through setting up
     your guest virtual machine.  Choose an appropriate name for your
     LilyDev installation and select the ‘Linux’ operating system.  When
     selecting the ‘version’ choose ‘Debian (32 bit)’ (don’t use the ‘64
     bit’ option).  If you do not have that specific option choose
     ‘Linux 2.6’ (again do not choose any option that has 64 bit next to
     it).

  3. Select the amount of RAM you will allow the LilyDev guest to use
     from your host operating system when it is running.  If possible,
     use at least 700 MB of RAM; the more RAM you can spare from your
     host the better, although LilyDev will currently use no more than 4
     GB (4096 MB) even if you are able to assign more.

  4. For your ‘Virtual Hard Disk’, leave the ‘Create new hard disk’
     option checked, use the default ‘VDI’ and “Dynamically allocated”
     options for the virtual hard drive.  A complete compile of
     everything (code, docs, regression tests) can reach 10 GB so size
     your virtual disk and its location accordingly.

  5. Verify the summary details and click ‘Create’, when you are
     satisfied.  Your new guest will be displayed in the VirtualBox
     window.

               Note: The image contains a ‘686-pae’ kernel, so you must
               enable ‘PAE’ within the virtual machine’s settings –
               click on System → Processor and select ‘Extended
               features: Enable PAE/NX’.

  6. Click the ‘Start’ button and the ‘First Run Wizard’ will prompt you
     for the installation media.  Click the browse icon, locate the
     LilyDev disk image file that you downloaded (the ‘.iso’ file) and
     click through the wizard to begin the installation process.

  7. When the LilyDev disk image boots for the first time, choose either
     the ‘Install’ or the ‘Graphical install’ menu item.  The installer
     will then walk you through the complete installation process.

  8. At the “Partition disks” stage, do not be afraid to select “Guided
     - use entire disk”, since this refers to your *_virtual disk_*, not
     your computer’s own hard disk.

  9. Continue to click through the rest of the wizard, filling in any
     appropriate details when asked, and wait for the install to
     complete.  This will take about 10 minutes or so on a reasonably
     modern computer.

  10. When the installation is completed, just click on ‘Continue’ (you
     do not have to remove any media since you installed LilyDev from a
     Disk image, which is just a file on your computer).  The installer
     will reboot the virtual machine.

LilyDev should now be installed and running!


File: lilypond-contributor.info,  Node: Configuring LilyDev in VirtualBox,  Prev: Installing LilyDev in VirtualBox,  Up: LilyDev

Configuring LilyDev in VirtualBox
---------------------------------

VirtualBox has extra ‘guest additions’ which although are not necessary
to use LilyDev or compile LilyPond, do provide some additional features
to your Virtual Machine to make it easier to work with.  Such as being
able to dynamically resize the LilyDev window, allow seamless
interaction with your mouse pointer on both the host and guest and let
you copy/paste between your host and guest if needed.

  1. Select the ‘Devices’ menu from the virtual machine window and
     choose ‘Install Guest Additions...’.  This will automount a CD
     which will prompt you to autorun it.  Click OK and follow the
     instructions.  It is recommended to reboot the guest when the
     installation is complete.

     Other virtualization software will also have their own ‘guest’
     additions, follow the normal procedures for your virtualization
     software with LilyDev as the client.

  2. Restart LilyDev to complete the installation of the guest
     additions.

          Advanced note: If you do any kernel upgrades, you may need to
          reinstall the additional software.  Just follow the step above
          again and reboot when the reinstallation is complete.

Other items that may be helpful:

   • In the settings for the virtual machine, set the network to Bridged
     mode to allow you to access shared folders when using Windows
     hosts.

   • Set up any additional features, such as ‘Shared Folders’ between
     your main operating system and LilyDev.  This is distinct from the
     networked share folders in Windows.  Consult the external
     documentation for this.

     Some longtime contributors have reported that ‘shared folders’ are
     rarely useful and not worth the fuss, particularly since files can
     be shared over a network instead.

   • Pasting into a terminal is done with ‘Ctrl+Shift+v’.

   • Right-click allows you to edit a file with the text editor (default
     is Leafpad).


Known issues and warnings
.........................

Not all hardware is supported in all virtualization tools.  In
particular, some contributors have reported problems with USB network
adapters.  If you have problems with network connection (for example
Internet connection in the host system is lost when you launch virtual
system), try installing and running LilyDev with your computer’s
built-in network adapter used to connect to the network.  Refer to the
help documentation that comes with your virtualization software.


File: lilypond-contributor.info,  Node: lily-git,  Next: git-cl,  Prev: LilyDev,  Up: Quick start

2.2 lily-git
============

The ‘LilyPond Contributor’s Git Interface’ (otherwise known as
‘lily-git.tcl’) is a simple-to-use GUI to help you download and update
the LilyPond source code as well as an aid to making software patches.

* Menu:

* Where to get lily-git::
* Using lily-git to download the source code::
* How to use lily-git::


File: lilypond-contributor.info,  Node: Where to get lily-git,  Next: Using lily-git to download the source code,  Up: lily-git

Where to get lily-git
---------------------

Depending on your development environment, lily-git may already be
installed on your computer.

   • If you are using LilyDev (see *note LilyDev::) then lily-git should
     already be installed and ready to run.  If this is not the case you
     can easily turn it on by adding the following line in ‘~/.bashrc’:

          # add lily-git to the PATH
          PATH=$LILYPOND_GIT/scripts/auxiliar:"${PATH}"

   • For those not using LilyDev, lily-git can be obtained by
     downloading the software directly.  See *note Manually installing
     lily-git.tcl::.

   • lily-git is part of the LilyPond source code and is located in
     ‘$LILYPOND_GIT/scripts/auxillar/lily-git.tcl’.


File: lilypond-contributor.info,  Node: Using lily-git to download the source code,  Next: How to use lily-git,  Prev: Where to get lily-git,  Up: lily-git

Using lily-git to download the source code
------------------------------------------

  1. Type the following command into a Terminal:

          lily-git.tcl

     You will be prompted to enter a name and email address into the
     lily-git UI. This information is used to label any patches you
     create (using the lily-git UI or git via the command line) and can
     be changed later if required.  See *note Configuring Git::.

  2. Click on the _Submit_ button to update lily-git with the
     information.

  3. Click on the “Get source” button.

     A directory called ‘lilypond-git’ is created within your home
     directory and the entire source code will start to be downloaded
     into it.

               Note: Be patient!  There is no progress bar in the
               lily-git UI but the complete source is around 180 MB.

     When the source code has been downloaded, the “command output”
     window in the lily-git UI will update and display “Done” on the
     very last line and the button label will change to say “Update
     source”.

               Note: Some contributors have reported that occasionally
               nothing happens at this step at all.  If this occurs,
               then try again in a few minutes – it could be an
               intermittant network problem.  If the problem persists,
               please ask for help.

  4. Close the lily-git GUI and navigate to the ‘lilypond-git’ directory
     to view and edit the source files.

If this is the first time you will be attempting to compile LilyPond,
please see the section *note Compiling with LilyDev:: before continuing.


File: lilypond-contributor.info,  Node: How to use lily-git,  Prev: Using lily-git to download the source code,  Up: lily-git

How to use lily-git
-------------------

Here is a brief description of what each button does in the lily-git UI.

     Advanced note: Throughout the rest of this manual, most
     command-line input should be entered from within the top level of
     the ‘~/lilypond-git/’ directory.  This is known as the _top of the
     source directory_ and is also referred to as $LILYPOND_GIT as a
     convention for those users who may have configured their own
     locations of the LilyPond source code.

          Note: For those less experienced contributors using lily-git,
          we recommend that you only work on one set of changes at a
          time and not start on any new changes until your first set has
          been accepted.

1. Update source
................

Click the “Update source” button to get any recent changes to the source
code that have been added by other contributors since your last session.

          Note: If another contributor has updated files in the source
          code that you had been working on then updating your own copy
          of the source code may result in what is known as a _merge
          conflict_.  If this occurs, follow the instructions to “Abort
          changes”, below.  Note that your work will not be lost.

2a. New local commit
....................

A single commit typically represents one logical set of related changes
(such as a bug-fix), and may incorporate changes to multiple files at
the same time.

   When you’re finished making the changes for a commit, click the “New
local commit” button.  This will open the “Git Commit Message” window.
The message header is required, and the message body is optional.

   After entering a commit message, click “OK” to finalize the commit.

     Advanced note: for more information regarding commits and commit
     messages, see *note Commits::.

2b. Amend previous commit
.........................

You can go back and make changes to the most recent commit with the
“Amend previous commit” button.  This is useful if a mistake is found
after you have clicked the “New local commit” button.

   To amend the most recent commit, re-edit the source files as needed
and then click the “Amend previous commit” button.  The earlier version
of the commit is not saved, but is replaced by the new one.

          Note: This does not update the patch *files*; if you have a
          patch file from an earlier version of the commit, you will
          need to make another patch set when using this feature.  The
          old patch file will not be saved, but will be replaced by the
          new one after you click on “Make patch set”.

3. Make patch set
.................

Before making a patch set from any commits, you should click the “Update
source” button to make sure the commits are based on the most recent
remote snapshot.

   When you click the “Make patch set” button, ‘lily-git.tcl’ will
produce patch files for any new commits, saving them to the current
directory.  The command output will display the name of the new patch
files near the end of the output:

     0001-CG-add-lily-git-instructions.patch
     Done.

   Send patch files to the appropriate place:

   • If you have a mentor, send it to them via email.

   • Translators should send patches to <translations@lilynet.net>.

   • More experienced contributors should upload the patch for web-based
     review.  This requires additional software and use of the
     command-line; see *note Uploading a patch for review::.

   • If you have trouble uploading the patch for review, ask for help on
     <lilypond-devel@gnu.org>.

The “Abort changes – Reset to origin” button
............................................

          Note: Only use this if your local commit history gets
          hopelessly confused!

   The button labeled “Abort changes – Reset to origin” will copy all
changed files to a subdirectory of ‘$LILYPOND_GIT’ named
‘aborted_edits/’, and will reset the repository to the current state of
the remote repository (at ‘git.sv.gnu.org’).


File: lilypond-contributor.info,  Node: git-cl,  Next: Compiling with LilyDev,  Prev: lily-git,  Up: Quick start

2.3 git-cl
==========

* Menu:

* Installing git-cl::
* Updating git-cl::
* Configuring git-cl::

Git-cl is a ‘helper script’ that uploads patches to Google’s Rietveld
Code Review Tool – used by the developers for patch review – and, at the
same time, updates LilyPond’s issue tracker.


File: lilypond-contributor.info,  Node: Installing git-cl,  Next: Updating git-cl,  Up: git-cl

Installing ‘git-cl’
-------------------

          Note: LilyDev users can jump straight to the next section on
          updating ‘git-cl’ as it will already be installed in your home
          directory.

  1. Download ‘git-cl’ by running the command:

          git clone https://github.com/gperciva/git-cl.git

     or, if that command fails for any reason, try:

          git clone git://github.com/gperciva/git-cl.git

  2. Add the ‘git-cl/’ directory to your PATH or create a symbolic link
     to the ‘git-cl’ and ‘upload.py’ scripts in one of your PATH
     directories (e.g.  ‘$HOME/bin’).

     In GNU/Linux you can add directories to PATH by adding this line to
     your ‘.bashrc’ file located in your home directory:

          PATH=~/directory_containing_git-cl:"${PATH}"


File: lilypond-contributor.info,  Node: Updating git-cl,  Next: Configuring git-cl,  Prev: Installing git-cl,  Up: git-cl

Updating ‘git-cl’
-----------------

LilyDev users should make sure that they always have the latest version
of git-cl installed.  It is possible that changes have been made to
git-cl that are not (yet) included in the version of LilyDev that you
are using.

Using a terminal run the following commands:

     cd ~/git-cl/
     git pull

   This will download and update you to the lastest version of git-cl.


File: lilypond-contributor.info,  Node: Configuring git-cl,  Prev: Updating git-cl,  Up: git-cl

Configuring ‘git-cl’
--------------------

Because ‘git-cl’ updates two separate websites (Google’s Rietveld Code
Review Tool and LilyPond’s issue tracker) you _must_ have a valid user
account (login and password) for both sites.

Set up a login account for Rietveld Code Review Tool
....................................................

For the Rietveld Code Review Tool you will need a Google account but
this does _not_ require ‘Google’ email address; i.e.  _any_ email
address for your Google account can be used.  Just select the option “I
prefer to use my current email address” when you sign up with Google.

          Note: In order for ‘git-cl’ to work correctly with this Google
          account, your Google Account Settings must have the ‘Access
          for less secure apps’ set to ‘Allowed’ – this is normally the
          default setting.

Set up a login account for LilyPond’s Issue Tracker
...................................................

Please register a user account at
‘https://sourceforge.net/user/registration’ preferably using the same
email address that you want to use LilyPond Developer mailing list
login.

Once you have created this Sourceforge user account, send an email to
the LilyPond Developer’s mailing list (‘lilypond-devel@gnu.org’) asking
for write access to the issue tracker along with your Sourceforce
_Username_ (not email address) and someone will then be able to set this
up for you.

Authorizing git-cl for the LilyPond issue tracker
.................................................

The ‘git-cl’ command itself also needs to be ‘authorized’ so that it can
access the LilyPond issue tracker.

  1. Once you have been given a valid login for the LilyPond issue
     tracker, go to the ‘Account settings’ and select the ‘OAuth’ tab.

  2. Locate the ‘Register New Application’ section and enter ‘git-cl’ in
     the ‘Application Name:’ field.

  3. Click on the ‘Register new application’ button.  You should now see
     ‘git-cl’ listed under the ‘My Applications’ section.

  4. Click on the ‘Generate Bearer Token’ button.  You should now see
     ‘git-cl’ listed under the ‘Authorized Applications’ section along
     with a value for the ‘Bearer Token’ entry.  This value is used, in
     the next steps, to allow git-cl to access and update the LilyPond
     issue tracker.

Installing ca-certificates
..........................

In order to have ‘git-cl’ properly update issues on the SourceForge
Allura issue tracker, you must have the package ‘ca-certificates’
installed.  You can check to see if the package is installed with

     apt --installed list | grep ca-certificates

   If ‘ca-certificates’ is installed, you will get a result that shows
the version that is installed.  If it is not installed, there will be no
version displayed.

   Install ‘ca-certificates’ with the following:

     sudo apt-get install ca-certificates

Running git-cl for the first time
.................................

  1. Using a terminal, move to the top level of the ‘$LILYPOND_GIT’
     directory and then run ‘git-cl’ with the ‘config’ option:

          cd $LILYPOND_GIT
          git-cl config

     You will see a series of prompts.  For most of them you can simply
     accept the default value by responding with a newline (i.e.  by
     pressing return or enter).

  2. The prompt for the ‘Rietveld server’ (the patch review tool), which
     defaults to ‘codereview.appspot.com’

          Rietveld server (host[:port]) [codereview.appspot.com]:

  3. The prompt for the ‘Allura server’ (the issue tracker), which
     defaults to ‘https://sourceforge.net/p/testlilyissues/issues/’

          Allura server [https://sourceforge.net/p/testlilyissues/issues/]:

  4. When prompted for the ‘Allura bearer token’ copy/paste the value
     generated in the previous steps for _Authorising git-cl for the
     LilyPond issue tracker_

          Allura bearer token (see https://sourceforge.net/auth/oauth/): fdbfca60801533465480

               Note: The above is a ‘fake’ bearer token used just for
               illustration.  Do not use this value.

  5. Finally, the prompt for the ‘CC list’, which defaults to
     ‘lilypond-devel@gnu.org’, the LilyPond Developer’s email list.

          CC list ("x" to clear) [lilypond-devel@gnu.org]:

   The ‘git-cl’ script should now be correctly configured for use.


File: lilypond-contributor.info,  Node: Compiling with LilyDev,  Next: Now start work!,  Prev: git-cl,  Up: Quick start

2.4 Compiling with LilyDev
==========================

LilyDev is our ‘remix’ of Debian which contains all the necessary
dependencies to do LilyPond development; for more information, see *note
LilyDev::.

Preparing the build
...................

To prepare the build directory, enter (or copy&paste) the below text.
This should take less than a minute.

     cd $LILYPOND_GIT
     sh autogen.sh --noconfigure
     mkdir -p build/
     cd build/
     ../configure

Building ‘lilypond’
...................

Compiling LilyPond will take anywhere between 1 and 15 minutes on most
‘modern’ computers – depending on CPU and available RAM. We also
recommend that you minimize the terminal window while it is building;
this can help speed up on compilation times.

     cd $LILYPOND_GIT/build/
     make

It is possible to run ‘make’ with the ‘-j’ option to help speed up
compilation times even more.  See *note Compiling LilyPond::

   You may run the compiled ‘lilypond’ with:

     cd $LILYPOND_GIT/build/
     out/bin/lilypond my-file.ly

Building the documentation
..........................

Compiling the documentation is a much more involved process, and will
likely take 2 to 10 hours.

     cd $LILYPOND_GIT/build/
     make
     make doc

   The documentation is put in ‘out-www/offline-root/’.  You may view
the html files by entering the below text; we recommend that you
bookmark the resulting page:

     firefox $LILYPOND_GIT/build/out-www/offline-root/index.html

Installing
..........

Don’t.  There is no reason to install LilyPond within LilyDev.  All
development work can (and should) stay within the ‘$LILYPOND_GIT’
directory, and any personal composition or typesetting work should be
done with an official GUB release.

Problems and other options
..........................

To select different build options, or isolate certain parts of the
build, or to use multiple CPUs while building, read *note Compiling::.

   In particular, contributors working on the documentation should be
aware of some bugs in the build system, and should read the workarounds
in *note Generating documentation::.


File: lilypond-contributor.info,  Node: Now start work!,  Prev: Compiling with LilyDev,  Up: Quick start

2.5 Now start work!
===================

LilyDev users may now skip to the chapter which is aimed at their
intended contributions:

   • *note Documentation work::
   • *note Translating the documentation::
   • *note Website work::
   • *note Regression tests::
   • *note Programming work::

   These chapters are mainly intended for people not using LilyDev, but
they contain extra information about the “behind-the-scenes” activities.
We recommend that you read these at your leisure, a few weeks after
beginning work with LilyDev.

   • *note Working with source code::
   • *note Compiling::


File: lilypond-contributor.info,  Node: Working with source code,  Next: Compiling,  Prev: Quick start,  Up: Top

3 Working with source code
**************************

          Note: New contributors should read *note Quick start::, and in
          particular *note lily-git::, instead of this chapter.

   Advanced contributors will find this material quite useful,
particularly if they are working on major new features.

* Menu:

* Manually installing lily-git.tcl::
* Starting with Git::
* Basic Git procedures::
* Advanced Git procedures::
* Git on Windows::
* Repository directory structure::
* Other Git documentation::


File: lilypond-contributor.info,  Node: Manually installing lily-git.tcl,  Next: Starting with Git,  Up: Working with source code

3.1 Manually installing lily-git.tcl
====================================

We have created an easy-to-use GUI to simplify git for new contributors.
If you are comfortable with the command-line, then skip ahead to *note
Starting with Git::.

          Note: These instructions are only for people who are _not_
          using *note LilyDev::.

  1. If you haven’t already, download and install Git.

        • Windows users: download the ‘.exe’ file labeled “Full
          installer for official Git” from:

               <https://git-for-windows.github.io/>

        • Other operating systems: either install ‘git’ with your
          package manager, or download it from the “Binaries” section
          of:

               <http://git-scm.com/download>

  2. Download the ‘lily-git.tcl’ script from:

          <http://git.sv.gnu.org/cgit/lilypond.git/plain/scripts/auxiliar/lily-git.tcl>

  3. To run the program from the command line, navigate to the directory
     containing ‘lily-git.tcl’ and enter:

          wish lily-git.tcl

  4. Click on the “Get source” button.

     This will create a directory called ‘lilypond-git/’ within your
     home directory, and will download the source code into that
     directory (around 150 Mb).  When the process is finished, the
     “Command output” window will display “Done”, and the button label
     will change to say “Update source”.

  5. Navigate to the ‘lilypond-git/’ directory to view the source files.

          Note: Throughout the rest of this manual, most command-line
          input should be entered from ‘$LILYPOND_GIT’.  This is
          referred to as the _top source directory_.

   Further instructions are in *note How to use lily-git::.


File: lilypond-contributor.info,  Node: Starting with Git,  Next: Basic Git procedures,  Prev: Manually installing lily-git.tcl,  Up: Working with source code

3.2 Starting with Git
=====================

Using the Git program directly (as opposed to using the ‘lily-git.tcl’
GUI) allows you to have much greater control over the contributing
process.  You should consider using Git if you want to work on complex
projects, or if you want to work on multiple projects concurrently.

* Menu:

* Setting up::
* Git for the impatient::
* Other repositories::
* Downloading remote branches::


File: lilypond-contributor.info,  Node: Setting up,  Next: Git for the impatient,  Up: Starting with Git

3.2.1 Setting up
----------------

          Note: These instructions assume that you are using the
          command-line version of Git 1.5 or higher.  Windows users
          should skip to *note Git on Windows::.

* Menu:

* Installing Git::
* Initializing a repository::
* Configuring Git::


File: lilypond-contributor.info,  Node: Installing Git,  Next: Initializing a repository,  Up: Setting up

Installing Git
..............

If you are using a Unix-based machine, the easiest way to download and
install Git is through a package manager such as ‘rpm’ or ‘apt-get’ –
the installation is generally automatic.  The only required package is
(usually) called ‘git-core’, although some of the auxiliary ‘git*’
packages are also useful (such as ‘gitk’).

   Alternatively, you can visit the Git website (<http://git-scm.com/>)
for downloadable binaries and tarballs.


File: lilypond-contributor.info,  Node: Initializing a repository,  Next: Configuring Git,  Prev: Installing Git,  Up: Setting up

Initializing a repository
.........................

Once Git is installed, get a copy of the source code:

     git clone git://git.sv.gnu.org/lilypond.git ~/lilypond-git

   The above command will put the it in ‘~/lilypond-git’, where ‘~’
represents your home directory.

Technical details
.................

This creates (within the ‘$LILYPOND_GIT’ directory) a subdirectory
called ‘.git/’, which Git uses to keep track of changes to the
repository, among other things.  Normally you don’t need to access it,
but it’s good to know it’s there.


File: lilypond-contributor.info,  Node: Configuring Git,  Prev: Initializing a repository,  Up: Setting up

Configuring Git
...............

          Note: Throughout the rest of this manual, all command-line
          input should be entered from the top directory of the Git
          repository being discussed (eg.  ‘$LILYPOND_GIT’).  This is
          referred to as the _top source directory_.

   Before working with the copy of the main LilyPond repository, you
should configure some basic settings with the ‘git config’ command.  Git
allows you to set both global and repository-specific options.

   To configure settings that affect all repositories, use the
‘--global’ command line option.  For example, the first two options that
you should always set are your NAME and EMAIL, since Git needs these to
keep track of commit authors:

     git config --global user.name "JOHN SMITH"
     git config --global user.email JOHN@EXAMPLE.COM

   To configure Git to use colored output where possible, use:

     git config --global color.ui auto

   The text editor that opens when using ‘git commit’ can also be
changed.  If none of your editor-related environment variables are set
($GIT_EDITOR, $VISUAL, or $EDITOR), the default editor is usually ‘vi’
or ‘vim’.  If you’re not familiar with either of these, you should
probably change the default to an editor that you know how to use.  For
example, to change the default editor to ‘nano’, enter:

     git config --global core.editor NANO

   Finally, and in some ways most importantly, let’s make sure that we
can easily see the state of our working copy, without the need of typing
‘git status’ repeatedly.  If you’re not using LilyDev, add the following
lines to your ‘~/.bashrc’:

export PS1="\u@\h \w\$(__git_ps1)$ "
export GIT_PS1_SHOWDIRTYSTATE=true
export GIT_PS1_SHOWUNTRACKEDFILES=true
export GIT_PS1_SHOWUPSTREAM=auto

   The first line will show the branch we’re on.  The other lines will
use some symbols next to the branch name to indicate some kind of state.
“*” means that there are unstaged changes, “+” indicates staged changes;
if there are untracked files, a “%” will appear.  Finally, we can also
see if our HEAD is behind (“<”) or ahead (“>”) of its upstream, and if
they have diverged (“<>”) or they are synced (“=”).

   You may need to install the additional ‘bash-completion’ package, but
it is definitely worth it.  After installation you must log out, and
then log back in again to enable it.

Technical details
.................

Git stores the information entered with ‘git config --global’ in the
file ‘.gitconfig’, located in your home directory.  This file can also
be modified directly, without using ‘git config’.  The ‘.gitconfig’ file
generated by the above commands would look like this:

     [user]
             name = John Smith
             email = john@example.com
     [color]
             ui = auto
     [core]
             editor = nano

   Using the ‘git config’ command _without_ the ‘--global’ option
configures repository-specific settings, which are stored in the file
‘.git/config’.  This file is created when a repository is initialized
(using ‘git init’), and by default contains these lines:

     [core]
             repositoryformatversion = 0
             filemode = true
             bare = false
             logallrefupdates = true

   However, since different repository-specific options are recommended
for different development tasks, it is best to avoid setting any now.
Specific recommendations will be mentioned later in this manual.


File: lilypond-contributor.info,  Node: Git for the impatient,  Next: Other repositories,  Prev: Setting up,  Up: Starting with Git

3.2.2 Git for the impatient
---------------------------

     Advanced note: The intent of this subsection is to get you working
     on lilypond as soon as possible.  If you want to learn about git,
     go read *note Other Git documentation::.
     Also, these instructions are designed to eliminate the most common
     problems we have found in using git.  If you already know git and
     have a different way of working, great!  Feel free to ignore the
     advice in this subsection.

   Ok, so you’ve been using ‘lily-git.tcl’ for a while, but it’s time to
take the next step.  Since our review process delays patches by 60-120
hours, and you want to be able to work on other stuff while your
previous work is getting reviewed, you’re going to use *branches*.

   You can think of a branch as being a separate copy of the source
code.  But don’t worry about it.

Start work: make a new branch
.............................

Let’s pretend you want to add a section to the Contributor’s Guide about
using branches.

   Start by updating the repository, then making a new branch.  Call the
branch anything you want as long as the name starts with ‘dev/’.  Branch
names that don’t begin with ‘dev/’ are reserved for special things in
lilypond.

     git checkout master
     git pull -r origin master
     git branch dev/cg

Switch to that branch
.....................

Nothing has happened to the files yet.  Let’s change into the new
branch.  You can think of this as “loading a file”, although in this
case it’s really “loading a directory and subdirectories full of files”.

     git checkout dev/cg

   Your prompt now shows you that you’re on the other branch:

     gperciva@LilyDev:~/lilypond-git (dev/cg)$

   To be able to manage multiple lilypond issues at once, you’ll need to
switch branches.  You should have each lilypond issue on a separate
branch.  Switching branches is easy:

     git checkout master
     git checkout origin/staging
     git checkout origin/release/unstable
     git checkout dev/cg

   Branches that begin with ‘origin/’ are part of the remote repository,
rather than your local repository, so when you check them out you get a
temporary local branch.  You should never make changes directly on a
branch beginning with ‘origin/’.  You get changes into the remote
repository by making them in local branches, and then pushing them to
‘origin/staging’ as described below.

Make your changes
.................

Edit files, then commit them.

     git commit -a

   Remember how I said that switching to a branch was like “loading a
directory”?  Well, you’ve just “saved a directory”, so that you can
“load” it later.

     Advanced note: If you have used ‘cvs’ or ‘svn’, you may be very
     confused: those programs use “commit” to mean “upload my changes to
     the shared source repository”.  Unfortunately, just to be
     different, ‘git commit’ means “save my changes to the files”.

   When you create a new file, you need to add it to git, then commit
it:

     git add input/regression/avoid-crash-on-condition.ly
     git commit -a

   Edit more files.  Commit them again.  Edit yet more files, commit
them again.  Go eat dinner.  Switch to ‘master’ so you can play with the
latest changes from other developers.  Switch back to your branch and
edit some more.  Commit those changes.

   At this stage, don’t worry about how many commits you have.

Save commits to external files
..............................

Branches are nerve-wracking until you get used to them.  You can save
your hard work as individual ‘.patch’ files.  Be sure to commit your
changes first.

     git commit -a
     git format-patch master

   I personally have between 4 and 20 of those files saved in a special
folder at any point in time.  Git experts might laugh as that behavior,
but I feel a _lot_ better knowing that I’ve got those backups.

Prepare your branch for review
..............................

After committing, you can update your branch with the latest master:

     git commit -a
     git checkout master
     git pull -r origin master
     git checkout dev/cg
     git rebase master

   Due to the speed of lilypond development, sometimes ‘master’ has
changed so much that your branch can no longer be applied to it.  In
that happens, you will have a merge conflict.  Stop for a moment to
either cry or have a stiff drink, then proceed to *note Merge
conflicts::.

Upload your branch
..................

Finally, you’re finished your changes.  Time to upload for review.  Make
sure that you’re on your branch, then upload:

     git checkout dev/cg
     git-cl upload master

Wait for reviews
................

While you’re waiting for a countdown and reviews, go back to master,
make a ‘dev/doc-beams’ branch, and start adding doc suggestions from
issue 12345 from the tracker.  Or make a ‘dev/page-breaks’ and fix bug
in page breaking.  Or whatever.  Don’t worry, your ‘dev/cg’ is safe.

Combining commits (optional unless you have broken commits)
...........................................................

Does the history of your branch look good?

     gitk

   If you have a lot of commits on your branch, you might want to
combine some of them.  Alternately, you may like your commits, but want
to edit the commit messages.

     git rebase -i master

   Follow instructions on the screen.

          Note: This step gives you the power to completely lose your
          work.  Make a backup of your commits by saving them to
          ‘.patch’ files before playing with this.  If you do lose your
          work, don’t despair.  You can get it back by using ‘git
          reflog’.  The use of ‘git reflog’ is not covered here.

          Note: If any of the commits on your branch represent partial
          work that will not pass MAKE && MAKE DOC, you *must* squash
          these commits into a working commit.  Otherwise, your push
          will break staging and will not be able to be merged to
          master.  In general, you will be safer to have one commit per
          push.

Push to staging
...............

When you’ve got the coveted ‘Patch-push’ status, time to prepare your
upload:

     git fetch
     git rebase origin/staging dev/cg~0
     gitk HEAD

          Note: Do not skip the ‘gitk’ step; a quick 5-second check of
          the visual history can save a great deal of frustration later
          on.  You should see a set of your commits that are ahead of
          ‘origin/staging’, with no label for the top commit – only a
          SHA1 id.

          Note: If ‘origin/staging’ and ‘origin/master’ are the same
          commit, your branch (‘dev/cg’ in the example) will also be at
          the top of the ‘gitk’ tree.  This is normal.

   If everything looks good, push it:

     git push origin HEAD:staging

   Then change back to your working branch:

     git checkout dev/cg

          Note: It is a best practice to avoid rebasing any of your
          branches to ‘origin/staging’.  If ‘origin/staging’ is broken,
          it will be deleted and rebuilt.  If you have rebased one of
          your branches to ‘origin/staging’, the broken commits can end
          up in your branch.  The commands given above do the rebase on
          a temporary branch, and avoid changing your working branch.

Delete your branch (safe)
.........................

After a few hours, if there’s nothing wrong with your branch, it should
be automatically moved to ‘origin/master’.  Update, then try removing
your branch:

     git checkout master
     git pull -r origin master
     git branch -d dev/cg

   The last command will fail if the contents of ‘dev/cg’ are not
present in ‘origin/master’.

Delete your branch (UNSAFE)
...........................

Sometimes everything goes wrong.  If you want to remove a branch even
though it will cause your work to be lost (that is, if the contents of
‘dev/cg’ are *not* present in master), follow the instructions in
“Delete your branch (safe)”, but replace the ‘-d’ on the final line with
a ‘-D’.


File: lilypond-contributor.info,  Node: Other repositories,  Next: Downloading remote branches,  Prev: Git for the impatient,  Up: Starting with Git

3.2.3 Other repositories
------------------------

We have a few other code repositories.

* Menu:

* lilypond-extra::
* Grand Unified Builder (GUB)::
* LilyPad::
* yet more repositories::


File: lilypond-contributor.info,  Node: lilypond-extra,  Next: Grand Unified Builder (GUB),  Up: Other repositories

lilypond-extra
..............

There is a separate repository for general administrative scripts, as
well as pictures and media files for the website.  People interested in
working on the website should download this repository, and set their
‘$LILYPOND_WEB_MEDIA_GIT’ environment variable to point to that
repository.

     <https://github.com/gperciva/lilypond-extra>

   To configure an environment variable in bash (the default for most
GNU/Linux distributions),

     export LILYPOND_WEB_MEDIA_GIT=$HOME/dir/of/lilypond-extra/

   Be aware that ‘lilypond-extra’ is the definitive source for some
binary files - in particular PDF versions of papers concerning LilyPond.
To add further PDFs of this sort, all that is necessary is to add the
PDF to ‘lilypond-extra’ and then add a reference to it in the
documentation.  The file will then be copied to the website when ‘make
website’ is run.

   However, pictures that are also used in the documentation build are
mastered in the main git repository.  If any of these is changed, it
should be updated in git, and then the updates copied to
‘lilypond-extra’.


File: lilypond-contributor.info,  Node: Grand Unified Builder (GUB),  Next: LilyPad,  Prev: lilypond-extra,  Up: Other repositories

Grand Unified Builder (GUB)
...........................

Another item of interest might be the Grand Unified Builder, our
cross-platform building tool.  Since it is used by other projects as
well, it is not stored in our gub repository.  For more info, see
<http://lilypond.org/gub>.

   There are two locations for this repository: the version being used
to build lilypond, which is at

     <http://github.com/gperciva/gub>

   and the original version by Jan Nieuwenhuizen, kept at

     <http://github.com/janneke/gub>


File: lilypond-contributor.info,  Node: LilyPad,  Next: yet more repositories,  Prev: Grand Unified Builder (GUB),  Up: Other repositories

LilyPad
.......

Our binary releases on MacOS X and Windows contain a lightweight text
editor.

   To make any modifications the Windows editor, you will need to do the
following:

  1. Clone the git repository from ‘https://github.com/gperciva/lilypad’

  2. Make changes to the source, and check it compiles.  In a Windows
     environment ‘MinGW’ provides both a ‘Git’ installation and a ‘gcc’
     compiler.  This can be obtained from ‘http://www.mingw.org/’

  3. Update the version which is contained in the ‘rsrc.rc’.  Check this
     compiles, too.

  4. Commit the changes with an informative commit message.

  5. Push the changes to github.  You will need to use syntax similiar
     to this:

          git push https://UserName@github.com/gperciva/lilypad.git

     You will need to have push access to the git repository for this to
     be successful.

  6. Make a tarball of the source code to be used by GUB by pulling the
     updated repository from GitHub.  Ensure that the tarball has the
     correct Version number.

  7. Copy the tarball to
     ‘http://lilypond.org/downloads/gub-sources/lilypad/’.  You will
     need to have SSH access to ‘lilypond.org’.  If you do not, contact
     the Release Manager via the lilypond-devel mailing list.

  8. Update GUB to make it use the new tarball by editing
     ‘gub/specs/lilypad.py’ and changing the ‘source =’ line to point to
     the new source.

  9. Push this updated ‘lilypad.py’ version to the GUB repository on
     GitHub.

  10. Test the changes with a new GUB compile.


File: lilypond-contributor.info,  Node: yet more repositories,  Prev: LilyPad,  Up: Other repositories

yet more repositories
.....................

There are a few other repositories floating around, which will hopefully
be documented in the near future.


File: lilypond-contributor.info,  Node: Downloading remote branches,  Prev: Other repositories,  Up: Starting with Git

3.2.4 Downloading remote branches
---------------------------------

          Note: contains obsolete + misleading info

* Menu:

* Organization of remote branches::
* LilyPond repository sources::
* Downloading individual branches::
* Downloading all remote branches::
* Other branches::


File: lilypond-contributor.info,  Node: Organization of remote branches,  Next: LilyPond repository sources,  Up: Downloading remote branches

Organization of remote branches
...............................

The main LilyPond repository is organized into _branches_ to facilitate
development.  These are often called _remote_ branches to distinguish
them from _local_ branches you might create yourself (see *note Using
local branches::).

   The ‘master’ branch contains all the source files used to build
LilyPond, which includes the program itself (both stable and development
releases), the documentation (and its translations), and the website.
Generally, the ‘master’ branch is expected to compile successfully.

   The ‘translation’ branch is a side branch that allows translators to
work without needing to worry about compilation problems.  Periodically,
the Translation Meister (after verifying that it doesn’t break
compilation), will _merge_ this branch into ‘staging’ to incorporate
recent translations.  Similarly, the ‘master’ branch is usually merged
into the ‘translation’ branch after significant changes to the English
documentation.  See *note Translating the documentation:: for details.


File: lilypond-contributor.info,  Node: LilyPond repository sources,  Next: Downloading individual branches,  Prev: Organization of remote branches,  Up: Downloading remote branches

LilyPond repository sources
...........................

The recommended source for downloading a copy of the main repository is:

     git://git.sv.gnu.org/lilypond.git

   However, if your internet router filters out connections using the
GIT protocol, or if you experience difficulty connecting via GIT, you
can try these other sources:

     ssh://git.sv.gnu.org/srv/git/lilypond.git
     http://git.sv.gnu.org/r/lilypond.git

   The SSH protocol can only be used if your system is properly set up
to use it.  Also, the HTTP protocol is slowest, so it should only be
used as a last resort.


File: lilypond-contributor.info,  Node: Downloading individual branches,  Next: Downloading all remote branches,  Prev: LilyPond repository sources,  Up: Downloading remote branches

Downloading individual branches
...............................

          Note: obsolete, should be deleted!

   Once you have initialized an empty Git repository on your system (see
*note Initializing a repository::), you can download a remote branch
into it.  Make sure you know which branch you want to start with.

   To download the ‘master’ branch, enter the following:

     git remote add -ft master -m master \
       origin git://git.sv.gnu.org/lilypond.git/

   To download the ‘translation’ branch, enter:

     git remote add -ft translation -m \
       translation origin git://git.sv.gnu.org/lilypond.git/

   The ‘git remote add’ process could take up to ten minutes, depending
on the speed of your connection.  The output will be something like
this:

     Updating origin
     remote: Counting objects: 235967, done.
     remote: Compressing objects: 100% (42721/42721), done.
     remote: Total 235967 (delta 195098), reused 233311 (delta 192772)
     Receiving objects: 100% (235967/235967), 68.37 MiB | 479 KiB/s, done.
     Resolving deltas: 100% (195098/195098), done.
     From git://git.sv.gnu.org/lilypond
      * [new branch]      master     -> origin/master
     From git://git.sv.gnu.org/lilypond
      * [new tag]         flower/1.0.1 -> flower/1.0.1
      * [new tag]         flower/1.0.10 -> flower/1.0.10
     ⋮
      * [new tag]         release/2.9.6 -> release/2.9.6
      * [new tag]         release/2.9.7 -> release/2.9.7

   When ‘git remote add’ is finished, the remote branch should be
downloaded into your repository—though not yet in a form that you can
use.  In order to browse the source code files, you need to _create_ and
_checkout_ your own local branch.  In this case, however, it is easier
to have Git create the branch automatically by using the ‘checkout’
command on a non-existent branch.  Enter the following:

     git checkout -b BRANCH origin/BRANCH

where ‘BRANCH’ is the name of your tracking branch, either ‘master’ or
‘translation’.

   Git will issue some warnings; this is normal:

     warning: You appear to be on a branch yet to be born.
     warning: Forcing checkout of origin/master.
     Branch master set up to track remote branch master from origin.
     Already on 'master'

   By now the source files should be accessible—you should be able to
edit any files in the ‘$LILYPOND_GIT’ directory using a text editor of
your choice.  But don’t start just yet!  Before editing any source
files, learn how to keep your changes organized and prevent problems
later—read *note Basic Git procedures::.

Technical Details
.................

The ‘git remote add’ command should add some lines to your local
repository’s ‘.git/config’ file:

     [remote "origin"]
             url = git://git.sv.gnu.org/lilypond.git/
             fetch = +refs/heads/master:refs/remotes/origin/master


File: lilypond-contributor.info,  Node: Downloading all remote branches,  Next: Other branches,  Prev: Downloading individual branches,  Up: Downloading remote branches

Downloading all remote branches
...............................

To download all remote branches at once, you can ‘clone’ the entire
repository:

     git clone git://git.sv.gnu.org/lilypond.git


File: lilypond-contributor.info,  Node: Other branches,  Prev: Downloading all remote branches,  Up: Downloading remote branches

Other branches
..............

Most contributors will never need to touch the other branches.  If you
wish to do so, you will need more familiarity with Git; please see *note
Other Git documentation::.

   • ‘dev/XYZ’: These branches are for individual developers.  They
     store code which is not yet stable enough to be added to the
     ‘master’ branch.

   • ‘stable/XYZ’: The branches are kept for archival reasons.

   • ‘archive/XYZ’: The branches are kept for archival reasons.


File: lilypond-contributor.info,  Node: Basic Git procedures,  Next: Advanced Git procedures,  Prev: Starting with Git,  Up: Working with source code

3.3 Basic Git procedures
========================

* Menu:

* The Git contributor's cycle::
* Pulling and rebasing::
* Using local branches::
* Commits::
* Patches::
* Uploading a patch for review::
* The patch review cycle::


File: lilypond-contributor.info,  Node: The Git contributor's cycle,  Next: Pulling and rebasing,  Up: Basic Git procedures

3.3.1 The Git contributor’s cycle
---------------------------------

Here is a simplified view of the contribution process on Git:

  1. Update your local repository by _pulling_ the most recent updates
     from the remote repository.

  2. Edit source files within your local repository’s _working
     directory_.

  3. _Commit_ the changes you’ve made to a local _branch_.

  4. Generate a _patch_ to share your changes with the developers.


File: lilypond-contributor.info,  Node: Pulling and rebasing,  Next: Using local branches,  Prev: The Git contributor's cycle,  Up: Basic Git procedures

3.3.2 Pulling and rebasing
--------------------------

When developers push new patches to the ‘git.sv.gnu.org’ repository,
your local repository is *not* automatically updated.  It is important
to keep your repository up-to-date by periodically _pulling_ the most
recent _commits_ from the remote branch.  Developers expect patches to
be as current as possible, since outdated patches require extra work
before they can be used.

   Occasionally you may need to rework some of your own modifications to
match changes made to the remote branch (see *note Resolving
conflicts::), and it’s considerably easier to rework things
incrementally.  If you don’t update your repository along the way, you
may have to spend a lot of time resolving branch conflicts and
reconfiguring much of the work you’ve already done.

   Fortunately, Git is able to resolve certain types of branch conflicts
automatically with a process called _rebasing_.  When rebasing, Git
tries to modify your old commits so they appear as new commits (based on
the latest updates).  For a more involved explanation, see the
‘git-rebase’ man page.

   To pull without rebasing (recommended for translators), use the
following command:

     git pull    # recommended for translators

   If you’re tracking the remote ‘master’ branch, you should add the
‘-r’ option (short for ‘--rebase’) to keep commits on your local branch
current:

     git pull -r # use with caution when translating

   If you don’t edit translated documentation and don’t want to type
‘-r’ every time, configure the master branch to rebase by default with
this command:

     git config branch.master.rebase true

   If pull fails because of a message like

     error: Your local changes to 'Documentation/learning/tutorial.itely'
     would be overwritten by merge.  Aborting.

or

     Documentation/learning/tutorial.itely: needs update
     refusing to pull with rebase: your working tree is not up-to-date

it means that you have modified some files in you working tree without
committing changes (see *note Commits::); you can use the ‘git stash’
command to work around this:

     git stash      # save uncommitted changes
     git pull -r    # pull using rebase (translators omit "-r")
     git stash pop  # reapply previously saved changes

   Note that ‘git stash pop’ will try to apply a patch, and this may
create a conflict.  If this happens, see *note Resolving conflicts::.

   TODO: I think the next paragraph is confusing.  Perhaps prepare the
reader for new terms ‘committish’ and ‘head’?  -mp

          Note: translators and documentation editors, if you have
          changed committishes in the head of translated files using
          commits you have not yet pushed to ‘git.sv.gnu.org’, please do
          not rebase.  If you want to avoid wondering whether you should
          rebase each time you pull, please always use committishes from
          master and/or translation branch on ‘git.sv.gnu.org’, which in
          particular implies that you must push your changes to
          documentation except committishes updates (possibly after
          having rebased), then update the committishes and push them.

   TODO: when committishes automatic conditional update have been tested
and documented, append the following to the warning above: Note that
using update-committishes make target generally touches committishes.

Technical details
.................

The ‘git config’ command mentioned above adds the line ‘rebase = true’
to the master branch in your local repository’s ‘.git/config’ file:

     [branch "master"]
             remote = origin
             merge = refs/heads/master
             rebase = true


File: lilypond-contributor.info,  Node: Using local branches,  Next: Commits,  Prev: Pulling and rebasing,  Up: Basic Git procedures

3.3.3 Using local branches
--------------------------

* Menu:

* Creating and removing branches::
* Listing branches and remotes::
* Checking out branches::
* Merging branches::


File: lilypond-contributor.info,  Node: Creating and removing branches,  Next: Listing branches and remotes,  Up: Using local branches

Creating and removing branches
..............................

Local branches are useful when you’re working on several different
projects concurrently.  To create a new branch, enter:

     git branch NAME

   To delete a branch, enter:

     git branch -d NAME

   Git will ask you for confirmation if it sees that data would be lost
by deleting the branch.  Use ‘-D’ instead of ‘-d’ to bypass this.  Note
that you cannot delete a branch if it is currently checked out.


File: lilypond-contributor.info,  Node: Listing branches and remotes,  Next: Checking out branches,  Prev: Creating and removing branches,  Up: Using local branches

Listing branches and remotes
............................

You can get the exact path or URL of all remote branches by running:

     git remote -v

   To list Git branches on your local repositories, run

     git branch     # list local branches only
     git branch -r  # list remote branches
     git branch -a  # list all branches


File: lilypond-contributor.info,  Node: Checking out branches,  Next: Merging branches,  Prev: Listing branches and remotes,  Up: Using local branches

Checking out branches
.....................

To know the currently checked out branch, i.e.  the branch whose source
files are present in your working tree, read the first line of the
output of

     git status

The currently checked out branch is also marked with an asterisk in the
output of ‘git branch’.

   You can check out another branch ‘OTHER_BRANCH’, i.e.  check out
‘OTHER_BRANCH’ to the working tree, by running

     git checkout OTHER_BRANCH

   Note that it is possible to check out another branch while having
uncommitted changes, but it is not recommended unless you know what you
are doing; it is recommended to run ‘git status’ to check this kind of
issue before checking out another branch.


File: lilypond-contributor.info,  Node: Merging branches,  Prev: Checking out branches,  Up: Using local branches

Merging branches
................

To merge branch ‘FOO’ into branch ‘BAR’, i.e.  to “add” all changes made
in branch ‘FOO’ to branch ‘BAR’, run

     git checkout BAR
     git merge FOO

   If any conflict happens, see *note Resolving conflicts::.

   There are common usage cases for merging: as a translator, you will
often want the Translations meister to merge ‘master’ into
‘translation’; on the other hand, the Translations meister wants to
merge ‘translation’ into ‘staging’ whenever he has checked that
‘translation’ builds successfully.


File: lilypond-contributor.info,  Node: Commits,  Next: Patches,  Prev: Using local branches,  Up: Basic Git procedures

3.3.4 Commits
-------------

* Menu:

* Understanding commits::
* How to make a commit::
* Commit messages::


File: lilypond-contributor.info,  Node: Understanding commits,  Next: How to make a commit,  Up: Commits

Understanding commits
.....................

Technically, a _commit_ is a single point in the history of a branch,
but most developers use the term to mean a _commit object_, which stores
information about a particular revision.  A single commit can record
changes to multiple source files, and typically represents one logical
set of related changes (such as a bug-fix).  You can list the ten most
recent commits in your current branch with this command:

     git log -10 --oneline

   If you’re using an older version of Git and get an ‘unrecognized
argument’ error, use this instead:

     git log -10 --pretty=oneline --abbrev-commit

   More interactive lists of the commits on the remote ‘master’ branch
are available at
<http://git.sv.gnu.org/gitweb/?p=lilypond.git;a=shortlog> and
<http://git.sv.gnu.org/cgit/lilypond.git/log/>.


File: lilypond-contributor.info,  Node: How to make a commit,  Next: Commit messages,  Prev: Understanding commits,  Up: Commits

How to make a commit
....................

Once you have modified some source files in your working directory, you
can make a commit with the following procedure:

  1. Make sure you’ve configured Git properly (see *note Configuring
     Git::).  Check that your changes meet the requirements described in
     *note Code style:: and/or *note Documentation policy::.  For
     advanced edits, you may also want to verify that the changes don’t
     break the compilation process.

  2. Run the following command:

          git status

     to make sure you’re on the right branch, and to see which files
     have been modified, added or removed, etc.  You may need to tell
     Git about any files you’ve added by running one of these:

          git add FILE  # add untracked FILE individually
          git add .     # add all untracked files in current directory

     After ‘git add’, run ‘git status’ again to make sure you got
     everything.  You may also need to modify ‘GNUmakefile’.

  3. Preview the changes about to be committed (to make sure everything
     looks right) with:

          git diff HEAD

     The ‘HEAD’ argument refers to the most recent commit on the
     currently checked-out branch.

  4. Generate the commit with:

          git commit -a

     The ‘-a’ is short for ‘--all’ which includes modified and deleted
     files, but only those newly created files that have previously been
     added.


File: lilypond-contributor.info,  Node: Commit messages,  Prev: How to make a commit,  Up: Commits

Commit messages
...............

When you run the ‘git commit -a’ command, Git automatically opens the
default text editor so you can enter a _commit message_.  If you find
yourself in a foreign editing environment, you’re probably in ‘vi’ or
‘vim’.  If you want to switch to an editor you’re more familiar with,
quit by typing ‘:q!’ and pressing ‘<Enter>’.  See *note Configuring
Git:: for instructions on changing the default editor.

   In any case, Git will open a text file for your commit message that
looks like this:


     # Please enter the commit message for your changes.  Lines starting
     # with '#' will be ignored, and an empty message aborts the commit.
     # On branch master
     # Changes to be committed:
     #   (use "git reset HEAD <file>..." to unstage)
     #
     #	modified:   working.itexi
     #

   Your commit message should begin with a one-line summary describing
the change (no more than 50 characters long), and if necessary a blank
line followed by several lines giving the details:

     Doc: add Baerenreiter and Henle solo cello suites

     Added comparison of solo cello suite engravings to new essay with
     high-res images, fixed cropping on Finale example.

   Commit messages often start with a short prefix describing the
general location of the changes.

   • Doc: and Doc-**: If a commit affects the documentation in English
     (or in several languages simultaneously) the commit message should
     be prefixed with “Doc: ”.  If the commit affects only one of the
     translations, the commit message should be prefixed with
     “Doc-**: ”, where ** is the two-letter language code.

   • Web: and Web-**: Commits that affect the website should use “Web: ”
     for English, and “Web-**: ” for other languages.

   • CSS: Commits that change CSS files should use “Web: CSS: ” or
     “Doc: CSS: ” depending on whether they affect the website or the
     documentation/manuals.

   • Changes to a single file are often prefixed with the name of the
     file involved.

   Visit the links listed in *note Understanding commits:: for examples.


File: lilypond-contributor.info,  Node: Patches,  Next: Uploading a patch for review,  Prev: Commits,  Up: Basic Git procedures

3.3.5 Patches
-------------

* Menu:

* How to make a patch::
* Emailing patches::


File: lilypond-contributor.info,  Node: How to make a patch,  Next: Emailing patches,  Up: Patches

How to make a patch
...................

If you want to share your changes with other contributors and
developers, you need to generate _patches_ from your commits.  We prefer
it if you follow the instructions in *note Uploading a patch for
review::.  However, we present an alternate method here.

   You should always run ‘git pull -r’ (translators should leave off the
‘-r’) before doing this to ensure that your patches are as current as
possible.

   Once you have made one or more commits in your local repository, and
pulled the most recent commits from the remote branch, you can generate
patches from your local commits with the command:

     git format-patch origin

   The ‘origin’ argument refers to the remote tracking branch at
‘git.sv.gnu.org’.  This command generates a separate patch for each
commit that’s in the current branch but not in the remote branch.
Patches are placed in the current working directory and will have names
that look something like this:

     0001-Doc-Fix-typos.patch
     0002-Web-Remove-dead-links.patch
     ⋮

   Send an email (must be less than 64 KB) to <lilypond-devel@gnu.org>
briefly explaining your work, with the patch files attached.
Translators should send patches to <translations@lilynet.net>.  After
your patches are reviewed, the developers may push one or more of them
to the main repository or discuss them with you.


File: lilypond-contributor.info,  Node: Emailing patches,  Prev: How to make a patch,  Up: Patches

Emailing patches
................

The default ‘x-diff’ MIME type associated with patch files (i.e., files
whose name ends in ‘.patch’) means that the encoding of line endings may
be changed from UNIX to DOS format when they are sent as attachments.
Attempting to apply such an inadvertently altered patch will cause git
to fail with a message about ‘whitespace errors’.

   The solution to such problems is surprisingly simple—just change the
default file extension of patches generated by git to end in ‘.txt’, for
example:

     git config format.suffix '.patch.txt'

   This should cause email programs to apply the correct base64 encoding
to attached patches.

   If you receive a patch with DOS instead of UNIX line-endings, it can
be converted back using the ‘dos2unix’ utility.

   Lots of useful information on email complications with patches is
provided on the Wine wiki at <http://wiki.winehq.org/GitWine>.


File: lilypond-contributor.info,  Node: Uploading a patch for review,  Next: The patch review cycle,  Prev: Patches,  Up: Basic Git procedures

3.3.6 Uploading a patch for review
----------------------------------

Any non-trivial change should be uploaded to our “Rietveld” code review
website:

     <http://codereview.appspot.com/>

   You can upload a patch for review by using our custom ‘git-cl’
‘helper-script’.  This section assumes you have already installed,
updated, and configured ‘git-cl’.  See *note git-cl::.

          Note: Unless you are familiar with branches, only work on one
          set of changes at once.

   There are two methods, depending on your git setup.

   • *Master branch*: (easy option)

     If you added your patch to ‘master’, then:

          git pull -r
          git-cl upload origin/master

     If you have git push ability, make sure that you _remove_ your
     patch (with ‘git rebase’ or ‘git reset’) before pushing other
     stuff.

     Notifications of patches are automatically added to our issue
     tracker to reduce the chance of patches getting lost.  To suppress
     this (not recommended), add the ‘-n / --no-code-issue’ option.

   • *Separate branch*: (complicated option)

     Ensure your changes are committed in a separate branch, which
     should differ from the reference branch to be used (usually
     ‘origin/master’) by just the changes to be uploaded.  Checkout the
     branch with the changes:

          git checkout some-branch-with-changes

     If the reference branch is to be ‘origin/master’, ensure that the
     branch containing the changes is up-to-date with it.  Use ‘git
     rebase’ or ‘git pull -r’ to rebase the branch to the head of
     ‘origin/master’.  For example:

          git pull -r origin master

     Finally, start the upload by entering:

          git-cl upload <reference SHA1 ID>

     where <reference SHA1 ID> is the SHA1 ID of the commit to be used
     as a reference source for the patch.  Generally, this will be the
     SHA1 ID of origin/master, and in that case you can just use the
     command:

          git-cl upload origin/master

   First you will see a terminal editor where you can edit the message
that will accompany your patch.  ‘git-cl’ will respect the ‘EDITOR’
environment variable if defined, otherwise it will use ‘vi’ as the
default editor.

   After prompting for your Google email address and password, the patch
set will be posted to Rietveld, and you will be given a URL for your
patch.

          Note: Some installations of git-cl fail when uploading a patch
          with certain filename extensions.  If this happens, it can
          generally be fixed by editing the list of exceptions at top of
          ‘git-cl.py’.

Announcing your patch set
.........................

You should then announce the patch by logging into the code review issue
webpage and using “Publish + Mail Comments” to add a (mostly bogus)
comment to your issue.  The text of your comment will be sent to our
developer mailing list.

          Note: There is no automatic notification of a new patch; you
          must add a comment yourself.

Revisions
.........

As revisions are made in response to comments, successive patch sets for
the same issue can be uploaded by reissuing the git-cl command with the
modified branch checked out.

   Sometimes in response to comments on revisions, the best way to work
may require creation of a new branch in git.  In order to associate the
new branch with an existing Rietveld issue, the following command can be
used:

     git-cl issue issue-number

where ‘issue-number’ is the number of the existing Rietveld issue.

Resetting git-cl
................

If ‘git-cl’ becomes confused, you can “reset” it by running:

     git-cl issue 0


File: lilypond-contributor.info,  Node: The patch review cycle,  Prev: Uploading a patch for review,  Up: Basic Git procedures

3.3.7 The patch review cycle
----------------------------

Your patch will be available for reviews for the next few hours or days.
Three times a week, patches with no known problems are gathered into a
“patch countdown” and their status changed to ‘patch-countdown’.  The
countdown is a 48-hour waiting period in which any final reviews or
complaints should be made.

   During the countdown, your patch may be set to ‘patch-needs_work’,
indicating that you should fix something (or at least discuss why the
patch needs no modification).  If no problems are found, the patch will
be set to ‘patch-push’.

   Once a patch has ‘patch-push’, it should be sent to your mentor for
uploading.  If you have git push ability, look at *note Pushing to
staging::.

   • Patches get added to the tracker and to Rietveld by the “git-cl”
     tool, with a status of “patch-new”.

   • The automated tester, Patchy, verifies that the patch can be
     applied to current master.  By default, it checks that the patch
     allows ‘make’ and ‘make test’ to complete successfully.  It can
     also be configured to check that ‘make doc’ is successful.  If it
     passes, Patchy changes the status to “patch-review” and emails the
     developer list.  If the patch fails, Patchy sets it to
     “patch-needs_work” and notifies the developer list.

   • The Patch Meister reviews the tracker periodically, to list patches
     which have been on review for at least 24 hours.  The list is found
     at

          <http://code.google.com/p/lilypond/issues/list?can=2&q=label:patch%20patch=review&sort=modified+patch&colspec=ID%20Type%20Status%20Priority%20Owner%20Patch%20Summary%20Modified>

   • For each patch, the Handler reviews any discussion on the tracker
     and on Rietveld, to determine whether the patch can go forward.  If
     there is any indication that a developer thinks the patch is not
     ready, the Handler marks it “patch-needs_work” and makes a comment
     regarding the reason, referring to the Rietveld item if needed.

   • Patches with explicit approval, or at least no negative comment,
     can be updated to “patch-countdown”.  When saving the tracker item,
     clear the “send email” box to prevent sending notification for each
     patch.

   • The Patch Meister sends an email to the developer list, with a
     fixed subject line, to enable filtering by email clients:

          PATCH: Countdown to 20130113

     The text of the email sets the deadline for this countdown batch.
     At present, batches are done on Tuesday, Thursday and Sunday
     evenings.

     To create the countdown announcement, use the
     ‘make-countdown-announcement.sh’ script, which takes the deadline
     date, and optionally your name.  Follow the instructions provided:

          cd $LILYPOND_GIT
          scripts/auxiliar/make-countdown-announcement.sh "Jan 1, 2001" James

     The script produces an announcement that is easily readable in all
     email clients.  Also, whenever a new contributor submits a patch,
     you will be prompted to add the new username and author name to the
     script itself, and then commit those changes to the main git
     repository.

   • On the scheduled countdown day, the Patch Meister reviews the
     previous list of patches on countdown, with the same procedure and
     criteria as before.  Patches with no controversy can be set to
     “patch-push” with a courtesy message added to the comment block.

   • Roughly at six month intervals, the Patch Meister can list the
     patches which have been set to “patch-needs-work” and send the
     results to the developer list for review.  In most cases, these
     patches should be marked “patch-abandoned” but this should come
     from the developer if possible.

   • As in most organisations of unpaid volunteers, fixed procedures are
     useful in as much as they get the job done.  In our community,
     there is room for senior developers to bypass normal patch handling
     flows, particularly now that the testing of patches is largely
     automated.  Similarly, the minimum age of 24 hours can reasonably
     be waived if the patch is minor and from an experienced developer.


File: lilypond-contributor.info,  Node: Advanced Git procedures,  Next: Git on Windows,  Prev: Basic Git procedures,  Up: Working with source code

3.4 Advanced Git procedures
===========================

          Note: This section is not necessary for normal contributors;
          these commands are presented for information for people
          interested in learning more about git.

   It is possible to work with several branches on the same local Git
repository; this is especially useful for translators who may have to
deal with both ‘translation’ and a stable branch, e.g.  ‘stable/2.12’.

   Some Git commands are introduced first, then a workflow with several
Git branches of LilyPond source code is presented.

* Menu:

* Merge conflicts::
* Advanced Git concepts::
* Resolving conflicts::
* Reverting all local changes::
* Working with remote branches::
* Git log::
* Applying remote patches::
* Cleaning up multiple patches::
* Commit access::
* Pushing to staging::


File: lilypond-contributor.info,  Node: Merge conflicts,  Next: Advanced Git concepts,  Up: Advanced Git procedures

3.4.1 Merge conflicts
---------------------

To be filled in later, and/or moved to a different section.  I just
wanted to make sure that I had a stub ready somewhere.


File: lilypond-contributor.info,  Node: Advanced Git concepts,  Next: Resolving conflicts,  Prev: Merge conflicts,  Up: Advanced Git procedures

3.4.2 Advanced Git concepts
---------------------------

A bit of Git vocabulary will be explained below.  The following is only
introductory; for a better understanding of Git concepts, you may wish
to read *note Other Git documentation::.

   The ‘git pull origin’ command above is just a shortcut for this
command:

     git pull git://git.sv.gnu.org/lilypond.git/ BRANCH:origin/BRANCH

where ‘BRANCH’ is typically ‘master’ or ‘translation’; if you do not
know or remember, see *note Downloading remote branches:: to remember
which commands you issued or which source code you wanted to get.

   A _commit_ is a set of changes made to the sources; it also includes
the committish of the parent commit, the name and e-mail of the _author_
(the person who wrote the changes), the name and e-mail of the
_committer_ (the person who brings these changes into the Git
repository), and a commit message.

   A _committish_ is the SHA1 checksum of a commit, a number made of 40
hexadecimal digits, which acts as the internal unique identifier for
this commit.  To refer to a particular revision, don’t use vague
references like the (approximative) date, simply copy and paste the
committish.

   A _branch_ is nothing more than a pointer to a particular commit,
which is called the _head_ of the branch; when referring to a branch,
one often actually thinks about its head and the ancestor commits of the
head.

   Now we will explain the two last commands you used to get the source
code from Git—see *note Downloading individual branches::.

     git remote add -ft BRANCH -m BRANCH \
       origin git://git.sv.gnu.org/lilypond.git/

     git checkout -b BRANCH origin/BRANCH

   The ‘git remote’ has created a branch called ‘origin/BRANCH’ in your
local Git repository.  As this branch is a copy of the remote branch web
from git.sv.gnu.org LilyPond repository, it is called a _remote branch_,
and is meant to track the changes on the branch from git.sv.gnu.org: it
will be updated every time you run ‘git pull origin’ or
‘git fetch origin’.

   The ‘git checkout’ command has created a branch named ‘BRANCH’.  At
the beginning, this branch is identical to ‘origin/BRANCH’, but it will
differ as soon as you make changes, e.g.  adding newly translated pages
or editing some documentation or code source file.  Whenever you pull,
you merge the changes from ‘origin/BRANCH’ and ‘BRANCH’ since the last
pulling.  If you do not have push (i.e.  “write”) access on
git.sv.gnu.org, your ‘BRANCH’ will always differ from ‘origin/BRANCH’.
In this case, remember that other people working like you with the
remote branch ‘BRANCH’ of git://git.sv.gnu.org/lilypond.git/ (called
‘origin/BRANCH’ on your local repository) know nothing about your own
‘BRANCH’: this means that whenever you use a committish or make a patch,
others expect you to take the latest commit of ‘origin/BRANCH’ as a
reference.

   Finally, please remember to read the man page of every Git command
you will find in this manual in case you want to discover alternate
methods or just understand how it works.


File: lilypond-contributor.info,  Node: Resolving conflicts,  Next: Reverting all local changes,  Prev: Advanced Git concepts,  Up: Advanced Git procedures

3.4.3 Resolving conflicts
-------------------------

Occasionally an update may result in conflicts – this happens when you
and somebody else have modified the same part of the same file and git
cannot figure out how to merge the two versions together.  When this
happens, you must manually merge the two versions.

   If you need some documentation to understand and resolve conflicts,
see paragraphs _How conflicts are presented_ and _How to resolve
conflicts_ in ‘git merge’ man page.

   If all else fails, you can follow the instructions in *note Reverting
all local changes::.  Be aware that this eliminates any changes you have
made!


File: lilypond-contributor.info,  Node: Reverting all local changes,  Next: Working with remote branches,  Prev: Resolving conflicts,  Up: Advanced Git procedures

3.4.4 Reverting all local changes
---------------------------------

Sometimes git will become hopelessly confused, and you just want to get
back to a known, stable state.  This command destroys any local changes
you have made in the currently checked-out branch, but at least you get
back to the current online version:

     git reset --hard origin/master


File: lilypond-contributor.info,  Node: Working with remote branches,  Next: Git log,  Prev: Reverting all local changes,  Up: Advanced Git procedures

3.4.5 Working with remote branches
----------------------------------

Fetching new branches from git.sv.gnu.org
.........................................

To fetch and check out a new branch named ‘BRANCH’ on git.sv.gnu.org,
run from top of the Git repository

     git config --add remote.origin.fetch \
       +refs/heads/BRANCH:refs/remotes/origin/BRANCH

     git checkout --track -b BRANCH origin/BRANCH

   After this, you can pull ‘BRANCH’ from git.sv.gnu.org with:

     git pull

   Note that this command generally fetches all branches you added with
‘git remote add’ (when you initialized the repository) or
‘git config --add’, i.e.  it updates all remote branches from remote
‘origin’, then it merges the remote branch tracked by the current branch
into the current branch.  For example, if your current branch is
‘master’, ‘origin/master’ will be merged into ‘master’.

Local clones, or having several working trees
.............................................

If you play with several Git branches, e.g.  ‘master’, ‘translation’,
‘stable/2.12’), you may want to have one source and build tree for each
branch; this is possible with subdirectories of your local Git
repository, used as local cloned subrepositories.  To create a local
clone for the branch named ‘BRANCH’, run

     git checkout BRANCH
     git clone -lsn . SUBDIR
     cd SUBDIR
     git reset --hard

   Note that ‘SUBDIR’ must be a directory name which does not already
exist.  In ‘SUBDIR’, you can use all Git commands to browse revisions
history, commit and uncommit changes; to update the cloned subrepository
with changes made on the main repository, cd into ‘SUBDIR’ and run
‘git pull’; to send changes made on the subrepository back to the main
repository, run ‘git push’ from ‘SUBDIR’.  Note that only one branch
(the currently checked out branch) is created in the subrepository by
default; it is possible to have several branches in a subrepository and
do usual operations (checkout, merge, create, delete...)  on these
branches, but this possibility is not detailed here.

   When you push ‘BRANCH’ from ‘SUBDIR’ to the main repository, and
‘BRANCH’ is checked out in the main repository, you must save
uncommitted changes (see ‘git stash’) and do ‘git reset --hard’ in the
main repository in order to apply pushed changes in the working tree of
the main repository.


File: lilypond-contributor.info,  Node: Git log,  Next: Applying remote patches,  Prev: Working with remote branches,  Up: Advanced Git procedures

3.4.6 Git log
-------------

The commands above don’t only bring you the latest version of the
sources, but also the full history of revisions (revisions, also called
commits, are changes made to the sources), stored in the ‘.git’
directory.  You can browse this history with

     git log     # only shows the logs (author, committish and commit message)
     git log -p  # also shows diffs
     gitk        # shows history graphically

          Note: The ‘gitk’ command may require a separate ‘gitk’
          package, available in the appropriate distribution’s
          repositories.


File: lilypond-contributor.info,  Node: Applying remote patches,  Next: Cleaning up multiple patches,  Prev: Git log,  Up: Advanced Git procedures

3.4.7 Applying remote patches
-----------------------------

TODO: Explain how to determine if a patch was created with
‘git format-patch’.

   Well-formed git patches created with ‘git format-patch’ should be
committed with the following command:

     git am PATCH

   Patches created without ‘git format-patch’ can be applied in two
steps.  The first step is to apply the patch to the working tree and the
index:

     git apply --index PATCH

The second step is to commit the changes and give credit to the author
of the patch.  This can be done with the following command:

     git commit --author="JOHN SMITH <JOHN@EXAMPLE.COM>"

   Please note that using the ‘--index’ option for patching is quite
important here and _cannot_ reliably be replaced by using the ‘-a’
option when committing: that would only commit files from the working
tree that are already registered with git, so every file that the patch
actually _adds_, like a regtest for a fixed bug, would get lost.  For
the same reason, you should not use the git-independent ‘patch’ program
for applying patches.


File: lilypond-contributor.info,  Node: Cleaning up multiple patches,  Next: Commit access,  Prev: Applying remote patches,  Up: Advanced Git procedures

3.4.8 Cleaning up multiple patches
----------------------------------

If you have been developing on your own branch for a while, you may have
more commmits than is really sensible.  To revise your work and condense
commits, use:

     git rebase origin/master
     git rebase -i origin/master

          Note: Be a bit cautious – if you completely remove commits
          during the interactive session, you will...  err...
          completely remove those commits.


File: lilypond-contributor.info,  Node: Commit access,  Next: Pushing to staging,  Prev: Cleaning up multiple patches,  Up: Advanced Git procedures

3.4.9 Commit access
-------------------

Most contributors are not able to commit patches directly to the main
repository—only members of the LilyPond development team have _commit
access_.  If you are a contributor and are interested in joining the
development team, contact the Project Manager through the mailing list
(<lilypond-devel@gnu.org>).  Generally, only contributors who have
already provided a number of patches which have been pushed to the main
repository will be considered for membership.

   If you have been approved by the Project Manager, use the following
procedure to obtain commit access:

  1. If you don’t already have one, set up a Savannah user account at
     <https://savannah.gnu.org/account/register.php>.  If your web
     browser responds with an “untrusted connection” message when you
     visit the link, follow the steps for including the CAcert root
     certificate in your browser, given at
     <http://savannah.gnu.org/tls/tutorial/>.

               Note: Savannah will silently put your username in
               lower-case – do not try to use capital letters.

  2. After registering, if you are not logged in automatically, login at
     <https://savannah.gnu.org/account/login.php>—this should take you
     to your “my” page (<https://savannah.gnu.org/my/>).

  3. Click on the “My Groups” link to access the “My Group Membership”
     page.  From there, find the “Request for Inclusion” box and search
     for “LilyPond”.  Among the search results, check the box labeled
     “GNU LilyPond Music Typesetter” and write a brief (required)
     message for the Project Manager (“Hey it’s me!” should be fine).

     Note that you will not have commit access until the Project Manager
     activates your membership.  Once your membership is activated,
     LilyPond should appear under the heading “Groups I’m Contributor
     of” on your “My Group Membership” page.

  4. Generate an SSH ‘rsa’ key pair.  Enter the following at the command
     prompt:

          ssh-keygen -t rsa

     When prompted for a location to save the key, press <ENTER> to
     accept the default location (‘~/.ssh/id_rsa’).

     Next you are asked to enter an optional passphrase.  On most
     systems, if you use a passphrase, you will likely be prompted for
     it every time you use ‘git push’ or ‘git pull’.  You may prefer
     this since it can protect you from your own mistakes (like pushing
     when you mean to pull), though you may find it tedious to keep
     re-entering it.

     You can change/enable/disable your passphrase at any time with:

          ssh-keygen -f ~/.ssh/id_rsa -p

     Note that the GNOME desktop has a feature which stores your
     passphrase for you for an entire GNOME session.  If you use a
     passphrase to “protect you from yourself”, you will want to disable
     this feature, since you’ll only be prompted once.  Run the
     following command, then logout of GNOME and log back in:

          gconftool-2 --set -t bool \
            /apps/gnome-keyring/daemon-components/ssh false

     After setting up your passphrase, your private key is saved as
     ‘~/.ssh/id_rsa’ and your public key is saved as
     ‘~/.ssh/id_rsa.pub’.

  5. Register your public SSH ‘rsa’ key with Savannah.  From the “My
     Account Configuration” page, click on “Edit SSH Keys”, then paste
     the contents of your ‘~/.ssh/id_rsa.pub’ file into one of the
     “Authorized keys” text fields, and click “Update”.

     Savannah should respond with something like:

          Success: Key #1 seen Keys registered

  6. Configure Git to use the SSH protocol (instead of the GIT
     protocol).  From your local Git repository, enter:

          git config remote.origin.url \
            ssh://USER@git.sv.gnu.org/srv/git/lilypond.git

     replacing USER with your Savannah username.

  7. After your membership has been activated and you’ve configured Git
     to use SSH, test the connection with:

          git pull --verbose

     SSH should issue the following warning:

          The authenticity of host 'git.sv.gnu.org (140.186.70.72)' can't
          be established.
          RSA key fingerprint is
          80:5a:b0:0c:ec:93:66:29:49:7e:04:2b:fd:ba:2c:d5.
          Are you sure you want to continue connecting (yes/no)?

     Make sure the RSA key fingerprint displayed matches the one above.
     If it doesn’t, respond “no” and check that you configured Git
     properly in the previous step.  If it does match, respond “yes”.
     SSH should then issue another warning:

          Warning: Permanently added 'git.sv.gnu.org,140.186.70.72' (RSA) to
          the list of known hosts.

     The list of known hosts is stored in the file ‘~/.ssh/known_hosts’.

     At this point, you are prompted for your passphrase if you have
     one, then Git will attempt a pull.

     If ‘git pull --verbose’ fails, you should see error messages like
     these:

          Permission denied (publickey).
          fatal: The remote end hung up unexpectedly

     If you get the above error, you may have made a mistake when
     registering your SSH key at Savannah.  If the key is properly
     registered, you probably just need to wait for the Savannah server
     to activate it.  It usually takes a few minutes for the key to be
     active after registering it, but if it still doesn’t work after an
     hour, ask for help on the mailing list.

     If ‘git pull --verbose’ succeeds, the output will include a ‘From’
     line that shows ‘ssh’ as the protocol:

          From ssh://git.sv.gnu.org/srv/git/lilypond

     If the protocol shown is not ‘ssh’, check that you configured Git
     properly in the previous step.

  8. Test your commit access with a dry run:

               Note: Do not push directly to master; instead, push to
               staging.  See *note Pushing to staging::.

          git push --dry-run --verbose

     Note that recent versions of Git (Git 1.6.3 or later) will issue a
     big warning if the above command is used.  The simplest solution is
     to tell Git to push all matching branches by default:

          git config push.default matching

     Then ‘git push’ should work as before.  For more details, consult
     the ‘git push’ man page.

  9. Repeat the steps from generating an RSA key through to testing your
     commit access, for each machine from which you will be making
     commits, or you may simply copy the files from your local ‘~/.ssh’
     folder to the same folder on the other machine.

Technical details
.................

   • On Firefox, to view or remove the CAcert root certificate, go to:
     Edit > Preferences > Advanced > Encryption > View Certificates >
     Authorities > Certificate Name > Root CA > CA Cert Signing
     Authority.

   • The ‘git config’ commands above should modify your local
     repository’s ‘.git/config’ file.  These lines:

          [remote "origin"]
                  url = git://git.sv.gnu.org/lilypond.git/

     should now be changed to:

          [remote "origin"]
                  url = ssh://USER@git.sv.gnu.org/srv/git/lilypond.git

     where USER is your login name on Savannah.

   • Similarly, the ‘git config push.default matching’ command should
     add these lines to ‘.git/config’:

          [push]
                  default = matching


Known issues and warnings
.........................

Encryption protocols, including ssh, generally do not permit packet
fragmentation to avoid introducing a point of insecurity.  This means
that the maximum packet size must not exceed the smallest MTU (Maximum
Transmission Unit) set in the routers along the path.  This smallest MTU
is determined by a procedure during call set-up which relies on the
transmission over the path of ICMP packets.  If any of the routers in
the path block ICMP packets this mechanism fails, resulting in the
possibility of packets being transmitted which exceed the MTU of one of
the routers.  If this happens the packet is discarded, causing the ssh
session to hang, timeout or terminate with the error message

     ssh: connect to host <host ip addr> port 22: Bad file number
     fatal: The remote end hung up unexpectedly

   depending on precisely when in the proceedings the first large packet
is transmitted.  Most routers on the internet have MTU set to 1500, but
routers installed in homes to connect via broadband may use a slightly
smaller MTU for efficient transmission over ATM. If this problem is
encountered a possible work-around is to set the MTU in the local router
to 1500.


File: lilypond-contributor.info,  Node: Pushing to staging,  Prev: Commit access,  Up: Advanced Git procedures

3.4.10 Pushing to staging
-------------------------

Do not push directly to the git ‘master’ branch.  Instead, push to
‘staging’.

   You will not see your patch on ‘origin/master’ until some automatic
tests have been run.  These tests are run every couple of hours; please
wait at least 12 hours before wondering if your patch has been lost.
Note that you can check the commits on ‘origin/staging’ by looking at
the git web interface on savannah.

   It may happen occasionally that the staging branch breaks automated
testing.  In this case the automatic move of staging material to master
gets halted in order to avoid broken material entering master.  This is
a safety net.  Please do not try breaking out from it by adding fixes on
top of staging: in that case the whole sequence will end up in master
after all, defeating the purpose of the system.  The proper fix usually
involves rewriting the staging branch and is best left to core
developers after discussion on the developer list.

   Before pushing to staging it is a good practice to check whether
staging is ahead of master, and if so, wait until master has caught up
with staging before pushing.  This simplifies things if changes to
staging have to be backed out for some reason.  To check whether master
has caught up with staging you can look at the git web interface on
savannah, or do:

     git fetch
     gitk

   and check that ‘origin/master’ is at the same commit as
‘origin/staging’.  Another option is to see if any commits are listed
when you do:

     git fetch
     git log origin/master..origin/staging

If your work is in a patch file
...............................

Assuming that your patch is in a file called ‘0001-my-patch.patch’ (see
*note Patches::), and you are currently on git master, do:

     git checkout staging
     git pull -r
     git am 0001-my-patch.patch
     gitk
     git push origin staging
     git checkout master

          Note: Do not skip the ‘gitk’ step; a quick 5-second check of
          the visual history can save a great deal of frustration later
          on.  You should only see that ‘staging’ is only 1 commit ahead
          of ‘origin/staging’.

If your work is in a branch
...........................

If you are working on branches and your work is in ‘my_branch_name’,
then do:

     git checkout my_branch_name
     git pull -r origin staging

   This will rebase your branch on ‘origin/staging’.  At this point git
will let you know if there are any conflicts.  If so, resolve them
before continuing:

     gitk
     git push origin HEAD:staging

          Note: Do not skip the ‘gitk’ step; a quick 5-second check of
          the visual history can save a great deal of frustration later
          on.  You should see that ‘my_branch_name’ is only ahead of
          ‘origin/staging’ by the commits from your branch.


File: lilypond-contributor.info,  Node: Git on Windows,  Next: Repository directory structure,  Prev: Advanced Git procedures,  Up: Working with source code

3.5 Git on Windows
==================

          Note: We heavily recommend that development be done with our
          virtual machine *note LilyDev::.

   TODO: Decide what to do with this...  Pare it down?  Move paragraphs
next to analogous Unix instructions?  -mp

3.5.1 Background to nomenclature
--------------------------------

Git is a system for tracking the changes made to source files by a
distributed set of editors.  It is designed to work without a master
repository, but we have chosen to have a master repository for LilyPond
files.  Editors hold a local copy of the master repository together with
any changes they have made locally.  Local changes are held in a local
‘branch’, of which there may be several, but these instructions assume
you are using just one.  The files visible in the local repository
always correspond to those on the currently ‘checked out’ local branch.

   Files are edited on a local branch, and in that state the changes are
said to be ‘unstaged’.  When editing is complete, the changes are moved
to being ‘staged for commit’, and finally the changes are ‘committed’ to
the local branch.  Once committed, the changes (called a ‘commit’) are
given a unique 40-digit hexadecimal reference number called the
‘Committish’ or ‘SHA1 ID’ which identifies the commit to Git.  Such
committed changes can be sent to the master repository by ‘pushing’ them
(if you have write permission) or by sending them by email to someone
who has, either as a complete file or as a ‘diff’ or ‘patch’ (which send
just the differences from the master repository).

3.5.2 Installing git
--------------------

Obtain Git from <https://git-for-windows.github.io/>.

   Note that most users will not need to install SSH. That is not
required until you have been granted direct push permissions to the
master git repository.

   Start Git by clicking on the desktop icon.  This will bring up a
command line bash shell.  This may be unfamiliar to Windows users.  If
so, follow these instructions carefully.  Commands are entered at a $
prompt and are terminated by keying a newline.

3.5.3 Initialising Git
----------------------

Decide where you wish to place your local Git repository, creating the
folders in Windows as necessary.  Here we call the folder to contain the
repository ‘[path]/Git’, but if you intend using Git for other projects
a directory name like ‘lilypond-git’ might be better.  You will need to
have space for around 100Mbytes.

   Start the Git bash shell by clicking on the desk-top icon installed
with Git and type

     cd [path]/Git

   to position the shell at your new Git repository.

   Note: if [path] contains folders with names containing spaces use

     cd "[path]/Git"

   Then type

     git init

   to initialize your Git repository.

   Then type (all on one line; the shell will wrap automatically)

     git remote add -ft master origin git://git.sv.gnu.org/lilypond.git

   to download the lilypond master files.

          Note: Be patient!  Even on a broadband connection this can
          take 10 minutes or more.  Wait for lots of [new tag] messages
          and the $ prompt.

   We now need to generate a local copy of the downloaded files in a new
local branch.  Your local branch needs to have a name.  It is usual to
call it ‘master’ and we shall do that here.

   To do this, type

     git checkout -b master origin/master

   This creates a second branch called ‘master’.  You will see two
warnings (ignore these), and a message advising you that your local
branch ‘master’ has been set up to track the remote branch.  You now
have two branches, a local branch called ‘master’, and a tracking branch
called ‘origin/master’, which is a shortened form of
‘remotes/origin/master’.

   Return to Windows Explorer and look in your Git repository.  You
should see lots of folders.  For example, the LilyPond documentation can
be found in [path]/Git/Documentation/.

   The Git bash shell is terminated by typing ‘exit’ or by clicking on
the usual Windows close-window widget.

3.5.4 Git GUI
-------------

Almost all subsequent work will use the Git Graphical User Interface,
which avoids having to type command line commands.  To start Git GUI
first start the Git bash shell by clicking on the desktop icon, and type

     cd [path]/Git
     git gui

   The Git GUI will open in a new window.  It contains four panels and 7
pull-down menus.  At this stage do not use any of the commands under
Branch, Commit, Merge or Remote.  These will be explained later.

   The top panel on the left contains the names of files which you are
in the process of editing (Unstaged Changes), and the lower panel on the
left contains the names of files you have finished editing and have
staged ready for committing (Staged Changes).  At present, these panels
will be empty as you have not yet made any changes to any file.  After a
file has been edited and saved the top panel on the right will display
the differences between the edited file selected in one of the panels on
the left and the last version committed on the current branch.

   The panel at bottom right is used to enter a descriptive message
about the change before committing it.

   The Git GUI is terminated by entering CNTL-Q while it is the active
window or by clicking on the usual Windows close-window widget.

3.5.5 Personalising your local git repository
---------------------------------------------

Open the Git GUI, click on

     Edit -> Options

   and enter your name and email address in the left-hand (Git
Repository) panel.  Leave everything else unchanged and save it.

   Note that Windows users must leave the default setting for line
endings unchanged.  All files in a git repository must have lines
terminated by just a LF, as this is required for Merge to work, but
Windows files are terminated by CRLF by default.  The git default
setting causes the line endings of files in a Windows git repository to
be flipped automatically between LF and CRLF as required.  This enables
files to be edited by any Windows editor without causing problems in the
git repository.

3.5.6 Checking out a branch
---------------------------

At this stage you have two branches in your local repository, both
identical.  To see them click on

     Branch -> Checkout

   You should have one local branch called ‘master’ and one tracking
branch called ‘origin/master’.  The latter is your local copy of the
‘remotes/origin/master’ branch in the master LilyPond repository.  The
local ‘master’ branch is where you will make your local changes.

   When a particular branch is selected, i.e., checked out, the files
visible in your repository are changed to reflect the state of the files
on that branch.

3.5.7 Updating files from ‘remote/origin/master’
------------------------------------------------

Before starting the editing of a file, ensure your local repository
contains the latest version of the files in the remote repository by
first clicking

     Remote -> Fetch from -> origin

in the Git GUI.

   This will place the latest version of every file, including all the
changes made by others, into the ‘origin/master’ branch of the tracking
branches in your git repository.  You can see these files by checking
out this branch, but you must _never_ edit any files while this branch
is checked out.  Check out your local ‘master’ branch again.

   You then need to merge these fetched files into your local ‘master’
branch by clicking on

     Merge -> Local Merge

and if necessary select the local ‘master’ branch.

   Note that a merge cannot be completed if you have made any local
changes which have not yet been committed.

   This merge will update all the files in the ‘master’ branch to
reflect the current state of the ‘origin/master’ branch.  If any of the
changes conflict with changes you have made yourself recently you will
be notified of the conflict (see below).

3.5.8 Editing files
-------------------

First ensure your ‘master’ branch is checked out, then simply edit the
files in your local Git repository with your favourite editor and save
them back there.  If any file contains non-ASCII characters ensure you
save it in UTF-8 format.  Git will detect any changes whenever you
restart Git GUI and the file names will then be listed in the Unstaged
Changes panel.  Or you can click the Rescan button to refresh the panel
contents at any time.  You may break off and resume editing any time.

   The changes you have made may be displayed in diff form in the top
right-hand panel of Git GUI by clicking on the file name shown in one of
the left panels.

   When your editing is complete, move the files from being Unstaged to
Staged by clicking the document symbol to the left of each name.  If you
change your mind it can be moved back by clicking on the ticked box to
the left of the name.

   Finally the changes you have made may be committed to your ‘master’
branch by entering a brief message in the Commit Message box and
clicking the Commit button.

   If you wish to amend your changes after a commit has been made, the
original version and the changes you made in that commit may be
recovered by selecting

     Commit -> Amend Last Commit

or by checking the Amend Last Commit radio button at bottom right.  This
will return the changes to the Staged state, so further editing made be
carried out within that commit.  This must only be done _before_ the
changes have been Pushed or sent to your mentor for Pushing - after that
it is too late and corrections have to be made as a separate commit.

3.5.9 Sending changes to ‘remotes/origin/master’
------------------------------------------------

If you do not have write access to ‘remotes/origin/master’ you will need
to send your changes by email to someone who does.

   First you need to create a diff or patch file containing your
changes.  To create this, the file must first be committed.  Then
terminate the Git GUI. In the git bash shell first cd to your Git
repository with

     cd [path]/Git

   if necessary, then produce the patch with

     git format-patch origin

   This will create a patch file for all the locally committed files
which differ from ‘origin/master’.  The patch file can be found in
[path]/Git and will have a name formed from the commit message.

3.5.10 Resolving merge conflicts
--------------------------------

As soon as you have committed a changed file your local ‘master’ branch
has diverged from ‘origin/master’, and will remain diverged until your
changes have been committed in ‘remotes/origin/master’ and Fetched back
into your ‘origin/master’ branch.  Similarly, if a new commit has been
made to ‘remotes/origin/master’ by someone else and Fetched, your local
‘master’ branch is divergent.  You can detect a divergent branch by
clicking on

     Repository -> Visualise all branch history

   This opens up a very useful new window called ‘gitk’.  Use this to
browse all the commits made by yourself and others.

   If the diagram at top left of the resulting window does not show your
‘master’ tag on the same node as the ‘remotes/origin/master’ tag your
branch has diverged from ‘origin/master’.  This is quite normal if files
you have modified yourself have not yet been Pushed to
‘remotes/origin/master’ and Fetched, or if files modified and committed
by others have been Fetched since you last Merged ‘origin/master’ into
your local ‘master’ branch.

   If a file being merged from ‘origin/master’ differs from one you have
modified in a way that cannot be resolved automatically by git, Merge
will report a Conflict which you must resolve by editing the file to
create the version you wish to keep.

   This could happen if the person updating ‘remotes/origin/master’ for
you has added some changes of his own before committing your changes to
‘remotes/origin/master’, or if someone else has changed the same file
since you last fetched the file from ‘remotes/origin/master’.

   Open the file in your editor and look for sections which are
delimited with ...

   [to be completed when I next have a merge conflict to be sure I give
the right instructions -td]

3.5.11 Other actions
--------------------

The instructions above describe the simplest way of using git on
Windows.  Other git facilities which may usefully supplement these
include

   • Using multiple local branches (Create, Rename, Delete)
   • Resetting branches
   • Cherry-picking commits
   • Pushing commits to remote/origin/master
   • Using gitk to review history

   Once familiarity with using git on Windows has been gained the
standard git manuals can be used to learn about these.


File: lilypond-contributor.info,  Node: Repository directory structure,  Next: Other Git documentation,  Prev: Git on Windows,  Up: Working with source code

3.6 Repository directory structure
==================================

Prebuilt Documentation and packages are available from:

    http://www.lilypond.org

LilyPond development is hosted at:

    http://savannah.gnu.org/projects/lilypond

Here is a simple explanation of the directory layout for
LilyPond's source files.


.                        Toplevel READMEs, ChangeLog,
|                          build bootstrapping, patches
|                          for third party programs
|
|-- Documentation/       Top sources for most of the manuals
|   |
|   |
|   |   INDIVIDUAL CHAPTERS FOR EACH MANUAL:
|   |     Note: "Snippets" and "Internals Reference" are
|   |     auto-generated during the Documentation Build process.
|   |
|   |
|   |-- contributor/     Contributor's Guide
|   |-- essay/           Essay on automated music engraving
|   |-- extending/       Extending the functionality of LilyPond
|   |-- learning/        Learning Manual
|   |-- notation/        Notation Reference
|   |-- usage/           Runnning the programs that come with LilyPond
|   |-- web/             The website
|   |
|   |
|   |   TRANSLATED MANUALS:
|   |     Each language's directory can contain...
|   |       1) translated versions of:
|   |          * top sources for manuals
|   |          * individual chapters for each manual
|   |       2) a texidocs/ directory for snippet translations
|   |
|   |-- ca/              Catalan
|   |-- cs/              Czech
|   |-- de/              German
|   |-- es/              Spanish
|   |-- fr/              French
|   |-- hu/              Hungarian
|   |-- it/              Italian
|   |-- ja/              Japanese
|   |-- nl/              Dutch
|   |-- zh/              Chinese
|   |
|   |
|   |   MISCELLANEOUS DOC STUFF:
|   |
|   |-- css/             CSS files for HTML docs
|   |-- included/        .ly files used in the manuals
|   |-- logo/            Web logo and "note" icon
|   |-- ly-examples/     .ly files for the "Examples" webpage
|   |-- misc/            Old announcements, ChangeLogs and NEWS
|   |-- pictures/        Images used (eps/jpg/png/svg)
|   |   `-- pdf/         (pdf)
|   |-- po/              Translated build/maintenance scripts
|   |-- snippets/        Auto-generated from the LSR and from ./new/
|   |   `-- new/         Snippets too new for the LSR
|   `-- topdocs/         AUTHORS, INSTALL, README
|
|
|   C++ SOURCES:
|
|-- flower/              A simple C++ library
|-- lily/                C++ sources for the LilyPond binary
|
|
|   LIBRARIES:
|
|-- ly/                  .ly \include files
|-- mf/                  MetaFont sources for Emmentaler fonts
|-- ps/                  PostScript library files
|-- scm/                 Scheme sources for LilyPond and subroutine files
|-- tex/                 TeX and texinfo library files
|
|
|   SCRIPTS:
|
|-- config/              Autoconf helpers for configure script
|-- python/              Python modules, MIDI module
|   `-- auxiliar/        Python modules for build/maintenance
|-- scripts/             End-user scripts (--> lilypond/usr/bin/)
|   |-- auxiliar/        Maintenance and non-essential build scripts
|   `-- build/           Essential build scripts
|
|
|   BUILD PROCESS:
|   (also see SCRIPTS section above)
|
|-- make/                Specific make subroutine files
|-- stepmake/            Generic make subroutine files
|
|
|   REGRESSION TESTS:
|
|-- input/
|   `-- regression/      .ly regression tests
|       |-- abc2ly/      .abc regression tests
|       |-- lilypond-book/  lilypond-book regression tests
|       |-- midi/        midi2ly regression tests
|       `-- musicxml/    .xml and .itexi regression tests
|
|
|   MISCELLANEOUS:
|
|-- elisp/               Emacs LilyPond mode and syntax coloring
|-- vim/                 Vi(M) LilyPond mode and syntax coloring
`-- po/                  Translations for binaries and end-user scripts


File: lilypond-contributor.info,  Node: Other Git documentation,  Prev: Repository directory structure,  Up: Working with source code

3.7 Other Git documentation
===========================

   • Official git man pages:
     <http://www.kernel.org/pub/software/scm/git/docs/>

   • More in-depth tutorials: <http://git-scm.com/documentation>

   • Book about git: Pro Git (http://progit.org/)

   • Github help: <http://help.github.com/> (very highly recommended by
     Graham)


File: lilypond-contributor.info,  Node: Compiling,  Next: Documentation work,  Prev: Working with source code,  Up: Top

4 Compiling
***********

This chapter describes the process of compiling the LilyPond program
from source files.

* Menu:

* Overview of compiling::
* Requirements::
* Getting the source code::
* Configuring make::
* Compiling LilyPond::
* Post-compilation options::
* Problems::
* Concurrent stable and development versions::
* Build system::


File: lilypond-contributor.info,  Node: Overview of compiling,  Next: Requirements,  Up: Compiling

4.1 Overview of compiling
=========================

Compiling LilyPond from source is an involved process, and is only
recommended for developers and packagers.  Typical program users are
instead encouraged to obtain the program from a package manager (on
Unix) or by downloading a precompiled binary configured for a specific
operating system.  Pre-compiled binaries are available on the *note
(lilypond-web)Download:: page.

   Compiling LilyPond from source is necessary if you want to build,
install, or test your own version of the program.

   A successful compile can also be used to generate and install the
documentation, incorporating any changes you may have made.  However, a
successful compile is not a requirement for generating the
documentation.  The documentation can be built using a Git repository in
conjunction with a locally installed copy of the program.  For more
information, see *note Building documentation without compiling::.

   Attempts to compile LilyPond natively on Windows have been
unsuccessful, though a workaround is available (see *note
(lilypond-contributor)LilyDev::).


File: lilypond-contributor.info,  Node: Requirements,  Next: Getting the source code,  Prev: Overview of compiling,  Up: Compiling

4.2 Requirements
================

* Menu:

* Requirements for running LilyPond::
* Requirements for compiling LilyPond::
* Requirements for building documentation::


File: lilypond-contributor.info,  Node: Requirements for running LilyPond,  Next: Requirements for compiling LilyPond,  Up: Requirements

4.2.1 Requirements for running LilyPond
---------------------------------------

This section contains the list of separate software packages that are
required to run LilyPond.

   • DejaVu fonts (http://www.dejavu-fonts.org/) These are normally
     installed by default.

   • FontConfig (http://www.fontconfig.org/) Use version 2.4.0 or newer.

   • Freetype (http://www.freetype.org/) Use version 2.1.10 or newer.

   • Ghostscript (http://www.ghostscript.com) Use version 8.60 or newer.

   • Guile (http://www.gnu.org/software/guile/guile.html) Use version
     1.8.8.  Version 2.x of Guile is not currently supported.

   • Pango (http://www.pango.org/) User version 1.12 or newer.

   • Python (http://www.python.org) Use version 2.4 or newer.

   • International fonts.  For example:

     Fedora:

          fonts-arabic
          fonts-hebrew
          fonts-ja
          fonts-xorg-truetype
          taipeifonts
          ttfonts-ja
          ttfonts-zh_CN

     Debian based distributions:

          emacs-intl-fonts
          fonts-ipafont-gothic
          fonts-ipafont-mincho
          xfonts-bolkhov-75dpi
          xfonts-cronyx-75dpi
          xfonts-cronyx-100dpi
          xfonts-intl-.*

     These are normally installed by default and are required only to
     create music with international text or lyrics.


File: lilypond-contributor.info,  Node: Requirements for compiling LilyPond,  Next: Requirements for building documentation,  Prev: Requirements for running LilyPond,  Up: Requirements

4.2.2 Requirements for compiling LilyPond
-----------------------------------------

This section contains instructions on how to quickly and easily get all
the software packages required to build LilyPond.

   Most of the more popular Linux distributions only require a few
simple commands to download all the software needed.  For others, there
is an explicit list of all the individual packages (as well as where to
get them from) for those that are not already included in your
distributions’ own repositories.

* Menu:

* Fedora::
* Linux Mint::
* OpenSUSE::
* Ubuntu::
* Other::


File: lilypond-contributor.info,  Node: Fedora,  Next: Linux Mint,  Up: Requirements for compiling LilyPond

Fedora
......

The following instructions were tested on ‘Fedora’ versions 22 & 23 and
will download all the software required to both compile LilyPond and
build the documentation.

   • Download and install all the LilyPond build-dependencies
     (approximately 700MB);

          sudo dnf builddep lilypond --nogpgcheck

   • Download and install additional ‘build’ tools required for
     compiling;

          sudo dnf install autoconf gcc-c++

   • Download ‘texi2html 1.82’ directly from:
     <http://download.savannah.gnu.org/releases/texi2html/texi2html-1.82.tar.gz>;

     ‘texi2html’ is only required if you intend to compile LilyPond’s
     own documentation (e.g.  to help with any document writing).  The
     version available in the Fedora repositories is too new and will
     not work.  Extract the files into an appropriate location and then
     run the commands;

          ./configure
          make
          sudo make install

     This should install ‘texi2html 1.82’ into ‘/usr/local/bin’, which
     will normally take priority over ‘/usr/bin’ where the later,
     pre-installed versions gets put.  Now verify that your operating
     system is able to see the correct version of ‘texi2html’.

          texi2html --version

   • Although not ‘required’ to compile LilyPond, if you intend to
     contribute to LilyPond (codebase or help improve the documentation)
     then it is recommended that you also need to install ‘git’.

          sudo dnf install git

     Also see *note (lilypond-contributor)Starting with Git::.

   • To use the ‘lily-git.tcl’ GUI;

          sudo dnf install tk

     See *note (lilypond-contributor)lily-git::.

          Note: By default, when building LilyPond’s documentation,
          ‘pdfTeX’ is be used.  However ligatures (fi, fl, ff etc.)  may
          not be printed in the PDF output.  In this case XeTeX can be
          used instead.  Download and install the ‘texlive-xetex’
          package.

               sudo dnf install texlive-xetex

          The scripts used to build the LilyPond documentation will use
          ‘XeTex’ instead of ‘pdfTex’ to generate the PDF documents if
          it is available.  No additional configuration is required.


File: lilypond-contributor.info,  Node: Linux Mint,  Next: OpenSUSE,  Prev: Fedora,  Up: Requirements for compiling LilyPond

Linux Mint
..........

The following instructions were tested on ‘Linux Mint 17.1’ and ‘LMDE -
Betsy’ and will download all the software required to both compile
LilyPond and build the documentation..

   • Enable the _sources_ repository;

       1. Using the _Software Sources_ GUI (located under
          _Administration_).

       2. Select _Official Repositories_.

       3. Check the _Enable source code repositories_ box under the
          _Source Code_ section.

       4. Click the _Update the cache_ button and when it has completed,
          close the _Software Sources_ GUI.

   • Download and install all the LilyPond build-dependencies
     (approximately 200MB);

          sudo apt-get build-dep lilypond

   • Download and install additional ‘build’ tools required for
     compiling;

          sudo apt-get install autoconf fonts-texgyre texlive-lang-cyrillic

   • Although not ‘required’ to compile LilyPond, if you intend to
     contribute to LilyPond (codebase or help improve the documentation)
     then it is recommended that you also need to install ‘git’.

          sudo apt-get install git

     Also see *note (lilypond-contributor)Starting with Git::.

   • To use the ‘lily-git.tcl’ GUI;

          sudo apt-get install tk

     Also see *note (lilypond-contributor)lily-git::.

          Note: By default, when building LilyPond’s documentation,
          ‘pdfTeX’ is be used.  However ligatures (fi, fl, ff etc.)  may
          not be printed in the PDF output.  In this case XeTeX can be
          used instead.  Download and install the ‘texlive-xetex’
          package.

               sudo apt-get install texlive-xetex

          The scripts used to build the LilyPond documentation will use
          ‘XeTex’ instead of ‘pdfTex’ to generate the PDF documents if
          it is available.  No additional configuration is required.


File: lilypond-contributor.info,  Node: OpenSUSE,  Next: Ubuntu,  Prev: Linux Mint,  Up: Requirements for compiling LilyPond

OpenSUSE
........

The following instructions were tested on ‘OpenSUSE 13.2’ and will
download all the software required to both compile LilyPond and build
the documentation.

   • Add the _sources_ repository;

          sudo zypper addrepo -f \
          "http://download.opensuse.org/source/distribution/13.2/repo/oss/" sources

   • Download and install all the LilyPond build-dependencies
     (approximately 680MB);

          sudo zypper source-install lilypond

   • Download and install additional ‘build’ tools required for
     compiling;

          sudo zypper install make

   • Although not ‘required’ to compile LilyPond, if you intend to
     contribute to LilyPond (codebase or help improve the documentation)
     then it is recommended that you also need to install ‘git’.

          sudo zypper install git

     Also see *note (lilypond-contributor)Starting with Git::.

   • To use the ‘lily-git.tcl’ GUI;

          sudo zypper install tk

     Also see *note (lilypond-contributor)lily-git::.

          Note: By default, when building LilyPond’s documentation,
          ‘pdfTeX’ is be used.  However ligatures (fi, fl, ff etc.)  may
          not be printed in the PDF output.  In this case XeTeX can be
          used instead.  Download and install the ‘texlive-xetex’
          package.

               sudo zypper install texlive-xetex

          The scripts used to build the LilyPond documentation will use
          ‘XeTex’ instead of ‘pdfTex’ to generate the PDF documents if
          it is available.  No additional configuration is required.


File: lilypond-contributor.info,  Node: Ubuntu,  Next: Other,  Prev: OpenSUSE,  Up: Requirements for compiling LilyPond

Ubuntu
......

The following commands were tested on Ubuntu versions ‘14.04 LTS’,
‘14.10’ and ‘15.04’ and will download all the software required to both
compile LilyPond and build the documentation.

   • Download and install all the LilyPond build-dependencies
     (approximately 200MB);

          sudo apt-get build-dep lilypond

   • Download and install additional ‘build’ tools required for
     compiling;

          sudo apt-get install autoconf fonts-texgyre texlive-lang-cyrillic

   • Although not ‘required’ to compile LilyPond, if you intend to
     contribute to LilyPond (codebase or help improve the documentation)
     then it is recommended that you also need to install ‘git’.

          sudo apt-get install git

     Also see *note (lilypond-contributor)Starting with Git::.

   • To use the ‘lily-git.tcl’ GUI;

          sudo apt-get install tk

     Also see *note (lilypond-contributor)lily-git::.

          Note: By default, when building LilyPond’s documentation,
          ‘pdfTeX’ is be used.  However ligatures (fi, fl, ff etc.)  may
          not be printed in the PDF output.  In this case XeTeX can be
          used instead.  Download and install the ‘texlive-xetex’
          package.

               sudo apt-get install texlive-xetex

          The scripts used to build the LilyPond documentation will use
          ‘XeTex’ instead of ‘pdfTex’ to generate the PDF documents if
          it is available.  No additional configuration is required.


File: lilypond-contributor.info,  Node: Other,  Prev: Ubuntu,  Up: Requirements for compiling LilyPond

Other
.....

The following individual software packages are required just to compile
LilyPond.

   • GNU Autoconf (http://www.gnu.org/software/autoconf)

   • GNU Bison (http://www.gnu.org/software/bison/)

     Use version ‘2.0’ or newer.

   • GNU Compiler Collection (http://gcc.gnu.org/)

     Use version ‘3.4’ or newer (‘4.x’ recommended).

   • Flex (http://flex.sourceforge.net/)

   • FontForge (http://fontforge.sf.net/)

     Use version ‘20060125’ or newer (we recommend using at least
     ‘20100501’); it must also be compiled with the ‘--enable-double’
     switch, else this can lead to inaccurate intersection calculations
     which end up with poorly-rendered glyphs in the output.

   • GNU gettext (http://www.gnu.org/software/gettext/gettext.html)

     Use version ‘0.17’ or newer.

   • GNU Make (http://www.gnu.org/software/make/)

     Use version ‘3.78’ or newer.

   • MetaFont (http://metafont.tutorial.free.fr/)

     The ‘mf-nowin’, ‘mf’, ‘mfw’ or ‘mfont’ binaries are usually
     packaged along with TeX (http://www.latex-project.org/ftp.html).

   • MetaPost (http://cm.bell-labs.com/who/hobby/MetaPost.html)

     The ‘mpost’ binary is also usually packaged with TeX
     (http://www.latex-project.org/ftp.html).

   • Perl (http://www.perl.org/)

   • Texinfo (http://www.gnu.org/software/texinfo/)

     Use version ‘4.11’ or newer.

   • Type 1 utilities (http://www.lcdf.org/~eddietwo/type/#t1utils)

     Use version ‘1.33’ or newer.

   • Cyrillic fonts (https://www.ctan.org/pkg/cyrillic?lang=en)

     Often packaged in repositories as ‘texlive-lang-cyrillic’.

   • TeX Gyre ‘OTF’ font packages.  As of LilyPond version ‘2.19.26’,
     the previous default serif, san serif and monospace fonts now use
     Tex Gyre’s _Schola_, _Heros_ and _Cursor_ fonts respectively.  Also
     See *note (lilypond-notation)Fonts::.

     Some distributions do not always provide ‘OTF’ font files in the
     Tex Gyre packages from their repositories.  Use the command
     ‘fc-list | grep texgyre’ to list the fonts available to your system
     and check that the appropriate ‘*.otf’ files are reported.  If they
     are not then download and manually extract the ‘OTF’ files to
     either your local ‘~/.fonts/’ directory or use the ‘configure’
     command and the ‘--with-texgyre-dir=/path_to_otf_files/’ option.

     The following font families are required:

     Schola (http://www.gust.org.pl/projects/e-foundry/tex-gyre/schola),
     Heros (http://www.gust.org.pl/projects/e-foundry/tex-gyre/heros)
     and Cursor
     (http://www.gust.org.pl/projects/e-foundry/tex-gyre/cursor).


File: lilypond-contributor.info,  Node: Requirements for building documentation,  Prev: Requirements for compiling LilyPond,  Up: Requirements

4.2.3 Requirements for building documentation
---------------------------------------------

The entire set of documentation for the most current build of LilyPond
is available online at
<http://lilypond.org/doc/v2.19/Documentation/web/development>, but you
can also build them locally from the source code.  This process requires
some additional tools and packages.

          Note: If the instructions for one of the previously listed
          Linux in the previous section (*note
          (lilypond-contributor)Requirements for compiling LilyPond::)
          have been used, then the following can be ignored as the
          software should already be installed.

   • Everything listed in *note Requirements for compiling LilyPond::

   • ImageMagick (http://www.imagemagick.org/)

   • Netpbm (http://netpbm.sourceforge.net/)

   • gzip (http://gzip.org/)

   • rsync (http://rsync.samba.org/)

   • Texi2HTML (http://www.nongnu.org/texi2html/)

     Use version ‘1.82’.  Later versions will not work.

     Download ‘texi2html 1.82’ directly from:
     <http://download.savannah.gnu.org/releases/texi2html/texi2html-1.82.tar.gz>;

     Extract the files into an appropriate location and then run the
     commands;

          ./configure
          make
          sudo make install

     Now verify that your operating system is able to see the correct
     version of ‘texi2html’.

          texi2html --version

   • Fonts required to build the documentation in addition to those
     required to run LilyPond:

          gsfonts
          fonts-linuxlibertine
          fonts-liberation
          fonts-dejavu
          fonts-freefont-otf
          ttf-bitstream-vera
          texlive-fonts-recommended
          ttf-xfree86-nonfree

          Note: By default, when building LilyPond’s documentation,
          ‘pdfTeX’ is be used.  However ligatures (fi, fl, ff etc.)  may
          not be printed in the PDF output.  In this case XeTeX can be
          used instead.  Download and install the ‘texlive-xetex’
          package.  The scripts used to build the LilyPond documentation
          will use ‘XeTex’ instead of ‘pdfTex’ to generate the PDF
          documents if it is available.  No additional configuration is
          required.


File: lilypond-contributor.info,  Node: Getting the source code,  Next: Configuring make,  Prev: Requirements,  Up: Compiling

4.3 Getting the source code
===========================

Downloading the Git repository
------------------------------

In general, developers compile LilyPond from within a local Git
repository.  Setting up a local Git repository is explained in *note
(lilypond-contributor)Starting with Git::.

Downloading a source tarball
----------------------------

Packagers are encouraged to use source tarballs for compiling.

   The tarball for the latest stable release is available on the *note
(lilypond-web)Source:: page.

The latest source code snapshot
(http://git.savannah.gnu.org/gitweb/?p=lilypond.git;a=snapshot) is also
available as a tarball from the GNU Savannah Git server.

All tagged releases (including legacy stable versions and the most
recent development release) are available here:

     <http://download.linuxaudio.org/lilypond/source/>

   Download the tarball to your ‘~/src/’ directory, or some other
appropriate place.

          Note: Be careful where you unpack the tarball!  Any
          subdirectories of the current folder named ‘lilypond/’ or
          ‘lilypond-X.Y.Z/’ (where X.Y.Z is the release number) will be
          overwritten if there is a name clash with the tarball.

   Unpack the tarball with this command:

     tar -xzf lilypond-X.Y.Z.tar.gz

   This creates a subdirectory within the current directory called
‘lilypond-X.Y.Z/’.  Once unpacked, the source files occupy about 40 MB
of disk space.

   Windows users wanting to look at the source code may have to download
and install the free-software 7zip archiver (http://www.7-zip.org) to
extract the tarball.


File: lilypond-contributor.info,  Node: Configuring make,  Next: Compiling LilyPond,  Prev: Getting the source code,  Up: Compiling

4.4 Configuring ‘make’
======================

* Menu:

* Running ./autogen.sh::
* Running ../configure::


File: lilypond-contributor.info,  Node: Running ./autogen.sh,  Next: Running ../configure,  Up: Configuring make

4.4.1 Running ‘./autogen.sh’
----------------------------

After you unpack the tarball (or download the Git repository), the
contents of your top source directory should be similar to the current
source tree listed at
<http://git.sv.gnu.org/gitweb/?p=lilypond.git;a=tree>.

   Next, you need to create the generated files; enter the following
command from your top source directory:

     ./autogen.sh --noconfigure

   This will generate a number of files and directories to aid
configuration, such as ‘configure’, ‘README.txt’, etc.

   Next, create the build directory with:

     mkdir build/
     cd build/

   We heavily recommend building lilypond inside a separate directory
with this method.


File: lilypond-contributor.info,  Node: Running ../configure,  Prev: Running ./autogen.sh,  Up: Configuring make

4.4.2 Running ‘../configure’
----------------------------

* Menu:

* Configuration options::
* Checking build dependencies::
* Configuring target directories::


File: lilypond-contributor.info,  Node: Configuration options,  Next: Checking build dependencies,  Up: Running ../configure

Configuration options
.....................

          Note: make sure that you are in the ‘build/’ subdirectory of
          your source tree.

   The ‘../configure’ command (generated by ‘./autogen.sh’) provides
many options for configuring ‘make’.  To see them all, run:

     ../configure --help


File: lilypond-contributor.info,  Node: Checking build dependencies,  Next: Configuring target directories,  Prev: Configuration options,  Up: Running ../configure

Checking build dependencies
...........................

          Note: make sure that you are in the ‘build/’ subdirectory of
          your source tree.

   When ‘../configure’ is run without any arguments, it will check to
make sure your system has everything required for compilation:

     ../configure

   If any build dependency is missing, ‘../configure’ will return with:

     ERROR: Please install required programs:  FOO

   The following message is issued if you are missing programs that are
only needed for building the documentation:

     WARNING: Please consider installing optional programs:  BAR

   If you intend to build the documentation locally, you will need to
install or update these programs accordingly.

          Note: ‘../configure’ may fail to issue warnings for certain
          documentation build requirements that are not met.  If you
          experience problems when building the documentation, you may
          need to do a manual check of *note Requirements for building
          documentation::.


File: lilypond-contributor.info,  Node: Configuring target directories,  Prev: Checking build dependencies,  Up: Running ../configure

Configuring target directories
..............................

          Note: make sure that you are in the ‘build/’ subdirectory of
          your source tree.

   If you intend to use your local build to install a local copy of the
program, you will probably want to configure the installation directory.
Here are the relevant lines taken from the output of
‘../configure --help’:

     By default, ‘‘make install’’ will install all the files in
     ‘/usr/local/bin’, ‘/usr/local/lib’ etc.  You can specify an
     installation prefix other than ‘/usr/local’ using ‘‘--prefix’’, for
     instance ‘‘--prefix=$HOME’’.

   A typical installation prefix is ‘$HOME/usr’:

     ../configure --prefix=$HOME/usr

   Note that if you plan to install a local build on a system where you
do not have root privileges, you will need to do something like this
anyway—‘make install’ will only succeed if the installation prefix
points to a directory where you have write permission (such as your home
directory).  The installation directory will be automatically created if
necessary.

   The location of the ‘lilypond’ command installed by this process will
be ‘PREFIX/bin/lilypond’; you may want to add ‘PREFIX/bin/’ to your
‘$PATH’ if it is not already included.

   It is also possible to specify separate installation directories for
different types of program files.  See the full output of
‘../configure --help’ for more information.

   If you encounter any problems, please see *note Problems::.


File: lilypond-contributor.info,  Node: Compiling LilyPond,  Next: Post-compilation options,  Prev: Configuring make,  Up: Compiling

4.5 Compiling LilyPond
======================

* Menu:

* Using make::
* Saving time with the -j option::
* Compiling for multiple platforms::
* Useful make variables::


File: lilypond-contributor.info,  Node: Using make,  Next: Saving time with the -j option,  Up: Compiling LilyPond

4.5.1 Using ‘make’
------------------

          Note: make sure that you are in the ‘build/’ subdirectory of
          your source tree.

   LilyPond is compiled with the ‘make’ command.  Assuming ‘make’ is
configured properly, you can simply run:

     make

   ‘make’ is short for ‘make all’.  To view a list of ‘make’ targets,
run:

     make help

   TODO: Describe what ‘make’ actually does.


See also
........

   *note Generating documentation:: provides more info on the ‘make’
targets used to build the LilyPond documentation.


File: lilypond-contributor.info,  Node: Saving time with the -j option,  Next: Compiling for multiple platforms,  Prev: Using make,  Up: Compiling LilyPond

4.5.2 Saving time with the ‘-j’ option
--------------------------------------

If your system has multiple CPUs, you can speed up compilation by adding
‘-jX’ to the ‘make’ command, where ‘X’ is one more than the number of
cores you have.  For example, a typical Core2Duo machine would use:

     make -j3

   If you get errors using the ‘-j’ option, and ‘make’ succeeds without
it, try lowering the ‘X’ value.

   Because multiple jobs run in parallel when ‘-j’ is used, it can be
difficult to determine the source of an error when one occurs.  In that
case, running ‘make’ without the ‘-j’ is advised.


File: lilypond-contributor.info,  Node: Compiling for multiple platforms,  Next: Useful make variables,  Prev: Saving time with the -j option,  Up: Compiling LilyPond

4.5.3 Compiling for multiple platforms
--------------------------------------

If you want to build multiple versions of LilyPond with different
configuration settings, you can use the ‘--enable-config=CONF’ option of
‘configure’.  You should use ‘make conf=CONF’ to generate the output in
‘out-CONF’.  For example, suppose you want to build with and without
profiling, then use the following for the normal build

     ./configure --prefix=$HOME/usr/ --enable-checking
     make

   and for the profiling version, specify a different configuration

     ./configure --prefix=$HOME/usr/ --enable-profiling \
       --enable-config=prof --disable-checking
     make conf=prof

   If you wish to install a copy of the build with profiling, don’t
forget to use ‘conf=CONF’ when issuing ‘make install’:

     make conf=prof install


See also
........

   *note Installing LilyPond from a local build::


File: lilypond-contributor.info,  Node: Useful make variables,  Prev: Compiling for multiple platforms,  Up: Compiling LilyPond

4.5.4 Useful ‘make’ variables
-----------------------------

If a less verbose build output if desired, the variable ‘QUIET_BUILD’
may be set to ‘1’ on ‘make’ command line, or in ‘local.make’ at top of
the build tree.


File: lilypond-contributor.info,  Node: Post-compilation options,  Next: Problems,  Prev: Compiling LilyPond,  Up: Compiling

4.6 Post-compilation options
============================

* Menu:

* Installing LilyPond from a local build::
* Generating documentation::
* Testing LilyPond binary::


File: lilypond-contributor.info,  Node: Installing LilyPond from a local build,  Next: Generating documentation,  Up: Post-compilation options

4.6.1 Installing LilyPond from a local build
--------------------------------------------

If you configured ‘make’ to install your local build in a directory
where you normally have write permission (such as your home directory),
and you have compiled LilyPond by running ‘make’, you can install the
program in your target directory by running:

     make install

   If instead, your installation directory is not one that you can
normally write to (such as the default ‘/usr/local/’, which typically is
only writeable by the superuser), you will need to temporarily become
the superuser when running ‘make install’:

     sudo make install

or...

     su -c 'make install'

   If you don’t have superuser privileges, then you need to configure
the installation directory to one that you can write to, and then
re-install.  See *note Configuring target directories::.


File: lilypond-contributor.info,  Node: Generating documentation,  Next: Testing LilyPond binary,  Prev: Installing LilyPond from a local build,  Up: Post-compilation options

4.6.2 Generating documentation
------------------------------

* Menu:

* Documentation editor's edit/compile cycle::
* Building documentation::
* Building a single document::
* Saving time with CPU_COUNT::
* AJAX search::
* Installing documentation::
* Building documentation without compiling::


File: lilypond-contributor.info,  Node: Documentation editor's edit/compile cycle,  Next: Building documentation,  Up: Generating documentation

Documentation editor’s edit/compile cycle
.........................................

   • Initial documentation build:

          make [-jX]
          make [-jX CPU_COUNT=X] doc          _## can take an hour or more_
          make [-jX CPU_COUNT=X] doc-stage-1  _## to build only PDF documentation_

   • Edit/compile cycle:

          _## edit source files, then..._

          make [-jX]                  _## needed if editing outside_
                                      _##   Documentation/, but useful anyway_
                                      _##   for finding Texinfo errors._
          make [-jX CPU_COUNT=X] doc  _## usually faster than initial build._

   • Reset:

     It is generally possible to remove the compiled documentation from
     your system with ‘make doc-clean’, but this method is not 100%
     guaranteed.  Instead, if you want to be sure you have a clean
     system, we recommend that you delete your ‘build/’ directory, and
     begin compiling from scratch.  Since the documentation compile
     takes much longer than the non-documentation compile, this does not
     increase the overall time by a great deal.


File: lilypond-contributor.info,  Node: Building documentation,  Next: Building a single document,  Prev: Documentation editor's edit/compile cycle,  Up: Generating documentation

Building documentation
......................

After a successful compile (using ‘make’), the documentation can be
built by issuing:

     make doc

   or, to build only the PDF documentation and not the HTML,

     make doc-stage-1

          Note: The first time you run ‘make doc’, the process can
          easily take an hour or more with not much output on the
          command line.

   After this initial build, ‘make doc’ only makes changes to the
documentation where needed, so it may only take a minute or two to test
changes if the documentation is already built.

   If ‘make doc’ succeeds, the HTML documentation tree is available in
‘out-www/offline-root/’, and can be browsed locally.  Various portions
of the documentation can be found by looking in ‘out/’ and ‘out-www’
subdirectories in other places in the source tree, but these are only
_portions_ of the docs.  Please do not complain about anything which is
broken in those places; the only complete set of documentation is in
‘out-www/offline-root/’ from the top of the source tree.

   ‘make doc’ sends the output from most of the compilation to logfiles.
If the build fails for any reason, it should prompt you with the name of
a logfile which will provide information to help you work out why the
build failed.  These logfiles are not deleted with ‘make doc-clean’.  To
remove all the logfiles generated by the compilation process, use:

     make log-clean

   ‘make doc’ compiles the documents for all languages.  To save some
compile time, the English language documents can be compiled on their
own with:

     make LANGS='' doc

Similarly, it is possible to compile a subset of the translated
documentation by specifying their language codes on the command line.
For example, the French and German translations are compiled with:

     make LANGS='de fr' doc

Note that this will also compile the English version.

   Compilation of documentation in Info format with images can be done
separately by issuing:

     make info

An issue when switching branches between master and translation is the
appearance/disappearance of translated versions of some manuals.  If you
see such a warning from make:

     No rule to make target `X', needed by `Y'

Your best bet is to delete the file Y.dep and to try again.


File: lilypond-contributor.info,  Node: Building a single document,  Next: Saving time with CPU_COUNT,  Prev: Building documentation,  Up: Generating documentation

Building a single document
..........................

It’s possible to build a single document.  For example, to rebuild only
‘contributor.pdf’, do the following:

     cd build/
     cd Documentation/
     touch ../../Documentation/contributor.texi
     make out=www out-www/contributor.pdf

   If you are only working on a single document, test-building it in
this way can give substantial time savings - recreating
‘contributor.pdf’, for example, takes a matter of seconds.


File: lilypond-contributor.info,  Node: Saving time with CPU_COUNT,  Next: AJAX search,  Prev: Building a single document,  Up: Generating documentation

Saving time with ‘CPU_COUNT’
............................

The most time consuming task for building the documentation is running
LilyPond to build images of music, and there cannot be several
simultaneously running ‘lilypond-book’ instances, so the ‘-j’ ‘make’
option does not significantly speed up the build process.  To help speed
it up, the makefile variable ‘CPU_COUNT’ may be set in ‘local.make’ or
on the command line to the number of ‘.ly’ files that LilyPond should
process simultaneously, e.g.  on a bi-processor or dual core machine:

     make -j3 CPU_COUNT=3 doc

The recommended value of ‘CPU_COUNT’ is one plus the number of cores or
processors, but it is advisable to set it to a smaller value unless your
system has enough RAM to run that many simultaneous LilyPond instances.
Also, values for the ‘-j’ option that pose problems with ‘make’ are less
likely to pose problems with ‘make doc’ (this applies to both ‘-j’ and
‘CPU_COUNT’).  For example, with a quad-core processor, it is possible
for ‘make -j5 CPU_COUNT=5 doc’ to work consistently even if ‘make -j5’
rarely succeeds.


File: lilypond-contributor.info,  Node: AJAX search,  Next: Installing documentation,  Prev: Saving time with CPU_COUNT,  Up: Generating documentation

AJAX search
...........

To build the documentation with interactive searching, use:

     make doc AJAX_SEARCH=1

   This requires PHP, and you must view the docs via a http connection
(you cannot view them on your local filesystem).

          Note: Due to potential security or load issues, this option is
          not enabled in the official documentation builds.  Enable at
          your own risk.


File: lilypond-contributor.info,  Node: Installing documentation,  Next: Building documentation without compiling,  Prev: AJAX search,  Up: Generating documentation

Installing documentation
........................

The HTML, PDF and if available Info files can be installed into the
standard documentation path by issuing

     make install-doc

This also installs Info documentation with images if the installation
prefix is properly set; otherwise, instructions to complete proper
installation of Info documentation are printed on standard output.

   To install the Info documentation separately, run:

     make install-info

Note that to get the images in Info documentation, ‘install-doc’ target
creates symbolic links to HTML and PDF installed documentation tree in
‘PREFIX/share/info’, in order to save disk space, whereas ‘install-info’
copies images in ‘PREFIX/share/info’ subdirectories.

   It is possible to build a documentation tree in
‘out-www/online-root/’, with special processing, so it can be used on a
website with content negotiation for automatic language selection; this
can be achieved by issuing

     make WEB_TARGETS=online doc

and both ‘offline’ and ‘online’ targets can be generated by issuing

     make WEB_TARGETS="offline online" doc

   Several targets are available to clean the documentation build and
help with maintaining documentation; an overview of these targets is
available with

     make help

from every directory in the build tree.  Most targets for documentation
maintenance are available from ‘Documentation/’; for more information,
see *note (lilypond-contributor)Documentation work::.

   The makefile variable ‘QUIET_BUILD’ may be set to ‘1’ for a less
verbose build output, just like for building the programs.


File: lilypond-contributor.info,  Node: Building documentation without compiling,  Prev: Installing documentation,  Up: Generating documentation

Building documentation without compiling
........................................

The documentation can be built locally without compiling LilyPond
binary, if LilyPond is already installed on your system.

   From a fresh Git checkout, do

     ./autogen.sh   # ignore any warning messages
     cp GNUmakefile.in GNUmakefile
     make -C scripts && make -C python
     nice make LILYPOND_EXTERNAL_BINARY=/path/to/bin/lilypond doc

   Please note that this may break sometimes – for example, if a new
feature is added with a test file in input/regression, even the latest
development release of LilyPond will fail to build the docs.

   You may build the manual without building all the ‘input/*’ stuff
(i.e.  mostly regression tests): change directory, for example to
‘Documentation/’, issue ‘make doc’, which will build documentation in a
subdirectory ‘out-www’ from the source files in current directory.  In
this case, if you also want to browse the documentation in its
post-processed form, change back to top directory and issue

     make out=www WWW-post


Known issues and warnings
.........................

You may also need to create a script for ‘pngtopnm’ and ‘pnmtopng’.  On
GNU/Linux, I use this:

export LD_LIBRARY_PATH=/usr/lib
exec /usr/bin/pngtopnm "$@"

   On MacOS X with fink, I use this:

export DYLD_LIBRARY_PATH=/sw/lib
exec /sw/bin/pngtopnm "$@"

   On MacOS X with macports, you should use this:

export DYLD_FALLBACK_LIBRARY_PATH=/opt/local/lib
exec /opt/local/bin/pngtopnm "$@"


File: lilypond-contributor.info,  Node: Testing LilyPond binary,  Prev: Generating documentation,  Up: Post-compilation options

4.6.3 Testing LilyPond binary
-----------------------------

LilyPond comes with an extensive suite that exercises the entire
program.  This suite can be used to test that the binary has been built
correctly.

   The test suite can be executed with:

make test

   If the test suite completes successfully, the LilyPond binary has
been verified.

   More information on the regression test suite is found at *note
(lilypond-contributor)Regression tests::.


File: lilypond-contributor.info,  Node: Problems,  Next: Concurrent stable and development versions,  Prev: Post-compilation options,  Up: Compiling

4.7 Problems
============

For help and questions use <lilypond-user@gnu.org>.  Send bug reports to
<bug-lilypond@gnu.org>.

   Bugs that are not fault of LilyPond are documented here.

Compiling on MacOS X
--------------------

Here are special instructions for compiling under MacOS X. These
instructions assume that dependencies are installed using MacPorts.
(http://www.macports.org/) The instructions have been tested using OS X
10.5 (Leopard).

   First, install the relevant dependencies using MacPorts.

   Next, add the following to your relevant shell initialization files.
This is ‘~/.profile’ by default.  You should create this file if it does
not exist.

     export PATH=/opt/local/bin:/opt/local/sbin:$PATH
     export DYLD_FALLBACK_LIBRARY_PATH=/opt/local/lib:$DYLD_FALLBACK_LIBRARY_PATH

   Now you must edit the generated ‘config.make’ file.  Change

     FLEXLEXER_FILE = /usr/include/FlexLexer.h

to:

     FLEXLEXER_FILE = /opt/local/include/FlexLexer.h

   At this point, you should verify that you have the appropriate fonts
installed with your ghostscript installation.  Check ‘ls
/opt/local/share/ghostscript/fonts’ for: ’c0590*’ files (.pfb, .pfb and
.afm).  If you don’t have them, run the following commands to grab them
from the ghostscript SVN server and install them in the appropriate
location:

     svn export http://svn.ghostscript.com/ghostscript/tags/urw-fonts-1.0.7pre44/
     sudo mv urw-fonts-1.0.7pre44/* /opt/local/share/ghostscript/fonts/
     rm -rf urw-fonts-1.07pre44

   Now run the ‘./configure’ script.  To avoid complications with
automatic font detection, add

     --with-fonts-dir=/opt/local/share/ghostscript/fonts

Solaris
-------

Solaris7, ./configure

   ‘./configure’ needs a POSIX compliant shell.  On Solaris7, ‘/bin/sh’
is not yet POSIX compliant, but ‘/bin/ksh’ or bash is.  Run configure
like

     CONFIG_SHELL=/bin/ksh ksh -c ./configure

or

     CONFIG_SHELL=/bin/bash bash -c ./configure

FreeBSD
-------

To use system fonts, dejaview must be installed.  With the default port,
the fonts are installed in ‘usr/X11R6/lib/X11/fonts/dejavu’.

   Open the file ‘$LILYPONDBASE/usr/etc/fonts/local.conf’ and add the
following line just after the ‘<fontconfig>’ line.  (Adjust as necessary
for your hierarchy.)

     <dir>/usr/X11R6/lib/X11/fonts</dir>

International fonts
-------------------

On Mac OS X, all fonts are installed by default.  However, finding all
system fonts requires a bit of configuration; see this post
(http://lists.gnu.org/archive/html/lilypond-user/2007-03/msg00472.html)
on the ‘lilypond-user’ mailing list.

   On Linux, international fonts are installed by different means on
every distribution.  We cannot list the exact commands or packages that
are necessary, as each distribution is different, and the exact package
names within each distribution changes.  Here are some hints, though:

Red Hat Fedora

    taipeifonts fonts-xorg-truetype ttfonts-ja fonts-arabic \
         ttfonts-zh_CN fonts-ja fonts-hebrew

Debian GNU/Linux

   apt-get install emacs-intl-fonts xfonts-intl-.* \
        fonts-ipafont-gothic  fonts-ipafont-mincho \
        xfonts-bolkhov-75dpi xfonts-cronyx-100dpi xfonts-cronyx-75dpi

Using lilypond python libraries
-------------------------------

If you want to use lilypond’s python libraries (either running certain
build scripts manually, or using them in other programs), set
‘PYTHONPATH’ to ‘python/out’ in your build directory, or
‘.../usr/lib/lilypond/current/python’ in the installation directory
structure.


File: lilypond-contributor.info,  Node: Concurrent stable and development versions,  Next: Build system,  Prev: Problems,  Up: Compiling

4.8 Concurrent stable and development versions
==============================================

It can be useful to have both the stable and the development versions of
LilyPond available at once.  One way to do this on GNU/Linux is to
install the stable version using the precompiled binary, and run the
development version from the source tree.  After running ‘make all’ from
the top directory of the LilyPond source files, there will be a binary
called ‘lilypond’ in the ‘out’ directory:

     <PATH TO>/lilypond/out/bin/lilypond

   This binary can be run without actually doing the ‘make install’
command.  The advantage to this is that you can have all of the latest
changes available after pulling from git and running ‘make all’, without
having to uninstall the old version and reinstall the new.

   So, to use the stable version, install it as usual and use the normal
commands:

     lilypond foobar.ly

   To use the development version, create a link to the binary in the
source tree by saving the following line in a file somewhere in your
‘$PATH’:

     exec <PATH TO>/lilypond/out/bin/lilypond "$@"

   Save it as ‘Lilypond’ (with a capital L to distinguish it from the
stable ‘lilypond’), and make it executable:

     chmod +x Lilypond

   Then you can invoke the development version this way:

     Lilypond foobar.ly

   TODO: ADD

   - other compilation tricks for developers


File: lilypond-contributor.info,  Node: Build system,  Prev: Concurrent stable and development versions,  Up: Compiling

4.9 Build system
================

We currently use make and stepmake, which is complicated and only used
by us.  Hopefully this will change in the future.

Version-specific texinfo macros
-------------------------------

   • made with ‘scripts/build/create-version-itexi.py’ and
     ‘scripts/build/create-weblinks-itexi.py’

   • used extensively in the ‘WEBSITE_ONLY_BUILD’ version of the website
     (made with ‘website.make’, used on lilypond.org)

   • not (?)  used in the main docs?

   • the numbers in VERSION file: MINOR_VERSION should be 1 more than
     the last release, VERSION_DEVEL should be the last *online*
     release.  Yes, VERSION_DEVEL is less than VERSION.


File: lilypond-contributor.info,  Node: Documentation work,  Next: Website work,  Prev: Compiling,  Up: Top

5 Documentation work
********************

There are currently 11 manuals for LilyPond, not including the
translations.  Each book is available in HTML, PDF, and info.  The
documentation is written in a language called ‘texinfo’ – this allows us
to generate different output formats from a single set of source files.

   To organize multiple authors working on the documentation, we use a
Version Control System (VCS) called Git, previously discussed in *note
Starting with Git::.

* Menu:

* Introduction to documentation work::
* version in documentation files::
* Documentation suggestions::
* Texinfo introduction and usage policy::
* Documentation policy::
* Tips for writing docs::
* Scripts to ease doc work::
* Docstrings in scheme::
* Translating the documentation::


File: lilypond-contributor.info,  Node: Introduction to documentation work,  Next: version in documentation files,  Up: Documentation work

5.1 Introduction to documentation work
======================================

Our documentation tries to adhere to our *note Documentation policy::.
This policy contains a few items which may seem odd.  One policy in
particular is often questioned by potential contributors: we do not
repeat material in the Notation Reference, and instead provide links to
the “definitive” presentation of that information.  Some people point
out, with good reason, that this makes the documentation harder to read.
If we repeated certain information in relevant places, readers would be
less likely to miss that information.

   That reasoning is sound, but we have two counter-arguments.  First,
the Notation Reference – one of _five_ manuals for users to read – is
already over 500 pages long.  If we repeated material, we could easily
exceed 1000 pages!  Second, and much more importantly, LilyPond is an
evolving project.  New features are added, bugs are fixed, and bugs are
discovered and documented.  If features are discussed in multiple
places, the documentation team must find every instance.  Since the
manual is so large, it is impossible for one person to have the location
of every piece of information memorized, so any attempt to update the
documentation will invariably omit a few places.  This second concern is
not at all theoretical; the documentation used to be plagued with
inconsistent information.

   If the documentation were targeted for a specific version – say,
LilyPond 2.10.5 – and we had unlimited resources to spend on
documentation, then we could avoid this second problem.  But since
LilyPond evolves (and that is a very good thing!), and since we have
quite limited resources, this policy remains in place.

   A few other policies (such as not permitting the use of tweaks in the
main portion of NR 1+2) may also seem counter-intuitive, but they also
stem from attempting to find the most effective use of limited
documentation help.

   Before undertaking any large documentation work, contributors are
encouraged to contact the *note Documentation Meister: Meisters.


File: lilypond-contributor.info,  Node: version in documentation files,  Next: Documentation suggestions,  Prev: Introduction to documentation work,  Up: Documentation work

5.2 ‘\version’ in documentation files
=====================================

Every documentation file which includes LilyPond code must begin with a
‘\version’ statement, since the build procedure explicitly tests for its
presence and will not continue otherwise.  The ‘\version’ statement
should reference a version of LilyPond consistent with the syntax of the
contained code.

   Since the ‘\version’ statement is not valid Texinfo input it must be
commented out like this:

     @c \version "2.19.1"

   So, if you are adding LilyPond code which is not consistent with the
current version header, you should

  1. run convert-ly on the file using the latest version of LilyPond
     (which should, if everybody has done proper maintenance, not change
     anything);

  2. add the new code;

  3. modify the version number to match the new code.


File: lilypond-contributor.info,  Node: Documentation suggestions,  Next: Texinfo introduction and usage policy,  Prev: version in documentation files,  Up: Documentation work

5.3 Documentation suggestions
=============================

Small additions
---------------

For additions to the documentation,

  1. Tell us where the addition should be placed.  Please include both
     the section number and title (i.e.  "LM 2.13 Printing lyrics").

  2. Please write exact changes to the text.

  3. A formal patch to the source code is _not_ required; we can take
     care of the technical details.

  4. Send the suggestions to the ‘bug-lilypond’ mailing list as
     discussed in *note (lilypond-web)Contact::.

  5. Here is an example of a perfect documentation report:

     To: bug-lilypond@gnu.org
     From: helpful-user@example.net
     Subject: doc addition

     In LM 2.13 (printing lyrics), above the last line ("More options,
     like..."), please add:

     ----
     To add lyrics to a divided part, use blah blah blah.  For example,

     \score {
       \notes {blah <<blah>> }
       \lyrics {blah <<blah>> }
       blah blah blah
     }
     ----

     In addition, the second sentence of the first paragraph is
     confusing.  Please delete that sentence (it begins "Users
     often...") and replace it with this:
     ----
     To align lyrics with something, do this thing.
     ----

     Have a nice day,
     Helpful User

Larger contributions
--------------------

To replace large sections of the documentation, the guidelines are
stricter.  We cannot remove parts of the current documentation unless we
are certain that the new version is an improvement.

  1. Ask on the lilypond-devel mailing list if such a rewrite is
     necessary; somebody else might already be working on this issue!

  2. Split your work into small sections; this makes it much easier to
     compare the new and old documentation.

  3. Please prepare a formal git patch.

Contributions that contain examples using overrides
---------------------------------------------------

Examples that use overrides, tweaks, customer Scheme functions etc.  are
(with very few exceptions) not included in the main text of the manuals;
as there would be far too many, equally useful, candidates.

   The correct way is to submit your example, with appropriate
explanatory text and tags, to the LilyPond Snippet Repository (LSR).
Snippets that have the “docs” tag can then be easily added as a
_selected snippet_ in the documentation.  It will also appear
automatically in the Snippets lists.  See *note Introduction to LSR::.

   Snippets that _don’t_ have the “docs” tag will still be searchable
and viewable within the LSR, but will be not be included in the Snippets
list or be able to be included as part of the main documentation.

   Generally, any new snippets that have the “docs” tag are more
carefully checked for syntax and formatting.

Announcing your snippet
-----------------------

Once you have followed these guidelines, please send a message to
lilypond-devel with your documentation submissions.  Unfortunately there
is a strict ‘no top-posting’ check on the mailing list; to avoid this,
add:

   ‘> I'm not top posting’

   (you must include the > ) to the top of your documentation addition.

   We may edit your suggestion for spelling, grammar, or style, and we
may not place the material exactly where you suggested, but if you give
us some material to work with, we can improve the manual much faster.

   Thanks for your interest!


File: lilypond-contributor.info,  Node: Texinfo introduction and usage policy,  Next: Documentation policy,  Prev: Documentation suggestions,  Up: Documentation work

5.4 Texinfo introduction and usage policy
=========================================

* Menu:

* Texinfo introduction::
* Documentation files::
* Sectioning commands::
* LilyPond formatting::
* Text formatting::
* Syntax survey::
* Other text concerns::


File: lilypond-contributor.info,  Node: Texinfo introduction,  Next: Documentation files,  Up: Texinfo introduction and usage policy

5.4.1 Texinfo introduction
--------------------------

The language is called Texinfo; you can see its manual here:

   <http://www.gnu.org/software/texinfo/manual/texinfo/>

   However, you don’t need to read those docs.  The most important thing
to notice is that text is text.  If you see a mistake in the text, you
can fix it.  If you want to change the order of something, you can
cut-and-paste that stuff into a new location.

          Note: Rule of thumb: follow the examples in the existing docs.
          You can learn most of what you need to know from this; if you
          want to do anything fancy, discuss it on ‘lilypond-devel’
          first.


File: lilypond-contributor.info,  Node: Documentation files,  Next: Sectioning commands,  Prev: Texinfo introduction,  Up: Texinfo introduction and usage policy

5.4.2 Documentation files
-------------------------

All manuals live in ‘Documentation/’.

   In particular, there are four user manuals, their respective master
source files are ‘learning.tely’ (LM, Learning Manual), ‘notation.tely’
(NR, Notation Reference), ‘music-glossary.tely’ (MG, Music Glossary),
and ‘lilypond-program’ (AU). Each chapter is written in a separate file,
ending in ‘.itely’ for files containing lilypond code, and ‘.itexi’ for
files without lilypond code, located in a subdirectory associated to the
manual (‘learning/’ for ‘learning.tely’, and so on); list the
subdirectory of each manual to determine the filename of the specific
chapter you wish to modify.

   Developer manuals live in ‘Documentation/’ too.  Currently there is
only one: the Contributor’s Guide ‘contrib-guide.texi’ you are reading.

   Snippet files are part of documentation, and the Snippet List (SL)
lives in ‘Documentation/’ just like the manuals.  For information about
how to modify the snippet files and SL, see *note LSR work::.


File: lilypond-contributor.info,  Node: Sectioning commands,  Next: LilyPond formatting,  Prev: Documentation files,  Up: Texinfo introduction and usage policy

5.4.3 Sectioning commands
-------------------------

The Notation Reference uses section headings at four, occasionally five,
levels.

   • Level 1: @chapter
   • Level 2: @section
   • Level 3: @subsection
   • Level 4: @unnumberedsubsubsec
   • Level 5: @subsubsubheading

   The first three levels are numbered in HTML, the last two are not.
Numbered sections correspond to a single HTML page in the split HTML
documents.

   The first four levels always have accompanying nodes so they can be
referenced and are also included in the ToC in HTML.

   Most of the manual is written at level 4 under headings created with

     @node Foo
     @unnumberedsubsubsec Foo

   Level 3 subsections are created with

     @node Foo
     @subsection Foo

   Level 4 headings and menus must be preceded by level 3 headings and
menus, and so on for level 3 and level 2.  If this is not what is
wanted, please use:

     @subsubsubheading Foo

   Please leave two blank lines above a ‘@node’; this makes it easier to
find sections in texinfo.

   Do not use any ‘@’ commands for a ‘@node’.  They may be used for any
‘@sub...’ sections or headings however.

     not:
     @node @code{Foo} Bar
     @subsection @code{Foo} Bar

     but instead:
     @node Foo Bar
     @subsection @code{Foo} Bar

   No punctuation may be used in the node names.  If the heading text
uses punctuation (in particular, colons and commas) simply leave this
out of the node name and menu.

     @menu
     * Foo Bar::
     @end menu

     @node Foo Bar
     @subsection Foo: Bar

   Backslashes must not be used in node names or section headings.  If
the heading text should include a backslash simply leave this out of the
node name and menu and replace it with ‘@bs{}’ in the heading text.

     @menu
     * The set command
     @end menu

     @node The set command
     @subsection The @code{@bs{}set} command

   References to such a node may use the third argument of the ‘@ref’
command to display the texually correct heading.

     @ref{The set command,,The @code{@bs{}set command}

   With the exception of ‘@’ commands, ‘\’ commands and punctuation, the
section name should match the node name exactly.

   Sectioning commands (‘@node’ and ‘@section’) must not appear inside
an ‘@ignore’.  Separate those commands with a space, ie ‘@n’ ‘ode’.

   Nodes must be included inside a

     @menu
     * foo::
     * bar::
     @end menu

construct.  These can be constructed with scripts: see *note Stripping
whitespace and generating menus::.


File: lilypond-contributor.info,  Node: LilyPond formatting,  Next: Text formatting,  Prev: Sectioning commands,  Up: Texinfo introduction and usage policy

5.4.4 LilyPond formatting
-------------------------

   • Most LilyPond examples throughout the documentation can be produced
     with:

          @lilypond[verbatim,quote]

     If using ‘\book{}’ in your example then you must also include the
     ‘papersize=X’ variable, where ‘X’ is a defined paper size from
     within ‘scm/paper.scm’.  This is to avoid the default ‘a4’ paper
     size being used and leaving too much unnecessary whitespace and
     potentially awkward page breaks in the PDFs.

     The preferred ‘papersize’s are ‘a5’, ‘a6’ or ‘a8landscape’.

     ‘a8landscape’ works best for a single measure with a single title
     and/or single ‘tagline’:

          @lilypond[papersize=a8landscape,verbatim]
          \book {
            \header {
              title = "A scale in LilyPond"
            }
            \relative {
              c d e f
            }
          }
          @end lilypond

     and can also be used to easily show features that require page
     breaks (i.e.  page numbers) without taking large amounts of space
     within the documentation.  Do not use the ‘quote’ option with this
     paper size.

     ‘a5’ or ‘a6’ paper sizes are best used for examples that have more
     than two measures of music or require multiple staves (i.e.  to
     illustrate cross-staff features, RH and LH parts etc.)  and where
     ‘\book{}’ constructions are required or where ‘a8landscape’
     produces an example that is too cramped.  Depending on the example
     the ‘quote’ option may need to be omitted.

     In rare cases, other options may be used (or omitted), but ask
     first.

   • Please avoid using extra spacing either after or within the
     ‘@lilypond’ parameters.

          not:          @lilypond [verbatim, quote, fragment]
          but instead:  @lilypond[verbatim,quote,fragment]

   • Inspirational headwords are produced with:

          @lilypondfile[quote,ragged-right,line-width=16\cm,staffsize=16]
          {pitches-headword.ly}

   • LSR snippets are linked with:

          @lilypondfile[verbatim,quote,ragged-right,texidoc,doctitle]
          {filename.ly}

   • Use two spaces for indentation in lilypond examples (no tabs).

   • All engravers should have double-quotes around them:

          \consists "Spans_arpeggio_engraver"

     LilyPond does not strictly require this, but it is a useful
     convention to follow.

   • All context or layout object strings should be prefaced with ‘#’.
     Again, LilyPond does not strictly require this, but it is helpful
     to get users accustomed to this scheme construct, i.e.  ‘\set
     Staff.instrumentName = #"cello"’

   • Try to avoid using ‘#'’ or ‘#`’ when describing context or layout
     properties outside of an ‘@example’ or ‘@lilypond’, unless the
     description explicitly requires it.

     i.e.  “...setting the ‘transparent’ property leaves the object
     where it is, but makes it invisible.”

   • If possible, only write one bar per line.

   • If you only have one bar per line, omit bar checks.  If you must
     put more than one bar per line (not recommended), then include bar
     checks.

   • Tweaks should, if possible, also occur on their own line.
          not:          \override TextScript.padding = #3 c1^"hi"
          but instead:  \override TextScript.padding = #3
                        c1^"hi"

     excepted in Templates, where ‘doctitle’ may be omitted.

   • Avoid long stretches of input code.  Nobody is going to read them
     in print.  Create small examples.  However, this does not mean it
     has be minimal.

   • Specify durations for at least the first note of every bar.

   • If possible, end with a complete bar.

   • Comments should go on their own line, and be placed before the
     line(s) to which they refer.

   • For clarity, always use { } marks even if they are not technically
     required; i.e.

          not:

          \context Voice \repeat unfold 2 \relative c' {
            c2 d
          }

          but instead:

          \context Voice {
            \repeat unfold 2 {
              \relative c' {
                c2 d
              }
            }
          }

   • Add a space around { } marks; i.e.

          not:          \chordmode{c e g}
          but instead:  \chordmode { c e g }

   • Use { } marks for additional ‘\markup’ format commands; i.e.

          not:          c^\markup \tiny\sharp
          but instead:  c^\markup { \tiny \sharp }

   • Remove any space around ‘<’ ‘>’ marks; i.e.

          not:           < c e g > 4
          but instead:   <c e g>4

   • Beam, slur and tie marks should begin immediately after the first
     note with beam and phrase marks ending immediately after the last.

          a8\( ais16[ b cis( d] b) cis4~ b' cis,\)

   • If you want to work on an example outside of the manual (for
     easier/faster processing), use this header:

          \paper {
            indent = 0\mm
            line-width = 160\mm - 2.0 * 0.4\in
            line-width = #(- line-width (* mm  3.000000))
          }

          \layout {
          }

     You may not change any of these values.  If you are making an
     example demonstrating special ‘\paper{}’ values, contact the
     Documentation Editor.


File: lilypond-contributor.info,  Node: Text formatting,  Next: Syntax survey,  Prev: LilyPond formatting,  Up: Texinfo introduction and usage policy

5.4.5 Text formatting
---------------------

   • Lines should be less than 72 characters long.  (We personally
     recommend writing with 66-char lines, but do not bother modifying
     existing material).  Also see the recommendations for fixed-width
     fonts in the *note Syntax survey::.

   • Do not use tabs.

   • Do not use spaces at the beginning of a line (except in ‘@example’
     or ‘@verbatim’ environments), and do not use more than a single
     space between words.  ‘makeinfo’ copies the input lines verbatim
     without removing those spaces.

   • Use two spaces after a period.

   • In examples of syntax, use ‘@var{MUSICEXPR}’ for a music
     expression.

   • Don’t use ‘@rinternals{}’ in the main text.  If you’re tempted to
     do so, you’re probably getting too close to “talking through the
     code”.  If you really want to refer to a context, use ‘@code{}’ in
     the main text and ‘@rinternals{}’ in the ‘@seealso’.


File: lilypond-contributor.info,  Node: Syntax survey,  Next: Other text concerns,  Prev: Text formatting,  Up: Texinfo introduction and usage policy

5.4.6 Syntax survey
-------------------

* Menu:

* Comments::
* Cross references::
* External links::
* Fixed-width font::
* Indexing::
* Lists::
* Special characters::
* Miscellany::


File: lilypond-contributor.info,  Node: Comments,  Next: Cross references,  Up: Syntax survey

Comments
........

   • ‘@c ...’ — single line comment.  ‘@c NOTE:’ is a comment which
     should remain in the final version.  (gp only command ;)

   • ‘@ignore’ — multi-line comment:

          @ignore
          ...
          @end ignore


File: lilypond-contributor.info,  Node: Cross references,  Next: External links,  Prev: Comments,  Up: Syntax survey

Cross references
................

Enter the exact ‘@node’ name of the target reference between the
brackets (eg. ‘@ref{Syntax survey}’).  Do not split a cross-reference
across two lines – this causes the cross-reference to be rendered
incorrectly in HTML documents.

   • ‘@ref{...}’ — link within current manual.

   • ‘@rchanges{...}’ — link to Changes.

   • ‘@rcontrib{...}’ — link to Contributor’s Guide.

   • ‘@ressay{...}’ — link to Engraving Essay.

   • ‘@rextend{...}’ — link to Extending LilyPond.

   • ‘@rglos{...}’ — link to the Music Glossary.

   • ‘@rinternals{...}’ — link to the Internals Reference.

   • ‘@rlearning{...}’ — link to Learning Manual.

   • ‘@rlsr{...}’ — link to a Snippet section.

   • ‘@rprogram{...}’ — link to Application Usage.

   • ‘@ruser{...}’ — link to Notation Reference.

   • ‘@rweb{...}’ — link to General Information.


File: lilypond-contributor.info,  Node: External links,  Next: Fixed-width font,  Prev: Cross references,  Up: Syntax survey

External links
..............

   • ‘@email{...}’ — create a ‘mailto:’ E-mail link.

   • ‘@uref{URL[, LINK TEXT]}’ — link to an external url.  Use within an
     ‘@example ... @end example’.

          @example
          @uref{URL [, link text ]}
          @end example


File: lilypond-contributor.info,  Node: Fixed-width font,  Next: Indexing,  Prev: External links,  Up: Syntax survey

Fixed-width font
................

   • ‘@code{...}’, ‘@samp{...}’ —

     Use the ‘@code{...}’ command when referring to individual
     language-specific tokens (keywords, commands, engravers, scheme
     symbols, etc.)  in the text.  Ideally, a single ‘@code{...}’ block
     should fit within one line in the PDF output.

     Use the ‘@samp{...}’ command when you have a short example of user
     input, unless it constitutes an entire ‘@item’ by itself, in which
     case ‘@code{...}’ is preferable.  Otherwise, both should only be
     used when part of a larger sentence within a paragraph or ‘@item’.
     Do not use ‘@code{...}’ or ‘@samp{...}’ inside an ‘@example’ block,
     and do not use either as a free-standing paragraph; use ‘@example’
     instead.

     A single unindented line in the PDF has space for about 79
     fixed-width characters (76 if indented).  Within an ‘@item’ there
     is space for about 75 fixed-width characters.  Each additional
     level of ‘@itemize’ or ‘@enumerate’ shortens the line by about 4
     columns.

     However, even short blocks of ‘@code{...}’ and ‘@samp{...}’ can run
     into the margin if the Texinfo line-breaking algorithm gets
     confused.  Additionally, blocks that are longer than this may in
     fact print nicely; it all depends where the line breaks end up.  If
     you compile the docs yourself, check the PDF output to make sure
     the line breaks are satisfactory.

     The Texinfo setting ‘@allowcodebreaks’ is set to ‘false’ in the
     manuals, so lines within ‘@code{...}’ or ‘@samp{...}’ blocks will
     only break at spaces, not at hyphens or underscores.  If the block
     contains spaces, use ‘@w{@code{...}}’ or ‘@w{@samp{...}}’ to
     prevent unexpected line breaks.

     The Texinfo settings ‘txicodequoteundirected’ and
     ‘txicodequotebacktick’ are both set in the manuals, so backticks
     (‘`’) and apostrophes (‘'’) placed within blocks of ‘@code’,
     ‘@example’, or ‘@verbatim’ are not converted to left- and
     right-angled quotes (‘‘ ’’) as they normally are within the text,
     so the apostrophes in ‘‘@w{@code{\relative c''}}’’ will display
     correctly.  However, these settings do not affect the PDF output
     for anything within a ‘@samp’ block (even if it includes a nested
     ‘@code’ block), so entering ‘‘@w{@samp{\relative c''}}’’ wrongly
     produces ‘‘\relative c’’’’ in PDF. Consequently, if you want to use
     a ‘@samp{...}’ block which contains backticks or apostrophes, you
     should instead use ‘‘@q{@code{...}}’’ (or ‘‘@q{@w{@code{...}}}’’ if
     the block also contains spaces).  Note that backslashes within
     ‘@q{...}’ blocks must be entered as ‘@bs{}’, so the example above
     would be coded as ‘‘@q{@w{@code{@bs{}relative c''}}}’’.

   • ‘@command{...}’ — Use when referring to command-line commands
     within the text (eg.  ‘@command{convert-ly}’).  Do not use inside
     an ‘@example’ block.

   • ‘@example’ — Use for examples of program code.  Do not add
     extraneous indentation (i.e.  don’t start every line with
     whitespace).  Use the following layout (notice the use of blank
     lines).  Omit the ‘@noindent’ if the text following the example
     starts a new paragraph:

          ...TEXT LEADING INTO THE EXAMPLE...

          @example
          ...
          @end example

          @noindent
          CONTINUATION OF THE TEXT...

     Individual lines within an ‘@example’ block should not exceed 74
     characters; otherwise they will run into the margin in the PDF
     output, and may get clipped.  If an ‘@example’ block is part of an
     ‘@item’, individual lines in the ‘@example’ block should not exceed
     70 columns.  Each additional level of ‘@itemize’ or ‘@enumerate’
     shortens the line by about 4 columns.

     For long command line examples, if possible, use a trailing
     backslash to break up a single line, indenting the next line with 2
     spaces.  If this isn’t feasible, use ‘@smallexample ...
     @end smallexample’ instead, which uses a smaller fontsize.  Use
     ‘@example’ whenever possible, but if needed, ‘@smallexample’ can
     fit up to 90 characters per line before running into the PDF
     margin.  Each additional level of ‘@itemize’ or ‘@enumerate’
     shortens a ‘@smallexample’ line by about 5 columns.

   • ‘@file{...}’ — Use when referring to filenames and directories in
     the text.  Do not use inside an ‘@example’ block.

   • ‘@option{...}’ — Use when referring to command-line options in the
     text (eg.  ‘@option{--format}’).  Do not use inside an ‘@example’
     block.

   • ‘@verbatim’ — Prints the block exactly as it appears in the source
     file (including whitespace, etc.).  For program code examples, use
     ‘@example’ instead.  ‘@verbatim’ uses the same format as
     ‘@example’.

     Individual lines within an ‘@verbatim’ block should not exceed 74
     characters; otherwise they will run into the margin in the PDF
     output, and may get clipped.  If an ‘@verbatim’ block is part of an
     ‘@item’, individual lines in the ‘@verbatim’ block should not
     exceed 70 columns.  Each additional level of ‘@itemize’ or
     ‘@enumerate’ shortens the line by about 4 columns.


File: lilypond-contributor.info,  Node: Indexing,  Next: Lists,  Prev: Fixed-width font,  Up: Syntax survey

Indexing
........

   • ‘@cindex ...’ — General index.  Please add as many as you can.
     Don’t capitalize the first word.

   • ‘@funindex ...’ — is for a \lilycommand.


File: lilypond-contributor.info,  Node: Lists,  Next: Special characters,  Prev: Indexing,  Up: Syntax survey

Lists
.....

   • ‘@enumerate’ — Create an ordered list (with numbers).  Always put
     ‘@item’ on its own line.  As an exception, if all the items in the
     list are short enough to fit on single lines, placing them on the
     ‘@item’ lines is also permissible.  ‘@item’ and ‘@end enumerate’
     should always be preceded by a blank line.

          @enumerate

          @item
          A long multi-line item like this one must begin
          on a line of its own and all the other items in
          the list must do so too.

          @item
          Even short ones

          @end enumerate

          @enumerate

          @item Short item

          @item Short item

          @end enumerate

   • ‘@itemize’ — Create an unordered list (with bullets).  Use the same
     format as ‘@enumerate’.  Do not use ‘@itemize @bullet’.


File: lilypond-contributor.info,  Node: Special characters,  Next: Miscellany,  Prev: Lists,  Up: Syntax survey

Special characters
..................

          Note: In Texinfo, the backslash is an ordinary character, and
          is entered without escaping (e.g.  ‘The @code{\foo} command’).
          However, within double-quoted Scheme and/or LilyPond strings,
          backslashes (including those ending up in Texinfo markup) need
          to be escaped by doubling them:
               (define (foo x)
                 "The @code{\\foo} command..."
                 ...)

   • ‘--’, ‘---’ — Create an en dash (–) or an em dash (—) in the text.
     To print two or three literal hyphens in a row, wrap one of them in
     a ‘@w{...}’ (eg.  ‘-@w{-}-’).

   • ‘@@’, ‘@{’, ‘@}’ — Create an at-sign (@), a left curly bracket ({),
     or a right curly bracket (}).

   • ‘@bs{}’ — Create a backslash within a ‘@q{...}’, ‘@qq{...}’, or
     ‘@warning{...}’ block.  This is a custom LilyPond macro, not a
     builtin @-command in Texinfo.  Texinfo would also allow ‘\\’, but
     this breaks the PDF output.

   • ‘@tie{}’ — Create a _variable-width_ non-breaking space in the text
     (use ‘@w{ }’ for a single _fixed-width_ non-breaking space).
     Variables or numbers which consist of a single character (probably
     followed by a punctuation mark) should be tied properly, either to
     the previous or the next word.  Example: ‘The letter@tie{}@q{I} is
     skipped’


File: lilypond-contributor.info,  Node: Miscellany,  Prev: Special characters,  Up: Syntax survey

Miscellany
..........

   • ‘@notation{...}’ — refers to pieces of notation, e.g.
     ‘@notation{clef}’.  Also use for specific lyrics (‘the
     @notation{A - men} is centered’).  Only use once per subsection per
     term.

   • ‘@q{...}’ — Single quotes.  Used for ‘vague’ terms.  To get a
     backslash (\), you must use ‘@bs{}’.

   • ‘@qq{...}’ — Double quotes.  Used for actual quotes (“he said”) or
     for introducing special input modes.  To get a backslash (\), you
     must use ‘@bs{}’.

   • ‘@var{...}’ — Use for metasyntactic variables (such as ‘FOO’,
     ‘BAR’, ‘ARG1’, etc.).  In most cases, when the ‘@var{...}’ command
     appears in the text (and not in an ‘@example’ block) it should be
     wrapped with an appropriate texinfo code-highlighting command (such
     as ‘@code’, ‘@samp’, ‘@file’, ‘@command’, etc.).  For example:
     ‘@code{@var{foo}}’, ‘@file{@var{myfile.ly}}’,
     ‘@samp{git checkout @var{branch}}’, etc.  This improves readability
     in the PDF and HTML output.

   • ‘@version{}’ — Return the current LilyPond version string.  Use
     ‘@w{@version{}}’ if it’s at the end of a line (to prevent an ugly
     line break in PDF); use ‘@w{"@version{}"}’ if you need it in
     quotes.

   • ‘@w{...}’ — Do not allow any line breaks.

   • ‘@warning{...}’ — produces a “Note: ” box.  Use for important
     messages.  To get a backslash (\), you must use ‘@bs{}’.


File: lilypond-contributor.info,  Node: Other text concerns,  Prev: Syntax survey,  Up: Texinfo introduction and usage policy

5.4.7 Other text concerns
-------------------------

   • References must occur at the end of a sentence, for more
     information see the texinfo manual
     (http://www.gnu.org/software/texinfo/manual/texinfo/).  Ideally
     this should also be the final sentence of a paragraph, but this is
     not required.  Any link in a doc section must be duplicated in the
     ‘@seealso’ section at the bottom.

   • Introducing examples must be done with

          . (i.e. finish the previous sentence/paragraph)
          : (i.e. `in this example:')
          , (i.e. `may add foo with the blah construct,')

     The old “sentence runs directly into the example” method is not
     allowed any more.

   • Abbrevs in caps, e.g., HTML, DVI, MIDI, etc.

   • Colon usage

       1. To introduce lists

       2. When beginning a quote: “So, he said,...”.

          This usage is rarer.  Americans often just use a comma.

       3. When adding a defining example at the end of a sentence.

   • Non-ASCII characters which are in utf-8 should be directly used;
     this is, don’t say ‘Ba@ss{}tuba’ but ‘Baßtuba’.  This ensures that
     all such characters appear in all output formats.


File: lilypond-contributor.info,  Node: Documentation policy,  Next: Tips for writing docs,  Prev: Texinfo introduction and usage policy,  Up: Documentation work

5.5 Documentation policy
========================

* Menu:

* Books::
* Section organization::
* Checking cross-references::
* General writing::
* Technical writing style::


File: lilypond-contributor.info,  Node: Books,  Next: Section organization,  Up: Documentation policy

5.5.1 Books
-----------

There are four parts to the documentation: the Learning Manual, the
Notation Reference, the Program Reference, and the Music Glossary.

   • Learning Manual:

     The LM is written in a tutorial style which introduces the most
     important concepts, structure and syntax of the elements of a
     LilyPond score in a carefully graded sequence of steps.
     Explanations of all musical concepts used in the Manual can be
     found in the Music Glossary, and readers are assumed to have no
     prior knowledge of LilyPond.  The objective is to take readers to a
     level where the Notation Reference can be understood and employed
     to both adapt the templates in the Appendix to their needs and to
     begin to construct their own scores.  Commonly used tweaks are
     introduced and explained.  Examples are provided throughout which,
     while being focussed on the topic being introduced, are long enough
     to seem real in order to retain the readers’ interest.  Each
     example builds on the previous material, and comments are used
     liberally.  Every new aspect is thoroughly explained before it is
     used.

     Users are encouraged to read the complete Learning Manual from
     start-to-finish.

   • Notation Reference: a (hopefully complete) description of LilyPond
     input notation.  Some material from here may be duplicated in the
     Learning Manual (for teaching), but consider the NR to be the
     "definitive" description of each notation element, with the LM
     being an "extra".  The goal is _not_ to provide a step-by-step
     learning environment – do not avoid using notation that has not be
     introduced previously in the NR (for example, use \break if
     appropriate).  This section is written in formal technical writing
     style.

     Avoid duplication.  Although users are not expected to read this
     manual from start to finish, they should be familiar with the
     material in the Learning Manual (particularly “Fundamental
     Concepts”), so do not repeat that material in each section of this
     book.  Also watch out for common constructs, like ^ - _ for
     directions – those are explained in NR 3.  In NR 1, you can write:
     DYNAMICS may be manually placed above or below the staff, see
     @ref{Controlling direction and placement}.

     Most tweaks should be added to LSR and not placed directly in the
     ‘.itely’ file.  In some cases, tweaks may be placed in the main
     text, but ask about this first.

     Finally, you should assume that users know what the notation means;
     explaining musical concepts happens in the Music Glossary.

   • Application Usage: information about using the program lilypond
     with other programs (lilypond-book, operating systems, GUIs,
     convert-ly, etc).  This section is written in formal technical
     writing style.

     Users are not expected to read this manual from start to finish.

   • Music Glossary: information about the music notation itself.
     Explanations and translations about notation terms go here.

     Users are not expected to read this manual from start to finish.

   • Internals Reference: not really a documentation book, since it is
     automagically generated from the source, but this is its name.


File: lilypond-contributor.info,  Node: Section organization,  Next: Checking cross-references,  Prev: Books,  Up: Documentation policy

5.5.2 Section organization
--------------------------

   • The order of headings inside documentation sections should be:

          main docs
          @predefined
          @endpredefined
          @snippets
          @seealso
          @knownissues

   • You _must_ include a @seealso.

        • The order of items inside the @seealso section is

               Music Glossary:
               @rglos{foo},
               @rglos{bar}.

               Learning Manual:
               @rlearning{baz},
               @rlearning{foozle}.

               Notation Reference:
               @ruser{faazle},
               @ruser{boo}.

               Application Usage:
               @rprogram{blah}.

               Essay on automated music engraving:
               @ressay{yadda}.

               Extending LilyPond:
               @rextend{frob}.

               Installed Files:
               @file{path/to/dir/blahz}.

               Snippets: @rlsr{section}.

               Internals Reference:
               @rinternals{fazzle},
               @rinternals{booar}.

        • If there are multiple entries, separate them by commas but do
          not include an ‘and’.

        • Always end with a period.

        • Place each link on a new line as above; this makes it much
          easier to add or remove links.  In the output, they appear on
          a single line.

          ("Snippets" is REQUIRED; the others are optional)

        • Any new concepts or links which require an explanation should
          go as a full sentence(s) in the main text.

        • Don’t insert an empty line between @seealso and the first
          entry!  Otherwise there is excessive vertical space in the PDF
          output.

   • To create links, use @ref{} if the link is within the same manual.

   • @predefined ...  @endpredefined is for commands in ‘ly/*-init.ly’

   • Do not include any real info in second-level sections (i.e.  1.1
     Pitches).  A first-level section may have introductory material,
     but other than that all material goes into third-level sections
     (i.e.  1.1.1 Writing Pitches).

   • The @knownissues should not discuss any issues that are in the
     tracker, unless the issue is Priority-Postponed.  The goal is to
     discuss any overall architecture or syntax decisions which may be
     interpreted as bugs.  Normal bugs should not be discussed here,
     because we have so many bugs that it would be a huge task to keep
     the @knownissues current and accurate all the time.


File: lilypond-contributor.info,  Node: Checking cross-references,  Next: General writing,  Prev: Section organization,  Up: Documentation policy

5.5.3 Checking cross-references
-------------------------------

Cross-references between different manuals are heavily used in the
documentation, but they are not checked during compilation.  However, if
you compile the documentation, a script called check_texi_refs can help
you with checking and fixing these cross-references; for information on
usage, cd into a source tree where documentation has been built, cd into
Documentation and run:

     make check-xrefs
     make fix-xrefs

   Note that you have to find yourself the source files to fix
cross-references in the generated documentation such as the Internals
Reference; e.g.  you can grep scm/ and lily/.


File: lilypond-contributor.info,  Node: General writing,  Next: Technical writing style,  Prev: Checking cross-references,  Up: Documentation policy

5.5.4 General writing
---------------------

   • Do not forget to create @cindex entries for new sections of text.
     Enter commands with @funindex, i.e.

          @cindex pitches, writing in different octaves
          @funindex \relative

     Do not bother with the @code{} (they are added automatically).
     These items are added to both the command index and the unified
     index.  Both index commands should go in front of the actual
     material.

   • @cindex entries should not be capitalized, i.e.

          @cindex time signature

     is preferred instead of “Time signature”.  Only use capital letters
     for musical terms which demand them, e.g.  “D.S. al Fine”.

   • For scheme function index entries, only include the final part,
     i.e.

          @funindex modern-voice-cautionary
               and NOT
          @funindex #(set-accidental-style modern-voice-cautionary)

   • Use American spelling.  LilyPond’s internal property names use this
     convention.

   • Here is a list of preferred terms to be used:

        • _Simultaneous_ NOT concurrent.

        • _Measure_: the unit of music.

        • _Bar line_: the symbol delimiting a measure NOT barline.

        • _Note head_ NOT notehead.

        • _Chord construct_ NOT just chord (when referring to < ...  >)

        • _Staff_ NOT stave.

        • _Staves_ NOT Staffs: Phrases such as ‘multiple
          @internalsref{Staff}s’ should be rephrased to ‘multiple
          @internalsref{Staff} contexts’.


File: lilypond-contributor.info,  Node: Technical writing style,  Prev: General writing,  Up: Documentation policy

5.5.5 Technical writing style
-----------------------------

These refer to the NR. The LM uses a more gentle, colloquial style.

   • Do not refer to LilyPond in the text.  The reader knows what the
     manual is about.  If you do, capitalization is LilyPond.

   • If you explicitly refer to ‘lilypond’ the program (or any other
     command to be executed), write ‘@command{lilypond}’.

   • Do not explicitly refer to the reader/user.  There is no one else
     besides the reader and the writer.

   • Avoid contractions (don’t, won’t, etc.).  Spell the words out
     completely.

   • Avoid abbreviations, except for commonly used abbreviations of
     foreign language terms such as etc.  and i.e.

   • Avoid fluff (“Notice that,” “as you can see,” “Currently,”).

   • The use of the word ‘illegal’ is inappropriate in most cases.  Say
     ‘invalid’ instead.


File: lilypond-contributor.info,  Node: Tips for writing docs,  Next: Scripts to ease doc work,  Prev: Documentation policy,  Up: Documentation work

5.6 Tips for writing docs
=========================

In the NR, I highly recommend focusing on one subsection at a time.  For
each subsection,

   • check the mundane formatting.  Are the headings (@predefined,
     @seealso, etc.)  in the right order?

   • add any appropriate index entries.

   • check the links in the @seealso section – links to music glossary,
     internal references, and other NR sections are the main concern.
     Check for potential additions.

   • move LSR-worthy material into LSR. Add the snippet, delete the
     material from the ‘.itely’ file, and add a @lilypondfile command.

   • check the examples and descriptions.  Do they still work?  *Do not*
     assume that the existing text is accurate/complete; some of the
     manual is highly out of date.

   • is the material in the @knownissues still accurate?

   • can the examples be improved (made more explanatory), or is there
     any missing info?  (feel free to ask specific questions on -user; a
     couple of people claimed to be interesting in being “consultants”
     who would help with such questions)

   In general, I favor short text explanations with good examples – “an
example is worth a thousand words”.  When I worked on the docs, I spent
about half my time just working on those tiny lilypond examples.  Making
easily-understandable examples is much harder than it looks.

Tweaks
......

In general, any \set or \override commands should go in the “select
snippets” section, which means that they should go in LSR and not the
‘.itely’ file.  For some cases, the command obviously belongs in the
“main text” (i.e.  not inside @predefined or @seealso or whatever) –
instrument names are a good example of this.

     \set Staff.instrumentName = #"foo"

   On the other side of this,

     \override Score.Hairpin.after-line-breaking = ##t

   clearly belongs in LSR.

   I’m quite willing to discuss specific cases if you think that a
tweaks needs to be in the main text.  But items that can go into LSR are
easier to maintain, so I’d like to move as much as possible into there.

   It would be “nice” if you spent a lot of time crafting nice tweaks
for users... but my recommendation is *not* to do this.  There’s a lot
of doc work to do without adding examples of tweaks.  Tweak examples can
easily be added by normal users by adding them to the LSR.

   One place where a documentation writer can profitably spend time
writing or upgrading tweaks is creating tweaks to deal with known
issues.  It would be ideal if every significant known issue had a
workaround to avoid the difficulty.


See also
........

   *note Adding and editing snippets::.


File: lilypond-contributor.info,  Node: Scripts to ease doc work,  Next: Docstrings in scheme,  Prev: Tips for writing docs,  Up: Documentation work

5.7 Scripts to ease doc work
============================

* Menu:

* Scripts to test the documentation::
* Scripts to create documentation::


File: lilypond-contributor.info,  Node: Scripts to test the documentation,  Next: Scripts to create documentation,  Up: Scripts to ease doc work

5.7.1 Scripts to test the documentation
---------------------------------------

* Menu:

* Building only one section of the documentation::


File: lilypond-contributor.info,  Node: Building only one section of the documentation,  Up: Scripts to test the documentation

Building only one section of the documentation
..............................................

In order to save build time, a script is available to build only one
section of the documentation in English with a default HTML appearance.

   If you do not yet have a ‘build/’ subdirectory within the LilyPond
Git tree, you should create this first.  You can then build a section of
the documentation with the following command:

     scripts/auxiliar/doc-section.sh MANUAL SECTION

where ‘SECTION’ is the name of the file containing the section to be
built, and ‘MANUAL’ is replaced by the name of the directory containing
the section.  So, for example, to build section 1.1 of the Notation
Reference, use the command:

     scripts/auxiliar/doc-section.sh notation pitches

   You can then see the generated document for the section at

     build/tempdocs/pitches/out/pitches.html

   According to LilyPond issue 1236
(https://sourceforge.net/p/testlilyissues/issues/1236/), the location of
the LilyPond Git tree is taken from ‘$LILYPOND_GIT’ if specified,
otherwise it is auto-detected.

   It is assumed that compilation takes place in the ‘build/’
subdirectory, but this can be overridden by setting the environment
variable ‘LILYPOND_BUILD_DIR’.

   Similarly, output defaults to ‘build/tempdocs/’ but this can be
overridden by setting the environment variable ‘LILYPOND_TEMPDOCS’.

   This script will not work for building sections of the Contributors’
Guide.  For building sections of the Contributors’ Guide, use:

     scripts/auxiliar/cg-section.sh SECTION

where ‘SECTION’ is the name of the file containing the sections to be
built.  For example, to build section 4 of the Contributors’ Guide, use:

     scripts/auxiliar/cg-section.sh doc-work

   ‘cg-section.sh’ uses the same environment variables and corresponding
default values as ‘doc-section.sh’.


File: lilypond-contributor.info,  Node: Scripts to create documentation,  Prev: Scripts to test the documentation,  Up: Scripts to ease doc work

5.7.2 Scripts to create documentation
-------------------------------------

* Menu:

* Stripping whitespace and generating menus::
* Stripping whitespace only::
* Updating doc with convert-ly::


File: lilypond-contributor.info,  Node: Stripping whitespace and generating menus,  Next: Stripping whitespace only,  Up: Scripts to create documentation

Stripping whitespace and generating menus
.........................................

          Note: This script assumes that the file conforms to our doc
          policy, in particular with regard to *note Sectioning
          commands::; a few files still need work in this regard.

   To automatically regenerate ‘@menu’ portions and strip whitespace,
use:

     scripts/auxiliar/node-menuify.py FILENAME

   If you are adding documentation that requires new menus, you will
need to add a blank ‘@menu’ section:

     @menu
     @end menu


File: lilypond-contributor.info,  Node: Stripping whitespace only,  Next: Updating doc with convert-ly,  Prev: Stripping whitespace and generating menus,  Up: Scripts to create documentation

Stripping whitespace only
.........................

To remove extra whitespace from the ends of lines, run

     scripts/auxiliar/strip-whitespace.py FILENAME


File: lilypond-contributor.info,  Node: Updating doc with convert-ly,  Prev: Stripping whitespace only,  Up: Scripts to create documentation

Updating doc with ‘convert-ly’
..............................

Don’t.  This should be done by programmers when they add new features.
If you notice that it hasn’t been done, complain to ‘lilypond-devel’.


File: lilypond-contributor.info,  Node: Docstrings in scheme,  Next: Translating the documentation,  Prev: Scripts to ease doc work,  Up: Documentation work

5.8 Docstrings in scheme
========================

Material in the Internals reference is generated automatically from our
source code.  Any doc work on Internals therefore requires modifying
files in ‘scm/*.scm’.  Texinfo is allowed in these docstrings.

   Most documentation writers never touch these, though.  If you want to
work on them, please ask for help.


File: lilypond-contributor.info,  Node: Translating the documentation,  Prev: Docstrings in scheme,  Up: Documentation work

5.9 Translating the documentation
=================================

The mailing list ‘translations@lilynet.net’ is dedicated to LilyPond web
site and documentation translation; on this list, you will get support
from the Translations Meister and experienced translators, and we
regularly discuss translation issues common to all languages.  All
people interested in LilyPond translations are invited to subscribe to
this list regardless of the amount of their contribution, by sending an
email to ‘translations-request@lilynet.net’ with subject ‘subscribe’ and
an empty message body.  Unless mentioned explicitly, or except if a
translations coordinator contacts you privately, you should send
questions, remarks and patches to the list ‘translations@lilynet.net’.
Please note that traffic is high on the English-speaking list
‘lilypond-user@gnu.org’, so it may take some time before your request or
contribution is handled.

* Menu:

* Getting started with documentation translation::
* Documentation translation details::
* Documentation translation maintenance::
* Translations management policies::
* Technical background::


File: lilypond-contributor.info,  Node: Getting started with documentation translation,  Next: Documentation translation details,  Up: Translating the documentation

5.9.1 Getting started with documentation translation
----------------------------------------------------

First, get the sources of branch ‘translation’ from the Git repository,
see *note Starting with Git::.

* Menu:

* Translation requirements::
* Which documentation can be translated::
* Starting translation in a new language::


File: lilypond-contributor.info,  Node: Translation requirements,  Next: Which documentation can be translated,  Up: Getting started with documentation translation

Translation requirements
........................

Working on LilyPond documentation translations requires the following
pieces of software, in order to make use of dedicated helper tools:

   • Python 2.4 or higher,
   • GNU Make,
   • Gettext,
   • Git.

   It is not required to build LilyPond and the documentation to
translate the documentation.  However, if you have enough time and
motivation and a suitable system, it can be very useful to build at
least the documentation so that you can check the output yourself and
more quickly; if you are interested, see *note Compiling::.

   Before undertaking any large translation work, contributors are
encouraged to contact the *note Translation Meister: Meisters.


File: lilypond-contributor.info,  Node: Which documentation can be translated,  Next: Starting translation in a new language,  Prev: Translation requirements,  Up: Getting started with documentation translation

Which documentation can be translated
.....................................

The makefiles and scripts infrastructure currently supports translation
of the following documentation:

   • the web site, the Learning Manual, the Notation Reference and
     Application Usage – Texinfo source, PDF and HTML output; Info
     output might be added if there is enough demand for it;
   • the Changes document.

   Support for translating the following pieces of documentation should
be added soon, by decreasing order of priority:

   • automatically generated documentation: markup commands, predefined
     music functions;
   • the Snippets List;
   • the Internals Reference.


File: lilypond-contributor.info,  Node: Starting translation in a new language,  Prev: Which documentation can be translated,  Up: Getting started with documentation translation

Starting translation in a new language
......................................

At top of the source directory, do

     ./autogen.sh

or (if you want to install your self-compiled LilyPond locally)

     ./autogen.sh --prefix=$HOME

If you want to compile LilyPond – which is almost required to build the
documentation, but is not required to do translation only – fix all
dependencies and rerun ‘./configure’ (with the same options as for
‘autogen.sh’).

   Then ‘cd’ into ‘Documentation/’ and run

     make ISOLANG=MY-LANGUAGE new-lang

where MY-LANGUAGE is the ISO 639 language code.

   Finally, add a language definition for your language in
‘python/langdefs.py’.


File: lilypond-contributor.info,  Node: Documentation translation details,  Next: Documentation translation maintenance,  Prev: Getting started with documentation translation,  Up: Translating the documentation

5.9.2 Documentation translation details
---------------------------------------

Please follow all the instructions with care to ensure quality work.

   All files should be encoded in UTF-8.

* Menu:

* Files to be translated::
* Translating the Web site and other Texinfo documentation::
* Adding a Texinfo manual::


File: lilypond-contributor.info,  Node: Files to be translated,  Next: Translating the Web site and other Texinfo documentation,  Up: Documentation translation details

Files to be translated
......................

Translation of ‘Documentation/foo/bar’ should be
‘Documentation/LANG/foo/bar’.  Unmentioned files should not be
translated.

   Priorities:
   • 1.  delivery,
   • 2.  3.  4.  5.  6.  later,
   • 7.  optional.

   Files of priority 1 should be submitted along all files generated by
starting a new language in the same commit and thus a unique patch, and
the translation of files marked with priority 2 should be committed to
Git at the same time and thus sent in a single patch.  Files marked with
priority 3 or more may be submitted individually.  Word counts
(excluding LilyPond snippets) are given for each file.  For knowing how
to commit your work to Git, then make patches of your new translations
as well as corrections and updates, see *note Basic Git procedures::.

     -1- Web site
     760   web.texi
     5793  web/introduction.itexi
     1158  web/download.itexi
     1139  macros.itexi
     9     po/lilypond-doc.pot (translate to po/MY_LANGUAGE.po)
     0     search-box.ihtml
     ---   lilypond-texi2html.init (section TRANSLATIONS)
     8859  total

     -2- Tutorial
     1314  web/manuals.itexi
     124   learning.tely
     2499  learning/tutorial.itely
     4421  learning/common-notation.itely
     8358  total

     -3- Fundamental Concepts, starting of Usage and Community
     11240 learning/fundamental.itely -- Fundamental concepts
     135   usage.tely
     5469  usage/running.itely
     2097  usage/updating.itely
     2449  web/community.itexi
     21390 total

     -4- Rest of Learning manual and Suggestions on writing LilyPond files
     16592 learning/tweaks.itely -- Tweaking output
     1236  learning/templates.itely -- Templates
     2793  usage/suggestions.itely -- Suggestions on writing LilyPond files
     20621 total

     -5- Notation reference
     326   notation.tely
     91    notation/notation.itely -- Musical notation
     5413  notation/pitches.itely
     6853  notation/rhythms.itely
     1819  notation/expressive.itely
     1288  notation/repeats.itely
     2979  notation/simultaneous.itely
     2554  notation/staff.itely
     1481  notation/editorial.itely
     2754  notation/text.itely
     81    notation/specialist.itely -- Specialist notation
     4977  notation/vocal.itely
     1975  notation/chords.itely
     702   notation/piano.itely
     799   notation/percussion.itely
     826   notation/guitar.itely
     66    notation/strings.itely
     242   notation/bagpipes.itely
     5518  notation/ancient.itely
     12853 notation/input.itely -- Input syntax
     2164  notation/non-music.itely -- Non-musical notation
     10982 notation/spacing.itely -- Spacing issues
     17050 notation/changing-defaults.itely -- Changing defaults
     5187  notation/programming-interface.itely -- Interfaces for programmers
     3079  notation/notation-appendices.itely -- Notation manual tables
     252   notation/cheatsheet.itely -- Cheat sheet
     92311 total

     -6- Rest of Application Usage
     4211  usage/lilypond-book.itely -- LilyPond-book
     1122  usage/converters.itely -- Converting from other formats
     5333  total

     -7- Appendices whose translation is optional
     382   essay/literature.itely
     1222  learning/scheme-tutorial.itely (should be revised first)
     1604  total

   In addition, not listed above, Snippets’ titles and descriptions
should be translated; they are a part of the Notation Reference and
therefore their priority is 5.


File: lilypond-contributor.info,  Node: Translating the Web site and other Texinfo documentation,  Next: Adding a Texinfo manual,  Prev: Files to be translated,  Up: Documentation translation details

Translating the Web site and other Texinfo documentation
........................................................

Every piece of text should be translated in the source file, except
Texinfo comments, text in ‘@lilypond’ blocks and a few cases mentioned
below.

   Node names are translated, but the original node name in English
should be kept as the argument of ‘@translationof’ put after the section
title; that is, every piece in the original file like

     @node Foo bar
     @SECTION_COMMAND Bar baz

should be translated as

     @node TRANSLATION OF FOO BAR
     @SECTION_COMMAND TRANSLATION OF BAR BAZ
     @translationof Foo bar

   The argument of ‘@rglos’ commands and the first argument of
‘@rglosnamed’ commands must not be translated, as it is the node name of
an entry in Music Glossary.

   Every time you translate a node name in a cross-reference, i.e.  the
argument of commands ‘@ref, @rprogram, @rlearning, @rlsr, @ruser’ or the
first argument of their ‘*named’ variants, you should make sure the
target node is defined in the correct source file; if you do not intend
to translate the target node right now, you should at least write the
node definition (that is, the ‘@node @SECTION_COMMMAND @translationof’
trio mentioned above) in the expected source file and define all its
parent nodes; for each node you have defined this way but have not
translated, insert a line that contains ‘@untranslated’.  That is, you
should end up for each untranslated node with something like

     @node TRANSLATION OF FOO BAR
     @SECTION_COMMAND TRANSLATION OF BAR BAZ
     @translationof Foo bar

     @untranslated

          Note: you do not have to translate the node name of a
          cross-reference to a node that you do not have translated.  If
          you do, you must define an “empty” node like explained just
          above; this will produce a cross-reference with the translated
          node name in output, although the target node will still be in
          English.  On the opposite, if all cross-references that refer
          to an untranslated node use the node name in English, then you
          do not have to define such an “empty” node, and the
          cross-reference text will appear in English in the output.
          The choice between these two strategies implies its particular
          maintenance requirements and is left to the translators,
          although the opinion of the Translation meister leans towards
          not translating these cross-references.

   Please think of the fact that it may not make sense translating
everything in some Texinfo files, and you may take distance from the
original text; for instance, in the translation of the web site section
Community, you may take this into account depending on what you know the
community in your language is willing to support, which is possible only
if you personally assume this support, or there exists a public forum or
mailing list listed in Community for LilyPond in your language:

   • *note (lilypond-web)Bug reports::: this page should be translated
     only if you know that every bug report sent on your language’s
     mailing list or forum will be handled by someone who will translate
     it to English and send it on bug-lilypond or add an issue in the
     tracker, then translate back the reply from developers.

   • *note (lilypond-contributor)Help us::: this page should be
     translated very freely, and possibly not at all: ask help for
     contributing to LilyPond for tasks that LilyPond community in your
     language is able and going to handle.

In any case, please mark in your work the sections which do not result
from the direct translation of a piece of English translation, using
comments i.e.  lines starting with ‘‘@c’’.

   Finally, press in Emacs <C-c C-u C-a> to update or generate menus.
This process should be made easier in the future, when the helper script
‘texi-langutils.py’ and the makefile target are updated.

   Some pieces of text manipulated by build scripts that appear in the
output are translated in a ‘.po’ file – just like LilyPond output
messages – in ‘Documentation/po’.  The Gettext domain is named
‘lilypond-doc’, and unlike ‘lilypond’ domain it is not managed through
the Free Translation Project.

   Take care of using typographic rules for your language, especially in
‘macros.itexi’.

   If you wonder whether a word, phrase or larger piece of text should
be translated, whether it is an argument of a Texinfo command or a small
piece sandwiched between two Texinfo commands, try to track whether and
where it appears in PDF and/or HTML output as visible text.  This piece
of advice is especially useful for translating ‘macros.itexi’.

   Please keep verbatim copies of music snippets (in ‘@lilypond’ blocs).
However, some music snippets containing text that shows in the rendered
music, and sometimes translating this text really helps the user to
understand the documentation; in this case, and only in this case, you
may as an exception translate text in the music snippet, and then you
must add a line immediately before the ‘@lilypond’ block, starting with

     @c KEEP LY

Otherwise the music snippet would be reset to the same content as the
English version at next ‘make snippet-update’ run – see *note Updating
documentation translation::.

   When you encounter

     @lilypondfile[<number of fragment options>,texidoc]{FILENAME.LY}

in the source, open ‘Documentation/snippets/FILENAME.ly’, translate the
‘texidoc’ header field it contains, enclose it with ‘texidocMY-LANGUAGE
= "’ and ‘"’, and write it into
‘Documentation/MY-LANGUAGE/texidocs/FILENAME.texidoc’.  Additionally,
you may translate the snippet’s title in ‘doctitle’ header field, in
case ‘doctitle’ is a fragment option used in ‘@lilypondfile’; you can do
this exactly the same way as ‘texidoc’.  For instance,
‘Documentation/MY-LANGUAGE/texidocs/FILENAME.texidoc’ may contain

     doctitlees = "Spanish title baz"
     texidoces = "
     Spanish translation blah
     "

   ‘@example’ blocks need not be verbatim copies, e.g.  variable names,
file names and comments should be translated.

   Finally, please carefully apply every rule exposed in *note Texinfo
introduction and usage policy::, and *note Documentation policy::.  If
one of these rules conflicts with a rule specific to your language,
please ask the Translation meister on <translations@lilynet.net> list
and/or the Documentation Editors on <lilypond-devel@gnu.org> list.


File: lilypond-contributor.info,  Node: Adding a Texinfo manual,  Prev: Translating the Web site and other Texinfo documentation,  Up: Documentation translation details

Adding a Texinfo manual
.......................

In order to start translating a new manual whose basename is FOO, do

     cd Documentation/MY-LANGUAGE
     cp ../FOO.tely .
     mkdir FOO
     cp web/GNUmakefile FOO

then append FOO to variable ‘SUBDIRS’ in
Documentation/MY-LANGUAGE/GNUmakefile, then translate file
MY-LANGUAGE/FOO.tely and run ‘skeleton-update’:

     cd Documentation/
     make ISOLANG=MY-LANGUAGE TEXI_LANGUTIL_FLAGS=--head-only skeleton-update

Your are now ready to translate the new manual exactly like the web site
or the Learning Manual.


File: lilypond-contributor.info,  Node: Documentation translation maintenance,  Next: Translations management policies,  Prev: Documentation translation details,  Up: Translating the documentation

5.9.3 Documentation translation maintenance
-------------------------------------------

Several tools have been developed to make translations maintenance
easier.  These helper scripts make use of the power of Git, the version
control system used for LilyPond development.

   You should use them whenever you would like to update the translation
in your language, which you may do at the frequency that fits your and
your cotranslators’ respective available times.  In the case your
translation is up-do-date (which you can discover in the first
subsection below), it is enough to check its state every one or two
weeks.  If you feel overwhelmed by the quantity of documentation to be
updated, see *note Maintaining without updating translations::.

* Menu:

* Check state of translation::
* Updating documentation translation::
* Updating translation committishes::


File: lilypond-contributor.info,  Node: Check state of translation,  Next: Updating documentation translation,  Up: Documentation translation maintenance

Check state of translation
..........................

First pull from Git – see *note Pulling and rebasing::, but DO NOT
rebase unless you are sure to master the translation state checking and
updating system – then cd into ‘Documentation/’ (or at top of the source
tree, replace ‘make’ with ‘make -C Documentation’) and run

     make ISOLANG=MY_LANGUAGE check-translation

This presents a diff of the original files since the most recent
revision of the translation.  To check a single file, cd into
‘Documentation/’ and run

     make CHECKED_FILES=MY_LANGUAGE/MANUAL/FOO.itely check-translation

In case this file has been renamed since you last updated the
translation, you should specify both old and new file names, e.g.
‘CHECKED_FILES=MY_LANGUAGE/{MANUAL,user}/FOO.itely’.

   To see only which files need to be updated, do

     make ISOLANG=MY_LANGUAGE check-translation | grep 'diff --git'

   To avoid printing terminal colors control characters, which is often
desirable when you redirect output to a file, run

     make ISOLANG=MY_LANGUAGE NO_COLOR=1 check-translation

   You can see the diffs generated by the commands above as changes that
you should make in your language to the existing translation, in order
to make your translation up to date.

          Note: do not forget to update the committish in each file you
          have completely updated, see *note Updating translation
          committishes::.

   Global state of the translation is recorded in
‘Documentation/translations.itexi’, which is used to generate
Translations status page.  To update that page, do from ‘Documentation/’

     make translation-status

   This will also leave ‘out/translations-status.txt’, which contains
up-to-dateness percentages for each translated file, and update word
counts of documentation files in this Guide.


See also
........

   *note Maintaining without updating translations::.


File: lilypond-contributor.info,  Node: Updating documentation translation,  Next: Updating translation committishes,  Prev: Check state of translation,  Up: Documentation translation maintenance

Updating documentation translation
..................................

Instead of running ‘check-translation’, you may want to run
‘update-translation’, which will run your favorite text editor to update
files.  First, make sure environment variable ‘EDITOR’ is set to a text
editor command, then run from ‘Documentation/’

     make ISOLANG=MY_LANGUAGE update-translation

or to update a single file

     make CHECKED_FILES=MY_LANGUAGE/MANUAL/FOO.ITELY update-translation

   For each file to be updated, ‘update-translation’ will open your text
editor with this file and a diff of the file in English; if the diff
cannot be generated or is bigger than the file in English itself, the
full file in English will be opened instead.

          Note: do not forget to update the committish in each file you
          have completely updated, see *note Updating translation
          committishes::.

   Texinfo skeleton files, i.e.  ‘.itely’ files not yet translated,
containing only the first node of the original file in English can be
updated automatically: whenever ‘make check-translation’ shows that such
files should be updated, run from ‘Documentation/’

     make ISOLANG=MY_LANGUAGE skeleton-update

   ‘.po’ message catalogs in ‘Documentation/po/’ may be updated by
issuing from ‘Documentation/’ or ‘Documentation/po/’

     make po-update

          Note: if you run po-update and somebody else does the same and
          pushes before you push or send a patch to be applied, there
          will be a conflict when you pull.  Therefore, it is better
          that only the Translation meister runs this command.

   Updating music snippets can quickly become cumbersome, as most
snippets should be identical in all languages.  Fortunately, there is a
script that can do this odd job for you (run from ‘Documentation/’):

     make ISOLANG=MY_LANGUAGE snippet-update

   This script overwrites music snippets in
‘MY_LANGUAGE/FOO/EVERY.ITELY’ with music snippets from
‘FOO/EVERY.ITELY’.  It ignores skeleton files, and keeps intact music
snippets preceded with a line starting with ‘@c KEEP LY’; it reports an
error for each ‘.itely’ that has not the same music snippet count in
both languages.  Always use this script with a lot of care, i.e.  run it
on a clean Git working tree, and check the changes it made with ‘git
diff’ before committing; if you don’t do so, some ‘@lilypond’ snippets
might be broken or make no sense in their context.

   Finally, a command runs the three update processes above for all
enabled languages (from ‘Documentation/’):

     make all-translations-update

   Use this command with caution, and keep in mind it will not be really
useful until translations are stabilized after the end of GDP and GOP.


See also
........

   *note Maintaining without updating translations::, *note Adding and
editing snippets::.


File: lilypond-contributor.info,  Node: Updating translation committishes,  Prev: Updating documentation translation,  Up: Documentation translation maintenance

Updating translation committishes
.................................

At the beginning of each translated file except PO files, there is a
committish which represents the revision of the sources which you have
used to translate this file from the file in English.

   When you have pulled and updated a translation, it is very important
to update this committish in the files you have completely updated (and
only these); to do this, first commit possible changes to any
documentation in English which you are sure to have done in your
translation as well, then replace in the up-to-date translated files the
old committish by the committish of latest commit, which can be obtained
by doing

     git rev-list HEAD |head -1

   Most of the changes in the LSR snippets included in the documentation
concern the syntax, not the description inside ‘texidoc=""’.  This
implies that quite often you will have to update only the committish of
the matching .texidoc file.  This can be a tedious work if there are
many snippets to be marked as up do date.  You can use the following
command to update the committishes at once:

     cd Documentation/LANG/texidocs
     sed -i -r 's/[0-9a-z]{40}/NEW-COMMITTISH/' *.texidoc


See also
........

   *note LSR work::.


File: lilypond-contributor.info,  Node: Translations management policies,  Next: Technical background,  Prev: Documentation translation maintenance,  Up: Translating the documentation

5.9.4 Translations management policies
--------------------------------------

These policies show the general intent of how the translations should be
managed, they aim at helping translators, developers and coordinators
work efficiently.

* Menu:

* Maintaining without updating translations::
* Managing documentation translation with Git::


File: lilypond-contributor.info,  Node: Maintaining without updating translations,  Next: Managing documentation translation with Git,  Up: Translations management policies

Maintaining without updating translations
.........................................

Keeping translations up to date under heavy changes in the documentation
in English may be almost impossible, especially as during the former
Grand Documentation Project (GDP) or the Grand Organization Project
(GOP) when a lot of contributors brings changes.  In addition,
translators may be — and that is a very good thing — involved in these
projects too.

   it is possible — and even recommended — to perform some maintenance
that keeps translated documentation usable and eases future translation
updating.  The rationale below the tasks list motivates this plan.

   The following tasks are listed in decreasing priority order.

  1. Update macros.itexi.  For each obsolete macro definition, if it is
     possible to update macro usage in documentation with an automatic
     text or regexp substitution, do it and delete the macro definition
     from ‘macros.itexi’; otherwise, mark this macro definition as
     obsolete with a comment, and keep it in ‘macros.itexi’ until the
     documentation translation has been updated and no longer uses this
     macro.

  2. Update ‘*.tely’ files completely with ‘make check-translation’ –
     you may want to redirect output to a file because of overwhelming
     output, or call check-translation.py on individual files, see *note
     Check state of translation::.

  3. In ‘.itelys’, match sections and .itely file names with those from
     English docs, which possibly involves moving nodes contents in
     block between files, without updating contents itself.  In other
     words, the game is catching where has gone each section.  In
     Learning manual, and in Notation Reference sections which have been
     revised in GDP, there may be completely new sections: in this case,
     copy ‘@node’ and ‘@section’-command from English docs, and add the
     marker for untranslated status ‘@untranslated’ on a single line.
     Note that it is not possible to exactly match subsections or
     subsubsections of documentation in English, when contents has been
     deeply revised; in this case, keep obsolete (sub)subsections in the
     translation, marking them with a line ‘@c obsolete’ just before the
     node.

     Emacs with Texinfo mode makes this step easier:

        • without Emacs AucTeX installed, <C-c C-s> shows structure of
          current Texinfo file in a new buffer ‘*Occur*’; to show
          structure of two files simultaneously, first split Emacs
          window in 4 tiles (with <C-x 1> and <C-x 2>), press <C-c C-s>
          to show structure of one file (e.g.  the translated file),
          copy ‘*Occur*’ contents into ‘*Scratch*’, then press <C-c C-s>
          for the other file.

          If you happen to have installed AucTeX, you can either call
          the macro by doing <M-x texinfo-show-structure> or create a
          key binding in your ‘~/.emacs’, by adding the four following
          lines:

               (add-hook 'Texinfo-mode-hook
                         '(lambda ()
                            (define-key Texinfo-mode-map "\C-cs"
                             'texinfo-show-structure)))

          and then obtain the structure in the ‘*Occur*’ buffer with
          <C-c s>.

        • Do not bother updating ‘@menu’s when all menu entries are in
          the same file, just do <C-c C-u C-a> (“update all menus”) when
          you have updated all the rest of the file.

        • Moving to next or previous node using incremental search:
          press <C-s> and type ‘node’ (or <C-s @node> if the text
          contains the word ‘node’) then press <C-s> to move to next
          node or <C-r> to move to previous node.  Similar operation can
          be used to move to the next/previous section.  Note that every
          cursor move exits incremental search, and hitting <C-s> twice
          starts incremental search with the text entered in previous
          incremental search.

        • Moving a whole node (or even a sequence of nodes): jump to
          beginning of the node (quit incremental search by pressing an
          arrow), press <C-SPACE>, press <C-s node> and repeat <C-s>
          until you have selected enough text, cut it with <C-w> or
          <C-x>, jump to the right place (moving between nodes with the
          previous hint is often useful) and paste with <C-y> or <C-v>.

  4. Update sections finished in the English documentation; check
     sections status at
          <http://lilypondwiki.tuxfamily.org/index.php?title=Documentation_coordination>.

  5. Update documentation PO. It is recommended not to update strings
     which come from documentation that is currently deeply revised in
     English, to avoid doing the work more than once.

  6. Fix broken cross-references by running (from ‘Documentation/’)

          make ISOLANG=YOUR-LANGUAGE fix-xrefs

     This step requires a successful documentation build (with ‘make
     doc’).  Some cross-references are broken because they point to a
     node that exists in the documentation in English, which has not
     been added to the translation; in this case, do not fix the
     cross-reference but keep it "broken", so that the resulting HTML
     link will point to an existing page of documentation in English.

Rationale
.........

You may wonder if it would not be better to leave translations as-is
until you can really start updating translations.  There are several
reasons to do these maintenance tasks right now.

   • This will have to be done sooner or later anyway, before updating
     translation of documentation contents, and this can already be done
     without needing to be redone later, as sections of documentation in
     English are mostly revised once.  However, note that not all
     documentation sectioning has been revised in one go, so all this
     maintenance plan has to be repeated whenever a big reorganization
     is made.

   • This just makes translated documentation take advantage of the new
     organization, which is better than the old one.

   • Moving and renaming sections to match sectioning of documentation
     in English simplify future updating work: it allows updating the
     translation by side-by-side comparison, without bothering whether
     cross-reference names already exist in the translation.

   • Each maintenance task except ‘Updating PO files’ can be done by the
     same person for all languages, which saves overall time spent by
     translators to achieve this task: the node names and section titles
     are in English, so you can do.  It is important to take advantage
     of this now, as it will be more complicated (but still possible) to
     do step 3 in all languages when documentation is compiled with
     ‘texi2html’ and node names are directly translated in source files.


File: lilypond-contributor.info,  Node: Managing documentation translation with Git,  Prev: Maintaining without updating translations,  Up: Translations management policies

Managing documentation translation with Git
...........................................

This policy explains how to manage Git branches and commit translations
to Git.

   • Translation work is made on ‘translation’ branch.  This branch is
     merged on ‘staging’ once a week, approximately.  Then, ‘master’
     branch is merged on ‘translation’, where the check-translation
     script (see *note Check state of translation::) shows changes in
     English docs which should be translated, and the cycle starts
     again.

   • Translations may be pushed directly to ‘staging’ only if they do
     not break compilation of LilyPond and its documentation.  Those
     changes could be pushed to ‘translation’ too, or alternatively
     translators could wait until they come from ‘master’ the next time
     it is merged on ‘translation’.  Similarly, changes matching
     ‘stable/X.Y’ are preferably made on ‘X.Ytranslation’.

   • ‘translation’ Git branch may be merged into ‘staging’ branch only
     if LilyPond (‘make all’) and documentation (‘make doc’) compile
     successfully.

   • ‘make’ and ‘make doc’ are usually successful in ‘master’ Git branch
     because those tests should have already succeeded in ‘staging’
     branch before merging.  ‘master’ branch may be merged into
     ‘translation’ when significant changes had been made in
     documentation in English in ‘master’ branch.

   • General maintenance may be done by anybody who knows what he does
     in documentation in all languages, without informing translators
     first.  General maintenance include simple text substitutions (e.g.
     automated by sed), compilation fixes, updating Texinfo or
     lilypond-book commands, updating macros, updating ly code, fixing
     cross-references, and operations described in *note Maintaining
     without updating translations::.


File: lilypond-contributor.info,  Node: Technical background,  Prev: Translations management policies,  Up: Translating the documentation

5.9.5 Technical background
--------------------------

A number of Python scripts handle a part of the documentation
translation process.  All scripts used to maintain the translations are
located in ‘scripts/auxiliar/’.

   • ‘check_translation.py’ – show diff to update a translation,
   • ‘texi-langutils.py’ – quickly and dirtily parse Texinfo files to
     make message catalogs and Texinfo skeleton files,
   • ‘texi-skeleton-update.py’ – update Texinfo skeleton files,
   • ‘update-snippets.py’ – synchronize ly snippets with those from
     English docs,
   • ‘translations-status.py’ – update translations status pages and
     word counts in the file you are reading,
   • ‘tely-gettext.py’ – gettext node names, section titles and
     references in the sources; WARNING only use this script once for
     each file, when support for "makeinfo –html" has been dropped.

   Other scripts are used in the build process, in ‘scripts/build/’:

   • ‘mass-link.py’ – link or symlink files between English
     documentation and documentation in other languages.

   Python modules used by scripts in ‘scripts/auxiliar/’ or
‘scripts/build/’ (but not by installed Python scripts) are located in
‘python/auxiliar/’:
   • ‘manuals_definitions.py’ – define manual names and name of
     cross-reference Texinfo macros,
   • ‘buildlib.py’ – common functions (read piped output of a shell
     command, use Git),
   • ‘postprocess_html.py’ (module imported by ‘www_post.py’) – add
     footer and tweak links in HTML pages.

   And finally
   • ‘python/langdefs.py’ – language definitions module


File: lilypond-contributor.info,  Node: Website work,  Next: LSR work,  Prev: Documentation work,  Up: Top

6 Website work
**************

* Menu:

* Introduction to website work::
* Uploading and security::
* Debugging website and docs locally::
* Translating the website::


File: lilypond-contributor.info,  Node: Introduction to website work,  Next: Uploading and security,  Up: Website work

6.1 Introduction to website work
================================

The website is _not_ written directly in HTML; instead it is
autogenerated along with the documentation through a sophisticated
setup, using Texinfo source files.  Texinfo is the standard for
documentation of GNU software and allows generating output in HTML, PDF,
and Info formats, which drastically reduces maintenance effort and
ensures that the website content is consistent with the rest of the
documentation.  This makes the environment for improving the website
rather different from common web development.

   If you have not contributed to LilyPond before, a good starting point
might be incremental changes to the CSS file, to be found at
<http://lilypond.org/css/lilypond-website.css> or in the LilyPond source
code at ‘./Documentation/css/lilypond-website.css’.

   Large scale structural changes tend to require familiarity with the
project in general, a track record in working on LilyPond documentation
as well as a prospect of long-term commitment.

   The Texinfo source file for generating HTML are to be found in

     Documentation/web.texi
     Documentation/web/*.texi

   Unless otherwise specified, follow the instructions and policies
given in *note Documentation work::.  That chapter also contains a quick
introduction to Texinfo; consulting an external Texinfo manual should be
not necessary.

Exceptions to the documentation policies
----------------------------------------

   • Sectioning: the website only uses chapters and sections; no
     subsections or subsubsections.

   • @ref{}s to other manuals (@ruser, @rlearning, etc): you can’t link
     to any pieces of automatically generated documentation, like the IR
     or certain NR appendices.

   • The bibliography in Community->Publications is generated
     automatically from ‘.bib’ files; formatting is done automatically
     by ‘texi-web.bst’.

   • ...

   • For anything not listed here, just follow the same style as the
     existing website texinfo files.


File: lilypond-contributor.info,  Node: Uploading and security,  Next: Debugging website and docs locally,  Prev: Introduction to website work,  Up: Website work

6.2 Uploading and security
==========================

Overall idea
------------

To reduce the CPU burden on the shared host (as well as some security
concerns), we do not compile all of LilyPond.  The website build process
runs ‘texi2html’, but all media files (be they graphical ‘lilypond’
output, photos of people, or pdfs) are copied from the
‘$LILYPOND_WEB_MEDIA_GIT’ repository.

   All scripts and makefiles used for the website build are run from a
“trusted” copy.  Any modification to those files in git needs a human to
review the changes (after they have been made in git) before they are
used on the server.

Building the website (quick local)
----------------------------------

Initial setup: make sure that you have the environment variables
‘$LILYPOND_GIT’, ‘$LILYPOND_BUILD_DIR’ and ‘$LILYPOND_WEB_MEDIA_GIT’ set
up correctly.  For more information, see *note Environment variables::.

   Once that is done,

     cd $LILYPOND_BUILD_DIR
     make website

   The website is in ‘out-website/website/index.html’.

Building the website (exactly as on the server)
-----------------------------------------------

Setting up (exactly as on the server)
.....................................

Initial setup: you still need ‘$LILYPOND_GIT’ and
‘$LILYPOND_WEB_MEDIA_GIT’.

   Once that’s done, create:

     mkdir -p $HOME/lilypond/
     mkdir -p $HOME/lilypond/bin/
     mkdir -p $HOME/lilypond/cron/
     mkdir -p $HOME/lilypond/trusted-scripts/

   The add these files to ‘$HOME/lilypond/bin/’:

   Update git repositories:

     ### update-git.sh
     #!/bin/sh
     cd $LILYPOND_GIT
     git fetch origin
     git merge origin/master
     cd $LILYPOND_WEB_MEDIA_GIT
     git fetch origin
     git merge origin/master

   Check for any updates to trusted scripts / files:

     ### check-git.sh
     #!/bin/sh
     DEST=$HOME/lilypond/trusted-scripts
     diff -u $DEST/website.make \
       $LILYPOND_GIT/make/website.make
     diff -u $DEST/lilypond-texi2html.init \
       $LILYPOND_GIT/Documentation/lilypond-texi2html.init
     diff -u $DEST/extract_texi_filenames.py \
       $LILYPOND_GIT/scripts/build/extract_texi_filenames.py
     diff -u $DEST/create-version-itexi.py \
       $LILYPOND_GIT/scripts/build/create-version-itexi.py
     diff -u $DEST/create-weblinks-itexi.py \
       $LILYPOND_GIT/scripts/build/create-weblinks-itexi.py
     diff -u $DEST/mass-link.py \
       $LILYPOND_GIT/scripts/build/mass-link.py
     diff -u $DEST/website_post.py \
       $LILYPOND_GIT/scripts/build/website_post.py
     diff -u $DEST/bib2texi.py \
       $LILYPOND_GIT/scripts/build/bib2texi.py
     diff -u $DEST/langdefs.py \
       $LILYPOND_GIT/python/langdefs.py
     diff -u $DEST/lilypond.org.htaccess \
       $LILYPOND_GIT/Documentation/web/server/lilypond.org.htaccess
     diff -u $DEST/website-dir.htaccess \
       $LILYPOND_GIT/Documentation/web/server/website-dir.htaccess

   If the changes look ok, make them trusted:

     ### copy-from-git.sh
     #!/bin/sh
     DEST=$HOME/lilypond/trusted-scripts
     cp $LILYPOND_GIT/make/website.make \
       $DEST/website.make
     cp $LILYPOND_GIT/Documentation/lilypond-texi2html.init \
       $DEST/lilypond-texi2html.init
     cp $LILYPOND_GIT/scripts/build/extract_texi_filenames.py \
       $DEST/extract_texi_filenames.py
     cp $LILYPOND_GIT/scripts/build/create-version-itexi.py \
       $DEST/create-version-itexi.py
     cp $LILYPOND_GIT/scripts/build/create-weblinks-itexi.py \
       $DEST/create-weblinks-itexi.py
     cp $LILYPOND_GIT/scripts/build/mass-link.py \
       $DEST/mass-link.py
     cp $LILYPOND_GIT/scripts/build/website_post.py \
       $DEST/website_post.py
     cp $LILYPOND_GIT/scripts/build/bib2texi.py \
       $DEST/bib2texi.py
     cp $LILYPOND_GIT/python/langdefs.py \
       $DEST/langdefs.py
     cp $LILYPOND_GIT/Documentation/web/server/lilypond.org.htaccess \
       $DEST/lilypond.org.htaccess
     cp $LILYPOND_GIT/Documentation/web/server/website-dir.htaccess \
       $DEST/website-dir.htaccess

   Build the website:

     ### make-website.sh
     #!/bin/sh
     DEST=$HOME/web/
     BUILD=$HOME/lilypond/build-website
     mkdir -p $BUILD
     cd $BUILD
     cp $HOME/lilypond/trusted-scripts/website.make .

     make -f website.make WEBSITE_ONLY_BUILD=1 website
     rsync -raO $BUILD/out-website/website/ $DEST/website/
     cp $BUILD/out-website/pictures $DEST
     cp $BUILD/out-website/.htaccess $DEST

   Then in the ‘cronjob/’ directory, put the cronjob to automate the
trusted portions:

          Note: ‘cron’ will not inherit environment variables from your
          main setup, so you must re-define any variables inside your
          ‘crontab’.

     # website-rebuild.cron
     LILYPOND_GIT=   ... fill this in
     LILYPOND_WEB_MEDIA_GIT=   ... fill this in

     11 * * * * $HOME/lilypond/trusted-scripts/update-git.sh >/dev/null 2>&1
     22 * * * * $HOME/lilypond/trusted-scripts/make-website.sh >/dev/null 2>&1

   As the final stage of the setup, run your ‘copy-from-git.sh’ script,
assuming that you trust the current state of scripts in lilypond git.

Normal maintenance
..................

When there is a change to the build scripts and/or website makefile, log
in to the server (or your own home machine if you’re testing this
there), and do

     update-git.sh
     check-git.sh

   After reviewing the changes carefully, you can update the trusted
scripts with ‘copy-from-git.sh’.

Building the website (exactly as on the server)
...............................................

Run ‘make-website.sh’; the final version ends up in ‘$HOME/web/’.

   On the actual server, the website is generated hourly by user
‘graham’ the host ‘lilypond.org’.  You can set up the cronjob by doing:

     crontab $HOME/lilypond/website-rebuild.cron

Initial setup for new users on actual serve
-------------------------------------------

You should symlink your own ‘~/lilypond/’ to ‘~graham/lilypond/’

   If this directory does not exist, make it.  Git master should go in
‘~/lilypond/lilypond-git/’ but make sure you enable:

     git config core.filemode false

   If you have created any files in ‘~graham/lilypond/’ then please run:

     chgrp lilypond ~graham/lilypond/ -R
     chmod 775 ~graham/lilypond/ -R

Additional information
......................

Some information about the website is stored in
‘~graham/lilypond/*.txt’; this information should not be shared with
people without trusted access to the server.


File: lilypond-contributor.info,  Node: Debugging website and docs locally,  Next: Translating the website,  Prev: Uploading and security,  Up: Website work

6.3 Debugging website and docs locally
======================================

   • Install Apache (you can use version 2, but keep in mind that the
     server hosting lilypond.org runs version 1.3).  These instructions
     assume that you also enable ‘mod_userdir’, and use
     ‘$HOME/public_html’ as DocumentRoot (i.e.  the root directory of
     the web server).

   • Build the online docs and website:

          make WEB_TARGETS="offline online" doc
          make website

     This will make all the language variants of the website.  To save a
     little time, just the English version can be made with the command
     ‘make WEB_LANGS='' website’ or the English and (for example) the
     French with ‘make WEB_LANGS='fr' website’.

   • Choose the web directory where to copy the built stuff.  If you
     already have other web projects in your DocumentRoot and don’t need
     to test the ‘.htaccess’ file, you can copy to
     ‘~/public_html/lilypond.org’.  Otherwise you’d better copy to
     ‘~/public_html’.  It’s highly recommended to have your build dir
     and web dir on the same partition.

   • Add the directory for the online documentation:

          mkdir -p ~/public_html/doc/v2.19/

     You may want to add also the stable documentation in
     ‘~/public_html/doc/v2.18/’, extracting the contents of the html
     directory present in the tarball available in *note
     (lilypond-web)All::.  Just in case you want to test the redirects
     to the stable documentation.

   • Copy the files with rsync:

          rsync -av --delete out-website/website ~/public_html/
          cp out-website/.htaccess ~/public_html
          rsync -av --delete out-www/online-root/ ~/public_html/doc/v2.19/


File: lilypond-contributor.info,  Node: Translating the website,  Prev: Debugging website and docs locally,  Up: Website work

6.4 Translating the website
===========================

As it has much more audience, the website should be translated before
the documentation; see *note Translating the documentation::.

   In addition to the normal documentation translation practices, there
are a few additional things to note:

   • Build the website with:

          make website

     however, please note that this command is not designed for being
     run multiple times.  If you see unexpected output (mainly the page
     footers getting all messed up), then delete your ‘out-website’
     directory and run ‘make website’ again.

   • Some of the translation infrastructure is defined in python files;
     you must look at the ‘### translation data’ sections in:

          scripts/build/create-weblinks-itexi.py
          scripts/build/website_post.py

   • Translations are not included by default in ‘make website’.  To
     test your translation, edit the ‘WEB_LANGUAGES =’ line in
     ‘python/langdefs.py’.  You will need to copy this updated script to
     ‘$LILYPOND_BUILD_DIR/python/out’.

     Do not submit a patch to add your language to this file unless
     ‘make website’ completes with fewer than 5 warnings.

   • Links to manuals are done with macros like
     ‘@manualDevelLearningSplit’.  To get translated links, you must
     change that to ‘@manualDevelLearningSplit-es’ (for es/Spanish
     translations, for example).


File: lilypond-contributor.info,  Node: LSR work,  Next: Issues,  Prev: Website work,  Up: Top

7 LSR work
**********

* Menu:

* Introduction to LSR::
* Adding and editing snippets::
* Approving snippets::
* LSR to Git::
* Fixing snippets in LilyPond sources::
* Renaming a snippet::
* Updating the LSR to a new version::


File: lilypond-contributor.info,  Node: Introduction to LSR,  Next: Adding and editing snippets,  Up: LSR work

7.1 Introduction to LSR
=======================

The LilyPond Snippet Repository (LSR) (http://lsr.di.unimi.it/) is a
collection of lilypond examples.  A subset of these examples are
automatically imported into the documentation, making it easy for users
to contribute to the docs without learning Git and Texinfo.


File: lilypond-contributor.info,  Node: Adding and editing snippets,  Next: Approving snippets,  Prev: Introduction to LSR,  Up: LSR work

7.2 Adding and editing snippets
===============================

General guidelines
------------------

When you create (or find!)  a nice snippet, if it is supported by the
LilyPond version running on the LSR, please add it to the LSR. Go to LSR
(http://lsr.di.unimi.it/) and log in – if you haven’t already, create an
account.  Follow the instructions on the website.  These instructions
also explain how to modify existing snippets.

   If you think the snippet is particularly informative and you think it
should be included in the documentation, tag it with “docs” and one or
more other categories, or ask on the development list for somebody who
has editing permissions to do it .

   Please make sure that the lilypond code follows the guidelines in
*note LilyPond formatting::.

   If a new snippet created for documentation purposes compiles with
LilyPond version currently on LSR, it should be added to LSR, and a
reference to the snippet should be added to the documentation.  Please
ask a documentation editor to add a reference to it in an appropriate
place in the docs.  (Note – it should appear in the snippets document
automatically, once it has been imported into git and built.  See *note
LSR to Git::.

   If the new snippet uses new features that are not available in the
current LSR version, the snippet should be added to
‘Documentation/snippets/new’ and a reference should be added to the
manual.

   Snippets created or updated in ‘Documentation/snippets/new’ should be
copied to ‘Documentation/snippets’ by invoking at top of the source tree

     scripts/auxiliar/makelsr.py

   Be sure that ‘make doc’ runs successfully before submitting a patch,
to prevent breaking compilation.

Formatting snippets in ‘Documentation/snippets/new’
---------------------------------------------------

When adding a file to this directory, please start the file with

     \version "2.x.y"
     \header {
     % Use existing LSR tags other than 'docs'; see makelsr.py for
     % the list of tags used to sort snippets.  E.g.:
       lsrtags = "rhythms,expressive-marks"
     % This texidoc string will be formatted by Texinfo
       texidoc = "
     This code demonstrates ...
     "
     % Please put doctitle last so that the '% begin verbatim'
     % mark will be added correctly by makelsr.py.
       doctitle = "Snippet title"
     }

and name the file ‘snippet-title.ly’.

Please ensure that the version number you use at the top of the example
is the minimum version that the file will compile with: for example, if
the LSR is currently at 2.14.2 and your example requires 2.15.30, but
the current development version of ‘lilypond’ is 2.17.5, put ‘\version
"2.15.30"’ in the example.

Please also pay particular attention to the lines beginning ‘lsrtags = ’
and ‘doctitle =’.  The tags must match tags used in the documentation,
and the ‘doctitle’ must match the filename.


File: lilypond-contributor.info,  Node: Approving snippets,  Next: LSR to Git,  Prev: Adding and editing snippets,  Up: LSR work

7.3 Approving snippets
======================

The main task of LSR editors is approving snippets.  To find a list of
unapproved snippets, log into LSR (http://lsr.di.unimi.it/) and select
“No” from the dropdown menu to the right of the word “Approved” at the
bottom of the interface, then click “Enable filter”.

   Check each snippet:

  1. Does the snippet make sense and does what the author claims that it
     does?  If you think the snippet is particularly helpful, add the
     “docs” tag and at least one other tag.

  2. If the snippet is tagged with “docs”, check to see if it matches
     our guidelines for *note LilyPond formatting::.

     Also, snippets tagged with “docs” should not be explaining
     (replicating) existing material in the docs.  They should not refer
     to the docs; the docs should refer to them.

  3. If the snippet uses scheme, check that everything looks good and
     there are no security risks.

               Note: Somebody could sneak a ‘#'(system "rm -rf /")’
               command into our source tree if you do not do this!  Take
               this step *VERY SERIOUSLY*.

  4. If all is well, check the box labelled “approved” and save the
     snippet.


File: lilypond-contributor.info,  Node: LSR to Git,  Next: Fixing snippets in LilyPond sources,  Prev: Approving snippets,  Up: LSR work

7.4 LSR to Git
==============

Introduction
------------

Snippets used in the documentation are in
‘$LILYPOND_GIT/Documentation/snippets’.  This directory contains a
complete set of the snippets in the LSR which are tagged with ’docs’.
The exact method for getting them there is described below, but in
essence they come from downloading a tarball from the LSR and importing
into the directory using the ‘makelsr’ script.

   Any snippets which are too bleeding edge to run on the LSR (which
uses a stable development version) are put into
‘$LILYPOND_GIT/Documentation/snippets/new’.  Once the LSR has been
upgraded so that these will run, then they are transferred to the LSR
and deleted from ‘/snippets/new’.

   ’Git’ is the shorthand name for the Git repository that contains all
the development code.  For further information on setting this up see,
*note Working with source code::.  An alternative to setting up a Git
repository for people wanting to do LSR work is to get the source code
from <http://lilypond.org/website/development.html>.

Importing the LSR to Git
------------------------

  1. Make sure that ‘convert-ly’ script and the ‘lilypond’ binary are a
     bleeding edge version – the latest release or even better, a fresh
     snapshot from Git master, with the environment variable
     ‘LILYPOND_BUILD_DIR’ correctly set up, see *note Environment
     variables::.

  2. Start by creating a list of updated snippets from your local
     repository.  From the top source directory, run:

          scripts/auxiliar/makelsr.py

     Commit the changes and make a patch.  Check the patch has nothing
     other than minor changes.  If all is good and you’re confident in
     what you’ve done, this can be pushed directly to staging.

  3. Next, download the updated snippets and run ‘makelsr.py’ against
     them.  From the top source directory, run:

          wget http://lsr.di.unimi.it/download/lsr-snippets-docs-`date +%F`.tar.gz
          tar -xzf lsr-snippets-docs-`date +%F`.tar.gz
          make -C $LILYPOND_BUILD_DIR
          scripts/auxiliar/makelsr.py lsr-snippets-docs-`date +%F`

     where ‘date +%F’ gives the current date in format YYYY-MM-DD (the
     snippets archive is usually generated around 03:50 CET, you may
     want to use ‘date -d yesterday +%F’ instead, depending on your time
     zone and the time you run this commands sequence).  ‘make’ is
     included in this sequence so that ‘makelsr’ can run ‘lilypond’ and
     ‘convert-ly’ versions that match current source tree; you can
     select different binaries if desired or needed, to see options for
     this do

          scripts/auxiliar/makelsr.py --help

  4. Follow the instructions printed on the console to manually check
     for unsafe files.  These are:

          Unsafe files printed in lsr-unsafe.txt: CHECK MANUALLY!
            git add Documentation/snippets/*.ly
            xargs git diff HEAD < lsr-unsafe.txt

     First, it’s important to check for any added files and add them to
     the files git is tracking.  Run ‘git status’ and look carefully to
     see if files have been added.  If so, add them with ‘git add’.

     As the console says, ‘makelsr’ creates a list of possibly unsafe
     files in ‘lsr-unsafe.txt’ by running ‘lilypond’ against each
     snippet using the ‘-dsafe’ switch.  This list can be quite long.
     However, by using the command ‘xargs git diff HEAD <
     lsr-unsafe.txt’ git will take that list and check whether any of
     the snippets are different from the snippet already in master.  If
     any is different it must be checked manually VERY CAREFULLY.

               Note: Somebody could sneak a ‘#'(system "rm -rf /")’
               command into our source tree if you do not do this!  Take
               this step *VERY SERIOUSLY*.

     If there is any doubt about any of the files, you are strongly
     advised to run a review on Rietveld.

  5. If a Review is not needed, commit the changes and push to
     ‘staging’.

   Note that whenever there is a snippet in ‘Documentation/snippets/new’
and another from the LSR with the same file name, ‘makelsr.py’ will
overwrite the LSR version with the one from
‘Documentation/snippets/new’.


File: lilypond-contributor.info,  Node: Fixing snippets in LilyPond sources,  Next: Renaming a snippet,  Prev: LSR to Git,  Up: LSR work

7.5 Fixing snippets in LilyPond sources
=======================================

If some snippet from ‘Documentation/snippets’ causes the documentation
compilation to fail, the following steps should be followed to fix it
reliably.

  1. Look up the snippet filename ‘FOO.ly’ in the error output or log,
     then fix the file ‘Documentation/snippets/FOO.ly’ to make the
     documentation build successfully.

  2. Determine where it comes from by looking at its first two lines,
     e.g.  run

          head -2 Documentation/snippets/FOO.ly

  3. *If the snippet comes from the LSR*, also apply the fix to the
     snippet in the LSR and send a notification email to an LSR editor
     with CC to the development list – see *note Adding and editing
     snippets::.  The failure may sometimes not be caused by the snippet
     in LSR but by the syntax conversion made by ‘convert-ly’; in this
     case, try to fix ‘convert-ly’ or report the problem on the
     development list, then run ‘makelsr.py’ again, see *note LSR to
     Git::.  In some cases, when some features has been introduced or
     vastly changed so it requires (or takes significant advantage of)
     important changes in the snippet, it is simpler and recommended to
     write a new version of the snippet in ‘Documentation/snippets/new’,
     then run ‘makelsr.py’.

  4. *If the snippet comes from* ‘Documentation/snippets/new’, apply the
     fix in ‘Documentation/snippets/new/FOO.ly’, then run ‘makelsr.py’
     without argument from top of the source tree:

          scripts/auxiliar/makelsr.py

     Then, inspect ‘Documentation/snippets/FOO.ly’ to check that the fix
     has been well propagated.

     If the build failure was caused by a translation string, you may
     have to fix some ‘Documentation/LANG/texidocs/FOO.texidoc’ instead;
     in case the build failure comes only from translation strings, it
     is not needed to run ‘makelsr.py’.

  5. When you’ve done, commit your changes to Git and ensure they’re
     pushed to the correct branch.


File: lilypond-contributor.info,  Node: Renaming a snippet,  Next: Updating the LSR to a new version,  Prev: Fixing snippets in LilyPond sources,  Up: LSR work

7.6 Renaming a snippet
======================

Due to the potential duality of snippets (i.e.  they may exist both in
the LSR database, and in ‘Documentation/snippets/new/’), this process is
a bit more involved than we might like.

  1. Send an email LSR editor, requesting the renaming.

  2. The LSR editor does the renaming (or debates the topic with you),
     then warns the LSR-to-git person (wanted: better title) about the
     renaming.

  3. LSR-to-git person does his normal job, but then also renames any
     copies of the snippets in ‘Documentation/snippets/new/’, and any
     instances of the snippet name in the documentation.

     ‘git grep’ is highly recommended for this task.


File: lilypond-contributor.info,  Node: Updating the LSR to a new version,  Prev: Renaming a snippet,  Up: LSR work

7.7 Updating the LSR to a new version
=====================================

To update the LSR, perform the following steps:

  1. Start by emailing the LSR maintainer, Sebastiano, and liaising with
     him to ensure that updating the snippets is synchronised with
     updating the binary running the LSR.

  2. Download the latest snippet tarball from
     <http://lsr.di.unimi.it/download/> and extract it.  The relevant
     files can be found in the ‘all’ subdirectory.  Make sure your shell
     is using an English language version, for example ‘LANG=en_US’,
     then run ‘convert-ly’ on all the files.  Use the command-line
     option ‘--to=version’ to ensure the snippets are updated to the
     correct stable version.

  3. Make sure that you are using ‘convert-ly’ from the latest available
     release to gain best advantage from the latest
     ‘converting-rules-updates’.

     For example:

        • LSR-version: 2.12.2
        • intended LSR-update to 2.14.2
        • latest release 2.15.30

     Use convert-ly from 2.15.30 and the following terminal command for
     all files:

          convert-ly -e -t2.14.2 *.ly

  4. There might be no conversion rule for some old commands.  To make
     an initial check for possible problems you can run the script at
     the end of this list on a copy of the ‘all’ subdirectory.

  5. Copy relevant snippets (i.e.  snippets whose version is equal to or
     less than the new version of LilyPond running on the LSR) from
     ‘Documentation/snippets/new/’ into the set of files to be used to
     make the tarball.  Make sure you only choose snippets which are
     already present in the LSR, since the LSR software isn’t able to
     create new snippets this way.  If you don’t have a Git repository
     for LilyPond, you’ll find these snippets in the source-tarball on
     <http://lilypond.org/website/development.html>.  Don’t rename any
     files at this stage.

  6. Verify that all files compile with the new version of LilyPond,
     ideally without any warnings or errors.  To ease the process, you
     may use the shell script that appears after this list.

     Due to the workload involved, we _do not_ require that you verify
     that all snippets produce the expected output.  If you happen to
     notice any such snippets and can fix them, great; but as long as
     all snippets compile, don’t delay this step due to some weird
     output.  If a snippet is not compiling, update it manually.  If
     it’s not possible, delete it for now.

  7. Remove all headers and version-statements from the files.  Phil
     Holmes has a ‘python’ script that will do this and which needs
     testing.  Please ask him for a copy if you wish to do this.

  8. Create a tarball and send it back to Sebastiano.  Don’t forget to
     tell him about any deletions.

  9. Use the LSR web interface to change any descriptions you want to.
     Changing the titles of snippets is a bit fraught, since this also
     changes the filenames.  Only do this as a last resort.

  10. Use the LSR web interface to add the other snippets from
     ‘Documentation/snippets/new/’ which compile with the new LilyPond
     version of the LSR. Ensure that they are correctly tagged,
     including the tag ‘docs’ and that they are approved.

  11. When LSR has been updated, wait a day for the tarball to update,
     then download another snippet tarball.  Verify that the relevant
     snippets from ‘Documentation/snippets/new/’ are now included, then
     delete those snippets from ‘Documentation/snippets/new/’.

  12. Commit all the changes.  _Don’t forget to add new files to the git
     repository with ‘git add’_.  Run ‘make’, ‘make doc’ and ‘make test’
     to ensure the changes don’t break the build.  Any snippets that
     have had their file name changed or have been deleted could break
     the build, and these will need correcting step by step.

   Below is a shell script to run LilyPond on all ‘.ly’ files in a
directory.  If the script is run with a -s parameter, it runs silently
except for reporting failed files.  If run with -c it also runs
‘convert-ly’ prior to running LilyPond.

     #!/bin/bash

     while getopts sc opt; do
         case $opt in
             s)
                 silent=true
                 ;;
             c)
                 convert=true
                 ;;
         esac
     done
     param=$ if [ $silent ]; then
         param=${param:3}
     fi
     if [ $convert ]; then
         param=${param:3}
     fi
     filter=${param:-"*.ly"}

     for LILYFILE in $filter
     do
         STEM=$(basename "$LILYFILE" .ly)
         if [ $convert ]; then
             if [ $silent ]; then
                 $LILYPOND_BUILD_DIR/out/bin/convert-ly -e "$LILYFILE" >& "$STEM".con.txt
             else
                 $LILYPOND_BUILD_DIR/out/bin/convert-ly -e "$LILYFILE"
             fi
         fi
         if [ ! $silent ]; then
             echo "running $LILYFILE..."
         fi
         $LILYPOND_BUILD_DIR/out/bin/lilypond --format=png "$LILYFILE" >& "$STEM".txt
         RetVal=$?
         if [ $RetVal -gt 0 ]; then
            echo "$LILYFILE failed"
         fi
     done

   Output from LilyPond is in ‘filename.txt’ and convert-ly in
‘filename.con.txt’.

   Elu


File: lilypond-contributor.info,  Node: Issues,  Next: Regression tests,  Prev: LSR work,  Up: Top

8 Issues
********

This chapter deals with defects, feature requests, and miscellaneous
development tasks.

* Menu:

* Introduction to issues::
* The Bug Squad::
* Issue classification::
* Adding issues to the tracker::
* Patch handling::
* Summary of project status::


File: lilypond-contributor.info,  Node: Introduction to issues,  Next: The Bug Squad,  Up: Issues

8.1 Introduction to issues
==========================

          Note: All the tasks in this chapter require no programming
          skills and can be done by anyone with a web browser, an email
          client and the ability to run LilyPond.

   The term ‘issues’ refers not just to software bugs but also includes
feature requests, documentation additions and corrections as well as any
other general code ‘TODOs’ that need to be kept track of.


File: lilypond-contributor.info,  Node: The Bug Squad,  Next: Issue classification,  Prev: Introduction to issues,  Up: Issues

8.2 The Bug Squad
=================

* Menu:

* Bug Squad setup::
* Bug Squad checklists::

To help keep track and organize all issues are a group of tireless
volunteers collectively known as the _Bug Squad_.  Composed mainly of
non-programmers, the Bug Squad’s responsibilities include:

   • Monitoring the LilyPond Bugs mailing list looking for any issues
     reported by other users ensuring that they are accurate and contain
     enough information for the developers to work with, preferably with
     *note (lilypond-web)Tiny examples:: and if applicable, screenshots.

   • Adding new issues to the _issue tracker_ or updating existing
     issues with new information.

   • Verifying issues in the _issue tracker_ that have been marked as
     ‘fixed’; making sure either that the fix works or (in the case of
     Documentation for example) has at least been commited to the code
     base.

   The *note Bug Meister: Meisters. also helps check the current *note
Regression tests:: and highlights any significant changes (or problems)
since the previous LilyPond release.

   If you would like to be part of the Bug Squad, please contact the
*note Bug Meister: Meisters.

