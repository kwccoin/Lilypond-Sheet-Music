This is lilypond-internals.info, produced by makeinfo version 6.1 from
internals.texi.

INFO-DIR-SECTION LilyPond
START-INFO-DIR-ENTRY
* GNU LilyPond Internals Reference: (internals).          LilyPond Internals Reference.
END-INFO-DIR-ENTRY


File: lilypond-internals.info,  Node: KievanVoice,  Next: Lyrics,  Prev: KievanStaff,  Up: Contexts

2.1.15 KievanVoice
------------------

Same as ‘Voice’ context, except that it is accommodated for typesetting
a piece in Kievan style.

   This context also accepts commands for the following context(s):

   Voice.

   This context creates the following layout object(s):

   *note Arpeggio::, *note Beam::, *note BendAfter::, *note
BreathingSign::, *note ClusterSpanner::, *note ClusterSpannerBeacon::,
*note CombineTextScript::, *note Dots::, *note DoublePercentRepeat::,
*note DoublePercentRepeatCounter::, *note DoubleRepeatSlash::, *note
DynamicLineSpanner::, *note DynamicText::, *note DynamicTextSpanner::,
*note Fingering::, *note Flag::, *note Glissando::, *note Hairpin::,
*note InstrumentSwitch::, *note KievanLigature::, *note
LaissezVibrerTie::, *note LaissezVibrerTieColumn::, *note
MultiMeasureRest::, *note MultiMeasureRestNumber::, *note
MultiMeasureRestText::, *note NoteColumn::, *note NoteHead::, *note
NoteSpacing::, *note PercentRepeat::, *note PercentRepeatCounter::,
*note PhrasingSlur::, *note RepeatSlash::, *note RepeatTie::, *note
RepeatTieColumn::, *note Rest::, *note Script::, *note ScriptColumn::,
*note Slur::, *note Stem::, *note StemStub::, *note StemTremolo::, *note
StringNumber::, *note StrokeFinger::, *note TextScript::, *note
TextSpanner::, *note Tie::, *note TieColumn::, *note
TrillPitchAccidental::, *note TrillPitchGroup::, *note TrillPitchHead::,
*note TrillSpanner::, *note TupletBracket::, *note TupletNumber:: and
*note VoiceFollower::.

   This context sets the following properties:

   • Set grob-property ‘duration-log’ in *note NoteHead:: to
     ‘note-head::calc-kievan-duration-log’.
   • Set grob-property ‘glyph-name-alist’ in *note Accidental:: to:
     '((-1/2 . "accidentals.kievanM1")
       (1/2 . "accidentals.kievan1"))
   • Set grob-property ‘length’ in *note Stem:: to ‘0.0’.
   • Set grob-property ‘positions’ in *note Beam:: to
     ‘beam::get-kievan-positions’.
   • Set grob-property ‘quantized-positions’ in *note Beam:: to
     ‘beam::get-kievan-quantized-positions’.
   • Set grob-property ‘stencil’ in *note Flag:: to ‘#f’.
   • Set grob-property ‘stencil’ in *note Slur:: to ‘#f’.
   • Set grob-property ‘stencil’ in *note Stem:: to ‘#f’.
   • Set grob-property ‘style’ in *note Dots:: to ‘'kievan’.
   • Set grob-property ‘style’ in *note NoteHead:: to ‘'kievan’.
   • Set grob-property ‘style’ in *note Rest:: to ‘'mensural’.
   • Set grob-property ‘X-offset’ in *note Stem:: to
     ‘stem::kievan-offset-callback’.
   • Set translator property ‘autoBeaming’ to ‘#f’.

   This is a ‘Bottom’ context; no contexts will be created implicitly
from it.

   This context cannot contain other contexts.

   This context is built from the following engraver(s):

     ‘*note Arpeggio_engraver::’
          Generate an Arpeggio symbol.

          Music types accepted:

          *note arpeggio-event::

          This engraver creates the following layout object(s):

          *note Arpeggio::.

     ‘*note Auto_beam_engraver::’
          Generate beams based on measure characteristics and observed
          Stems.  Uses ‘baseMoment’, ‘beatStructure’, ‘beamExceptions’,
          ‘measureLength’, and ‘measurePosition’ to decide when to start
          and stop a beam.  Overriding beaming is done through *note
          Stem_engraver:: properties ‘stemLeftBeamCount’ and
          ‘stemRightBeamCount’.

          Music types accepted:

          *note beam-forbid-event::

          Properties (read)

               ‘autoBeaming’ (boolean)
                    If set to true then beams are generated
                    automatically.

               ‘baseMoment’ (moment)
                    Smallest unit of time that will stand on its own as
                    a subdivided section.

               ‘beamExceptions’ (list)
                    An alist of exceptions to autobeam rules that
                    normally end on beats.

               ‘beamHalfMeasure’ (boolean)
                    Whether to allow a beam to begin halfway through the
                    measure in triple time, which could look like 6/8.

               ‘beatStructure’ (list)
                    List of ‘baseMoment’s that are combined to make
                    beats.

               ‘subdivideBeams’ (boolean)
                    If set, multiple beams will be subdivided at
                    ‘baseMoment’ positions by only drawing one beam over
                    the beat.

          This engraver creates the following layout object(s):

          *note Beam::.

     ‘*note Beam_engraver::’
          Handle ‘Beam’ events by engraving beams.  If omitted, then
          notes are printed with flags instead of beams.

          Music types accepted:

          *note beam-event::

          Properties (read)

               ‘baseMoment’ (moment)
                    Smallest unit of time that will stand on its own as
                    a subdivided section.

               ‘beamMelismaBusy’ (boolean)
                    Signal if a beam is present.

               ‘beatStructure’ (list)
                    List of ‘baseMoment’s that are combined to make
                    beats.

               ‘subdivideBeams’ (boolean)
                    If set, multiple beams will be subdivided at
                    ‘baseMoment’ positions by only drawing one beam over
                    the beat.

          Properties (write)

               ‘forbidBreak’ (boolean)
                    If set to ‘#t’, prevent a line break at this point.

          This engraver creates the following layout object(s):

          *note Beam::.

     ‘*note Bend_engraver::’
          Create fall spanners.

          Music types accepted:

          *note bend-after-event::

          This engraver creates the following layout object(s):

          *note BendAfter::.

     ‘*note Breathing_sign_engraver::’
          Create a breathing sign.

          Music types accepted:

          *note breathing-event::

          This engraver creates the following layout object(s):

          *note BreathingSign::.

     ‘*note Chord_tremolo_engraver::’
          Generate beams for tremolo repeats.

          Music types accepted:

          *note tremolo-span-event::

          This engraver creates the following layout object(s):

          *note Beam::.

     ‘*note Cluster_spanner_engraver::’
          Engrave a cluster using ‘Spanner’ notation.

          Music types accepted:

          *note cluster-note-event::

          This engraver creates the following layout object(s):

          *note ClusterSpanner:: and *note ClusterSpannerBeacon::.

     ‘*note Dots_engraver::’
          Create *note Dots:: objects for *note
          rhythmic-head-interface::s.

          This engraver creates the following layout object(s):

          *note Dots::.

     ‘*note Double_percent_repeat_engraver::’
          Make double measure repeats.

          Music types accepted:

          *note double-percent-event::

          Properties (read)

               ‘countPercentRepeats’ (boolean)
                    If set, produce counters for percent repeats.

               ‘measureLength’ (moment)
                    Length of one measure in the current time signature.

               ‘repeatCountVisibility’ (procedure)
                    A procedure taking as arguments an integer and
                    context, returning whether the corresponding percent
                    repeat number should be printed when
                    ‘countPercentRepeats’ is set.

          Properties (write)

               ‘forbidBreak’ (boolean)
                    If set to ‘#t’, prevent a line break at this point.

          This engraver creates the following layout object(s):

          *note DoublePercentRepeat:: and *note
          DoublePercentRepeatCounter::.

     ‘*note Dynamic_align_engraver::’
          Align hairpins and dynamic texts on a horizontal line.

          Properties (read)

               ‘currentMusicalColumn’ (graphical (layout) object)
                    Grob that is X-parent to all non-breakable items
                    (note heads, lyrics, etc.).

          This engraver creates the following layout object(s):

          *note DynamicLineSpanner::.

     ‘*note Dynamic_engraver::’
          Create hairpins, dynamic texts and dynamic text spanners.

          Music types accepted:

          *note absolute-dynamic-event::, *note break-span-event:: and
          *note span-dynamic-event::

          Properties (read)

               ‘crescendoSpanner’ (symbol)
                    The type of spanner to be used for crescendi.
                    Available values are ‘hairpin’ and ‘text’.  If
                    unset, a hairpin crescendo is used.

               ‘crescendoText’ (markup)
                    The text to print at start of non-hairpin crescendo,
                    i.e., ‘cresc.’.

               ‘currentMusicalColumn’ (graphical (layout) object)
                    Grob that is X-parent to all non-breakable items
                    (note heads, lyrics, etc.).

               ‘decrescendoSpanner’ (symbol)
                    The type of spanner to be used for decrescendi.
                    Available values are ‘hairpin’ and ‘text’.  If
                    unset, a hairpin decrescendo is used.

               ‘decrescendoText’ (markup)
                    The text to print at start of non-hairpin
                    decrescendo, i.e., ‘dim.’.

          This engraver creates the following layout object(s):

          *note DynamicText::, *note DynamicTextSpanner:: and *note
          Hairpin::.

     ‘*note Fingering_engraver::’
          Create fingering scripts.

          Music types accepted:

          *note fingering-event::

          This engraver creates the following layout object(s):

          *note Fingering::.

     ‘*note Font_size_engraver::’
          Put ‘fontSize’ into ‘font-size’ grob property.

          Properties (read)

               ‘fontSize’ (number)
                    The relative size of all grobs in a context.

     ‘*note Forbid_line_break_engraver::’
          Forbid line breaks when note heads are still playing at some
          point.

          Properties (read)

               ‘busyGrobs’ (list)
                    A queue of ‘(END-MOMENT . GROB)’ cons cells.  This
                    is for internal (C++) use only.  This property
                    contains the grobs which are still busy (e.g.  note
                    heads, spanners, etc.).

          Properties (write)

               ‘forbidBreak’ (boolean)
                    If set to ‘#t’, prevent a line break at this point.

     ‘*note Glissando_engraver::’
          Engrave glissandi.

          Music types accepted:

          *note glissando-event::

          Properties (read)

               ‘glissandoMap’ (list)
                    A map in the form of ’((source1 .  target1) (source2
                    .  target2) (sourcen .  targetn)) showing the
                    glissandi to be drawn for note columns.  The value
                    ’() will default to ’((0 .  0) (1 .  1) (n .  n)),
                    where n is the minimal number of note-heads in the
                    two note columns between which the glissandi occur.

          This engraver creates the following layout object(s):

          *note Glissando::.

     ‘*note Grace_auto_beam_engraver::’
          Generates one autobeam group across an entire grace phrase.
          As usual, any manual beaming or ‘\noBeam’ will block
          autobeaming, just like setting the context property
          ‘autoBeaming’ to ‘##f’.

          Music types accepted:

          *note beam-forbid-event::

          Properties (read)

               ‘autoBeaming’ (boolean)
                    If set to true then beams are generated
                    automatically.

          This engraver creates the following layout object(s):

          *note Beam::.

     ‘*note Grace_beam_engraver::’
          Handle ‘Beam’ events by engraving beams.  If omitted, then
          notes are printed with flags instead of beams.  Only engraves
          beams when we are at grace points in time.

          Music types accepted:

          *note beam-event::

          Properties (read)

               ‘baseMoment’ (moment)
                    Smallest unit of time that will stand on its own as
                    a subdivided section.

               ‘beamMelismaBusy’ (boolean)
                    Signal if a beam is present.

               ‘beatStructure’ (list)
                    List of ‘baseMoment’s that are combined to make
                    beats.

               ‘subdivideBeams’ (boolean)
                    If set, multiple beams will be subdivided at
                    ‘baseMoment’ positions by only drawing one beam over
                    the beat.

          This engraver creates the following layout object(s):

          *note Beam::.

     ‘*note Grace_engraver::’
          Set font size and other properties for grace notes.

          Properties (read)

               ‘graceSettings’ (list)
                    Overrides for grace notes.  This property should be
                    manipulated through the ‘add-grace-property’
                    function.

     ‘*note Grob_pq_engraver::’
          Administrate when certain grobs (e.g., note heads) stop
          playing.

          Properties (read)

               ‘busyGrobs’ (list)
                    A queue of ‘(END-MOMENT . GROB)’ cons cells.  This
                    is for internal (C++) use only.  This property
                    contains the grobs which are still busy (e.g.  note
                    heads, spanners, etc.).

          Properties (write)

               ‘busyGrobs’ (list)
                    A queue of ‘(END-MOMENT . GROB)’ cons cells.  This
                    is for internal (C++) use only.  This property
                    contains the grobs which are still busy (e.g.  note
                    heads, spanners, etc.).

     ‘*note Instrument_switch_engraver::’
          Create a cue text for taking instrument.

          Properties (read)

               ‘instrumentCueName’ (markup)
                    The name to print if another instrument is to be
                    taken.

          This engraver creates the following layout object(s):

          *note InstrumentSwitch::.

     ‘*note Kievan_ligature_engraver::’
          Handle ‘Kievan_ligature_events’ by glueing Kievan heads
          together.

          Music types accepted:

          *note ligature-event::

          This engraver creates the following layout object(s):

          *note KievanLigature::.

     ‘*note Laissez_vibrer_engraver::’
          Create laissez vibrer items.

          Music types accepted:

          *note laissez-vibrer-event::

          This engraver creates the following layout object(s):

          *note LaissezVibrerTie:: and *note LaissezVibrerTieColumn::.

     ‘*note Multi_measure_rest_engraver::’
          Engrave multi-measure rests that are produced with ‘R’.  It
          reads ‘measurePosition’ and ‘internalBarNumber’ to determine
          what number to print over the *note MultiMeasureRest::.

          Music types accepted:

          *note multi-measure-rest-event:: and *note
          multi-measure-text-event::

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘internalBarNumber’ (integer)
                    Contains the current barnumber.  This property is
                    used for internal timekeeping, among others by the
                    ‘Accidental_engraver’.

               ‘measurePosition’ (moment)
                    How much of the current measure have we had.  This
                    can be set manually to create incomplete measures.

               ‘restNumberThreshold’ (number)
                    If a multimeasure rest has more measures than this,
                    a number is printed.

               ‘whichBar’ (string)
                    This property is read to determine what type of bar
                    line to create.

                    Example:

                         \set Staff.whichBar = ".|:"

                    This will create a start-repeat bar in this staff
                    only.  Valid values are described in
                    ‘scm/bar-line.scm’.

          This engraver creates the following layout object(s):

          *note MultiMeasureRest::, *note MultiMeasureRestNumber:: and
          *note MultiMeasureRestText::.

     ‘*note New_fingering_engraver::’
          Create fingering scripts for notes in a new chord.  This
          engraver is ill-named, since it also takes care of
          articulations and harmonic note heads.

          Properties (read)

               ‘fingeringOrientations’ (list)
                    A list of symbols, containing ‘left’, ‘right’, ‘up’
                    and/or ‘down’.  This list determines where
                    fingerings are put relative to the chord being
                    fingered.

               ‘harmonicDots’ (boolean)
                    If set, harmonic notes in dotted chords get dots.

               ‘stringNumberOrientations’ (list)
                    See ‘fingeringOrientations’.

               ‘strokeFingerOrientations’ (list)
                    See ‘fingeringOrientations’.

          This engraver creates the following layout object(s):

          *note Fingering::, *note Script::, *note StringNumber:: and
          *note StrokeFinger::.

     ‘*note Note_head_line_engraver::’
          Engrave a line between two note heads in a staff switch if
          ‘followVoice’ is set.

          Properties (read)

               ‘followVoice’ (boolean)
                    If set, note heads are tracked across staff switches
                    by a thin line.

          This engraver creates the following layout object(s):

          *note VoiceFollower::.

     ‘*note Note_heads_engraver::’
          Generate note heads.

          Music types accepted:

          *note note-event::

          Properties (read)

               ‘middleCPosition’ (number)
                    The place of the middle C, measured in half
                    staff-spaces.  Usually determined by looking at
                    ‘middleCClefPosition’ and ‘middleCOffset’.

               ‘staffLineLayoutFunction’ (procedure)
                    Layout of staff lines, ‘traditional’, or ‘semitone’.

          This engraver creates the following layout object(s):

          *note NoteHead::.

     ‘*note Note_spacing_engraver::’
          Generate ‘NoteSpacing’, an object linking horizontal lines for
          use in spacing.

          This engraver creates the following layout object(s):

          *note NoteSpacing::.

     ‘*note Part_combine_engraver::’
          Part combine engraver for orchestral scores: Print markings
          ‘a2’, ‘Solo’, ‘Solo II’, and ‘unisono’.

          Music types accepted:

          *note note-event:: and *note part-combine-event::

          Properties (read)

               ‘aDueText’ (markup)
                    Text to print at a unisono passage.

               ‘partCombineTextsOnNote’ (boolean)
                    Print part-combine texts only on the next note
                    rather than immediately on rests or skips.

               ‘printPartCombineTexts’ (boolean)
                    Set ‘Solo’ and ‘A due’ texts in the part combiner?

               ‘soloIIText’ (markup)
                    The text for the start of a solo for voice ‘two’
                    when part-combining.

               ‘soloText’ (markup)
                    The text for the start of a solo when
                    part-combining.

          This engraver creates the following layout object(s):

          *note CombineTextScript::.

     ‘*note Percent_repeat_engraver::’
          Make whole measure repeats.

          Music types accepted:

          *note percent-event::

          Properties (read)

               ‘countPercentRepeats’ (boolean)
                    If set, produce counters for percent repeats.

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘repeatCountVisibility’ (procedure)
                    A procedure taking as arguments an integer and
                    context, returning whether the corresponding percent
                    repeat number should be printed when
                    ‘countPercentRepeats’ is set.

          This engraver creates the following layout object(s):

          *note PercentRepeat:: and *note PercentRepeatCounter::.

     ‘*note Phrasing_slur_engraver::’
          Print phrasing slurs.  Similar to *note Slur_engraver::.

          Music types accepted:

          *note note-event:: and *note phrasing-slur-event::

          This engraver creates the following layout object(s):

          *note PhrasingSlur::.

     ‘*note Pitched_trill_engraver::’
          Print the bracketed note head after a note head with trill.

          This engraver creates the following layout object(s):

          *note TrillPitchAccidental::, *note TrillPitchGroup:: and
          *note TrillPitchHead::.

     ‘*note Repeat_tie_engraver::’
          Create repeat ties.

          Music types accepted:

          *note repeat-tie-event::

          This engraver creates the following layout object(s):

          *note RepeatTie:: and *note RepeatTieColumn::.

     ‘*note Rest_engraver::’
          Engrave rests.

          Music types accepted:

          *note rest-event::

          Properties (read)

               ‘middleCPosition’ (number)
                    The place of the middle C, measured in half
                    staff-spaces.  Usually determined by looking at
                    ‘middleCClefPosition’ and ‘middleCOffset’.

          This engraver creates the following layout object(s):

          *note Rest::.

     ‘*note Rhythmic_column_engraver::’
          Generate ‘NoteColumn’, an object that groups stems, note
          heads, and rests.

          This engraver creates the following layout object(s):

          *note NoteColumn::.

     ‘*note Script_column_engraver::’
          Find potentially colliding scripts and put them into a
          ‘ScriptColumn’ object; that will fix the collisions.

          This engraver creates the following layout object(s):

          *note ScriptColumn::.

     ‘*note Script_engraver::’
          Handle note scripted articulations.

          Music types accepted:

          *note articulation-event::

          Properties (read)

               ‘scriptDefinitions’ (list)
                    The description of scripts.  This is used by the
                    ‘Script_engraver’ for typesetting note-superscripts
                    and subscripts.  See ‘scm/script.scm’ for more
                    information.

          This engraver creates the following layout object(s):

          *note Script::.

     ‘*note Slash_repeat_engraver::’
          Make beat repeats.

          Music types accepted:

          *note repeat-slash-event::

          This engraver creates the following layout object(s):

          *note DoubleRepeatSlash:: and *note RepeatSlash::.

     ‘*note Slur_engraver::’
          Build slur grobs from slur events.

          Music types accepted:

          *note note-event:: and *note slur-event::

          Properties (read)

               ‘doubleSlurs’ (boolean)
                    If set, two slurs are created for every slurred
                    note, one above and one below the chord.

               ‘slurMelismaBusy’ (boolean)
                    Signal if a slur is present.

          This engraver creates the following layout object(s):

          *note Slur::.

     ‘*note Spanner_break_forbid_engraver::’
          Forbid breaks in certain spanners.

     ‘*note Stem_engraver::’
          Create stems, flags and single-stem tremolos.  It also works
          together with the beam engraver for overriding beaming.

          Music types accepted:

          *note tremolo-event:: and *note tuplet-span-event::

          Properties (read)

               ‘stemLeftBeamCount’ (integer)
                    Specify the number of beams to draw on the left side
                    of the next note.  Overrides automatic beaming.  The
                    value is only used once, and then it is erased.

               ‘stemRightBeamCount’ (integer)
                    See ‘stemLeftBeamCount’.

               ‘whichBar’ (string)
                    This property is read to determine what type of bar
                    line to create.

                    Example:

                         \set Staff.whichBar = ".|:"

                    This will create a start-repeat bar in this staff
                    only.  Valid values are described in
                    ‘scm/bar-line.scm’.

          This engraver creates the following layout object(s):

          *note Flag::, *note Stem::, *note StemStub:: and *note
          StemTremolo::.

     ‘*note Text_engraver::’
          Create text scripts.

          Music types accepted:

          *note text-script-event::

          This engraver creates the following layout object(s):

          *note TextScript::.

     ‘*note Text_spanner_engraver::’
          Create text spanner from an event.

          Music types accepted:

          *note text-span-event::

          Properties (read)

               ‘currentMusicalColumn’ (graphical (layout) object)
                    Grob that is X-parent to all non-breakable items
                    (note heads, lyrics, etc.).

          This engraver creates the following layout object(s):

          *note TextSpanner::.

     ‘*note Tie_engraver::’
          Generate ties between note heads of equal pitch.

          Music types accepted:

          *note tie-event::

          Properties (read)

               ‘skipTypesetting’ (boolean)
                    If true, no typesetting is done, speeding up the
                    interpretation phase.  Useful for debugging large
                    scores.

               ‘tieWaitForNote’ (boolean)
                    If true, tied notes do not have to follow each other
                    directly.  This can be used for writing out
                    arpeggios.

          Properties (write)

               ‘tieMelismaBusy’ (boolean)
                    Signal whether a tie is present.

          This engraver creates the following layout object(s):

          *note Tie:: and *note TieColumn::.

     ‘*note Trill_spanner_engraver::’
          Create trill spanner from an event.

          Music types accepted:

          *note trill-span-event::

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘currentMusicalColumn’ (graphical (layout) object)
                    Grob that is X-parent to all non-breakable items
                    (note heads, lyrics, etc.).

          This engraver creates the following layout object(s):

          *note TrillSpanner::.

     ‘*note Tuplet_engraver::’
          Catch tuplet events and generate appropriate bracket.

          Music types accepted:

          *note tuplet-span-event::

          Properties (read)

               ‘tupletFullLength’ (boolean)
                    If set, the tuplet is printed up to the start of the
                    next note.

               ‘tupletFullLengthNote’ (boolean)
                    If set, end at the next note, otherwise end on the
                    matter (time signatures, etc.)  before the note.

          This engraver creates the following layout object(s):

          *note TupletBracket:: and *note TupletNumber::.


File: lilypond-internals.info,  Node: Lyrics,  Next: MensuralStaff,  Prev: KievanVoice,  Up: Contexts

2.1.16 Lyrics
-------------

Corresponds to a voice with lyrics.  Handles the printing of a single
line of lyrics.

   This context creates the following layout object(s):

   *note InstrumentName::, *note LyricExtender::, *note LyricHyphen::,
*note LyricSpace::, *note LyricText::, *note StanzaNumber:: and *note
VerticalAxisGroup::.

   This context sets the following properties:

   • Set grob-property ‘bar-extent’ in *note BarLine:: to:
     '(-0.05 . 0.05)
   • Set grob-property ‘font-size’ in *note InstrumentName:: to ‘1.0’.
   • Set grob-property ‘nonstaff-nonstaff-spacing’ in *note
     VerticalAxisGroup:: to:
     '((basic-distance . 0)
       (minimum-distance . 2.8)
       (padding . 0.2)
       (stretchability . 0))
   • Set grob-property ‘nonstaff-relatedstaff-spacing’ in *note
     VerticalAxisGroup:: to:
     '((basic-distance . 5.5)
       (padding . 0.5)
       (stretchability . 1))
   • Set grob-property ‘nonstaff-unrelatedstaff-spacing.padding’ in
     *note VerticalAxisGroup:: to ‘1.5’.
   • Set grob-property ‘remove-empty’ in *note VerticalAxisGroup:: to
     ‘#t’.
   • Set grob-property ‘remove-first’ in *note VerticalAxisGroup:: to
     ‘#t’.
   • Set grob-property ‘self-alignment-Y’ in *note InstrumentName:: to
     ‘#f’.
   • Set grob-property ‘staff-affinity’ in *note VerticalAxisGroup:: to
     ‘1’.
   • Set translator property ‘instrumentName’ to ‘'()’.
   • Set translator property ‘searchForVoice’ to ‘#f’.
   • Set translator property ‘shortInstrumentName’ to ‘'()’.

   This is a ‘Bottom’ context; no contexts will be created implicitly
from it.

   This context cannot contain other contexts.

   This context is built from the following engraver(s):

     ‘*note Axis_group_engraver::’
          Group all objects created in this context in a
          ‘VerticalAxisGroup’ spanner.

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘hasAxisGroup’ (boolean)
                    True if the current context is contained in an axis
                    group.

               ‘keepAliveInterfaces’ (list)
                    A list of symbols, signifying grob interfaces that
                    are worth keeping a staff with ‘remove-empty’ set
                    around for.

          Properties (write)

               ‘hasAxisGroup’ (boolean)
                    True if the current context is contained in an axis
                    group.

          This engraver creates the following layout object(s):

          *note VerticalAxisGroup::.

     ‘*note Extender_engraver::’
          Create lyric extenders.

          Music types accepted:

          *note completize-extender-event:: and *note extender-event::

          Properties (read)

               ‘extendersOverRests’ (boolean)
                    Whether to continue extenders as they cross a rest.

          This engraver creates the following layout object(s):

          *note LyricExtender::.

     ‘*note Font_size_engraver::’
          Put ‘fontSize’ into ‘font-size’ grob property.

          Properties (read)

               ‘fontSize’ (number)
                    The relative size of all grobs in a context.

     ‘*note Hyphen_engraver::’
          Create lyric hyphens and distance constraints between words.

          Music types accepted:

          *note hyphen-event::

          This engraver creates the following layout object(s):

          *note LyricHyphen:: and *note LyricSpace::.

     ‘*note Instrument_name_engraver::’
          Create a system start text for instrument or vocal names.

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘instrumentName’ (markup)
                    The name to print left of a staff.  The
                    ‘instrumentName’ property labels the staff in the
                    first system, and the ‘shortInstrumentName’ property
                    labels following lines.

               ‘shortInstrumentName’ (markup)
                    See ‘instrumentName’.

               ‘shortVocalName’ (markup)
                    Name of a vocal line, short version.

               ‘vocalName’ (markup)
                    Name of a vocal line.

          This engraver creates the following layout object(s):

          *note InstrumentName::.

     ‘*note Lyric_engraver::’
          Engrave text for lyrics.

          Music types accepted:

          *note lyric-event::

          Properties (read)

               ‘ignoreMelismata’ (boolean)
                    Ignore melismata for this *note
                    (lilypond-internals)Lyrics:: line.

               ‘lyricMelismaAlignment’ (number)
                    Alignment to use for a melisma syllable.

               ‘searchForVoice’ (boolean)
                    Signal whether a search should be made of all
                    contexts in the context hierarchy for a voice to
                    provide rhythms for the lyrics.

          This engraver creates the following layout object(s):

          *note LyricText::.

     ‘*note Pure_from_neighbor_engraver::’
          Coordinates items that get their pure heights from their
          neighbors.

     ‘*note Stanza_number_engraver::’
          Engrave stanza numbers.

          Properties (read)

               ‘stanza’ (markup)
                    Stanza ‘number’ to print before the start of a
                    verse.  Use in ‘Lyrics’ context.

          This engraver creates the following layout object(s):

          *note StanzaNumber::.


File: lilypond-internals.info,  Node: MensuralStaff,  Next: MensuralVoice,  Prev: Lyrics,  Up: Contexts

2.1.17 MensuralStaff
--------------------

Same as ‘Staff’ context, except that it is accommodated for typesetting
a piece in mensural style.

   This context also accepts commands for the following context(s):

   Staff.

   This context creates the following layout object(s):

   *note Accidental::, *note AccidentalCautionary::, *note
AccidentalPlacement::, *note AccidentalSuggestion::, *note BarLine::,
*note BassFigure::, *note BassFigureAlignment::, *note
BassFigureAlignmentPositioning::, *note BassFigureBracket::, *note
BassFigureContinuation::, *note BassFigureLine::, *note Clef::, *note
ClefModifier::, *note CueClef::, *note CueEndClef::, *note Custos::,
*note DotColumn::, *note FingeringColumn::, *note InstrumentName::,
*note KeyCancellation::, *note KeySignature::, *note
LedgerLineSpanner::, *note NoteCollision::, *note OttavaBracket::, *note
PianoPedalBracket::, *note RestCollision::, *note ScriptRow::, *note
SostenutoPedal::, *note SostenutoPedalLineSpanner::, *note
StaffSpacing::, *note StaffSymbol::, *note SustainPedal::, *note
SustainPedalLineSpanner::, *note TimeSignature::, *note UnaCordaPedal::,
*note UnaCordaPedalLineSpanner:: and *note VerticalAxisGroup::.

   This context sets the following properties:

   • Set grob-property ‘glyph-name-alist’ in *note
     AccidentalSuggestion:: to:
     '((-1/2 . "accidentals.mensuralM1")
       (0 . "accidentals.vaticana0")
       (1/2 . "accidentals.mensural1"))
   • Set grob-property ‘glyph-name-alist’ in *note Accidental:: to:
     '((-1/2 . "accidentals.mensuralM1")
       (0 . "accidentals.vaticana0")
       (1/2 . "accidentals.mensural1"))
   • Set grob-property ‘glyph-name-alist’ in *note KeySignature:: to:
     '((-1/2 . "accidentals.mensuralM1")
       (0 . "accidentals.vaticana0")
       (1/2 . "accidentals.mensural1"))
   • Set grob-property ‘neutral-direction’ in *note Custos:: to ‘-1’.
   • Set grob-property ‘neutral-position’ in *note Custos:: to ‘3’.
   • Set grob-property ‘style’ in *note Custos:: to ‘'mensural’.
   • Set grob-property ‘style’ in *note TimeSignature:: to ‘'mensural’.
   • Set grob-property ‘thickness’ in *note StaffSymbol:: to ‘0.6’.
   • Set grob-property ‘transparent’ in *note BarLine:: to ‘#t’.
   • Set translator property ‘autoAccidentals’ to:
     '(Staff #<procedure #f (context pitch barnum measurepos)>)
   • Set translator property ‘autoCautionaries’ to ‘'()’.
   • Set translator property ‘clefGlyph’ to ‘"clefs.mensural.g"’.
   • Set translator property ‘clefPosition’ to ‘-2’.
   • Set translator property ‘clefTransposition’ to ‘0’.
   • Set translator property ‘createSpacing’ to ‘#t’.
   • Set translator property ‘extraNatural’ to ‘#f’.
   • Set translator property ‘ignoreFiguredBassRest’ to ‘#f’.
   • Set translator property ‘instrumentName’ to ‘'()’.
   • Set translator property ‘localAlterations’ to ‘'()’.
   • Set translator property ‘middleCClefPosition’ to ‘-6’.
   • Set translator property ‘middleCPosition’ to ‘-6’.
   • Set translator property ‘printKeyCancellation’ to ‘#f’.
   • Set translator property ‘shortInstrumentName’ to ‘'()’.

   This is not a ‘Bottom’ context; search for such a one will commence
after creating an implicit context of type *note MensuralVoice::.

   Context MensuralStaff can contain *note CueVoice::, *note
MensuralVoice:: and *note NullVoice::.

   This context is built from the following engraver(s):

     ‘*note Accidental_engraver::’
          Make accidentals.  Catch note heads, ties and notices
          key-change events.  This engraver usually lives at Staff
          level, but reads the settings for Accidental at ‘Voice’ level,
          so you can ‘\override’ them at ‘Voice’.

          Properties (read)

               ‘accidentalGrouping’ (symbol)
                    If set to ‘'voice’, accidentals on the same note in
                    different octaves may be horizontally staggered if
                    in different voices.

               ‘autoAccidentals’ (list)
                    List of different ways to typeset an accidental.

                    For determining when to print an accidental, several
                    different rules are tried.  The rule that gives the
                    highest number of accidentals is used.

                    Each entry in the list is either a symbol or a
                    procedure.

                    SYMBOL
                         The symbol is the name of the context in which
                         the following rules are to be applied.  For
                         example, if CONTEXT is *note
                         (lilypond-internals)Score:: then all staves
                         share accidentals, and if CONTEXT is *note
                         (lilypond-internals)Staff:: then all voices in
                         the same staff share accidentals, but staves do
                         not.

                    PROCEDURE
                         The procedure represents an accidental rule to
                         be applied to the previously specified context.

                         The procedure takes the following arguments:

                         ‘context’
                              The current context to which the rule
                              should be applied.

                         ‘pitch’
                              The pitch of the note to be evaluated.

                         ‘barnum’
                              The current bar number.

                         ‘measurepos’
                              The current measure position.

                         The procedure returns a pair of booleans.  The
                         first states whether an extra natural should be
                         added.  The second states whether an accidental
                         should be printed.  ‘(#t . #f)’ does not make
                         sense.

               ‘autoCautionaries’ (list)
                    List similar to ‘autoAccidentals’, but it controls
                    cautionary accidentals rather than normal ones.
                    Both lists are tried, and the one giving the most
                    accidentals wins.  In case of draw, a normal
                    accidental is typeset.

               ‘extraNatural’ (boolean)
                    Whether to typeset an extra natural sign before
                    accidentals that reduce the effect of a previous
                    alteration.

               ‘harmonicAccidentals’ (boolean)
                    If set, harmonic notes in chords get accidentals.

               ‘internalBarNumber’ (integer)
                    Contains the current barnumber.  This property is
                    used for internal timekeeping, among others by the
                    ‘Accidental_engraver’.

               ‘keyAlterations’ (list)
                    The current key signature.  This is an alist
                    containing ‘(STEP . ALTER)’ or ‘((OCTAVE . STEP) .
                    ALTER)’, where STEP is a number in the range 0 to 6
                    and ALTER a fraction, denoting alteration.  For
                    alterations, use symbols, e.g.  ‘keyAlterations =
                    #`((6 . ,FLAT))’.

               ‘localAlterations’ (list)
                    The key signature at this point in the measure.  The
                    format is the same as for ‘keyAlterations’, but can
                    also contain ‘((OCTAVE . NAME) . (ALTER BARNUMBER .
                    MEASUREPOSITION))’ pairs.

          Properties (write)

               ‘localAlterations’ (list)
                    The key signature at this point in the measure.  The
                    format is the same as for ‘keyAlterations’, but can
                    also contain ‘((OCTAVE . NAME) . (ALTER BARNUMBER .
                    MEASUREPOSITION))’ pairs.

          This engraver creates the following layout object(s):

          *note Accidental::, *note AccidentalCautionary::, *note
          AccidentalPlacement:: and *note AccidentalSuggestion::.

     ‘*note Axis_group_engraver::’
          Group all objects created in this context in a
          ‘VerticalAxisGroup’ spanner.

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘hasAxisGroup’ (boolean)
                    True if the current context is contained in an axis
                    group.

               ‘keepAliveInterfaces’ (list)
                    A list of symbols, signifying grob interfaces that
                    are worth keeping a staff with ‘remove-empty’ set
                    around for.

          Properties (write)

               ‘hasAxisGroup’ (boolean)
                    True if the current context is contained in an axis
                    group.

          This engraver creates the following layout object(s):

          *note VerticalAxisGroup::.

     ‘*note Bar_engraver::’
          Create barlines.  This engraver is controlled through the
          ‘whichBar’ property.  If it has no bar line to create, it will
          forbid a linebreak at this point.  This engraver is required
          to trigger the creation of clefs at the start of systems.

          Properties (read)

               ‘whichBar’ (string)
                    This property is read to determine what type of bar
                    line to create.

                    Example:

                         \set Staff.whichBar = ".|:"

                    This will create a start-repeat bar in this staff
                    only.  Valid values are described in
                    ‘scm/bar-line.scm’.

          Properties (write)

               ‘forbidBreak’ (boolean)
                    If set to ‘#t’, prevent a line break at this point.

          This engraver creates the following layout object(s):

          *note BarLine::.

     ‘*note Clef_engraver::’
          Determine and set reference point for pitches.

          Properties (read)

               ‘clefGlyph’ (string)
                    Name of the symbol within the music font.

               ‘clefPosition’ (number)
                    Where should the center of the clef symbol go,
                    measured in half staff spaces from the center of the
                    staff.

               ‘clefTransposition’ (integer)
                    Add this much extra transposition.  Values of 7 and
                    -7 are common.

               ‘clefTranspositionStyle’ (symbol)
                    Determines the way the ClefModifier grob is
                    displayed.  Possible values are ‘default’,
                    ‘parenthesized’ and ‘bracketed’.

               ‘explicitClefVisibility’ (vector)
                    ‘break-visibility’ function for clef changes.

               ‘forceClef’ (boolean)
                    Show clef symbol, even if it has not changed.  Only
                    active for the first clef after the property is set,
                    not for the full staff.

          This engraver creates the following layout object(s):

          *note Clef:: and *note ClefModifier::.

     ‘*note Collision_engraver::’
          Collect ‘NoteColumns’, and as soon as there are two or more,
          put them in a ‘NoteCollision’ object.

          This engraver creates the following layout object(s):

          *note NoteCollision::.

     ‘*note Cue_clef_engraver::’
          Determine and set reference point for pitches in cued voices.

          Properties (read)

               ‘clefTransposition’ (integer)
                    Add this much extra transposition.  Values of 7 and
                    -7 are common.

               ‘cueClefGlyph’ (string)
                    Name of the symbol within the music font.

               ‘cueClefPosition’ (number)
                    Where should the center of the clef symbol go,
                    measured in half staff spaces from the center of the
                    staff.

               ‘cueClefTransposition’ (integer)
                    Add this much extra transposition.  Values of 7 and
                    -7 are common.

               ‘cueClefTranspositionStyle’ (symbol)
                    Determines the way the ClefModifier grob is
                    displayed.  Possible values are ‘default’,
                    ‘parenthesized’ and ‘bracketed’.

               ‘explicitCueClefVisibility’ (vector)
                    ‘break-visibility’ function for cue clef changes.

               ‘middleCCuePosition’ (number)
                    The position of the middle C, as determined only by
                    the clef of the cue notes.  This can be calculated
                    by looking at ‘cueClefPosition’ and ‘cueClefGlyph’.

          This engraver creates the following layout object(s):

          *note ClefModifier::, *note CueClef:: and *note CueEndClef::.

     ‘*note Custos_engraver::’
          Engrave custodes.

          This engraver creates the following layout object(s):

          *note Custos::.

     ‘*note Dot_column_engraver::’
          Engrave dots on dotted notes shifted to the right of the note.
          If omitted, then dots appear on top of the notes.

          This engraver creates the following layout object(s):

          *note DotColumn::.

     ‘*note Figured_bass_engraver::’
          Make figured bass numbers.

          Music types accepted:

          *note bass-figure-event:: and *note rest-event::

          Properties (read)

               ‘figuredBassAlterationDirection’ (direction)
                    Where to put alterations relative to the main
                    figure.

               ‘figuredBassCenterContinuations’ (boolean)
                    Whether to vertically center pairs of extender
                    lines.  This does not work with three or more lines.

               ‘figuredBassFormatter’ (procedure)
                    A routine generating a markup for a bass figure.

               ‘ignoreFiguredBassRest’ (boolean)
                    Don’t swallow rest events.

               ‘implicitBassFigures’ (list)
                    A list of bass figures that are not printed as
                    numbers, but only as extender lines.

               ‘useBassFigureExtenders’ (boolean)
                    Whether to use extender lines for repeated bass
                    figures.

          This engraver creates the following layout object(s):

          *note BassFigure::, *note BassFigureAlignment::, *note
          BassFigureBracket::, *note BassFigureContinuation:: and *note
          BassFigureLine::.

     ‘*note Figured_bass_position_engraver::’
          Position figured bass alignments over notes.

          This engraver creates the following layout object(s):

          *note BassFigureAlignmentPositioning::.

     ‘*note Fingering_column_engraver::’
          Find potentially colliding scripts and put them into a
          ‘FingeringColumn’ object; that will fix the collisions.

          This engraver creates the following layout object(s):

          *note FingeringColumn::.

     ‘*note Font_size_engraver::’
          Put ‘fontSize’ into ‘font-size’ grob property.

          Properties (read)

               ‘fontSize’ (number)
                    The relative size of all grobs in a context.

     ‘*note Grob_pq_engraver::’
          Administrate when certain grobs (e.g., note heads) stop
          playing.

          Properties (read)

               ‘busyGrobs’ (list)
                    A queue of ‘(END-MOMENT . GROB)’ cons cells.  This
                    is for internal (C++) use only.  This property
                    contains the grobs which are still busy (e.g.  note
                    heads, spanners, etc.).

          Properties (write)

               ‘busyGrobs’ (list)
                    A queue of ‘(END-MOMENT . GROB)’ cons cells.  This
                    is for internal (C++) use only.  This property
                    contains the grobs which are still busy (e.g.  note
                    heads, spanners, etc.).

     ‘*note Instrument_name_engraver::’
          Create a system start text for instrument or vocal names.

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘instrumentName’ (markup)
                    The name to print left of a staff.  The
                    ‘instrumentName’ property labels the staff in the
                    first system, and the ‘shortInstrumentName’ property
                    labels following lines.

               ‘shortInstrumentName’ (markup)
                    See ‘instrumentName’.

               ‘shortVocalName’ (markup)
                    Name of a vocal line, short version.

               ‘vocalName’ (markup)
                    Name of a vocal line.

          This engraver creates the following layout object(s):

          *note InstrumentName::.

     ‘*note Key_engraver::’
          Engrave a key signature.

          Music types accepted:

          *note key-change-event::

          Properties (read)

               ‘createKeyOnClefChange’ (boolean)
                    Print a key signature whenever the clef is changed.

               ‘explicitKeySignatureVisibility’ (vector)
                    ‘break-visibility’ function for explicit key
                    changes.  ‘\override’ of the ‘break-visibility’
                    property will set the visibility for normal (i.e.,
                    at the start of the line) key signatures.

               ‘extraNatural’ (boolean)
                    Whether to typeset an extra natural sign before
                    accidentals that reduce the effect of a previous
                    alteration.

               ‘keyAlterationOrder’ (list)
                    An alist that defines in what order alterations
                    should be printed.  The format is ‘(STEP . ALTER)’,
                    where STEP is a number from 0 to 6 and ALTER from -2
                    (sharp) to 2 (flat).

               ‘keyAlterations’ (list)
                    The current key signature.  This is an alist
                    containing ‘(STEP . ALTER)’ or ‘((OCTAVE . STEP) .
                    ALTER)’, where STEP is a number in the range 0 to 6
                    and ALTER a fraction, denoting alteration.  For
                    alterations, use symbols, e.g.  ‘keyAlterations =
                    #`((6 . ,FLAT))’.

               ‘lastKeyAlterations’ (list)
                    Last key signature before a key signature change.

               ‘middleCClefPosition’ (number)
                    The position of the middle C, as determined only by
                    the clef.  This can be calculated by looking at
                    ‘clefPosition’ and ‘clefGlyph’.

               ‘printKeyCancellation’ (boolean)
                    Print restoration alterations before a key signature
                    change.

          Properties (write)

               ‘keyAlterations’ (list)
                    The current key signature.  This is an alist
                    containing ‘(STEP . ALTER)’ or ‘((OCTAVE . STEP) .
                    ALTER)’, where STEP is a number in the range 0 to 6
                    and ALTER a fraction, denoting alteration.  For
                    alterations, use symbols, e.g.  ‘keyAlterations =
                    #`((6 . ,FLAT))’.

               ‘lastKeyAlterations’ (list)
                    Last key signature before a key signature change.

               ‘tonic’ (pitch)
                    The tonic of the current scale.

          This engraver creates the following layout object(s):

          *note KeyCancellation:: and *note KeySignature::.

     ‘*note Ledger_line_engraver::’
          Create the spanner to draw ledger lines, and notices objects
          that need ledger lines.

          This engraver creates the following layout object(s):

          *note LedgerLineSpanner::.

     ‘*note Ottava_spanner_engraver::’
          Create a text spanner when the ottavation property changes.

          Properties (read)

               ‘currentMusicalColumn’ (graphical (layout) object)
                    Grob that is X-parent to all non-breakable items
                    (note heads, lyrics, etc.).

               ‘middleCOffset’ (number)
                    The offset of middle C from the position given by
                    ‘middleCClefPosition’ This is used for ottava
                    brackets.

               ‘ottavation’ (markup)
                    If set, the text for an ottava spanner.  Changing
                    this creates a new text spanner.

          This engraver creates the following layout object(s):

          *note OttavaBracket::.

     ‘*note Piano_pedal_align_engraver::’
          Align piano pedal symbols and brackets.

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

          This engraver creates the following layout object(s):

          *note SostenutoPedalLineSpanner::, *note
          SustainPedalLineSpanner:: and *note
          UnaCordaPedalLineSpanner::.

     ‘*note Piano_pedal_engraver::’
          Engrave piano pedal symbols and brackets.

          Music types accepted:

          *note sostenuto-event::, *note sustain-event:: and *note
          una-corda-event::

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘pedalSostenutoStrings’ (list)
                    See ‘pedalSustainStrings’.

               ‘pedalSostenutoStyle’ (symbol)
                    See ‘pedalSustainStyle’.

               ‘pedalSustainStrings’ (list)
                    A list of strings to print for sustain-pedal.
                    Format is ‘(UP UPDOWN DOWN)’, where each of the
                    three is the string to print when this is done with
                    the pedal.

               ‘pedalSustainStyle’ (symbol)
                    A symbol that indicates how to print sustain pedals:
                    ‘text’, ‘bracket’ or ‘mixed’ (both).

               ‘pedalUnaCordaStrings’ (list)
                    See ‘pedalSustainStrings’.

               ‘pedalUnaCordaStyle’ (symbol)
                    See ‘pedalSustainStyle’.

          This engraver creates the following layout object(s):

          *note PianoPedalBracket::, *note SostenutoPedal::, *note
          SustainPedal:: and *note UnaCordaPedal::.

     ‘*note Pure_from_neighbor_engraver::’
          Coordinates items that get their pure heights from their
          neighbors.

     ‘*note Rest_collision_engraver::’
          Handle collisions of rests.

          Properties (read)

               ‘busyGrobs’ (list)
                    A queue of ‘(END-MOMENT . GROB)’ cons cells.  This
                    is for internal (C++) use only.  This property
                    contains the grobs which are still busy (e.g.  note
                    heads, spanners, etc.).

          This engraver creates the following layout object(s):

          *note RestCollision::.

     ‘*note Script_row_engraver::’
          Determine order in horizontal side position elements.

          This engraver creates the following layout object(s):

          *note ScriptRow::.

     ‘*note Separating_line_group_engraver::’
          Generate objects for computing spacing parameters.

          Properties (read)

               ‘createSpacing’ (boolean)
                    Create ‘StaffSpacing’ objects?  Should be set for
                    staves.

          Properties (write)

               ‘hasStaffSpacing’ (boolean)
                    True if the current ‘CommandColumn’ contains items
                    that will affect spacing.

          This engraver creates the following layout object(s):

          *note StaffSpacing::.

     ‘*note Staff_collecting_engraver::’
          Maintain the ‘stavesFound’ variable.

          Properties (read)

               ‘stavesFound’ (list of grobs)
                    A list of all staff-symbols found.

          Properties (write)

               ‘stavesFound’ (list of grobs)
                    A list of all staff-symbols found.

     ‘*note Staff_symbol_engraver::’
          Create the constellation of five (default) staff lines.

          Music types accepted:

          *note staff-span-event::

          This engraver creates the following layout object(s):

          *note StaffSymbol::.

     ‘*note Time_signature_engraver::’
          Create a *note TimeSignature:: whenever
          ‘timeSignatureFraction’ changes.

          Music types accepted:

          *note time-signature-event::

          Properties (read)

               ‘initialTimeSignatureVisibility’ (vector)
                    break visibility for the initial time signature.

               ‘partialBusy’ (boolean)
                    Signal that \partial acts at the current timestep.

               ‘timeSignatureFraction’ (fraction, as pair)
                    A pair of numbers, signifying the time signature.
                    For example, ‘'(4 . 4)’ is a 4/4 time signature.

          This engraver creates the following layout object(s):

          *note TimeSignature::.


File: lilypond-internals.info,  Node: MensuralVoice,  Next: NoteNames,  Prev: MensuralStaff,  Up: Contexts

2.1.18 MensuralVoice
--------------------

Same as ‘Voice’ context, except that it is accommodated for typesetting
a piece in mensural style.

   This context also accepts commands for the following context(s):

   Voice.

   This context creates the following layout object(s):

   *note Arpeggio::, *note Beam::, *note BendAfter::, *note
BreathingSign::, *note ClusterSpanner::, *note ClusterSpannerBeacon::,
*note CombineTextScript::, *note Dots::, *note DoublePercentRepeat::,
*note DoublePercentRepeatCounter::, *note DoubleRepeatSlash::, *note
DynamicLineSpanner::, *note DynamicText::, *note DynamicTextSpanner::,
*note Fingering::, *note Flag::, *note Glissando::, *note Hairpin::,
*note InstrumentSwitch::, *note LaissezVibrerTie::, *note
LaissezVibrerTieColumn::, *note MensuralLigature::, *note
MultiMeasureRest::, *note MultiMeasureRestNumber::, *note
MultiMeasureRestText::, *note NoteColumn::, *note NoteHead::, *note
NoteSpacing::, *note PercentRepeat::, *note PercentRepeatCounter::,
*note PhrasingSlur::, *note RepeatSlash::, *note RepeatTie::, *note
RepeatTieColumn::, *note Rest::, *note Script::, *note ScriptColumn::,
*note Stem::, *note StemStub::, *note StemTremolo::, *note
StringNumber::, *note StrokeFinger::, *note TextScript::, *note
TextSpanner::, *note Tie::, *note TieColumn::, *note
TrillPitchAccidental::, *note TrillPitchGroup::, *note TrillPitchHead::,
*note TrillSpanner::, *note TupletBracket::, *note TupletNumber:: and
*note VoiceFollower::.

   This context sets the following properties:

   • Set grob-property ‘style’ in *note Flag:: to ‘'mensural’.
   • Set grob-property ‘style’ in *note NoteHead:: to ‘'mensural’.
   • Set grob-property ‘style’ in *note Rest:: to ‘'mensural’.
   • Set translator property ‘autoBeaming’ to ‘#f’.

   This is a ‘Bottom’ context; no contexts will be created implicitly
from it.

   This context cannot contain other contexts.

   This context is built from the following engraver(s):

     ‘*note Arpeggio_engraver::’
          Generate an Arpeggio symbol.

          Music types accepted:

          *note arpeggio-event::

          This engraver creates the following layout object(s):

          *note Arpeggio::.

     ‘*note Auto_beam_engraver::’
          Generate beams based on measure characteristics and observed
          Stems.  Uses ‘baseMoment’, ‘beatStructure’, ‘beamExceptions’,
          ‘measureLength’, and ‘measurePosition’ to decide when to start
          and stop a beam.  Overriding beaming is done through *note
          Stem_engraver:: properties ‘stemLeftBeamCount’ and
          ‘stemRightBeamCount’.

          Music types accepted:

          *note beam-forbid-event::

          Properties (read)

               ‘autoBeaming’ (boolean)
                    If set to true then beams are generated
                    automatically.

               ‘baseMoment’ (moment)
                    Smallest unit of time that will stand on its own as
                    a subdivided section.

               ‘beamExceptions’ (list)
                    An alist of exceptions to autobeam rules that
                    normally end on beats.

               ‘beamHalfMeasure’ (boolean)
                    Whether to allow a beam to begin halfway through the
                    measure in triple time, which could look like 6/8.

               ‘beatStructure’ (list)
                    List of ‘baseMoment’s that are combined to make
                    beats.

               ‘subdivideBeams’ (boolean)
                    If set, multiple beams will be subdivided at
                    ‘baseMoment’ positions by only drawing one beam over
                    the beat.

          This engraver creates the following layout object(s):

          *note Beam::.

     ‘*note Beam_engraver::’
          Handle ‘Beam’ events by engraving beams.  If omitted, then
          notes are printed with flags instead of beams.

          Music types accepted:

          *note beam-event::

          Properties (read)

               ‘baseMoment’ (moment)
                    Smallest unit of time that will stand on its own as
                    a subdivided section.

               ‘beamMelismaBusy’ (boolean)
                    Signal if a beam is present.

               ‘beatStructure’ (list)
                    List of ‘baseMoment’s that are combined to make
                    beats.

               ‘subdivideBeams’ (boolean)
                    If set, multiple beams will be subdivided at
                    ‘baseMoment’ positions by only drawing one beam over
                    the beat.

          Properties (write)

               ‘forbidBreak’ (boolean)
                    If set to ‘#t’, prevent a line break at this point.

          This engraver creates the following layout object(s):

          *note Beam::.

     ‘*note Bend_engraver::’
          Create fall spanners.

          Music types accepted:

          *note bend-after-event::

          This engraver creates the following layout object(s):

          *note BendAfter::.

     ‘*note Breathing_sign_engraver::’
          Create a breathing sign.

          Music types accepted:

          *note breathing-event::

          This engraver creates the following layout object(s):

          *note BreathingSign::.

     ‘*note Chord_tremolo_engraver::’
          Generate beams for tremolo repeats.

          Music types accepted:

          *note tremolo-span-event::

          This engraver creates the following layout object(s):

          *note Beam::.

     ‘*note Cluster_spanner_engraver::’
          Engrave a cluster using ‘Spanner’ notation.

          Music types accepted:

          *note cluster-note-event::

          This engraver creates the following layout object(s):

          *note ClusterSpanner:: and *note ClusterSpannerBeacon::.

     ‘*note Dots_engraver::’
          Create *note Dots:: objects for *note
          rhythmic-head-interface::s.

          This engraver creates the following layout object(s):

          *note Dots::.

     ‘*note Double_percent_repeat_engraver::’
          Make double measure repeats.

          Music types accepted:

          *note double-percent-event::

          Properties (read)

               ‘countPercentRepeats’ (boolean)
                    If set, produce counters for percent repeats.

               ‘measureLength’ (moment)
                    Length of one measure in the current time signature.

               ‘repeatCountVisibility’ (procedure)
                    A procedure taking as arguments an integer and
                    context, returning whether the corresponding percent
                    repeat number should be printed when
                    ‘countPercentRepeats’ is set.

          Properties (write)

               ‘forbidBreak’ (boolean)
                    If set to ‘#t’, prevent a line break at this point.

          This engraver creates the following layout object(s):

          *note DoublePercentRepeat:: and *note
          DoublePercentRepeatCounter::.

     ‘*note Dynamic_align_engraver::’
          Align hairpins and dynamic texts on a horizontal line.

          Properties (read)

               ‘currentMusicalColumn’ (graphical (layout) object)
                    Grob that is X-parent to all non-breakable items
                    (note heads, lyrics, etc.).

          This engraver creates the following layout object(s):

          *note DynamicLineSpanner::.

     ‘*note Dynamic_engraver::’
          Create hairpins, dynamic texts and dynamic text spanners.

          Music types accepted:

          *note absolute-dynamic-event::, *note break-span-event:: and
          *note span-dynamic-event::

          Properties (read)

               ‘crescendoSpanner’ (symbol)
                    The type of spanner to be used for crescendi.
                    Available values are ‘hairpin’ and ‘text’.  If
                    unset, a hairpin crescendo is used.

               ‘crescendoText’ (markup)
                    The text to print at start of non-hairpin crescendo,
                    i.e., ‘cresc.’.

               ‘currentMusicalColumn’ (graphical (layout) object)
                    Grob that is X-parent to all non-breakable items
                    (note heads, lyrics, etc.).

               ‘decrescendoSpanner’ (symbol)
                    The type of spanner to be used for decrescendi.
                    Available values are ‘hairpin’ and ‘text’.  If
                    unset, a hairpin decrescendo is used.

               ‘decrescendoText’ (markup)
                    The text to print at start of non-hairpin
                    decrescendo, i.e., ‘dim.’.

          This engraver creates the following layout object(s):

          *note DynamicText::, *note DynamicTextSpanner:: and *note
          Hairpin::.

     ‘*note Fingering_engraver::’
          Create fingering scripts.

          Music types accepted:

          *note fingering-event::

          This engraver creates the following layout object(s):

          *note Fingering::.

     ‘*note Font_size_engraver::’
          Put ‘fontSize’ into ‘font-size’ grob property.

          Properties (read)

               ‘fontSize’ (number)
                    The relative size of all grobs in a context.

     ‘*note Forbid_line_break_engraver::’
          Forbid line breaks when note heads are still playing at some
          point.

          Properties (read)

               ‘busyGrobs’ (list)
                    A queue of ‘(END-MOMENT . GROB)’ cons cells.  This
                    is for internal (C++) use only.  This property
                    contains the grobs which are still busy (e.g.  note
                    heads, spanners, etc.).

          Properties (write)

               ‘forbidBreak’ (boolean)
                    If set to ‘#t’, prevent a line break at this point.

     ‘*note Glissando_engraver::’
          Engrave glissandi.

          Music types accepted:

          *note glissando-event::

          Properties (read)

               ‘glissandoMap’ (list)
                    A map in the form of ’((source1 .  target1) (source2
                    .  target2) (sourcen .  targetn)) showing the
                    glissandi to be drawn for note columns.  The value
                    ’() will default to ’((0 .  0) (1 .  1) (n .  n)),
                    where n is the minimal number of note-heads in the
                    two note columns between which the glissandi occur.

          This engraver creates the following layout object(s):

          *note Glissando::.

     ‘*note Grace_auto_beam_engraver::’
          Generates one autobeam group across an entire grace phrase.
          As usual, any manual beaming or ‘\noBeam’ will block
          autobeaming, just like setting the context property
          ‘autoBeaming’ to ‘##f’.

          Music types accepted:

          *note beam-forbid-event::

          Properties (read)

               ‘autoBeaming’ (boolean)
                    If set to true then beams are generated
                    automatically.

          This engraver creates the following layout object(s):

          *note Beam::.

     ‘*note Grace_beam_engraver::’
          Handle ‘Beam’ events by engraving beams.  If omitted, then
          notes are printed with flags instead of beams.  Only engraves
          beams when we are at grace points in time.

          Music types accepted:

          *note beam-event::

          Properties (read)

               ‘baseMoment’ (moment)
                    Smallest unit of time that will stand on its own as
                    a subdivided section.

               ‘beamMelismaBusy’ (boolean)
                    Signal if a beam is present.

               ‘beatStructure’ (list)
                    List of ‘baseMoment’s that are combined to make
                    beats.

               ‘subdivideBeams’ (boolean)
                    If set, multiple beams will be subdivided at
                    ‘baseMoment’ positions by only drawing one beam over
                    the beat.

          This engraver creates the following layout object(s):

          *note Beam::.

     ‘*note Grace_engraver::’
          Set font size and other properties for grace notes.

          Properties (read)

               ‘graceSettings’ (list)
                    Overrides for grace notes.  This property should be
                    manipulated through the ‘add-grace-property’
                    function.

     ‘*note Grob_pq_engraver::’
          Administrate when certain grobs (e.g., note heads) stop
          playing.

          Properties (read)

               ‘busyGrobs’ (list)
                    A queue of ‘(END-MOMENT . GROB)’ cons cells.  This
                    is for internal (C++) use only.  This property
                    contains the grobs which are still busy (e.g.  note
                    heads, spanners, etc.).

          Properties (write)

               ‘busyGrobs’ (list)
                    A queue of ‘(END-MOMENT . GROB)’ cons cells.  This
                    is for internal (C++) use only.  This property
                    contains the grobs which are still busy (e.g.  note
                    heads, spanners, etc.).

     ‘*note Instrument_switch_engraver::’
          Create a cue text for taking instrument.

          Properties (read)

               ‘instrumentCueName’ (markup)
                    The name to print if another instrument is to be
                    taken.

          This engraver creates the following layout object(s):

          *note InstrumentSwitch::.

     ‘*note Laissez_vibrer_engraver::’
          Create laissez vibrer items.

          Music types accepted:

          *note laissez-vibrer-event::

          This engraver creates the following layout object(s):

          *note LaissezVibrerTie:: and *note LaissezVibrerTieColumn::.

     ‘*note Mensural_ligature_engraver::’
          Handle ‘Mensural_ligature_events’ by glueing special ligature
          heads together.

          Music types accepted:

          *note ligature-event::

          This engraver creates the following layout object(s):

          *note MensuralLigature::.

     ‘*note Multi_measure_rest_engraver::’
          Engrave multi-measure rests that are produced with ‘R’.  It
          reads ‘measurePosition’ and ‘internalBarNumber’ to determine
          what number to print over the *note MultiMeasureRest::.

          Music types accepted:

          *note multi-measure-rest-event:: and *note
          multi-measure-text-event::

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘internalBarNumber’ (integer)
                    Contains the current barnumber.  This property is
                    used for internal timekeeping, among others by the
                    ‘Accidental_engraver’.

               ‘measurePosition’ (moment)
                    How much of the current measure have we had.  This
                    can be set manually to create incomplete measures.

               ‘restNumberThreshold’ (number)
                    If a multimeasure rest has more measures than this,
                    a number is printed.

               ‘whichBar’ (string)
                    This property is read to determine what type of bar
                    line to create.

                    Example:

                         \set Staff.whichBar = ".|:"

                    This will create a start-repeat bar in this staff
                    only.  Valid values are described in
                    ‘scm/bar-line.scm’.

          This engraver creates the following layout object(s):

          *note MultiMeasureRest::, *note MultiMeasureRestNumber:: and
          *note MultiMeasureRestText::.

     ‘*note New_fingering_engraver::’
          Create fingering scripts for notes in a new chord.  This
          engraver is ill-named, since it also takes care of
          articulations and harmonic note heads.

          Properties (read)

               ‘fingeringOrientations’ (list)
                    A list of symbols, containing ‘left’, ‘right’, ‘up’
                    and/or ‘down’.  This list determines where
                    fingerings are put relative to the chord being
                    fingered.

               ‘harmonicDots’ (boolean)
                    If set, harmonic notes in dotted chords get dots.

               ‘stringNumberOrientations’ (list)
                    See ‘fingeringOrientations’.

               ‘strokeFingerOrientations’ (list)
                    See ‘fingeringOrientations’.

          This engraver creates the following layout object(s):

          *note Fingering::, *note Script::, *note StringNumber:: and
          *note StrokeFinger::.

     ‘*note Note_head_line_engraver::’
          Engrave a line between two note heads in a staff switch if
          ‘followVoice’ is set.

          Properties (read)

               ‘followVoice’ (boolean)
                    If set, note heads are tracked across staff switches
                    by a thin line.

          This engraver creates the following layout object(s):

          *note VoiceFollower::.

     ‘*note Note_heads_engraver::’
          Generate note heads.

          Music types accepted:

          *note note-event::

          Properties (read)

               ‘middleCPosition’ (number)
                    The place of the middle C, measured in half
                    staff-spaces.  Usually determined by looking at
                    ‘middleCClefPosition’ and ‘middleCOffset’.

               ‘staffLineLayoutFunction’ (procedure)
                    Layout of staff lines, ‘traditional’, or ‘semitone’.

          This engraver creates the following layout object(s):

          *note NoteHead::.

     ‘*note Note_spacing_engraver::’
          Generate ‘NoteSpacing’, an object linking horizontal lines for
          use in spacing.

          This engraver creates the following layout object(s):

          *note NoteSpacing::.

     ‘*note Part_combine_engraver::’
          Part combine engraver for orchestral scores: Print markings
          ‘a2’, ‘Solo’, ‘Solo II’, and ‘unisono’.

          Music types accepted:

          *note note-event:: and *note part-combine-event::

          Properties (read)

               ‘aDueText’ (markup)
                    Text to print at a unisono passage.

               ‘partCombineTextsOnNote’ (boolean)
                    Print part-combine texts only on the next note
                    rather than immediately on rests or skips.

               ‘printPartCombineTexts’ (boolean)
                    Set ‘Solo’ and ‘A due’ texts in the part combiner?

               ‘soloIIText’ (markup)
                    The text for the start of a solo for voice ‘two’
                    when part-combining.

               ‘soloText’ (markup)
                    The text for the start of a solo when
                    part-combining.

          This engraver creates the following layout object(s):

          *note CombineTextScript::.

     ‘*note Percent_repeat_engraver::’
          Make whole measure repeats.

          Music types accepted:

          *note percent-event::

          Properties (read)

               ‘countPercentRepeats’ (boolean)
                    If set, produce counters for percent repeats.

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘repeatCountVisibility’ (procedure)
                    A procedure taking as arguments an integer and
                    context, returning whether the corresponding percent
                    repeat number should be printed when
                    ‘countPercentRepeats’ is set.

          This engraver creates the following layout object(s):

          *note PercentRepeat:: and *note PercentRepeatCounter::.

     ‘*note Phrasing_slur_engraver::’
          Print phrasing slurs.  Similar to *note Slur_engraver::.

          Music types accepted:

          *note note-event:: and *note phrasing-slur-event::

          This engraver creates the following layout object(s):

          *note PhrasingSlur::.

     ‘*note Pitched_trill_engraver::’
          Print the bracketed note head after a note head with trill.

          This engraver creates the following layout object(s):

          *note TrillPitchAccidental::, *note TrillPitchGroup:: and
          *note TrillPitchHead::.

     ‘*note Repeat_tie_engraver::’
          Create repeat ties.

          Music types accepted:

          *note repeat-tie-event::

          This engraver creates the following layout object(s):

          *note RepeatTie:: and *note RepeatTieColumn::.

     ‘*note Rest_engraver::’
          Engrave rests.

          Music types accepted:

          *note rest-event::

          Properties (read)

               ‘middleCPosition’ (number)
                    The place of the middle C, measured in half
                    staff-spaces.  Usually determined by looking at
                    ‘middleCClefPosition’ and ‘middleCOffset’.

          This engraver creates the following layout object(s):

          *note Rest::.

     ‘*note Rhythmic_column_engraver::’
          Generate ‘NoteColumn’, an object that groups stems, note
          heads, and rests.

          This engraver creates the following layout object(s):

          *note NoteColumn::.

     ‘*note Script_column_engraver::’
          Find potentially colliding scripts and put them into a
          ‘ScriptColumn’ object; that will fix the collisions.

          This engraver creates the following layout object(s):

          *note ScriptColumn::.

     ‘*note Script_engraver::’
          Handle note scripted articulations.

          Music types accepted:

          *note articulation-event::

          Properties (read)

               ‘scriptDefinitions’ (list)
                    The description of scripts.  This is used by the
                    ‘Script_engraver’ for typesetting note-superscripts
                    and subscripts.  See ‘scm/script.scm’ for more
                    information.

          This engraver creates the following layout object(s):

          *note Script::.

     ‘*note Slash_repeat_engraver::’
          Make beat repeats.

          Music types accepted:

          *note repeat-slash-event::

          This engraver creates the following layout object(s):

          *note DoubleRepeatSlash:: and *note RepeatSlash::.

     ‘*note Spanner_break_forbid_engraver::’
          Forbid breaks in certain spanners.

     ‘*note Stem_engraver::’
          Create stems, flags and single-stem tremolos.  It also works
          together with the beam engraver for overriding beaming.

          Music types accepted:

          *note tremolo-event:: and *note tuplet-span-event::

          Properties (read)

               ‘stemLeftBeamCount’ (integer)
                    Specify the number of beams to draw on the left side
                    of the next note.  Overrides automatic beaming.  The
                    value is only used once, and then it is erased.

               ‘stemRightBeamCount’ (integer)
                    See ‘stemLeftBeamCount’.

               ‘whichBar’ (string)
                    This property is read to determine what type of bar
                    line to create.

                    Example:

                         \set Staff.whichBar = ".|:"

                    This will create a start-repeat bar in this staff
                    only.  Valid values are described in
                    ‘scm/bar-line.scm’.

          This engraver creates the following layout object(s):

          *note Flag::, *note Stem::, *note StemStub:: and *note
          StemTremolo::.

     ‘*note Text_engraver::’
          Create text scripts.

          Music types accepted:

          *note text-script-event::

          This engraver creates the following layout object(s):

          *note TextScript::.

     ‘*note Text_spanner_engraver::’
          Create text spanner from an event.

          Music types accepted:

          *note text-span-event::

          Properties (read)

               ‘currentMusicalColumn’ (graphical (layout) object)
                    Grob that is X-parent to all non-breakable items
                    (note heads, lyrics, etc.).

          This engraver creates the following layout object(s):

          *note TextSpanner::.

     ‘*note Tie_engraver::’
          Generate ties between note heads of equal pitch.

          Music types accepted:

          *note tie-event::

          Properties (read)

               ‘skipTypesetting’ (boolean)
                    If true, no typesetting is done, speeding up the
                    interpretation phase.  Useful for debugging large
                    scores.

               ‘tieWaitForNote’ (boolean)
                    If true, tied notes do not have to follow each other
                    directly.  This can be used for writing out
                    arpeggios.

          Properties (write)

               ‘tieMelismaBusy’ (boolean)
                    Signal whether a tie is present.

          This engraver creates the following layout object(s):

          *note Tie:: and *note TieColumn::.

     ‘*note Trill_spanner_engraver::’
          Create trill spanner from an event.

          Music types accepted:

          *note trill-span-event::

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘currentMusicalColumn’ (graphical (layout) object)
                    Grob that is X-parent to all non-breakable items
                    (note heads, lyrics, etc.).

          This engraver creates the following layout object(s):

          *note TrillSpanner::.

     ‘*note Tuplet_engraver::’
          Catch tuplet events and generate appropriate bracket.

          Music types accepted:

          *note tuplet-span-event::

          Properties (read)

               ‘tupletFullLength’ (boolean)
                    If set, the tuplet is printed up to the start of the
                    next note.

               ‘tupletFullLengthNote’ (boolean)
                    If set, end at the next note, otherwise end on the
                    matter (time signatures, etc.)  before the note.

          This engraver creates the following layout object(s):

          *note TupletBracket:: and *note TupletNumber::.


File: lilypond-internals.info,  Node: NoteNames,  Next: NullVoice,  Prev: MensuralVoice,  Up: Contexts

2.1.19 NoteNames
----------------

A context for printing the names of notes.

   This context creates the following layout object(s):

   *note NoteName::, *note StaffSpacing::, *note Tie::, *note
TieColumn:: and *note VerticalAxisGroup::.

   This context sets the following properties:

   • Set grob-property ‘nonstaff-nonstaff-spacing’ in *note
     VerticalAxisGroup:: to:
     '((basic-distance . 0)
       (minimum-distance . 2.8)
       (padding . 0.2)
       (stretchability . 0))
   • Set grob-property ‘nonstaff-relatedstaff-spacing’ in *note
     VerticalAxisGroup:: to:
     '((basic-distance . 5.5)
       (padding . 0.5)
       (stretchability . 1))
   • Set grob-property ‘nonstaff-unrelatedstaff-spacing.padding’ in
     *note VerticalAxisGroup:: to ‘1.5’.
   • Set grob-property ‘staff-affinity’ in *note VerticalAxisGroup:: to
     ‘1’.

   This is a ‘Bottom’ context; no contexts will be created implicitly
from it.

   This context cannot contain other contexts.

   This context is built from the following engraver(s):

     ‘*note Axis_group_engraver::’
          Group all objects created in this context in a
          ‘VerticalAxisGroup’ spanner.

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘hasAxisGroup’ (boolean)
                    True if the current context is contained in an axis
                    group.

               ‘keepAliveInterfaces’ (list)
                    A list of symbols, signifying grob interfaces that
                    are worth keeping a staff with ‘remove-empty’ set
                    around for.

          Properties (write)

               ‘hasAxisGroup’ (boolean)
                    True if the current context is contained in an axis
                    group.

          This engraver creates the following layout object(s):

          *note VerticalAxisGroup::.

     ‘*note Note_name_engraver::’
          Print pitches as words.

          Music types accepted:

          *note note-event::

          Properties (read)

               ‘printOctaveNames’ (boolean)
                    Print octave marks for the ‘NoteNames’ context.

          This engraver creates the following layout object(s):

          *note NoteName::.

     ‘*note Separating_line_group_engraver::’
          Generate objects for computing spacing parameters.

          Properties (read)

               ‘createSpacing’ (boolean)
                    Create ‘StaffSpacing’ objects?  Should be set for
                    staves.

          Properties (write)

               ‘hasStaffSpacing’ (boolean)
                    True if the current ‘CommandColumn’ contains items
                    that will affect spacing.

          This engraver creates the following layout object(s):

          *note StaffSpacing::.

     ‘*note Tie_engraver::’
          Generate ties between note heads of equal pitch.

          Music types accepted:

          *note tie-event::

          Properties (read)

               ‘skipTypesetting’ (boolean)
                    If true, no typesetting is done, speeding up the
                    interpretation phase.  Useful for debugging large
                    scores.

               ‘tieWaitForNote’ (boolean)
                    If true, tied notes do not have to follow each other
                    directly.  This can be used for writing out
                    arpeggios.

          Properties (write)

               ‘tieMelismaBusy’ (boolean)
                    Signal whether a tie is present.

          This engraver creates the following layout object(s):

          *note Tie:: and *note TieColumn::.


File: lilypond-internals.info,  Node: NullVoice,  Next: OneStaff,  Prev: NoteNames,  Up: Contexts

2.1.20 NullVoice
----------------

For aligning lyrics without printing notes

   This context also accepts commands for the following context(s):

   Staff and Voice.

   This context creates the following layout object(s):

   *note Beam::, *note NoteHead::, *note Slur::, *note Tie:: and *note
TieColumn::.

   This context sets the following properties:

   • Set grob-property ‘no-ledgers’ in *note NoteHead:: to ‘#t’.
   • Set grob-property ‘stencil’ in *note Beam:: to ‘#f’.
   • Set grob-property ‘stencil’ in *note NoteHead:: to ‘#f’.
   • Set grob-property ‘stencil’ in *note Slur:: to ‘#f’.
   • Set grob-property ‘stencil’ in *note Tie:: to ‘#f’.
   • Set grob-property ‘X-extent’ in *note NoteHead:: to ‘#<procedure #f
     (g)>’.
   • Set translator property ‘nullAccidentals’ to ‘#t’.
   • Set translator property ‘squashedPosition’ to ‘0’.

   This is a ‘Bottom’ context; no contexts will be created implicitly
from it.

   This context cannot contain other contexts.

   This context is built from the following engraver(s):

     ‘*note Beam_engraver::’
          Handle ‘Beam’ events by engraving beams.  If omitted, then
          notes are printed with flags instead of beams.

          Music types accepted:

          *note beam-event::

          Properties (read)

               ‘baseMoment’ (moment)
                    Smallest unit of time that will stand on its own as
                    a subdivided section.

               ‘beamMelismaBusy’ (boolean)
                    Signal if a beam is present.

               ‘beatStructure’ (list)
                    List of ‘baseMoment’s that are combined to make
                    beats.

               ‘subdivideBeams’ (boolean)
                    If set, multiple beams will be subdivided at
                    ‘baseMoment’ positions by only drawing one beam over
                    the beat.

          Properties (write)

               ‘forbidBreak’ (boolean)
                    If set to ‘#t’, prevent a line break at this point.

          This engraver creates the following layout object(s):

          *note Beam::.

     ‘*note Grob_pq_engraver::’
          Administrate when certain grobs (e.g., note heads) stop
          playing.

          Properties (read)

               ‘busyGrobs’ (list)
                    A queue of ‘(END-MOMENT . GROB)’ cons cells.  This
                    is for internal (C++) use only.  This property
                    contains the grobs which are still busy (e.g.  note
                    heads, spanners, etc.).

          Properties (write)

               ‘busyGrobs’ (list)
                    A queue of ‘(END-MOMENT . GROB)’ cons cells.  This
                    is for internal (C++) use only.  This property
                    contains the grobs which are still busy (e.g.  note
                    heads, spanners, etc.).

     ‘*note Note_heads_engraver::’
          Generate note heads.

          Music types accepted:

          *note note-event::

          Properties (read)

               ‘middleCPosition’ (number)
                    The place of the middle C, measured in half
                    staff-spaces.  Usually determined by looking at
                    ‘middleCClefPosition’ and ‘middleCOffset’.

               ‘staffLineLayoutFunction’ (procedure)
                    Layout of staff lines, ‘traditional’, or ‘semitone’.

          This engraver creates the following layout object(s):

          *note NoteHead::.

     ‘*note Pitch_squash_engraver::’
          Set the vertical position of note heads to ‘squashedPosition’,
          if that property is set.  This can be used to make a
          single-line staff demonstrating the rhythm of a melody.

          Properties (read)

               ‘squashedPosition’ (integer)
                    Vertical position of squashing for *note
                    (lilypond-internals)Pitch_squash_engraver::.

     ‘*note Slur_engraver::’
          Build slur grobs from slur events.

          Music types accepted:

          *note note-event:: and *note slur-event::

          Properties (read)

               ‘doubleSlurs’ (boolean)
                    If set, two slurs are created for every slurred
                    note, one above and one below the chord.

               ‘slurMelismaBusy’ (boolean)
                    Signal if a slur is present.

          This engraver creates the following layout object(s):

          *note Slur::.

     ‘*note Tie_engraver::’
          Generate ties between note heads of equal pitch.

          Music types accepted:

          *note tie-event::

          Properties (read)

               ‘skipTypesetting’ (boolean)
                    If true, no typesetting is done, speeding up the
                    interpretation phase.  Useful for debugging large
                    scores.

               ‘tieWaitForNote’ (boolean)
                    If true, tied notes do not have to follow each other
                    directly.  This can be used for writing out
                    arpeggios.

          Properties (write)

               ‘tieMelismaBusy’ (boolean)
                    Signal whether a tie is present.

          This engraver creates the following layout object(s):

          *note Tie:: and *note TieColumn::.


File: lilypond-internals.info,  Node: OneStaff,  Next: PetrucciStaff,  Prev: NullVoice,  Up: Contexts

2.1.21 OneStaff
---------------

Provides a common axis for the contained staves, making all of them
appear in the same vertical space.  This can be useful for typesetting
staves of different types in immediate succession or for temporarily
changing the character of one staff or overlaying it with a different
one.  Often used with ‘\stopStaff’ and ‘\startStaff’ for best results.

   This context creates the following layout object(s):

   *note VerticalAxisGroup::.

   This is not a ‘Bottom’ context; search for such a one will commence
after creating an implicit context of type *note Staff::.

   Context OneStaff can contain *note ChordNames::, *note DrumStaff::,
*note Dynamics::, *note FiguredBass::, *note FretBoards::, *note
GregorianTranscriptionStaff::, *note KievanStaff::, *note Lyrics::,
*note MensuralStaff::, *note NoteNames::, *note PetrucciStaff::, *note
RhythmicStaff::, *note Staff::, *note TabStaff:: and *note
VaticanaStaff::.

   This context is built from the following engraver(s):

     ‘*note Axis_group_engraver::’
          Group all objects created in this context in a
          ‘VerticalAxisGroup’ spanner.

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘hasAxisGroup’ (boolean)
                    True if the current context is contained in an axis
                    group.

               ‘keepAliveInterfaces’ (list)
                    A list of symbols, signifying grob interfaces that
                    are worth keeping a staff with ‘remove-empty’ set
                    around for.

          Properties (write)

               ‘hasAxisGroup’ (boolean)
                    True if the current context is contained in an axis
                    group.

          This engraver creates the following layout object(s):

          *note VerticalAxisGroup::.


File: lilypond-internals.info,  Node: PetrucciStaff,  Next: PetrucciVoice,  Prev: OneStaff,  Up: Contexts

2.1.22 PetrucciStaff
--------------------

Same as ‘Staff’ context, except that it is accommodated for typesetting
a piece in Petrucci style.

   This context also accepts commands for the following context(s):

   Staff.

   This context creates the following layout object(s):

   *note Accidental::, *note AccidentalCautionary::, *note
AccidentalPlacement::, *note AccidentalSuggestion::, *note BarLine::,
*note BassFigure::, *note BassFigureAlignment::, *note
BassFigureAlignmentPositioning::, *note BassFigureBracket::, *note
BassFigureContinuation::, *note BassFigureLine::, *note Clef::, *note
ClefModifier::, *note CueClef::, *note CueEndClef::, *note Custos::,
*note DotColumn::, *note FingeringColumn::, *note InstrumentName::,
*note KeyCancellation::, *note KeySignature::, *note
LedgerLineSpanner::, *note NoteCollision::, *note OttavaBracket::, *note
PianoPedalBracket::, *note RestCollision::, *note ScriptRow::, *note
SostenutoPedal::, *note SostenutoPedalLineSpanner::, *note
StaffSpacing::, *note StaffSymbol::, *note SustainPedal::, *note
SustainPedalLineSpanner::, *note TimeSignature::, *note UnaCordaPedal::,
*note UnaCordaPedalLineSpanner:: and *note VerticalAxisGroup::.

   This context sets the following properties:

   • Set grob-property ‘neutral-direction’ in *note Custos:: to ‘-1’.
   • Set grob-property ‘neutral-position’ in *note Custos:: to ‘3’.
   • Set grob-property ‘style’ in *note Custos:: to ‘'mensural’.
   • Set grob-property ‘thickness’ in *note StaffSymbol:: to ‘1.3’.
   • Set translator property ‘autoAccidentals’ to:
     '(Staff #<procedure #f (context pitch barnum measurepos)>
             #<procedure neo-modern-accidental-rule (context pitch barnum measurepos)>)
   • Set translator property ‘autoCautionaries’ to ‘'()’.
   • Set translator property ‘clefGlyph’ to ‘"clefs.petrucci.g"’.
   • Set translator property ‘clefPosition’ to ‘-2’.
   • Set translator property ‘clefTransposition’ to ‘0’.
   • Set translator property ‘createSpacing’ to ‘#t’.
   • Set translator property ‘extraNatural’ to ‘#f’.
   • Set translator property ‘ignoreFiguredBassRest’ to ‘#f’.
   • Set translator property ‘instrumentName’ to ‘'()’.
   • Set translator property ‘localAlterations’ to ‘'()’.
   • Set translator property ‘middleCClefPosition’ to ‘-6’.
   • Set translator property ‘middleCPosition’ to ‘-6’.
   • Set translator property ‘printKeyCancellation’ to ‘#f’.
   • Set translator property ‘shortInstrumentName’ to ‘'()’.

   This is not a ‘Bottom’ context; search for such a one will commence
after creating an implicit context of type *note PetrucciVoice::.

   Context PetrucciStaff can contain *note CueVoice::, *note NullVoice::
and *note PetrucciVoice::.

   This context is built from the following engraver(s):

     ‘*note Accidental_engraver::’
          Make accidentals.  Catch note heads, ties and notices
          key-change events.  This engraver usually lives at Staff
          level, but reads the settings for Accidental at ‘Voice’ level,
          so you can ‘\override’ them at ‘Voice’.

          Properties (read)

               ‘accidentalGrouping’ (symbol)
                    If set to ‘'voice’, accidentals on the same note in
                    different octaves may be horizontally staggered if
                    in different voices.

               ‘autoAccidentals’ (list)
                    List of different ways to typeset an accidental.

                    For determining when to print an accidental, several
                    different rules are tried.  The rule that gives the
                    highest number of accidentals is used.

                    Each entry in the list is either a symbol or a
                    procedure.

                    SYMBOL
                         The symbol is the name of the context in which
                         the following rules are to be applied.  For
                         example, if CONTEXT is *note
                         (lilypond-internals)Score:: then all staves
                         share accidentals, and if CONTEXT is *note
                         (lilypond-internals)Staff:: then all voices in
                         the same staff share accidentals, but staves do
                         not.

                    PROCEDURE
                         The procedure represents an accidental rule to
                         be applied to the previously specified context.

                         The procedure takes the following arguments:

                         ‘context’
                              The current context to which the rule
                              should be applied.

                         ‘pitch’
                              The pitch of the note to be evaluated.

                         ‘barnum’
                              The current bar number.

                         ‘measurepos’
                              The current measure position.

                         The procedure returns a pair of booleans.  The
                         first states whether an extra natural should be
                         added.  The second states whether an accidental
                         should be printed.  ‘(#t . #f)’ does not make
                         sense.

               ‘autoCautionaries’ (list)
                    List similar to ‘autoAccidentals’, but it controls
                    cautionary accidentals rather than normal ones.
                    Both lists are tried, and the one giving the most
                    accidentals wins.  In case of draw, a normal
                    accidental is typeset.

               ‘extraNatural’ (boolean)
                    Whether to typeset an extra natural sign before
                    accidentals that reduce the effect of a previous
                    alteration.

               ‘harmonicAccidentals’ (boolean)
                    If set, harmonic notes in chords get accidentals.

               ‘internalBarNumber’ (integer)
                    Contains the current barnumber.  This property is
                    used for internal timekeeping, among others by the
                    ‘Accidental_engraver’.

               ‘keyAlterations’ (list)
                    The current key signature.  This is an alist
                    containing ‘(STEP . ALTER)’ or ‘((OCTAVE . STEP) .
                    ALTER)’, where STEP is a number in the range 0 to 6
                    and ALTER a fraction, denoting alteration.  For
                    alterations, use symbols, e.g.  ‘keyAlterations =
                    #`((6 . ,FLAT))’.

               ‘localAlterations’ (list)
                    The key signature at this point in the measure.  The
                    format is the same as for ‘keyAlterations’, but can
                    also contain ‘((OCTAVE . NAME) . (ALTER BARNUMBER .
                    MEASUREPOSITION))’ pairs.

          Properties (write)

               ‘localAlterations’ (list)
                    The key signature at this point in the measure.  The
                    format is the same as for ‘keyAlterations’, but can
                    also contain ‘((OCTAVE . NAME) . (ALTER BARNUMBER .
                    MEASUREPOSITION))’ pairs.

          This engraver creates the following layout object(s):

          *note Accidental::, *note AccidentalCautionary::, *note
          AccidentalPlacement:: and *note AccidentalSuggestion::.

     ‘*note Axis_group_engraver::’
          Group all objects created in this context in a
          ‘VerticalAxisGroup’ spanner.

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘hasAxisGroup’ (boolean)
                    True if the current context is contained in an axis
                    group.

               ‘keepAliveInterfaces’ (list)
                    A list of symbols, signifying grob interfaces that
                    are worth keeping a staff with ‘remove-empty’ set
                    around for.

          Properties (write)

               ‘hasAxisGroup’ (boolean)
                    True if the current context is contained in an axis
                    group.

          This engraver creates the following layout object(s):

          *note VerticalAxisGroup::.

     ‘*note Bar_engraver::’
          Create barlines.  This engraver is controlled through the
          ‘whichBar’ property.  If it has no bar line to create, it will
          forbid a linebreak at this point.  This engraver is required
          to trigger the creation of clefs at the start of systems.

          Properties (read)

               ‘whichBar’ (string)
                    This property is read to determine what type of bar
                    line to create.

                    Example:

                         \set Staff.whichBar = ".|:"

                    This will create a start-repeat bar in this staff
                    only.  Valid values are described in
                    ‘scm/bar-line.scm’.

          Properties (write)

               ‘forbidBreak’ (boolean)
                    If set to ‘#t’, prevent a line break at this point.

          This engraver creates the following layout object(s):

          *note BarLine::.

     ‘*note Clef_engraver::’
          Determine and set reference point for pitches.

          Properties (read)

               ‘clefGlyph’ (string)
                    Name of the symbol within the music font.

               ‘clefPosition’ (number)
                    Where should the center of the clef symbol go,
                    measured in half staff spaces from the center of the
                    staff.

               ‘clefTransposition’ (integer)
                    Add this much extra transposition.  Values of 7 and
                    -7 are common.

               ‘clefTranspositionStyle’ (symbol)
                    Determines the way the ClefModifier grob is
                    displayed.  Possible values are ‘default’,
                    ‘parenthesized’ and ‘bracketed’.

               ‘explicitClefVisibility’ (vector)
                    ‘break-visibility’ function for clef changes.

               ‘forceClef’ (boolean)
                    Show clef symbol, even if it has not changed.  Only
                    active for the first clef after the property is set,
                    not for the full staff.

          This engraver creates the following layout object(s):

          *note Clef:: and *note ClefModifier::.

     ‘*note Collision_engraver::’
          Collect ‘NoteColumns’, and as soon as there are two or more,
          put them in a ‘NoteCollision’ object.

          This engraver creates the following layout object(s):

          *note NoteCollision::.

     ‘*note Cue_clef_engraver::’
          Determine and set reference point for pitches in cued voices.

          Properties (read)

               ‘clefTransposition’ (integer)
                    Add this much extra transposition.  Values of 7 and
                    -7 are common.

               ‘cueClefGlyph’ (string)
                    Name of the symbol within the music font.

               ‘cueClefPosition’ (number)
                    Where should the center of the clef symbol go,
                    measured in half staff spaces from the center of the
                    staff.

               ‘cueClefTransposition’ (integer)
                    Add this much extra transposition.  Values of 7 and
                    -7 are common.

               ‘cueClefTranspositionStyle’ (symbol)
                    Determines the way the ClefModifier grob is
                    displayed.  Possible values are ‘default’,
                    ‘parenthesized’ and ‘bracketed’.

               ‘explicitCueClefVisibility’ (vector)
                    ‘break-visibility’ function for cue clef changes.

               ‘middleCCuePosition’ (number)
                    The position of the middle C, as determined only by
                    the clef of the cue notes.  This can be calculated
                    by looking at ‘cueClefPosition’ and ‘cueClefGlyph’.

          This engraver creates the following layout object(s):

          *note ClefModifier::, *note CueClef:: and *note CueEndClef::.

     ‘*note Custos_engraver::’
          Engrave custodes.

          This engraver creates the following layout object(s):

          *note Custos::.

     ‘*note Dot_column_engraver::’
          Engrave dots on dotted notes shifted to the right of the note.
          If omitted, then dots appear on top of the notes.

          This engraver creates the following layout object(s):

          *note DotColumn::.

     ‘*note Figured_bass_engraver::’
          Make figured bass numbers.

          Music types accepted:

          *note bass-figure-event:: and *note rest-event::

          Properties (read)

               ‘figuredBassAlterationDirection’ (direction)
                    Where to put alterations relative to the main
                    figure.

               ‘figuredBassCenterContinuations’ (boolean)
                    Whether to vertically center pairs of extender
                    lines.  This does not work with three or more lines.

               ‘figuredBassFormatter’ (procedure)
                    A routine generating a markup for a bass figure.

               ‘ignoreFiguredBassRest’ (boolean)
                    Don’t swallow rest events.

               ‘implicitBassFigures’ (list)
                    A list of bass figures that are not printed as
                    numbers, but only as extender lines.

               ‘useBassFigureExtenders’ (boolean)
                    Whether to use extender lines for repeated bass
                    figures.

          This engraver creates the following layout object(s):

          *note BassFigure::, *note BassFigureAlignment::, *note
          BassFigureBracket::, *note BassFigureContinuation:: and *note
          BassFigureLine::.

     ‘*note Figured_bass_position_engraver::’
          Position figured bass alignments over notes.

          This engraver creates the following layout object(s):

          *note BassFigureAlignmentPositioning::.

     ‘*note Fingering_column_engraver::’
          Find potentially colliding scripts and put them into a
          ‘FingeringColumn’ object; that will fix the collisions.

          This engraver creates the following layout object(s):

          *note FingeringColumn::.

     ‘*note Font_size_engraver::’
          Put ‘fontSize’ into ‘font-size’ grob property.

          Properties (read)

               ‘fontSize’ (number)
                    The relative size of all grobs in a context.

     ‘*note Grob_pq_engraver::’
          Administrate when certain grobs (e.g., note heads) stop
          playing.

          Properties (read)

               ‘busyGrobs’ (list)
                    A queue of ‘(END-MOMENT . GROB)’ cons cells.  This
                    is for internal (C++) use only.  This property
                    contains the grobs which are still busy (e.g.  note
                    heads, spanners, etc.).

          Properties (write)

               ‘busyGrobs’ (list)
                    A queue of ‘(END-MOMENT . GROB)’ cons cells.  This
                    is for internal (C++) use only.  This property
                    contains the grobs which are still busy (e.g.  note
                    heads, spanners, etc.).

     ‘*note Instrument_name_engraver::’
          Create a system start text for instrument or vocal names.

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘instrumentName’ (markup)
                    The name to print left of a staff.  The
                    ‘instrumentName’ property labels the staff in the
                    first system, and the ‘shortInstrumentName’ property
                    labels following lines.

               ‘shortInstrumentName’ (markup)
                    See ‘instrumentName’.

               ‘shortVocalName’ (markup)
                    Name of a vocal line, short version.

               ‘vocalName’ (markup)
                    Name of a vocal line.

          This engraver creates the following layout object(s):

          *note InstrumentName::.

     ‘*note Key_engraver::’
          Engrave a key signature.

          Music types accepted:

          *note key-change-event::

          Properties (read)

               ‘createKeyOnClefChange’ (boolean)
                    Print a key signature whenever the clef is changed.

               ‘explicitKeySignatureVisibility’ (vector)
                    ‘break-visibility’ function for explicit key
                    changes.  ‘\override’ of the ‘break-visibility’
                    property will set the visibility for normal (i.e.,
                    at the start of the line) key signatures.

               ‘extraNatural’ (boolean)
                    Whether to typeset an extra natural sign before
                    accidentals that reduce the effect of a previous
                    alteration.

               ‘keyAlterationOrder’ (list)
                    An alist that defines in what order alterations
                    should be printed.  The format is ‘(STEP . ALTER)’,
                    where STEP is a number from 0 to 6 and ALTER from -2
                    (sharp) to 2 (flat).

               ‘keyAlterations’ (list)
                    The current key signature.  This is an alist
                    containing ‘(STEP . ALTER)’ or ‘((OCTAVE . STEP) .
                    ALTER)’, where STEP is a number in the range 0 to 6
                    and ALTER a fraction, denoting alteration.  For
                    alterations, use symbols, e.g.  ‘keyAlterations =
                    #`((6 . ,FLAT))’.

               ‘lastKeyAlterations’ (list)
                    Last key signature before a key signature change.

               ‘middleCClefPosition’ (number)
                    The position of the middle C, as determined only by
                    the clef.  This can be calculated by looking at
                    ‘clefPosition’ and ‘clefGlyph’.

               ‘printKeyCancellation’ (boolean)
                    Print restoration alterations before a key signature
                    change.

          Properties (write)

               ‘keyAlterations’ (list)
                    The current key signature.  This is an alist
                    containing ‘(STEP . ALTER)’ or ‘((OCTAVE . STEP) .
                    ALTER)’, where STEP is a number in the range 0 to 6
                    and ALTER a fraction, denoting alteration.  For
                    alterations, use symbols, e.g.  ‘keyAlterations =
                    #`((6 . ,FLAT))’.

               ‘lastKeyAlterations’ (list)
                    Last key signature before a key signature change.

               ‘tonic’ (pitch)
                    The tonic of the current scale.

          This engraver creates the following layout object(s):

          *note KeyCancellation:: and *note KeySignature::.

     ‘*note Ledger_line_engraver::’
          Create the spanner to draw ledger lines, and notices objects
          that need ledger lines.

          This engraver creates the following layout object(s):

          *note LedgerLineSpanner::.

     ‘*note Ottava_spanner_engraver::’
          Create a text spanner when the ottavation property changes.

          Properties (read)

               ‘currentMusicalColumn’ (graphical (layout) object)
                    Grob that is X-parent to all non-breakable items
                    (note heads, lyrics, etc.).

               ‘middleCOffset’ (number)
                    The offset of middle C from the position given by
                    ‘middleCClefPosition’ This is used for ottava
                    brackets.

               ‘ottavation’ (markup)
                    If set, the text for an ottava spanner.  Changing
                    this creates a new text spanner.

          This engraver creates the following layout object(s):

          *note OttavaBracket::.

     ‘*note Piano_pedal_align_engraver::’
          Align piano pedal symbols and brackets.

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

          This engraver creates the following layout object(s):

          *note SostenutoPedalLineSpanner::, *note
          SustainPedalLineSpanner:: and *note
          UnaCordaPedalLineSpanner::.

     ‘*note Piano_pedal_engraver::’
          Engrave piano pedal symbols and brackets.

          Music types accepted:

          *note sostenuto-event::, *note sustain-event:: and *note
          una-corda-event::

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘pedalSostenutoStrings’ (list)
                    See ‘pedalSustainStrings’.

               ‘pedalSostenutoStyle’ (symbol)
                    See ‘pedalSustainStyle’.

               ‘pedalSustainStrings’ (list)
                    A list of strings to print for sustain-pedal.
                    Format is ‘(UP UPDOWN DOWN)’, where each of the
                    three is the string to print when this is done with
                    the pedal.

               ‘pedalSustainStyle’ (symbol)
                    A symbol that indicates how to print sustain pedals:
                    ‘text’, ‘bracket’ or ‘mixed’ (both).

               ‘pedalUnaCordaStrings’ (list)
                    See ‘pedalSustainStrings’.

               ‘pedalUnaCordaStyle’ (symbol)
                    See ‘pedalSustainStyle’.

          This engraver creates the following layout object(s):

          *note PianoPedalBracket::, *note SostenutoPedal::, *note
          SustainPedal:: and *note UnaCordaPedal::.

     ‘*note Pure_from_neighbor_engraver::’
          Coordinates items that get their pure heights from their
          neighbors.

     ‘*note Rest_collision_engraver::’
          Handle collisions of rests.

          Properties (read)

               ‘busyGrobs’ (list)
                    A queue of ‘(END-MOMENT . GROB)’ cons cells.  This
                    is for internal (C++) use only.  This property
                    contains the grobs which are still busy (e.g.  note
                    heads, spanners, etc.).

          This engraver creates the following layout object(s):

          *note RestCollision::.

     ‘*note Script_row_engraver::’
          Determine order in horizontal side position elements.

          This engraver creates the following layout object(s):

          *note ScriptRow::.

     ‘*note Separating_line_group_engraver::’
          Generate objects for computing spacing parameters.

          Properties (read)

               ‘createSpacing’ (boolean)
                    Create ‘StaffSpacing’ objects?  Should be set for
                    staves.

          Properties (write)

               ‘hasStaffSpacing’ (boolean)
                    True if the current ‘CommandColumn’ contains items
                    that will affect spacing.

          This engraver creates the following layout object(s):

          *note StaffSpacing::.

     ‘*note Staff_collecting_engraver::’
          Maintain the ‘stavesFound’ variable.

          Properties (read)

               ‘stavesFound’ (list of grobs)
                    A list of all staff-symbols found.

          Properties (write)

               ‘stavesFound’ (list of grobs)
                    A list of all staff-symbols found.

     ‘*note Staff_symbol_engraver::’
          Create the constellation of five (default) staff lines.

          Music types accepted:

          *note staff-span-event::

          This engraver creates the following layout object(s):

          *note StaffSymbol::.

     ‘*note Time_signature_engraver::’
          Create a *note TimeSignature:: whenever
          ‘timeSignatureFraction’ changes.

          Music types accepted:

          *note time-signature-event::

          Properties (read)

               ‘initialTimeSignatureVisibility’ (vector)
                    break visibility for the initial time signature.

               ‘partialBusy’ (boolean)
                    Signal that \partial acts at the current timestep.

               ‘timeSignatureFraction’ (fraction, as pair)
                    A pair of numbers, signifying the time signature.
                    For example, ‘'(4 . 4)’ is a 4/4 time signature.

          This engraver creates the following layout object(s):

          *note TimeSignature::.


File: lilypond-internals.info,  Node: PetrucciVoice,  Next: PianoStaff,  Prev: PetrucciStaff,  Up: Contexts

2.1.23 PetrucciVoice
--------------------

Same as ‘Voice’ context, except that it is accommodated for typesetting
a piece in Petrucci style.

   This context also accepts commands for the following context(s):

   Voice.

   This context creates the following layout object(s):

   *note Arpeggio::, *note Beam::, *note BendAfter::, *note
BreathingSign::, *note ClusterSpanner::, *note ClusterSpannerBeacon::,
*note CombineTextScript::, *note Dots::, *note DoublePercentRepeat::,
*note DoublePercentRepeatCounter::, *note DoubleRepeatSlash::, *note
DynamicLineSpanner::, *note DynamicText::, *note DynamicTextSpanner::,
*note Fingering::, *note Flag::, *note Glissando::, *note Hairpin::,
*note InstrumentSwitch::, *note LaissezVibrerTie::, *note
LaissezVibrerTieColumn::, *note MensuralLigature::, *note
MultiMeasureRest::, *note MultiMeasureRestNumber::, *note
MultiMeasureRestText::, *note NoteColumn::, *note NoteHead::, *note
NoteSpacing::, *note PercentRepeat::, *note PercentRepeatCounter::,
*note PhrasingSlur::, *note RepeatSlash::, *note RepeatTie::, *note
RepeatTieColumn::, *note Rest::, *note Script::, *note ScriptColumn::,
*note Slur::, *note Stem::, *note StemStub::, *note StemTremolo::, *note
StringNumber::, *note StrokeFinger::, *note TextScript::, *note
TextSpanner::, *note Tie::, *note TieColumn::, *note
TrillPitchAccidental::, *note TrillPitchGroup::, *note TrillPitchHead::,
*note TrillSpanner::, *note TupletBracket::, *note TupletNumber:: and
*note VoiceFollower::.

   This context sets the following properties:

   • Set grob-property ‘length’ in *note Stem:: to ‘5’.
   • Set grob-property ‘style’ in *note NoteHead:: to ‘'petrucci’.
   • Set grob-property ‘style’ in *note Rest:: to ‘'mensural’.
   • Set grob-property ‘thickness’ in *note Stem:: to ‘1.7’.
   • Set translator property ‘autoBeaming’ to ‘#f’.

   This is a ‘Bottom’ context; no contexts will be created implicitly
from it.

   This context cannot contain other contexts.

   This context is built from the following engraver(s):

     ‘*note Arpeggio_engraver::’
          Generate an Arpeggio symbol.

          Music types accepted:

          *note arpeggio-event::

          This engraver creates the following layout object(s):

          *note Arpeggio::.

     ‘*note Auto_beam_engraver::’
          Generate beams based on measure characteristics and observed
          Stems.  Uses ‘baseMoment’, ‘beatStructure’, ‘beamExceptions’,
          ‘measureLength’, and ‘measurePosition’ to decide when to start
          and stop a beam.  Overriding beaming is done through *note
          Stem_engraver:: properties ‘stemLeftBeamCount’ and
          ‘stemRightBeamCount’.

          Music types accepted:

          *note beam-forbid-event::

          Properties (read)

               ‘autoBeaming’ (boolean)
                    If set to true then beams are generated
                    automatically.

               ‘baseMoment’ (moment)
                    Smallest unit of time that will stand on its own as
                    a subdivided section.

               ‘beamExceptions’ (list)
                    An alist of exceptions to autobeam rules that
                    normally end on beats.

               ‘beamHalfMeasure’ (boolean)
                    Whether to allow a beam to begin halfway through the
                    measure in triple time, which could look like 6/8.

               ‘beatStructure’ (list)
                    List of ‘baseMoment’s that are combined to make
                    beats.

               ‘subdivideBeams’ (boolean)
                    If set, multiple beams will be subdivided at
                    ‘baseMoment’ positions by only drawing one beam over
                    the beat.

          This engraver creates the following layout object(s):

          *note Beam::.

     ‘*note Beam_engraver::’
          Handle ‘Beam’ events by engraving beams.  If omitted, then
          notes are printed with flags instead of beams.

          Music types accepted:

          *note beam-event::

          Properties (read)

               ‘baseMoment’ (moment)
                    Smallest unit of time that will stand on its own as
                    a subdivided section.

               ‘beamMelismaBusy’ (boolean)
                    Signal if a beam is present.

               ‘beatStructure’ (list)
                    List of ‘baseMoment’s that are combined to make
                    beats.

               ‘subdivideBeams’ (boolean)
                    If set, multiple beams will be subdivided at
                    ‘baseMoment’ positions by only drawing one beam over
                    the beat.

          Properties (write)

               ‘forbidBreak’ (boolean)
                    If set to ‘#t’, prevent a line break at this point.

          This engraver creates the following layout object(s):

          *note Beam::.

     ‘*note Bend_engraver::’
          Create fall spanners.

          Music types accepted:

          *note bend-after-event::

          This engraver creates the following layout object(s):

          *note BendAfter::.

     ‘*note Breathing_sign_engraver::’
          Create a breathing sign.

          Music types accepted:

          *note breathing-event::

          This engraver creates the following layout object(s):

          *note BreathingSign::.

     ‘*note Chord_tremolo_engraver::’
          Generate beams for tremolo repeats.

          Music types accepted:

          *note tremolo-span-event::

          This engraver creates the following layout object(s):

          *note Beam::.

     ‘*note Cluster_spanner_engraver::’
          Engrave a cluster using ‘Spanner’ notation.

          Music types accepted:

          *note cluster-note-event::

          This engraver creates the following layout object(s):

          *note ClusterSpanner:: and *note ClusterSpannerBeacon::.

     ‘*note Dots_engraver::’
          Create *note Dots:: objects for *note
          rhythmic-head-interface::s.

          This engraver creates the following layout object(s):

          *note Dots::.

     ‘*note Double_percent_repeat_engraver::’
          Make double measure repeats.

          Music types accepted:

          *note double-percent-event::

          Properties (read)

               ‘countPercentRepeats’ (boolean)
                    If set, produce counters for percent repeats.

               ‘measureLength’ (moment)
                    Length of one measure in the current time signature.

               ‘repeatCountVisibility’ (procedure)
                    A procedure taking as arguments an integer and
                    context, returning whether the corresponding percent
                    repeat number should be printed when
                    ‘countPercentRepeats’ is set.

          Properties (write)

               ‘forbidBreak’ (boolean)
                    If set to ‘#t’, prevent a line break at this point.

          This engraver creates the following layout object(s):

          *note DoublePercentRepeat:: and *note
          DoublePercentRepeatCounter::.

     ‘*note Dynamic_align_engraver::’
          Align hairpins and dynamic texts on a horizontal line.

          Properties (read)

               ‘currentMusicalColumn’ (graphical (layout) object)
                    Grob that is X-parent to all non-breakable items
                    (note heads, lyrics, etc.).

          This engraver creates the following layout object(s):

          *note DynamicLineSpanner::.

     ‘*note Dynamic_engraver::’
          Create hairpins, dynamic texts and dynamic text spanners.

          Music types accepted:

          *note absolute-dynamic-event::, *note break-span-event:: and
          *note span-dynamic-event::

          Properties (read)

               ‘crescendoSpanner’ (symbol)
                    The type of spanner to be used for crescendi.
                    Available values are ‘hairpin’ and ‘text’.  If
                    unset, a hairpin crescendo is used.

               ‘crescendoText’ (markup)
                    The text to print at start of non-hairpin crescendo,
                    i.e., ‘cresc.’.

               ‘currentMusicalColumn’ (graphical (layout) object)
                    Grob that is X-parent to all non-breakable items
                    (note heads, lyrics, etc.).

               ‘decrescendoSpanner’ (symbol)
                    The type of spanner to be used for decrescendi.
                    Available values are ‘hairpin’ and ‘text’.  If
                    unset, a hairpin decrescendo is used.

               ‘decrescendoText’ (markup)
                    The text to print at start of non-hairpin
                    decrescendo, i.e., ‘dim.’.

          This engraver creates the following layout object(s):

          *note DynamicText::, *note DynamicTextSpanner:: and *note
          Hairpin::.

     ‘*note Fingering_engraver::’
          Create fingering scripts.

          Music types accepted:

          *note fingering-event::

          This engraver creates the following layout object(s):

          *note Fingering::.

     ‘*note Font_size_engraver::’
          Put ‘fontSize’ into ‘font-size’ grob property.

          Properties (read)

               ‘fontSize’ (number)
                    The relative size of all grobs in a context.

     ‘*note Forbid_line_break_engraver::’
          Forbid line breaks when note heads are still playing at some
          point.

          Properties (read)

               ‘busyGrobs’ (list)
                    A queue of ‘(END-MOMENT . GROB)’ cons cells.  This
                    is for internal (C++) use only.  This property
                    contains the grobs which are still busy (e.g.  note
                    heads, spanners, etc.).

          Properties (write)

               ‘forbidBreak’ (boolean)
                    If set to ‘#t’, prevent a line break at this point.

     ‘*note Glissando_engraver::’
          Engrave glissandi.

          Music types accepted:

          *note glissando-event::

          Properties (read)

               ‘glissandoMap’ (list)
                    A map in the form of ’((source1 .  target1) (source2
                    .  target2) (sourcen .  targetn)) showing the
                    glissandi to be drawn for note columns.  The value
                    ’() will default to ’((0 .  0) (1 .  1) (n .  n)),
                    where n is the minimal number of note-heads in the
                    two note columns between which the glissandi occur.

          This engraver creates the following layout object(s):

          *note Glissando::.

     ‘*note Grace_auto_beam_engraver::’
          Generates one autobeam group across an entire grace phrase.
          As usual, any manual beaming or ‘\noBeam’ will block
          autobeaming, just like setting the context property
          ‘autoBeaming’ to ‘##f’.

          Music types accepted:

          *note beam-forbid-event::

          Properties (read)

               ‘autoBeaming’ (boolean)
                    If set to true then beams are generated
                    automatically.

          This engraver creates the following layout object(s):

          *note Beam::.

     ‘*note Grace_beam_engraver::’
          Handle ‘Beam’ events by engraving beams.  If omitted, then
          notes are printed with flags instead of beams.  Only engraves
          beams when we are at grace points in time.

          Music types accepted:

          *note beam-event::

          Properties (read)

               ‘baseMoment’ (moment)
                    Smallest unit of time that will stand on its own as
                    a subdivided section.

               ‘beamMelismaBusy’ (boolean)
                    Signal if a beam is present.

               ‘beatStructure’ (list)
                    List of ‘baseMoment’s that are combined to make
                    beats.

               ‘subdivideBeams’ (boolean)
                    If set, multiple beams will be subdivided at
                    ‘baseMoment’ positions by only drawing one beam over
                    the beat.

          This engraver creates the following layout object(s):

          *note Beam::.

     ‘*note Grace_engraver::’
          Set font size and other properties for grace notes.

          Properties (read)

               ‘graceSettings’ (list)
                    Overrides for grace notes.  This property should be
                    manipulated through the ‘add-grace-property’
                    function.

     ‘*note Grob_pq_engraver::’
          Administrate when certain grobs (e.g., note heads) stop
          playing.

          Properties (read)

               ‘busyGrobs’ (list)
                    A queue of ‘(END-MOMENT . GROB)’ cons cells.  This
                    is for internal (C++) use only.  This property
                    contains the grobs which are still busy (e.g.  note
                    heads, spanners, etc.).

          Properties (write)

               ‘busyGrobs’ (list)
                    A queue of ‘(END-MOMENT . GROB)’ cons cells.  This
                    is for internal (C++) use only.  This property
                    contains the grobs which are still busy (e.g.  note
                    heads, spanners, etc.).

     ‘*note Instrument_switch_engraver::’
          Create a cue text for taking instrument.

          Properties (read)

               ‘instrumentCueName’ (markup)
                    The name to print if another instrument is to be
                    taken.

          This engraver creates the following layout object(s):

          *note InstrumentSwitch::.

     ‘*note Laissez_vibrer_engraver::’
          Create laissez vibrer items.

          Music types accepted:

          *note laissez-vibrer-event::

          This engraver creates the following layout object(s):

          *note LaissezVibrerTie:: and *note LaissezVibrerTieColumn::.

     ‘*note Mensural_ligature_engraver::’
          Handle ‘Mensural_ligature_events’ by glueing special ligature
          heads together.

          Music types accepted:

          *note ligature-event::

          This engraver creates the following layout object(s):

          *note MensuralLigature::.

     ‘*note Multi_measure_rest_engraver::’
          Engrave multi-measure rests that are produced with ‘R’.  It
          reads ‘measurePosition’ and ‘internalBarNumber’ to determine
          what number to print over the *note MultiMeasureRest::.

          Music types accepted:

          *note multi-measure-rest-event:: and *note
          multi-measure-text-event::

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘internalBarNumber’ (integer)
                    Contains the current barnumber.  This property is
                    used for internal timekeeping, among others by the
                    ‘Accidental_engraver’.

               ‘measurePosition’ (moment)
                    How much of the current measure have we had.  This
                    can be set manually to create incomplete measures.

               ‘restNumberThreshold’ (number)
                    If a multimeasure rest has more measures than this,
                    a number is printed.

               ‘whichBar’ (string)
                    This property is read to determine what type of bar
                    line to create.

                    Example:

                         \set Staff.whichBar = ".|:"

                    This will create a start-repeat bar in this staff
                    only.  Valid values are described in
                    ‘scm/bar-line.scm’.

          This engraver creates the following layout object(s):

          *note MultiMeasureRest::, *note MultiMeasureRestNumber:: and
          *note MultiMeasureRestText::.

     ‘*note New_fingering_engraver::’
          Create fingering scripts for notes in a new chord.  This
          engraver is ill-named, since it also takes care of
          articulations and harmonic note heads.

          Properties (read)

               ‘fingeringOrientations’ (list)
                    A list of symbols, containing ‘left’, ‘right’, ‘up’
                    and/or ‘down’.  This list determines where
                    fingerings are put relative to the chord being
                    fingered.

               ‘harmonicDots’ (boolean)
                    If set, harmonic notes in dotted chords get dots.

               ‘stringNumberOrientations’ (list)
                    See ‘fingeringOrientations’.

               ‘strokeFingerOrientations’ (list)
                    See ‘fingeringOrientations’.

          This engraver creates the following layout object(s):

          *note Fingering::, *note Script::, *note StringNumber:: and
          *note StrokeFinger::.

     ‘*note Note_head_line_engraver::’
          Engrave a line between two note heads in a staff switch if
          ‘followVoice’ is set.

          Properties (read)

               ‘followVoice’ (boolean)
                    If set, note heads are tracked across staff switches
                    by a thin line.

          This engraver creates the following layout object(s):

          *note VoiceFollower::.

     ‘*note Note_heads_engraver::’
          Generate note heads.

          Music types accepted:

          *note note-event::

          Properties (read)

               ‘middleCPosition’ (number)
                    The place of the middle C, measured in half
                    staff-spaces.  Usually determined by looking at
                    ‘middleCClefPosition’ and ‘middleCOffset’.

               ‘staffLineLayoutFunction’ (procedure)
                    Layout of staff lines, ‘traditional’, or ‘semitone’.

          This engraver creates the following layout object(s):

          *note NoteHead::.

     ‘*note Note_spacing_engraver::’
          Generate ‘NoteSpacing’, an object linking horizontal lines for
          use in spacing.

          This engraver creates the following layout object(s):

          *note NoteSpacing::.

     ‘*note Part_combine_engraver::’
          Part combine engraver for orchestral scores: Print markings
          ‘a2’, ‘Solo’, ‘Solo II’, and ‘unisono’.

          Music types accepted:

          *note note-event:: and *note part-combine-event::

          Properties (read)

               ‘aDueText’ (markup)
                    Text to print at a unisono passage.

               ‘partCombineTextsOnNote’ (boolean)
                    Print part-combine texts only on the next note
                    rather than immediately on rests or skips.

               ‘printPartCombineTexts’ (boolean)
                    Set ‘Solo’ and ‘A due’ texts in the part combiner?

               ‘soloIIText’ (markup)
                    The text for the start of a solo for voice ‘two’
                    when part-combining.

               ‘soloText’ (markup)
                    The text for the start of a solo when
                    part-combining.

          This engraver creates the following layout object(s):

          *note CombineTextScript::.

     ‘*note Percent_repeat_engraver::’
          Make whole measure repeats.

          Music types accepted:

          *note percent-event::

          Properties (read)

               ‘countPercentRepeats’ (boolean)
                    If set, produce counters for percent repeats.

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘repeatCountVisibility’ (procedure)
                    A procedure taking as arguments an integer and
                    context, returning whether the corresponding percent
                    repeat number should be printed when
                    ‘countPercentRepeats’ is set.

          This engraver creates the following layout object(s):

          *note PercentRepeat:: and *note PercentRepeatCounter::.

     ‘*note Phrasing_slur_engraver::’
          Print phrasing slurs.  Similar to *note Slur_engraver::.

          Music types accepted:

          *note note-event:: and *note phrasing-slur-event::

          This engraver creates the following layout object(s):

          *note PhrasingSlur::.

     ‘*note Pitched_trill_engraver::’
          Print the bracketed note head after a note head with trill.

          This engraver creates the following layout object(s):

          *note TrillPitchAccidental::, *note TrillPitchGroup:: and
          *note TrillPitchHead::.

     ‘*note Repeat_tie_engraver::’
          Create repeat ties.

          Music types accepted:

          *note repeat-tie-event::

          This engraver creates the following layout object(s):

          *note RepeatTie:: and *note RepeatTieColumn::.

     ‘*note Rest_engraver::’
          Engrave rests.

          Music types accepted:

          *note rest-event::

          Properties (read)

               ‘middleCPosition’ (number)
                    The place of the middle C, measured in half
                    staff-spaces.  Usually determined by looking at
                    ‘middleCClefPosition’ and ‘middleCOffset’.

          This engraver creates the following layout object(s):

          *note Rest::.

     ‘*note Rhythmic_column_engraver::’
          Generate ‘NoteColumn’, an object that groups stems, note
          heads, and rests.

          This engraver creates the following layout object(s):

          *note NoteColumn::.

     ‘*note Script_column_engraver::’
          Find potentially colliding scripts and put them into a
          ‘ScriptColumn’ object; that will fix the collisions.

          This engraver creates the following layout object(s):

          *note ScriptColumn::.

     ‘*note Script_engraver::’
          Handle note scripted articulations.

          Music types accepted:

          *note articulation-event::

          Properties (read)

               ‘scriptDefinitions’ (list)
                    The description of scripts.  This is used by the
                    ‘Script_engraver’ for typesetting note-superscripts
                    and subscripts.  See ‘scm/script.scm’ for more
                    information.

          This engraver creates the following layout object(s):

          *note Script::.

     ‘*note Slash_repeat_engraver::’
          Make beat repeats.

          Music types accepted:

          *note repeat-slash-event::

          This engraver creates the following layout object(s):

          *note DoubleRepeatSlash:: and *note RepeatSlash::.

     ‘*note Slur_engraver::’
          Build slur grobs from slur events.

          Music types accepted:

          *note note-event:: and *note slur-event::

          Properties (read)

               ‘doubleSlurs’ (boolean)
                    If set, two slurs are created for every slurred
                    note, one above and one below the chord.

               ‘slurMelismaBusy’ (boolean)
                    Signal if a slur is present.

          This engraver creates the following layout object(s):

          *note Slur::.

     ‘*note Spanner_break_forbid_engraver::’
          Forbid breaks in certain spanners.

     ‘*note Stem_engraver::’
          Create stems, flags and single-stem tremolos.  It also works
          together with the beam engraver for overriding beaming.

          Music types accepted:

          *note tremolo-event:: and *note tuplet-span-event::

          Properties (read)

               ‘stemLeftBeamCount’ (integer)
                    Specify the number of beams to draw on the left side
                    of the next note.  Overrides automatic beaming.  The
                    value is only used once, and then it is erased.

               ‘stemRightBeamCount’ (integer)
                    See ‘stemLeftBeamCount’.

               ‘whichBar’ (string)
                    This property is read to determine what type of bar
                    line to create.

                    Example:

                         \set Staff.whichBar = ".|:"

                    This will create a start-repeat bar in this staff
                    only.  Valid values are described in
                    ‘scm/bar-line.scm’.

          This engraver creates the following layout object(s):

          *note Flag::, *note Stem::, *note StemStub:: and *note
          StemTremolo::.

     ‘*note Text_engraver::’
          Create text scripts.

          Music types accepted:

          *note text-script-event::

          This engraver creates the following layout object(s):

          *note TextScript::.

     ‘*note Text_spanner_engraver::’
          Create text spanner from an event.

          Music types accepted:

          *note text-span-event::

          Properties (read)

               ‘currentMusicalColumn’ (graphical (layout) object)
                    Grob that is X-parent to all non-breakable items
                    (note heads, lyrics, etc.).

          This engraver creates the following layout object(s):

          *note TextSpanner::.

     ‘*note Tie_engraver::’
          Generate ties between note heads of equal pitch.

          Music types accepted:

          *note tie-event::

          Properties (read)

               ‘skipTypesetting’ (boolean)
                    If true, no typesetting is done, speeding up the
                    interpretation phase.  Useful for debugging large
                    scores.

               ‘tieWaitForNote’ (boolean)
                    If true, tied notes do not have to follow each other
                    directly.  This can be used for writing out
                    arpeggios.

          Properties (write)

               ‘tieMelismaBusy’ (boolean)
                    Signal whether a tie is present.

          This engraver creates the following layout object(s):

          *note Tie:: and *note TieColumn::.

     ‘*note Trill_spanner_engraver::’
          Create trill spanner from an event.

          Music types accepted:

          *note trill-span-event::

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘currentMusicalColumn’ (graphical (layout) object)
                    Grob that is X-parent to all non-breakable items
                    (note heads, lyrics, etc.).

          This engraver creates the following layout object(s):

          *note TrillSpanner::.

     ‘*note Tuplet_engraver::’
          Catch tuplet events and generate appropriate bracket.

          Music types accepted:

          *note tuplet-span-event::

          Properties (read)

               ‘tupletFullLength’ (boolean)
                    If set, the tuplet is printed up to the start of the
                    next note.

               ‘tupletFullLengthNote’ (boolean)
                    If set, end at the next note, otherwise end on the
                    matter (time signatures, etc.)  before the note.

          This engraver creates the following layout object(s):

          *note TupletBracket:: and *note TupletNumber::.


File: lilypond-internals.info,  Node: PianoStaff,  Next: RhythmicStaff,  Prev: PetrucciVoice,  Up: Contexts

2.1.24 PianoStaff
-----------------

Just like ‘GrandStaff’, but the staves are only removed together, never
separately.

   This context also accepts commands for the following context(s):

   GrandStaff.

   This context creates the following layout object(s):

   *note Arpeggio::, *note InstrumentName::, *note SpanBar::, *note
SpanBarStub::, *note SystemStartBar::, *note SystemStartBrace::, *note
SystemStartBracket::, *note SystemStartSquare:: and *note
VerticalAlignment::.

   This context sets the following properties:

   • Set grob-property ‘extra-spacing-width’ in *note DynamicText:: to
     ‘#f’.
   • Set translator property ‘instrumentName’ to ‘'()’.
   • Set translator property ‘instrumentName’ to ‘'()’.
   • Set translator property ‘localAlterations’ to ‘'()’.
   • Set translator property ‘shortInstrumentName’ to ‘'()’.
   • Set translator property ‘shortInstrumentName’ to ‘'()’.
   • Set translator property ‘systemStartDelimiter’ to
     ‘'SystemStartBrace’.
   • Set translator property ‘topLevelAlignment’ to ‘#f’.
   • Set translator property ‘topLevelAlignment’ to ‘#f’.

   This is not a ‘Bottom’ context; search for such a one will commence
after creating an implicit context of type *note Staff::.

   Context PianoStaff can contain *note ChordNames::, *note DrumStaff::,
*note Dynamics::, *note FiguredBass::, *note Lyrics::, *note
RhythmicStaff::, *note Staff:: and *note TabStaff::.

   This context is built from the following engraver(s):

     ‘*note Instrument_name_engraver::’
          Create a system start text for instrument or vocal names.

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘instrumentName’ (markup)
                    The name to print left of a staff.  The
                    ‘instrumentName’ property labels the staff in the
                    first system, and the ‘shortInstrumentName’ property
                    labels following lines.

               ‘shortInstrumentName’ (markup)
                    See ‘instrumentName’.

               ‘shortVocalName’ (markup)
                    Name of a vocal line, short version.

               ‘vocalName’ (markup)
                    Name of a vocal line.

          This engraver creates the following layout object(s):

          *note InstrumentName::.

     ‘*note Keep_alive_together_engraver::’
          This engraver collects all ‘Hara_kiri_group_spanner’s that are
          created in contexts at or below its own.  These spanners are
          then tied together so that one will be removed only if all are
          removed.  For example, if a ‘StaffGroup’ uses this engraver,
          then the staves in the group will all be visible as long as
          there is a note in at least one of them.

     ‘*note Span_arpeggio_engraver::’
          Make arpeggios that span multiple staves.

          Properties (read)

               ‘connectArpeggios’ (boolean)
                    If set, connect arpeggios across piano staff.

          This engraver creates the following layout object(s):

          *note Arpeggio::.

     ‘*note Span_bar_engraver::’
          Make cross-staff bar lines: It catches all normal bar lines
          and draws a single span bar across them.

          This engraver creates the following layout object(s):

          *note SpanBar::.

     ‘*note Span_bar_stub_engraver::’
          Make stubs for span bars in all contexts that the span bars
          cross.

          This engraver creates the following layout object(s):

          *note SpanBarStub::.

     ‘*note System_start_delimiter_engraver::’
          Create a system start delimiter (i.e., a ‘SystemStartBar’,
          ‘SystemStartBrace’, ‘SystemStartBracket’ or
          ‘SystemStartSquare’ spanner).

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘systemStartDelimiter’ (symbol)
                    Which grob to make for the start of the
                    system/staff?  Set to ‘SystemStartBrace’,
                    ‘SystemStartBracket’ or ‘SystemStartBar’.

               ‘systemStartDelimiterHierarchy’ (pair)
                    A nested list, indicating the nesting of a start
                    delimiters.

          This engraver creates the following layout object(s):

          *note SystemStartBar::, *note SystemStartBrace::, *note
          SystemStartBracket:: and *note SystemStartSquare::.

     ‘*note Vertical_align_engraver::’
          Catch groups (staves, lyrics lines, etc.)  and stack them
          vertically.

          Properties (read)

               ‘alignAboveContext’ (string)
                    Where to insert newly created context in vertical
                    alignment.

               ‘alignBelowContext’ (string)
                    Where to insert newly created context in vertical
                    alignment.

               ‘hasAxisGroup’ (boolean)
                    True if the current context is contained in an axis
                    group.

          This engraver creates the following layout object(s):

          *note VerticalAlignment::.

     ‘*note Vertical_align_engraver::’
          Catch groups (staves, lyrics lines, etc.)  and stack them
          vertically.

          Properties (read)

               ‘alignAboveContext’ (string)
                    Where to insert newly created context in vertical
                    alignment.

               ‘alignBelowContext’ (string)
                    Where to insert newly created context in vertical
                    alignment.

               ‘hasAxisGroup’ (boolean)
                    True if the current context is contained in an axis
                    group.

          This engraver creates the following layout object(s):

          *note VerticalAlignment::.


File: lilypond-internals.info,  Node: RhythmicStaff,  Next: Score,  Prev: PianoStaff,  Up: Contexts

2.1.25 RhythmicStaff
--------------------

A context like ‘Staff’ but for printing rhythms.  Pitches are ignored;
the notes are printed on one line.

   This context also accepts commands for the following context(s):

   Staff.

   This context creates the following layout object(s):

   *note BarLine::, *note DotColumn::, *note InstrumentName::, *note
LedgerLineSpanner::, *note StaffSpacing::, *note StaffSymbol::, *note
TimeSignature:: and *note VerticalAxisGroup::.

   This context sets the following properties:

   • Set grob-property ‘line-count’ in *note StaffSymbol:: to ‘1’.
   • Set grob-property ‘neutral-direction’ in *note Beam:: to ‘1’.
   • Set grob-property ‘neutral-direction’ in *note Stem:: to ‘1’.
   • Set grob-property ‘staff-padding’ in *note VoltaBracket:: to ‘3’.
   • Set translator property ‘createSpacing’ to ‘#t’.
   • Set translator property ‘instrumentName’ to ‘'()’.
   • Set translator property ‘localAlterations’ to ‘'()’.
   • Set translator property ‘shortInstrumentName’ to ‘'()’.
   • Set translator property ‘squashedPosition’ to ‘0’.

   This is not a ‘Bottom’ context; search for such a one will commence
after creating an implicit context of type *note Voice::.

   Context RhythmicStaff can contain *note CueVoice::, *note NullVoice::
and *note Voice::.

   This context is built from the following engraver(s):

     ‘*note Axis_group_engraver::’
          Group all objects created in this context in a
          ‘VerticalAxisGroup’ spanner.

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘hasAxisGroup’ (boolean)
                    True if the current context is contained in an axis
                    group.

               ‘keepAliveInterfaces’ (list)
                    A list of symbols, signifying grob interfaces that
                    are worth keeping a staff with ‘remove-empty’ set
                    around for.

          Properties (write)

               ‘hasAxisGroup’ (boolean)
                    True if the current context is contained in an axis
                    group.

          This engraver creates the following layout object(s):

          *note VerticalAxisGroup::.

     ‘*note Bar_engraver::’
          Create barlines.  This engraver is controlled through the
          ‘whichBar’ property.  If it has no bar line to create, it will
          forbid a linebreak at this point.  This engraver is required
          to trigger the creation of clefs at the start of systems.

          Properties (read)

               ‘whichBar’ (string)
                    This property is read to determine what type of bar
                    line to create.

                    Example:

                         \set Staff.whichBar = ".|:"

                    This will create a start-repeat bar in this staff
                    only.  Valid values are described in
                    ‘scm/bar-line.scm’.

          Properties (write)

               ‘forbidBreak’ (boolean)
                    If set to ‘#t’, prevent a line break at this point.

          This engraver creates the following layout object(s):

          *note BarLine::.

     ‘*note Dot_column_engraver::’
          Engrave dots on dotted notes shifted to the right of the note.
          If omitted, then dots appear on top of the notes.

          This engraver creates the following layout object(s):

          *note DotColumn::.

     ‘*note Font_size_engraver::’
          Put ‘fontSize’ into ‘font-size’ grob property.

          Properties (read)

               ‘fontSize’ (number)
                    The relative size of all grobs in a context.

     ‘*note Instrument_name_engraver::’
          Create a system start text for instrument or vocal names.

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘instrumentName’ (markup)
                    The name to print left of a staff.  The
                    ‘instrumentName’ property labels the staff in the
                    first system, and the ‘shortInstrumentName’ property
                    labels following lines.

               ‘shortInstrumentName’ (markup)
                    See ‘instrumentName’.

               ‘shortVocalName’ (markup)
                    Name of a vocal line, short version.

               ‘vocalName’ (markup)
                    Name of a vocal line.

          This engraver creates the following layout object(s):

          *note InstrumentName::.

     ‘*note Ledger_line_engraver::’
          Create the spanner to draw ledger lines, and notices objects
          that need ledger lines.

          This engraver creates the following layout object(s):

          *note LedgerLineSpanner::.

     ‘*note Pitch_squash_engraver::’
          Set the vertical position of note heads to ‘squashedPosition’,
          if that property is set.  This can be used to make a
          single-line staff demonstrating the rhythm of a melody.

          Properties (read)

               ‘squashedPosition’ (integer)
                    Vertical position of squashing for *note
                    (lilypond-internals)Pitch_squash_engraver::.

     ‘*note Separating_line_group_engraver::’
          Generate objects for computing spacing parameters.

          Properties (read)

               ‘createSpacing’ (boolean)
                    Create ‘StaffSpacing’ objects?  Should be set for
                    staves.

          Properties (write)

               ‘hasStaffSpacing’ (boolean)
                    True if the current ‘CommandColumn’ contains items
                    that will affect spacing.

          This engraver creates the following layout object(s):

          *note StaffSpacing::.

     ‘*note Staff_symbol_engraver::’
          Create the constellation of five (default) staff lines.

          Music types accepted:

          *note staff-span-event::

          This engraver creates the following layout object(s):

          *note StaffSymbol::.

     ‘*note Time_signature_engraver::’
          Create a *note TimeSignature:: whenever
          ‘timeSignatureFraction’ changes.

          Music types accepted:

          *note time-signature-event::

          Properties (read)

               ‘initialTimeSignatureVisibility’ (vector)
                    break visibility for the initial time signature.

               ‘partialBusy’ (boolean)
                    Signal that \partial acts at the current timestep.

               ‘timeSignatureFraction’ (fraction, as pair)
                    A pair of numbers, signifying the time signature.
                    For example, ‘'(4 . 4)’ is a 4/4 time signature.

          This engraver creates the following layout object(s):

          *note TimeSignature::.


File: lilypond-internals.info,  Node: Score,  Next: Staff,  Prev: RhythmicStaff,  Up: Contexts

2.1.26 Score
------------

This is the top level notation context.  No other context can contain a
‘Score’ context.  This context handles the administration of time
signatures.  It also makes sure that items such as clefs, time
signatures, and key-signatures are aligned across staves.

   You cannot explicitly instantiate a ‘Score’ context (since it is not
contained in any other context).  It is instantiated automatically when
an output definition (a ‘\score’ or ‘\layout’ block) is processed.

   This context also accepts commands for the following context(s):

   Timing.

   This context creates the following layout object(s):

   *note BarNumber::, *note BreakAlignGroup::, *note BreakAlignment::,
*note FootnoteItem::, *note FootnoteSpanner::, *note GraceSpacing::,
*note LeftEdge::, *note MetronomeMark::, *note NonMusicalPaperColumn::,
*note PaperColumn::, *note ParenthesesItem::, *note RehearsalMark::,
*note SpacingSpanner::, *note SystemStartBar::, *note
SystemStartBrace::, *note SystemStartBracket::, *note
SystemStartSquare::, *note VerticalAlignment::, *note VoltaBracket:: and
*note VoltaBracketSpanner::.

   This context sets the following properties:

   • Set translator property ‘additionalPitchPrefix’ to ‘""’.
   • Set translator property ‘aDueText’ to ‘"a2"’.
   • Set translator property ‘alternativeRestores’ to:
     '(measurePosition measureLength lastChord)
   • Set translator property ‘associatedVoiceType’ to ‘'Voice’.
   • Set translator property ‘autoAccidentals’ to:
     '(Staff #<procedure #f (context pitch barnum measurepos)>)
   • Set translator property ‘autoBeamCheck’ to
     ‘default-auto-beam-check’.
   • Set translator property ‘autoBeaming’ to ‘#t’.
   • Set translator property ‘autoCautionaries’ to ‘'()’.
   • Set translator property ‘automaticBars’ to ‘#t’.
   • Set translator property ‘barCheckSynchronize’ to ‘#f’.
   • Set translator property ‘barNumberFormatter’ to
     ‘robust-bar-number-function’.
   • Set translator property ‘barNumberVisibility’ to
     ‘first-bar-number-invisible-and-no-parenthesized-bar-numbers’.
   • Set translator property ‘beamHalfMeasure’ to ‘#t’.
   • Set translator property ‘chordNameExceptionsFull’ to:
     '(((#<Pitch c' > #<Pitch e' > #<Pitch gis' >)
        (#<procedure line-markup (layout props args)>
         ("+")))
       ((#<Pitch c' > #<Pitch ees' > #<Pitch ges' >)
        (#<procedure line-markup (layout props args)>
         ((#<procedure super-markup (layout props arg)>
           "o"))))
       ((#<Pitch c' >
         #<Pitch ees' >
         #<Pitch ges' >
         #<Pitch bes' >)
        (#<procedure line-markup (layout props args)>
         ((#<procedure normal-size-super-markup (layout props arg)>
           "ø"))))
       ((#<Pitch c' >
         #<Pitch ees' >
         #<Pitch ges' >
         #<Pitch beses' >)
        (#<procedure line-markup (layout props args)>
         ((#<procedure super-markup (layout props arg)>
           "o7"))))
       ((#<Pitch c' >
         #<Pitch e' >
         #<Pitch g' >
         #<Pitch b' >
         #<Pitch fis'' >)
        (#<procedure line-markup (layout props args)>
         ((#<procedure super-markup (layout props arg)>
           "lyd"))))
       ((#<Pitch c' >
         #<Pitch e' >
         #<Pitch g' >
         #<Pitch bes' >
         #<Pitch des'' >
         #<Pitch ees'' >
         #<Pitch fis'' >
         #<Pitch aes'' >)
        (#<procedure line-markup (layout props args)>
         ((#<procedure super-markup (layout props arg)>
           "alt")))))
   • Set translator property ‘chordNameExceptionsPartial’ to:
     '(((#<Pitch c' > #<Pitch d' >)
        (#<procedure line-markup (layout props args)>
         ((#<procedure normal-size-super-markup (layout props arg)>
           "2"))))
       ((#<Pitch c' > #<Pitch ees' >)
        (#<procedure line-markup (layout props args)>
         ("m")))
       ((#<Pitch c' > #<Pitch f' >)
        (#<procedure line-markup (layout props args)>
         ((#<procedure normal-size-super-markup (layout props arg)>
           "sus4"))))
       ((#<Pitch c' > #<Pitch g' >)
        (#<procedure line-markup (layout props args)>
         ((#<procedure normal-size-super-markup (layout props arg)>
           "5"))))
       ((#<Pitch c' > #<Pitch ees' > #<Pitch f' >)
        (#<procedure line-markup (layout props args)>
         ("m"))
        (#<procedure line-markup (layout props args)>
         ((#<procedure normal-size-super-markup (layout props arg)>
           "sus4"))))
       ((#<Pitch c' > #<Pitch d' > #<Pitch ees' >)
        (#<procedure line-markup (layout props args)>
         ("m"))
        (#<procedure line-markup (layout props args)>
         ((#<procedure normal-size-super-markup (layout props arg)>
           "sus2")))))
   • Set translator property ‘chordNameExceptions’ to:
     '(((#<Pitch e' > #<Pitch gis' >)
        #<procedure line-markup (layout props args)>
        ("+"))
       ((#<Pitch ees' > #<Pitch ges' >)
        #<procedure line-markup (layout props args)>
        ((#<procedure super-markup (layout props arg)>
          "o")))
       ((#<Pitch ees' > #<Pitch ges' > #<Pitch bes' >)
        #<procedure line-markup (layout props args)>
        ((#<procedure normal-size-super-markup (layout props arg)>
          "ø")))
       ((#<Pitch ees' > #<Pitch ges' > #<Pitch beses' >)
        #<procedure line-markup (layout props args)>
        ((#<procedure super-markup (layout props arg)>
          "o7")))
       ((#<Pitch e' >
         #<Pitch g' >
         #<Pitch b' >
         #<Pitch fis'' >)
        #<procedure line-markup (layout props args)>
        ((#<procedure super-markup (layout props arg)>
          "lyd")))
       ((#<Pitch e' >
         #<Pitch g' >
         #<Pitch bes' >
         #<Pitch des'' >
         #<Pitch ees'' >
         #<Pitch fis'' >
         #<Pitch aes'' >)
        #<procedure line-markup (layout props args)>
        ((#<procedure super-markup (layout props arg)>
          "alt"))))
   • Set translator property ‘chordNameFunction’ to
     ‘ignatzek-chord-names’.
   • Set translator property ‘chordNameLowercaseMinor’ to ‘#f’.
   • Set translator property ‘chordNameSeparator’ to:
     '(#<procedure hspace-markup (layout props amount)>
       0.5)
   • Set translator property ‘chordNoteNamer’ to ‘'()’.
   • Set translator property ‘chordPrefixSpacer’ to ‘0’.
   • Set translator property ‘chordRootNamer’ to ‘note-name->markup’.
   • Set translator property ‘clefGlyph’ to ‘"clefs.G"’.
   • Set translator property ‘clefPosition’ to ‘-2’.
   • Set translator property ‘clefTranspositionFormatter’ to
     ‘clef-transposition-markup’.
   • Set translator property ‘completionFactor’ to
     ‘unity-if-multimeasure’.
   • Set translator property ‘crescendoSpanner’ to ‘'hairpin’.
   • Set translator property ‘cueClefTranspositionFormatter’ to
     ‘clef-transposition-markup’.
   • Set translator property ‘decrescendoSpanner’ to ‘'hairpin’.
   • Set translator property ‘defaultBarType’ to ‘"|"’.
   • Set translator property ‘doubleRepeatType’ to ‘":..:"’.
   • Set translator property ‘drumStyleTable’ to ‘#<hash-table 29/61>’.
   • Set translator property ‘endRepeatType’ to ‘":|."’.
   • Set translator property ‘explicitClefVisibility’ to:
     #(#t #t #t)
   • Set translator property ‘explicitCueClefVisibility’ to:
     #(#f #t #t)
   • Set translator property ‘explicitKeySignatureVisibility’ to:
     #(#t #t #t)
   • Set translator property ‘extendersOverRests’ to ‘#t’.
   • Set translator property ‘extraNatural’ to ‘#t’.
   • Set translator property ‘figuredBassFormatter’ to
     ‘format-bass-figure’.
   • Set translator property ‘fingeringOrientations’ to:
     '(up down)
   • Set translator property ‘firstClef’ to ‘#t’.
   • Set translator property ‘graceSettings’ to:
     '((Voice Stem direction 1)
       (Voice Slur direction -1)
       (Voice Stem font-size -3)
       (Voice Flag font-size -3)
       (Voice NoteHead font-size -3)
       (Voice TabNoteHead font-size -4)
       (Voice Dots font-size -3)
       (Voice Stem length-fraction 0.8)
       (Voice Stem no-stem-extend #t)
       (Voice Beam beam-thickness 0.384)
       (Voice Beam length-fraction 0.8)
       (Voice Accidental font-size -4)
       (Voice AccidentalCautionary font-size -4)
       (Voice Script font-size -3)
       (Voice Fingering font-size -8)
       (Voice StringNumber font-size -8))
   • Set translator property ‘harmonicAccidentals’ to ‘#t’.
   • Set translator property ‘highStringOne’ to ‘#t’.
   • Set translator property ‘initialTimeSignatureVisibility’ to:
     #(#f #t #t)
   • Set translator property ‘instrumentTransposition’ to ‘#<Pitch c'
     >’.
   • Set translator property ‘keepAliveInterfaces’ to:
     '(bass-figure-interface
        chord-name-interface
        cluster-beacon-interface
        fret-diagram-interface
        lyric-syllable-interface
        note-head-interface
        tab-note-head-interface
        lyric-interface
        percent-repeat-item-interface
        percent-repeat-interface
        stanza-number-interface)
   • Set translator property ‘keyAlterationOrder’ to:
     '((6 . -1/2)
       (2 . -1/2)
       (5 . -1/2)
       (1 . -1/2)
       (4 . -1/2)
       (0 . -1/2)
       (3 . -1/2)
       (3 . 1/2)
       (0 . 1/2)
       (4 . 1/2)
       (1 . 1/2)
       (5 . 1/2)
       (2 . 1/2)
       (6 . 1/2)
       (6 . -1)
       (2 . -1)
       (5 . -1)
       (1 . -1)
       (4 . -1)
       (0 . -1)
       (3 . -1)
       (3 . 1)
       (0 . 1)
       (4 . 1)
       (1 . 1)
       (5 . 1)
       (2 . 1)
       (6 . 1))
   • Set translator property ‘lyricMelismaAlignment’ to ‘-1’.
   • Set translator property ‘majorSevenSymbol’ to:
     '(#<procedure line-markup (layout props args)>
       ((#<procedure triangle-markup (layout props filled)>
         #f)))
   • Set translator property ‘markFormatter’ to ‘format-mark-letters’.
   • Set translator property ‘melismaBusyProperties’ to:
     '(melismaBusy
        slurMelismaBusy
        tieMelismaBusy
        beamMelismaBusy
        completionBusy)
   • Set translator property ‘metronomeMarkFormatter’ to
     ‘format-metronome-markup’.
   • Set translator property ‘middleCClefPosition’ to ‘-6’.
   • Set translator property ‘middleCPosition’ to ‘-6’.
   • Set translator property ‘minorChordModifier’ to:
     '(#<procedure simple-markup (layout props str)>
       "m")
   • Set translator property ‘noChordSymbol’ to:
     '(#<procedure simple-markup (layout props str)>
       "N.C.")
   • Set translator property ‘noteToFretFunction’ to ‘determine-frets’.
   • Set translator property ‘partCombineTextsOnNote’ to ‘#t’.
   • Set translator property ‘pedalSostenutoStrings’ to:
     '("Sost. Ped." "*Sost. Ped." "*")
   • Set translator property ‘pedalSostenutoStyle’ to ‘'mixed’.
   • Set translator property ‘pedalSustainStrings’ to:
     '("Ped." "*Ped." "*")
   • Set translator property ‘pedalSustainStyle’ to ‘'text’.
   • Set translator property ‘pedalUnaCordaStrings’ to:
     '("una corda" "" "tre corde")
   • Set translator property ‘pedalUnaCordaStyle’ to ‘'text’.
   • Set translator property ‘predefinedDiagramTable’ to ‘#f’.
   • Set translator property ‘printKeyCancellation’ to ‘#t’.
   • Set translator property ‘printPartCombineTexts’ to ‘#t’.
   • Set translator property ‘quotedCueEventTypes’ to:
     '(note-event
        rest-event
        tie-event
        beam-event
        tuplet-span-event)
   • Set translator property ‘quotedEventTypes’ to:
     '(StreamEvent)
   • Set translator property ‘rehearsalMark’ to ‘1’.
   • Set translator property ‘repeatCountVisibility’ to
     ‘all-repeat-counts-visible’.
   • Set translator property ‘scriptDefinitions’ to:
     '(("accent"
        (avoid-slur . around)
        (padding . 0.2)
        (script-stencil feta "sforzato" . "sforzato")
        (side-relative-direction . -1))
       ("accentus"
        (script-stencil feta "uaccentus" . "uaccentus")
        (side-relative-direction . -1)
        (avoid-slur . ignore)
        (padding . 0.2)
        (quantize-position . #t)
        (script-priority . -100)
        (direction . 1))
       ("circulus"
        (script-stencil feta "circulus" . "circulus")
        (side-relative-direction . -1)
        (avoid-slur . ignore)
        (padding . 0.2)
        (quantize-position . #t)
        (script-priority . -100)
        (direction . 1))
       ("coda"
        (script-stencil feta "coda" . "coda")
        (padding . 0.2)
        (avoid-slur . outside)
        (direction . 1))
       ("comma"
        (script-stencil feta "lcomma" . "rcomma")
        (quantize-position . #t)
        (padding . 0.2)
        (avoid-slur . ignore)
        (direction . 1))
       ("downbow"
        (script-stencil feta "downbow" . "downbow")
        (padding . 0.2)
        (skyline-horizontal-padding . 0.2)
        (avoid-slur . around)
        (direction . 1)
        (script-priority . 150))
       ("downmordent"
        (script-stencil
          feta
          "downmordent"
          .
          "downmordent")
        (padding . 0.2)
        (avoid-slur . around)
        (direction . 1))
       ("downprall"
        (script-stencil feta "downprall" . "downprall")
        (padding . 0.2)
        (avoid-slur . around)
        (direction . 1))
       ("espressivo"
        (avoid-slur . around)
        (padding . 0.2)
        (script-stencil feta "espr" . "espr")
        (side-relative-direction . -1))
       ("fermata"
        (script-stencil feta "dfermata" . "ufermata")
        (padding . 0.2)
        (avoid-slur . around)
        (script-priority . 4000)
        (direction . 1))
       ("flageolet"
        (script-stencil feta "flageolet" . "flageolet")
        (padding . 0.2)
        (avoid-slur . around)
        (direction . 1))
       ("halfopen"
        (avoid-slur . outside)
        (padding . 0.2)
        (script-stencil feta "halfopen" . "halfopen")
        (direction . 1))
       ("halfopenvertical"
        (avoid-slur . outside)
        (padding . 0.2)
        (script-stencil
          feta
          "halfopenvertical"
          .
          "halfopenvertical")
        (direction . 1))
       ("ictus"
        (script-stencil feta "ictus" . "ictus")
        (side-relative-direction . -1)
        (quantize-position . #t)
        (avoid-slur . ignore)
        (padding . 0.2)
        (script-priority . -100)
        (direction . -1))
       ("lheel"
        (script-stencil feta "upedalheel" . "upedalheel")
        (padding . 0.2)
        (avoid-slur . around)
        (direction . -1))
       ("lineprall"
        (script-stencil feta "lineprall" . "lineprall")
        (padding . 0.2)
        (avoid-slur . around)
        (direction . 1))
       ("longfermata"
        (script-stencil
          feta
          "dlongfermata"
          .
          "ulongfermata")
        (padding . 0.2)
        (avoid-slur . around)
        (direction . 1))
       ("ltoe"
        (script-stencil feta "upedaltoe" . "upedaltoe")
        (padding . 0.2)
        (avoid-slur . around)
        (direction . -1))
       ("marcato"
        (script-stencil feta "dmarcato" . "umarcato")
        (padding . 0.2)
        (avoid-slur . inside)
        (quantize-position . #t)
        (side-relative-direction . -1))
       ("mordent"
        (script-stencil feta "mordent" . "mordent")
        (padding . 0.2)
        (avoid-slur . around)
        (direction . 1))
       ("open"
        (avoid-slur . outside)
        (padding . 0.2)
        (script-stencil feta "open" . "open")
        (direction . 1))
       ("portato"
        (script-stencil feta "uportato" . "dportato")
        (avoid-slur . around)
        (padding . 0.45)
        (side-relative-direction . -1))
       ("prall"
        (script-stencil feta "prall" . "prall")
        (padding . 0.2)
        (avoid-slur . around)
        (direction . 1))
       ("pralldown"
        (script-stencil feta "pralldown" . "pralldown")
        (padding . 0.2)
        (avoid-slur . around)
        (direction . 1))
       ("prallmordent"
        (script-stencil
          feta
          "prallmordent"
          .
          "prallmordent")
        (padding . 0.2)
        (avoid-slur . around)
        (direction . 1))
       ("prallprall"
        (script-stencil feta "prallprall" . "prallprall")
        (padding . 0.2)
        (avoid-slur . around)
        (direction . 1))
       ("prallup"
        (script-stencil feta "prallup" . "prallup")
        (padding . 0.2)
        (avoid-slur . around)
        (direction . 1))
       ("reverseturn"
        (script-stencil
          feta
          "reverseturn"
          .
          "reverseturn")
        (padding . 0.2)
        (avoid-slur . inside)
        (direction . 1))
       ("rheel"
        (script-stencil feta "dpedalheel" . "dpedalheel")
        (padding . 0.2)
        (avoid-slur . around)
        (direction . 1))
       ("rtoe"
        (script-stencil feta "dpedaltoe" . "dpedaltoe")
        (padding . 0.2)
        (avoid-slur . around)
        (direction . 1))
       ("segno"
        (script-stencil feta "segno" . "segno")
        (padding . 0.2)
        (avoid-slur . outside)
        (direction . 1))
       ("semicirculus"
        (script-stencil
          feta
          "dsemicirculus"
          .
          "dsemicirculus")
        (side-relative-direction . -1)
        (quantize-position . #t)
        (avoid-slur . ignore)
        (padding . 0.2)
        (script-priority . -100)
        (direction . 1))
       ("shortfermata"
        (script-stencil
          feta
          "dshortfermata"
          .
          "ushortfermata")
        (padding . 0.2)
        (avoid-slur . around)
        (direction . 1))
       ("signumcongruentiae"
        (script-stencil
          feta
          "dsignumcongruentiae"
          .
          "usignumcongruentiae")
        (padding . 0.2)
        (avoid-slur . outside)
        (direction . 1))
       ("snappizzicato"
        (script-stencil
          feta
          "snappizzicato"
          .
          "snappizzicato")
        (padding . 0.2)
        (avoid-slur . outside)
        (direction . 1))
       ("staccatissimo"
        (avoid-slur . inside)
        (quantize-position . #t)
        (script-stencil
          feta
          "dstaccatissimo"
          .
          "ustaccatissimo")
        (padding . 0.2)
        (skyline-horizontal-padding . 0.1)
        (side-relative-direction . -1)
        (toward-stem-shift . 1.0)
        (toward-stem-shift-in-column . 0.0))
       ("staccato"
        (script-stencil feta "staccato" . "staccato")
        (side-relative-direction . -1)
        (quantize-position . #t)
        (avoid-slur . inside)
        (toward-stem-shift . 1.0)
        (toward-stem-shift-in-column . 0.0)
        (padding . 0.2)
        (skyline-horizontal-padding . 0.1)
        (script-priority . -100))
       ("stopped"
        (script-stencil feta "stopped" . "stopped")
        (avoid-slur . inside)
        (padding . 0.2)
        (direction . 1))
       ("tenuto"
        (script-stencil feta "tenuto" . "tenuto")
        (quantize-position . #t)
        (avoid-slur . inside)
        (padding . 0.2)
        (side-relative-direction . -1))
       ("trill"
        (script-stencil feta "trill" . "trill")
        (direction . 1)
        (padding . 0.2)
        (avoid-slur . outside)
        (script-priority . 2000))
       ("turn"
        (script-stencil feta "turn" . "turn")
        (avoid-slur . inside)
        (padding . 0.2)
        (direction . 1))
       ("upbow"
        (script-stencil feta "upbow" . "upbow")
        (avoid-slur . around)
        (padding . 0.2)
        (direction . 1)
        (script-priority . 150))
       ("upmordent"
        (script-stencil feta "upmordent" . "upmordent")
        (padding . 0.2)
        (avoid-slur . around)
        (direction . 1))
       ("upprall"
        (script-stencil feta "upprall" . "upprall")
        (padding . 0.2)
        (avoid-slur . around)
        (direction . 1))
       ("varcoda"
        (script-stencil feta "varcoda" . "varcoda")
        (padding . 0.2)
        (avoid-slur . outside)
        (direction . 1))
       ("varcomma"
        (script-stencil feta "lvarcomma" . "rvarcomma")
        (quantize-position . #t)
        (padding . 0.2)
        (avoid-slur . ignore)
        (direction . 1))
       ("verylongfermata"
        (script-stencil
          feta
          "dverylongfermata"
          .
          "uverylongfermata")
        (padding . 0.2)
        (avoid-slur . around)
        (direction . 1)))
   • Set translator property ‘slashChordSeparator’ to:
     '(#<procedure simple-markup (layout props str)>
       "/")
   • Set translator property ‘soloIIText’ to ‘"Solo II"’.
   • Set translator property ‘soloText’ to ‘"Solo"’.
   • Set translator property ‘startRepeatType’ to ‘".|:"’.
   • Set translator property ‘stringNumberOrientations’ to:
     '(up down)
   • Set translator property ‘stringOneTopmost’ to ‘#t’.
   • Set translator property ‘stringTunings’ to:
     '(#<Pitch e' >
       #<Pitch b >
       #<Pitch g >
       #<Pitch d >
       #<Pitch a, >
       #<Pitch e, >)
   • Set translator property ‘strokeFingerOrientations’ to:
     '(right)
   • Set translator property ‘subdivideBeams’ to ‘#f’.
   • Set translator property ‘systemStartDelimiter’ to
     ‘'SystemStartBar’.
   • Set translator property ‘tablatureFormat’ to
     ‘fret-number-tablature-format’.
   • Set translator property ‘tabStaffLineLayoutFunction’ to
     ‘tablature-position-on-lines’.
   • Set translator property ‘tieWaitForNote’ to ‘#f’.
   • Set translator property ‘timeSignatureFraction’ to:
     '(4 . 4)
   • Set translator property ‘timeSignatureSettings’ to:
     '(((2 . 2) (beamExceptions (end (1/32 8 8 8 8))))
       ((3 . 2)
        (beamExceptions (end (1/32 8 8 8 8 8 8))))
       ((3 . 4)
        (beamExceptions (end (1/8 6) (1/12 3 3 3))))
       ((3 . 8) (beamExceptions (end (1/8 3))))
       ((4 . 2)
        (beamExceptions (end (1/16 4 4 4 4 4 4 4 4))))
       ((4 . 4)
        (beamExceptions (end (1/8 4 4) (1/12 3 3 3 3))))
       ((4 . 8) (beatStructure 2 2))
       ((6 . 4)
        (beamExceptions (end (1/16 4 4 4 4 4 4))))
       ((9 . 4)
        (beamExceptions (end (1/32 8 8 8 8 8 8 8 8))))
       ((12 . 4)
        (beamExceptions
          (end (1/32 8 8 8 8 8 8 8 8 8 8 8 8))))
       ((5 . 8) (beatStructure 3 2))
       ((8 . 8) (beatStructure 3 3 2)))
   • Set translator property ‘timing’ to ‘#t’.
   • Set translator property ‘topLevelAlignment’ to ‘#t’.

   This is not a ‘Bottom’ context; search for such a one will commence
after creating an implicit context of type *note Staff::.

   Context Score can contain *note ChoirStaff::, *note ChordNames::,
*note Devnull::, *note DrumStaff::, *note Dynamics::, *note
FiguredBass::, *note FretBoards::, *note GrandStaff::, *note
GregorianTranscriptionStaff::, *note KievanStaff::, *note Lyrics::,
*note MensuralStaff::, *note NoteNames::, *note OneStaff::, *note
PetrucciStaff::, *note PianoStaff::, *note RhythmicStaff::, *note
Staff::, *note StaffGroup::, *note TabStaff:: and *note VaticanaStaff::.

   This context is built from the following engraver(s):

     ‘*note Bar_number_engraver::’
          A bar number is created whenever ‘measurePosition’ is zero and
          when there is a bar line (i.e., when ‘whichBar’ is set).  It
          is put on top of all staves, and appears only at the left side
          of the staff.  The staves are taken from ‘stavesFound’, which
          is maintained by *note Staff_collecting_engraver::.

          Music types accepted:

          *note alternative-event::

          Properties (read)

               ‘alternativeNumberingStyle’ (symbol)
                    The style of an alternative’s bar numbers.  Can be
                    ‘numbers’ for going back to the same number or
                    ‘numbers-with-letters’ for going back to the same
                    number with letter suffixes.  No setting will not go
                    back in measure-number time.

               ‘barNumberFormatter’ (procedure)
                    A procedure that takes a bar number, measure
                    position, and alternative number and returns a
                    markup of the bar number to print.

               ‘barNumberVisibility’ (procedure)
                    A procedure that takes a bar number and a measure
                    position and returns whether the corresponding bar
                    number should be printed.  Note that the actual
                    print-out of bar numbers is controlled with the
                    ‘break-visibility’ property.

                    The following procedures are predefined:

                    ‘all-bar-numbers-visible’
                         Enable bar numbers for all bars, including the
                         first one and broken bars (which get bar
                         numbers in parentheses).

                    ‘first-bar-number-invisible’
                         Enable bar numbers for all bars (including
                         broken bars) except the first one.  If the
                         first bar is broken, it doesn’t get a bar
                         number either.

                    ‘first-bar-number-invisible-save-broken-bars’
                         Enable bar numbers for all bars (including
                         broken bars) except the first one.  A broken
                         first bar gets a bar number.

                    ‘first-bar-number-invisible-and-no-parenthesized-bar-numbers’
                         Enable bar numbers for all bars except the
                         first bar and broken bars.  This is the
                         default.

                    ‘(every-nth-bar-number-visible N)’
                         Assuming N is value 2, for example, this
                         enables bar numbers for bars 2, 4, 6, etc.

                    ‘(modulo-bar-number-visible N M)’
                         If bar numbers 1, 4, 7, etc., should be
                         enabled, N (the modulo) must be set to 3 and
                         M (the division remainder) to 1.

               ‘currentBarNumber’ (integer)
                    Contains the current barnumber.  This property is
                    incremented at every bar line.

               ‘stavesFound’ (list of grobs)
                    A list of all staff-symbols found.

               ‘whichBar’ (string)
                    This property is read to determine what type of bar
                    line to create.

                    Example:

                         \set Staff.whichBar = ".|:"

                    This will create a start-repeat bar in this staff
                    only.  Valid values are described in
                    ‘scm/bar-line.scm’.

          Properties (write)

               ‘currentBarNumber’ (integer)
                    Contains the current barnumber.  This property is
                    incremented at every bar line.

          This engraver creates the following layout object(s):

          *note BarNumber::.

     ‘*note Beam_collision_engraver::’
          Help beams avoid colliding with notes and clefs in other
          voices.

     ‘*note Break_align_engraver::’
          Align grobs with corresponding ‘break-align-symbols’ into
          groups, and order the groups according to ‘breakAlignOrder’.
          The left edge of the alignment gets a separate group, with a
          symbol ‘left-edge’.

          This engraver creates the following layout object(s):

          *note BreakAlignGroup::, *note BreakAlignment:: and *note
          LeftEdge::.

     ‘*note Concurrent_hairpin_engraver::’
          Collect concurrent hairpins.

     ‘*note Default_bar_line_engraver::’
          This engraver determines what kind of automatic bar lines
          should be produced, and sets ‘whichBar’ accordingly.  It
          should be at the same level as *note Timing_translator::.

          Properties (read)

               ‘automaticBars’ (boolean)
                    If set to false then bar lines will not be printed
                    automatically; they must be explicitly created with
                    a ‘\bar’ command.  Unlike the ‘\cadenzaOn’ keyword,
                    measures are still counted.  Bar line generation
                    will resume according to that count if this property
                    is unset.

               ‘barAlways’ (boolean)
                    If set to true a bar line is drawn after each note.

               ‘defaultBarType’ (string)
                    Set the default type of bar line.  See ‘whichBar’
                    for information on available bar types.

                    This variable is read by *note
                    (lilypond-internals)Timing_translator:: at *note
                    (lilypond-internals)Score:: level.

               ‘measureLength’ (moment)
                    Length of one measure in the current time signature.

               ‘measurePosition’ (moment)
                    How much of the current measure have we had.  This
                    can be set manually to create incomplete measures.

               ‘timing’ (boolean)
                    Keep administration of measure length, position, bar
                    number, etc.?  Switch off for cadenzas.

               ‘whichBar’ (string)
                    This property is read to determine what type of bar
                    line to create.

                    Example:

                         \set Staff.whichBar = ".|:"

                    This will create a start-repeat bar in this staff
                    only.  Valid values are described in
                    ‘scm/bar-line.scm’.

     ‘*note Footnote_engraver::’
          Create footnote texts.

          Properties (read)

               ‘currentMusicalColumn’ (graphical (layout) object)
                    Grob that is X-parent to all non-breakable items
                    (note heads, lyrics, etc.).

          This engraver creates the following layout object(s):

          *note FootnoteItem:: and *note FootnoteSpanner::.

     ‘*note Grace_spacing_engraver::’
          Bookkeeping of shortest starting and playing notes in grace
          note runs.

          Properties (read)

               ‘currentMusicalColumn’ (graphical (layout) object)
                    Grob that is X-parent to all non-breakable items
                    (note heads, lyrics, etc.).

          This engraver creates the following layout object(s):

          *note GraceSpacing::.

     ‘*note Mark_engraver::’
          Create ‘RehearsalMark’ objects.  It puts them on top of all
          staves (which is taken from the property ‘stavesFound’).  If
          moving this engraver to a different context, *note
          Staff_collecting_engraver:: must move along, otherwise all
          marks end up on the same Y location.

          Music types accepted:

          *note mark-event::

          Properties (read)

               ‘markFormatter’ (procedure)
                    A procedure taking as arguments the context and the
                    rehearsal mark.  It should return the formatted mark
                    as a markup object.

               ‘rehearsalMark’ (integer)
                    The last rehearsal mark printed.

               ‘stavesFound’ (list of grobs)
                    A list of all staff-symbols found.

          This engraver creates the following layout object(s):

          *note RehearsalMark::.

     ‘*note Metronome_mark_engraver::’
          Engrave metronome marking.  This delegates the formatting work
          to the function in the ‘metronomeMarkFormatter’ property.  The
          mark is put over all staves.  The staves are taken from the
          ‘stavesFound’ property, which is maintained by *note
          Staff_collecting_engraver::.

          Music types accepted:

          *note tempo-change-event::

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘currentMusicalColumn’ (graphical (layout) object)
                    Grob that is X-parent to all non-breakable items
                    (note heads, lyrics, etc.).

               ‘metronomeMarkFormatter’ (procedure)
                    How to produce a metronome markup.  Called with two
                    arguments: a ‘TempoChangeEvent’ and context.

               ‘stavesFound’ (list of grobs)
                    A list of all staff-symbols found.

               ‘tempoHideNote’ (boolean)
                    Hide the note = count in tempo marks.

          This engraver creates the following layout object(s):

          *note MetronomeMark::.

     ‘*note Output_property_engraver::’
          Apply a procedure to any grob acknowledged.

          Music types accepted:

          *note apply-output-event::

     ‘*note Paper_column_engraver::’
          Take care of generating columns.

          This engraver decides whether a column is breakable.  The
          default is that a column is always breakable.  However, every
          ‘Bar_engraver’ that does not have a barline at a certain point
          will set ‘forbidBreaks’ in the score context to stop line
          breaks.  In practice, this means that you can make a break
          point by creating a bar line (assuming that there are no beams
          or notes that prevent a break point).

          Music types accepted:

          *note break-event:: and *note label-event::

          Properties (read)

               ‘forbidBreak’ (boolean)
                    If set to ‘#t’, prevent a line break at this point.

          Properties (write)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘currentMusicalColumn’ (graphical (layout) object)
                    Grob that is X-parent to all non-breakable items
                    (note heads, lyrics, etc.).

               ‘forbidBreak’ (boolean)
                    If set to ‘#t’, prevent a line break at this point.

          This engraver creates the following layout object(s):

          *note NonMusicalPaperColumn:: and *note PaperColumn::.

     ‘*note Parenthesis_engraver::’
          Parenthesize objects whose music cause has the ‘parenthesize’
          property.

          This engraver creates the following layout object(s):

          *note ParenthesesItem::.

     ‘*note Repeat_acknowledge_engraver::’
          Acknowledge repeated music, and convert the contents of
          ‘repeatCommands’ into an appropriate setting for ‘whichBar’.

          Properties (read)

               ‘doubleRepeatSegnoType’ (string)
                    Set the default bar line for the combinations double
                    repeat with segno.  Default is ‘:|.S.|:’.

               ‘doubleRepeatType’ (string)
                    Set the default bar line for double repeats.

               ‘endRepeatSegnoType’ (string)
                    Set the default bar line for the combinations ending
                    of repeat with segno.  Default is ‘:|.S’.

               ‘endRepeatType’ (string)
                    Set the default bar line for the ending of repeats.

               ‘repeatCommands’ (list)
                    This property is a list of commands of the form
                    ‘(list 'volta X)’, where X is a string or ‘#f’.
                    ‘'end-repeat’ is also accepted as a command.

               ‘segnoType’ (string)
                    Set the default bar line for a requested segno.
                    Default is ‘S’.

               ‘startRepeatSegnoType’ (string)
                    Set the default bar line for the combinations
                    beginning of repeat with segno.  Default is ‘S.|:’.

               ‘startRepeatType’ (string)
                    Set the default bar line for the beginning of
                    repeats.

               ‘whichBar’ (string)
                    This property is read to determine what type of bar
                    line to create.

                    Example:

                         \set Staff.whichBar = ".|:"

                    This will create a start-repeat bar in this staff
                    only.  Valid values are described in
                    ‘scm/bar-line.scm’.

     ‘*note Spacing_engraver::’
          Make a ‘SpacingSpanner’ and do bookkeeping of shortest
          starting and playing notes.

          Music types accepted:

          *note spacing-section-event::

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘currentMusicalColumn’ (graphical (layout) object)
                    Grob that is X-parent to all non-breakable items
                    (note heads, lyrics, etc.).

               ‘proportionalNotationDuration’ (moment)
                    Global override for shortest-playing duration.  This
                    is used for switching on proportional notation.

          This engraver creates the following layout object(s):

          *note SpacingSpanner::.

     ‘*note Staff_collecting_engraver::’
          Maintain the ‘stavesFound’ variable.

          Properties (read)

               ‘stavesFound’ (list of grobs)
                    A list of all staff-symbols found.

          Properties (write)

               ‘stavesFound’ (list of grobs)
                    A list of all staff-symbols found.

     ‘*note Stanza_number_align_engraver::’
          This engraver ensures that stanza numbers are neatly aligned.

     ‘*note System_start_delimiter_engraver::’
          Create a system start delimiter (i.e., a ‘SystemStartBar’,
          ‘SystemStartBrace’, ‘SystemStartBracket’ or
          ‘SystemStartSquare’ spanner).

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘systemStartDelimiter’ (symbol)
                    Which grob to make for the start of the
                    system/staff?  Set to ‘SystemStartBrace’,
                    ‘SystemStartBracket’ or ‘SystemStartBar’.

               ‘systemStartDelimiterHierarchy’ (pair)
                    A nested list, indicating the nesting of a start
                    delimiters.

          This engraver creates the following layout object(s):

          *note SystemStartBar::, *note SystemStartBrace::, *note
          SystemStartBracket:: and *note SystemStartSquare::.

     ‘*note Timing_translator::’
          This engraver adds the alias ‘Timing’ to its containing
          context.  Responsible for synchronizing timing information
          from staves.  Normally in ‘Score’.  In order to create
          polyrhythmic music, this engraver should be removed from
          ‘Score’ and placed in ‘Staff’.

          Properties (read)

               ‘baseMoment’ (moment)
                    Smallest unit of time that will stand on its own as
                    a subdivided section.

               ‘currentBarNumber’ (integer)
                    Contains the current barnumber.  This property is
                    incremented at every bar line.

               ‘internalBarNumber’ (integer)
                    Contains the current barnumber.  This property is
                    used for internal timekeeping, among others by the
                    ‘Accidental_engraver’.

               ‘measureLength’ (moment)
                    Length of one measure in the current time signature.

               ‘measurePosition’ (moment)
                    How much of the current measure have we had.  This
                    can be set manually to create incomplete measures.

               ‘timeSignatureFraction’ (fraction, as pair)
                    A pair of numbers, signifying the time signature.
                    For example, ‘'(4 . 4)’ is a 4/4 time signature.

          Properties (write)

               ‘baseMoment’ (moment)
                    Smallest unit of time that will stand on its own as
                    a subdivided section.

               ‘currentBarNumber’ (integer)
                    Contains the current barnumber.  This property is
                    incremented at every bar line.

               ‘internalBarNumber’ (integer)
                    Contains the current barnumber.  This property is
                    used for internal timekeeping, among others by the
                    ‘Accidental_engraver’.

               ‘measureLength’ (moment)
                    Length of one measure in the current time signature.

               ‘measurePosition’ (moment)
                    How much of the current measure have we had.  This
                    can be set manually to create incomplete measures.

               ‘timeSignatureFraction’ (fraction, as pair)
                    A pair of numbers, signifying the time signature.
                    For example, ‘'(4 . 4)’ is a 4/4 time signature.

     ‘*note Tweak_engraver::’
          Read the ‘tweaks’ property from the originating event, and set
          properties.

     ‘*note Vertical_align_engraver::’
          Catch groups (staves, lyrics lines, etc.)  and stack them
          vertically.

          Properties (read)

               ‘alignAboveContext’ (string)
                    Where to insert newly created context in vertical
                    alignment.

               ‘alignBelowContext’ (string)
                    Where to insert newly created context in vertical
                    alignment.

               ‘hasAxisGroup’ (boolean)
                    True if the current context is contained in an axis
                    group.

          This engraver creates the following layout object(s):

          *note VerticalAlignment::.

     ‘*note Volta_engraver::’
          Make volta brackets.

          Properties (read)

               ‘repeatCommands’ (list)
                    This property is a list of commands of the form
                    ‘(list 'volta X)’, where X is a string or ‘#f’.
                    ‘'end-repeat’ is also accepted as a command.

               ‘stavesFound’ (list of grobs)
                    A list of all staff-symbols found.

               ‘voltaSpannerDuration’ (moment)
                    This specifies the maximum duration to use for the
                    brackets printed for ‘\alternative’.  This can be
                    used to shrink the length of brackets in the
                    situation where one alternative is very large.

          This engraver creates the following layout object(s):

          *note VoltaBracket:: and *note VoltaBracketSpanner::.


File: lilypond-internals.info,  Node: Staff,  Next: StaffGroup,  Prev: Score,  Up: Contexts

2.1.27 Staff
------------

Handles clefs, bar lines, keys, accidentals.  It can contain ‘Voice’
contexts.

   This context creates the following layout object(s):

   *note Accidental::, *note AccidentalCautionary::, *note
AccidentalPlacement::, *note AccidentalSuggestion::, *note BarLine::,
*note BassFigure::, *note BassFigureAlignment::, *note
BassFigureAlignmentPositioning::, *note BassFigureBracket::, *note
BassFigureContinuation::, *note BassFigureLine::, *note Clef::, *note
ClefModifier::, *note CueClef::, *note CueEndClef::, *note DotColumn::,
*note FingeringColumn::, *note InstrumentName::, *note
KeyCancellation::, *note KeySignature::, *note LedgerLineSpanner::,
*note NoteCollision::, *note OttavaBracket::, *note PianoPedalBracket::,
*note RestCollision::, *note ScriptRow::, *note SostenutoPedal::, *note
SostenutoPedalLineSpanner::, *note StaffSpacing::, *note StaffSymbol::,
*note SustainPedal::, *note SustainPedalLineSpanner::, *note
TimeSignature::, *note UnaCordaPedal::, *note UnaCordaPedalLineSpanner::
and *note VerticalAxisGroup::.

   This context sets the following properties:

   • Set translator property ‘createSpacing’ to ‘#t’.
   • Set translator property ‘ignoreFiguredBassRest’ to ‘#f’.
   • Set translator property ‘instrumentName’ to ‘'()’.
   • Set translator property ‘localAlterations’ to ‘'()’.
   • Set translator property ‘shortInstrumentName’ to ‘'()’.

   This is not a ‘Bottom’ context; search for such a one will commence
after creating an implicit context of type *note Voice::.

   Context Staff can contain *note CueVoice::, *note NullVoice:: and
*note Voice::.

   This context is built from the following engraver(s):

     ‘*note Accidental_engraver::’
          Make accidentals.  Catch note heads, ties and notices
          key-change events.  This engraver usually lives at Staff
          level, but reads the settings for Accidental at ‘Voice’ level,
          so you can ‘\override’ them at ‘Voice’.

          Properties (read)

               ‘accidentalGrouping’ (symbol)
                    If set to ‘'voice’, accidentals on the same note in
                    different octaves may be horizontally staggered if
                    in different voices.

               ‘autoAccidentals’ (list)
                    List of different ways to typeset an accidental.

                    For determining when to print an accidental, several
                    different rules are tried.  The rule that gives the
                    highest number of accidentals is used.

                    Each entry in the list is either a symbol or a
                    procedure.

                    SYMBOL
                         The symbol is the name of the context in which
                         the following rules are to be applied.  For
                         example, if CONTEXT is *note
                         (lilypond-internals)Score:: then all staves
                         share accidentals, and if CONTEXT is *note
                         (lilypond-internals)Staff:: then all voices in
                         the same staff share accidentals, but staves do
                         not.

                    PROCEDURE
                         The procedure represents an accidental rule to
                         be applied to the previously specified context.

                         The procedure takes the following arguments:

                         ‘context’
                              The current context to which the rule
                              should be applied.

                         ‘pitch’
                              The pitch of the note to be evaluated.

                         ‘barnum’
                              The current bar number.

                         ‘measurepos’
                              The current measure position.

                         The procedure returns a pair of booleans.  The
                         first states whether an extra natural should be
                         added.  The second states whether an accidental
                         should be printed.  ‘(#t . #f)’ does not make
                         sense.

               ‘autoCautionaries’ (list)
                    List similar to ‘autoAccidentals’, but it controls
                    cautionary accidentals rather than normal ones.
                    Both lists are tried, and the one giving the most
                    accidentals wins.  In case of draw, a normal
                    accidental is typeset.

               ‘extraNatural’ (boolean)
                    Whether to typeset an extra natural sign before
                    accidentals that reduce the effect of a previous
                    alteration.

               ‘harmonicAccidentals’ (boolean)
                    If set, harmonic notes in chords get accidentals.

               ‘internalBarNumber’ (integer)
                    Contains the current barnumber.  This property is
                    used for internal timekeeping, among others by the
                    ‘Accidental_engraver’.

               ‘keyAlterations’ (list)
                    The current key signature.  This is an alist
                    containing ‘(STEP . ALTER)’ or ‘((OCTAVE . STEP) .
                    ALTER)’, where STEP is a number in the range 0 to 6
                    and ALTER a fraction, denoting alteration.  For
                    alterations, use symbols, e.g.  ‘keyAlterations =
                    #`((6 . ,FLAT))’.

               ‘localAlterations’ (list)
                    The key signature at this point in the measure.  The
                    format is the same as for ‘keyAlterations’, but can
                    also contain ‘((OCTAVE . NAME) . (ALTER BARNUMBER .
                    MEASUREPOSITION))’ pairs.

          Properties (write)

               ‘localAlterations’ (list)
                    The key signature at this point in the measure.  The
                    format is the same as for ‘keyAlterations’, but can
                    also contain ‘((OCTAVE . NAME) . (ALTER BARNUMBER .
                    MEASUREPOSITION))’ pairs.

          This engraver creates the following layout object(s):

          *note Accidental::, *note AccidentalCautionary::, *note
          AccidentalPlacement:: and *note AccidentalSuggestion::.

     ‘*note Axis_group_engraver::’
          Group all objects created in this context in a
          ‘VerticalAxisGroup’ spanner.

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘hasAxisGroup’ (boolean)
                    True if the current context is contained in an axis
                    group.

               ‘keepAliveInterfaces’ (list)
                    A list of symbols, signifying grob interfaces that
                    are worth keeping a staff with ‘remove-empty’ set
                    around for.

          Properties (write)

               ‘hasAxisGroup’ (boolean)
                    True if the current context is contained in an axis
                    group.

          This engraver creates the following layout object(s):

          *note VerticalAxisGroup::.

     ‘*note Bar_engraver::’
          Create barlines.  This engraver is controlled through the
          ‘whichBar’ property.  If it has no bar line to create, it will
          forbid a linebreak at this point.  This engraver is required
          to trigger the creation of clefs at the start of systems.

          Properties (read)

               ‘whichBar’ (string)
                    This property is read to determine what type of bar
                    line to create.

                    Example:

                         \set Staff.whichBar = ".|:"

                    This will create a start-repeat bar in this staff
                    only.  Valid values are described in
                    ‘scm/bar-line.scm’.

          Properties (write)

               ‘forbidBreak’ (boolean)
                    If set to ‘#t’, prevent a line break at this point.

          This engraver creates the following layout object(s):

          *note BarLine::.

     ‘*note Clef_engraver::’
          Determine and set reference point for pitches.

          Properties (read)

               ‘clefGlyph’ (string)
                    Name of the symbol within the music font.

               ‘clefPosition’ (number)
                    Where should the center of the clef symbol go,
                    measured in half staff spaces from the center of the
                    staff.

               ‘clefTransposition’ (integer)
                    Add this much extra transposition.  Values of 7 and
                    -7 are common.

               ‘clefTranspositionStyle’ (symbol)
                    Determines the way the ClefModifier grob is
                    displayed.  Possible values are ‘default’,
                    ‘parenthesized’ and ‘bracketed’.

               ‘explicitClefVisibility’ (vector)
                    ‘break-visibility’ function for clef changes.

               ‘forceClef’ (boolean)
                    Show clef symbol, even if it has not changed.  Only
                    active for the first clef after the property is set,
                    not for the full staff.

          This engraver creates the following layout object(s):

          *note Clef:: and *note ClefModifier::.

     ‘*note Collision_engraver::’
          Collect ‘NoteColumns’, and as soon as there are two or more,
          put them in a ‘NoteCollision’ object.

          This engraver creates the following layout object(s):

          *note NoteCollision::.

     ‘*note Cue_clef_engraver::’
          Determine and set reference point for pitches in cued voices.

          Properties (read)

               ‘clefTransposition’ (integer)
                    Add this much extra transposition.  Values of 7 and
                    -7 are common.

               ‘cueClefGlyph’ (string)
                    Name of the symbol within the music font.

               ‘cueClefPosition’ (number)
                    Where should the center of the clef symbol go,
                    measured in half staff spaces from the center of the
                    staff.

               ‘cueClefTransposition’ (integer)
                    Add this much extra transposition.  Values of 7 and
                    -7 are common.

               ‘cueClefTranspositionStyle’ (symbol)
                    Determines the way the ClefModifier grob is
                    displayed.  Possible values are ‘default’,
                    ‘parenthesized’ and ‘bracketed’.

               ‘explicitCueClefVisibility’ (vector)
                    ‘break-visibility’ function for cue clef changes.

               ‘middleCCuePosition’ (number)
                    The position of the middle C, as determined only by
                    the clef of the cue notes.  This can be calculated
                    by looking at ‘cueClefPosition’ and ‘cueClefGlyph’.

          This engraver creates the following layout object(s):

          *note ClefModifier::, *note CueClef:: and *note CueEndClef::.

     ‘*note Dot_column_engraver::’
          Engrave dots on dotted notes shifted to the right of the note.
          If omitted, then dots appear on top of the notes.

          This engraver creates the following layout object(s):

          *note DotColumn::.

     ‘*note Figured_bass_engraver::’
          Make figured bass numbers.

          Music types accepted:

          *note bass-figure-event:: and *note rest-event::

          Properties (read)

               ‘figuredBassAlterationDirection’ (direction)
                    Where to put alterations relative to the main
                    figure.

               ‘figuredBassCenterContinuations’ (boolean)
                    Whether to vertically center pairs of extender
                    lines.  This does not work with three or more lines.

               ‘figuredBassFormatter’ (procedure)
                    A routine generating a markup for a bass figure.

               ‘ignoreFiguredBassRest’ (boolean)
                    Don’t swallow rest events.

               ‘implicitBassFigures’ (list)
                    A list of bass figures that are not printed as
                    numbers, but only as extender lines.

               ‘useBassFigureExtenders’ (boolean)
                    Whether to use extender lines for repeated bass
                    figures.

          This engraver creates the following layout object(s):

          *note BassFigure::, *note BassFigureAlignment::, *note
          BassFigureBracket::, *note BassFigureContinuation:: and *note
          BassFigureLine::.

     ‘*note Figured_bass_position_engraver::’
          Position figured bass alignments over notes.

          This engraver creates the following layout object(s):

          *note BassFigureAlignmentPositioning::.

     ‘*note Fingering_column_engraver::’
          Find potentially colliding scripts and put them into a
          ‘FingeringColumn’ object; that will fix the collisions.

          This engraver creates the following layout object(s):

          *note FingeringColumn::.

     ‘*note Font_size_engraver::’
          Put ‘fontSize’ into ‘font-size’ grob property.

          Properties (read)

               ‘fontSize’ (number)
                    The relative size of all grobs in a context.

     ‘*note Grob_pq_engraver::’
          Administrate when certain grobs (e.g., note heads) stop
          playing.

          Properties (read)

               ‘busyGrobs’ (list)
                    A queue of ‘(END-MOMENT . GROB)’ cons cells.  This
                    is for internal (C++) use only.  This property
                    contains the grobs which are still busy (e.g.  note
                    heads, spanners, etc.).

          Properties (write)

               ‘busyGrobs’ (list)
                    A queue of ‘(END-MOMENT . GROB)’ cons cells.  This
                    is for internal (C++) use only.  This property
                    contains the grobs which are still busy (e.g.  note
                    heads, spanners, etc.).

     ‘*note Instrument_name_engraver::’
          Create a system start text for instrument or vocal names.

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘instrumentName’ (markup)
                    The name to print left of a staff.  The
                    ‘instrumentName’ property labels the staff in the
                    first system, and the ‘shortInstrumentName’ property
                    labels following lines.

               ‘shortInstrumentName’ (markup)
                    See ‘instrumentName’.

               ‘shortVocalName’ (markup)
                    Name of a vocal line, short version.

               ‘vocalName’ (markup)
                    Name of a vocal line.

          This engraver creates the following layout object(s):

          *note InstrumentName::.

     ‘*note Key_engraver::’
          Engrave a key signature.

          Music types accepted:

          *note key-change-event::

          Properties (read)

               ‘createKeyOnClefChange’ (boolean)
                    Print a key signature whenever the clef is changed.

               ‘explicitKeySignatureVisibility’ (vector)
                    ‘break-visibility’ function for explicit key
                    changes.  ‘\override’ of the ‘break-visibility’
                    property will set the visibility for normal (i.e.,
                    at the start of the line) key signatures.

               ‘extraNatural’ (boolean)
                    Whether to typeset an extra natural sign before
                    accidentals that reduce the effect of a previous
                    alteration.

               ‘keyAlterationOrder’ (list)
                    An alist that defines in what order alterations
                    should be printed.  The format is ‘(STEP . ALTER)’,
                    where STEP is a number from 0 to 6 and ALTER from -2
                    (sharp) to 2 (flat).

               ‘keyAlterations’ (list)
                    The current key signature.  This is an alist
                    containing ‘(STEP . ALTER)’ or ‘((OCTAVE . STEP) .
                    ALTER)’, where STEP is a number in the range 0 to 6
                    and ALTER a fraction, denoting alteration.  For
                    alterations, use symbols, e.g.  ‘keyAlterations =
                    #`((6 . ,FLAT))’.

               ‘lastKeyAlterations’ (list)
                    Last key signature before a key signature change.

               ‘middleCClefPosition’ (number)
                    The position of the middle C, as determined only by
                    the clef.  This can be calculated by looking at
                    ‘clefPosition’ and ‘clefGlyph’.

               ‘printKeyCancellation’ (boolean)
                    Print restoration alterations before a key signature
                    change.

          Properties (write)

               ‘keyAlterations’ (list)
                    The current key signature.  This is an alist
                    containing ‘(STEP . ALTER)’ or ‘((OCTAVE . STEP) .
                    ALTER)’, where STEP is a number in the range 0 to 6
                    and ALTER a fraction, denoting alteration.  For
                    alterations, use symbols, e.g.  ‘keyAlterations =
                    #`((6 . ,FLAT))’.

               ‘lastKeyAlterations’ (list)
                    Last key signature before a key signature change.

               ‘tonic’ (pitch)
                    The tonic of the current scale.

          This engraver creates the following layout object(s):

          *note KeyCancellation:: and *note KeySignature::.

     ‘*note Ledger_line_engraver::’
          Create the spanner to draw ledger lines, and notices objects
          that need ledger lines.

          This engraver creates the following layout object(s):

          *note LedgerLineSpanner::.

     ‘*note Ottava_spanner_engraver::’
          Create a text spanner when the ottavation property changes.

          Properties (read)

               ‘currentMusicalColumn’ (graphical (layout) object)
                    Grob that is X-parent to all non-breakable items
                    (note heads, lyrics, etc.).

               ‘middleCOffset’ (number)
                    The offset of middle C from the position given by
                    ‘middleCClefPosition’ This is used for ottava
                    brackets.

               ‘ottavation’ (markup)
                    If set, the text for an ottava spanner.  Changing
                    this creates a new text spanner.

          This engraver creates the following layout object(s):

          *note OttavaBracket::.

     ‘*note Piano_pedal_align_engraver::’
          Align piano pedal symbols and brackets.

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

          This engraver creates the following layout object(s):

          *note SostenutoPedalLineSpanner::, *note
          SustainPedalLineSpanner:: and *note
          UnaCordaPedalLineSpanner::.

     ‘*note Piano_pedal_engraver::’
          Engrave piano pedal symbols and brackets.

          Music types accepted:

          *note sostenuto-event::, *note sustain-event:: and *note
          una-corda-event::

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘pedalSostenutoStrings’ (list)
                    See ‘pedalSustainStrings’.

               ‘pedalSostenutoStyle’ (symbol)
                    See ‘pedalSustainStyle’.

               ‘pedalSustainStrings’ (list)
                    A list of strings to print for sustain-pedal.
                    Format is ‘(UP UPDOWN DOWN)’, where each of the
                    three is the string to print when this is done with
                    the pedal.

               ‘pedalSustainStyle’ (symbol)
                    A symbol that indicates how to print sustain pedals:
                    ‘text’, ‘bracket’ or ‘mixed’ (both).

               ‘pedalUnaCordaStrings’ (list)
                    See ‘pedalSustainStrings’.

               ‘pedalUnaCordaStyle’ (symbol)
                    See ‘pedalSustainStyle’.

          This engraver creates the following layout object(s):

          *note PianoPedalBracket::, *note SostenutoPedal::, *note
          SustainPedal:: and *note UnaCordaPedal::.

     ‘*note Pure_from_neighbor_engraver::’
          Coordinates items that get their pure heights from their
          neighbors.

     ‘*note Rest_collision_engraver::’
          Handle collisions of rests.

          Properties (read)

               ‘busyGrobs’ (list)
                    A queue of ‘(END-MOMENT . GROB)’ cons cells.  This
                    is for internal (C++) use only.  This property
                    contains the grobs which are still busy (e.g.  note
                    heads, spanners, etc.).

          This engraver creates the following layout object(s):

          *note RestCollision::.

     ‘*note Script_row_engraver::’
          Determine order in horizontal side position elements.

          This engraver creates the following layout object(s):

          *note ScriptRow::.

     ‘*note Separating_line_group_engraver::’
          Generate objects for computing spacing parameters.

          Properties (read)

               ‘createSpacing’ (boolean)
                    Create ‘StaffSpacing’ objects?  Should be set for
                    staves.

          Properties (write)

               ‘hasStaffSpacing’ (boolean)
                    True if the current ‘CommandColumn’ contains items
                    that will affect spacing.

          This engraver creates the following layout object(s):

          *note StaffSpacing::.

     ‘*note Staff_collecting_engraver::’
          Maintain the ‘stavesFound’ variable.

          Properties (read)

               ‘stavesFound’ (list of grobs)
                    A list of all staff-symbols found.

          Properties (write)

               ‘stavesFound’ (list of grobs)
                    A list of all staff-symbols found.

     ‘*note Staff_symbol_engraver::’
          Create the constellation of five (default) staff lines.

          Music types accepted:

          *note staff-span-event::

          This engraver creates the following layout object(s):

          *note StaffSymbol::.

     ‘*note Time_signature_engraver::’
          Create a *note TimeSignature:: whenever
          ‘timeSignatureFraction’ changes.

          Music types accepted:

          *note time-signature-event::

          Properties (read)

               ‘initialTimeSignatureVisibility’ (vector)
                    break visibility for the initial time signature.

               ‘partialBusy’ (boolean)
                    Signal that \partial acts at the current timestep.

               ‘timeSignatureFraction’ (fraction, as pair)
                    A pair of numbers, signifying the time signature.
                    For example, ‘'(4 . 4)’ is a 4/4 time signature.

          This engraver creates the following layout object(s):

          *note TimeSignature::.


File: lilypond-internals.info,  Node: StaffGroup,  Next: TabStaff,  Prev: Staff,  Up: Contexts

2.1.28 StaffGroup
-----------------

Groups staves while adding a bracket on the left side, grouping the
staves together.  The bar lines of the contained staves are connected
vertically.  ‘StaffGroup’ only consists of a collection of staves, with
a bracket in front and spanning bar lines.

   This context creates the following layout object(s):

   *note Arpeggio::, *note InstrumentName::, *note SpanBar::, *note
SpanBarStub::, *note SystemStartBar::, *note SystemStartBrace::, *note
SystemStartBracket::, *note SystemStartSquare:: and *note
VerticalAlignment::.

   This context sets the following properties:

   • Set grob-property ‘extra-spacing-width’ in *note DynamicText:: to
     ‘#f’.
   • Set translator property ‘instrumentName’ to ‘'()’.
   • Set translator property ‘shortInstrumentName’ to ‘'()’.
   • Set translator property ‘systemStartDelimiter’ to
     ‘'SystemStartBracket’.
   • Set translator property ‘topLevelAlignment’ to ‘#f’.

   This is not a ‘Bottom’ context; search for such a one will commence
after creating an implicit context of type *note Staff::.

   Context StaffGroup can contain *note ChoirStaff::, *note
ChordNames::, *note DrumStaff::, *note FiguredBass::, *note
FretBoards::, *note GrandStaff::, *note Lyrics::, *note OneStaff::,
*note PianoStaff::, *note RhythmicStaff::, *note Staff::, *note
StaffGroup:: and *note TabStaff::.

   This context is built from the following engraver(s):

     ‘*note Instrument_name_engraver::’
          Create a system start text for instrument or vocal names.

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘instrumentName’ (markup)
                    The name to print left of a staff.  The
                    ‘instrumentName’ property labels the staff in the
                    first system, and the ‘shortInstrumentName’ property
                    labels following lines.

               ‘shortInstrumentName’ (markup)
                    See ‘instrumentName’.

               ‘shortVocalName’ (markup)
                    Name of a vocal line, short version.

               ‘vocalName’ (markup)
                    Name of a vocal line.

          This engraver creates the following layout object(s):

          *note InstrumentName::.

     ‘*note Span_arpeggio_engraver::’
          Make arpeggios that span multiple staves.

          Properties (read)

               ‘connectArpeggios’ (boolean)
                    If set, connect arpeggios across piano staff.

          This engraver creates the following layout object(s):

          *note Arpeggio::.

     ‘*note Span_bar_engraver::’
          Make cross-staff bar lines: It catches all normal bar lines
          and draws a single span bar across them.

          This engraver creates the following layout object(s):

          *note SpanBar::.

     ‘*note Span_bar_stub_engraver::’
          Make stubs for span bars in all contexts that the span bars
          cross.

          This engraver creates the following layout object(s):

          *note SpanBarStub::.

     ‘*note System_start_delimiter_engraver::’
          Create a system start delimiter (i.e., a ‘SystemStartBar’,
          ‘SystemStartBrace’, ‘SystemStartBracket’ or
          ‘SystemStartSquare’ spanner).

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘systemStartDelimiter’ (symbol)
                    Which grob to make for the start of the
                    system/staff?  Set to ‘SystemStartBrace’,
                    ‘SystemStartBracket’ or ‘SystemStartBar’.

               ‘systemStartDelimiterHierarchy’ (pair)
                    A nested list, indicating the nesting of a start
                    delimiters.

          This engraver creates the following layout object(s):

          *note SystemStartBar::, *note SystemStartBrace::, *note
          SystemStartBracket:: and *note SystemStartSquare::.

     ‘*note Vertical_align_engraver::’
          Catch groups (staves, lyrics lines, etc.)  and stack them
          vertically.

          Properties (read)

               ‘alignAboveContext’ (string)
                    Where to insert newly created context in vertical
                    alignment.

               ‘alignBelowContext’ (string)
                    Where to insert newly created context in vertical
                    alignment.

               ‘hasAxisGroup’ (boolean)
                    True if the current context is contained in an axis
                    group.

          This engraver creates the following layout object(s):

          *note VerticalAlignment::.


File: lilypond-internals.info,  Node: TabStaff,  Next: TabVoice,  Prev: StaffGroup,  Up: Contexts

2.1.29 TabStaff
---------------

Context for generating tablature.  It accepts only ‘TabVoice’ contexts
and handles the line spacing, the tablature clef etc.  properly.

   This context also accepts commands for the following context(s):

   Staff.

   This context creates the following layout object(s):

   *note BarLine::, *note BassFigure::, *note BassFigureAlignment::,
*note BassFigureAlignmentPositioning::, *note BassFigureBracket::, *note
BassFigureContinuation::, *note BassFigureLine::, *note Clef::, *note
ClefModifier::, *note CueClef::, *note CueEndClef::, *note DotColumn::,
*note FingeringColumn::, *note InstrumentName::, *note
LedgerLineSpanner::, *note NoteCollision::, *note PianoPedalBracket::,
*note RestCollision::, *note ScriptRow::, *note SostenutoPedal::, *note
SostenutoPedalLineSpanner::, *note StaffSpacing::, *note StaffSymbol::,
*note SustainPedal::, *note SustainPedalLineSpanner::, *note
TimeSignature::, *note UnaCordaPedal::, *note UnaCordaPedalLineSpanner::
and *note VerticalAxisGroup::.

   This context sets the following properties:

   • Set grob-property ‘after-line-breaking’ in *note RepeatTie:: to
     ‘repeat-tie::handle-tab-note-head’.
   • Set grob-property ‘after-line-breaking’ in *note Tie:: to
     ‘tie::handle-tab-note-head’.
   • Set grob-property ‘avoid-note-head’ in *note Stem:: to ‘#t’.
   • Set grob-property ‘beam-thickness’ in *note Beam:: to ‘0.32’.
   • Set grob-property ‘beam-thickness’ in *note StemTremolo:: to
     ‘0.32’.
   • Set grob-property ‘beam-width’ in *note StemTremolo:: to
     ‘stem-tremolo::calc-tab-width’.
   • Set grob-property ‘bound-details.left’ in *note Glissando:: to:
     '((attach-dir . 1) (padding . 0.3))
   • Set grob-property ‘bound-details.right’ in *note Glissando:: to:
     '((attach-dir . -1) (padding . 0.3))
   • Set grob-property ‘details’ in *note Stem:: to:
     '((lengths 0 0 0 0 0 0)
       (beamed-lengths 0 0 0)
       (beamed-minimum-free-lengths 0 0 0)
       (beamed-extreme-minimum-free-lengths 0 0)
       (stem-shorten 0 0))
   • Set grob-property ‘extra-dy’ in *note Glissando:: to
     ‘glissando::calc-tab-extra-dy’.
   • Set grob-property ‘glyph-name’ in *note TabNoteHead:: to
     ‘tab-note-head::calc-glyph-name’.
   • Set grob-property ‘ignore-collision’ in *note NoteColumn:: to ‘#t’.
   • Set grob-property ‘length-fraction’ in *note Beam:: to ‘0.62’.
   • Set grob-property ‘length-fraction’ in *note StemTremolo:: to
     ‘#<procedure #f (grob)>’.
   • Set grob-property ‘no-stem-extend’ in *note Stem:: to ‘#t’.
   • Set grob-property ‘staff-space’ in *note StaffSymbol:: to ‘1.5’.
   • Set grob-property ‘stencil’ in *note Arpeggio:: to ‘#f’.
   • Set grob-property ‘stencil’ in *note Beam:: to ‘#f’.
   • Set grob-property ‘stencil’ in *note Clef:: to
     ‘clef::print-modern-tab-if-set’.
   • Set grob-property ‘stencil’ in *note Dots:: to ‘#f’.
   • Set grob-property ‘stencil’ in *note DynamicTextSpanner:: to ‘#f’.
   • Set grob-property ‘stencil’ in *note DynamicText:: to ‘#f’.
   • Set grob-property ‘stencil’ in *note Flag:: to ‘#f’.
   • Set grob-property ‘stencil’ in *note Glissando:: to
     ‘glissando::draw-tab-glissando’.
   • Set grob-property ‘stencil’ in *note Hairpin:: to ‘#f’.
   • Set grob-property ‘stencil’ in *note LaissezVibrerTie:: to ‘#f’.
   • Set grob-property ‘stencil’ in *note MultiMeasureRestNumber:: to
     ‘#f’.
   • Set grob-property ‘stencil’ in *note MultiMeasureRestText:: to
     ‘#f’.
   • Set grob-property ‘stencil’ in *note MultiMeasureRest:: to ‘#f’.
   • Set grob-property ‘stencil’ in *note PhrasingSlur:: to ‘#f’.
   • Set grob-property ‘stencil’ in *note RepeatTie:: to ‘#f’.
   • Set grob-property ‘stencil’ in *note Rest:: to ‘#f’.
   • Set grob-property ‘stencil’ in *note Script:: to ‘#f’.
   • Set grob-property ‘stencil’ in *note Slur:: to
     ‘slur::draw-tab-slur’.
   • Set grob-property ‘stencil’ in *note StemTremolo:: to ‘#f’.
   • Set grob-property ‘stencil’ in *note Stem:: to ‘#f’.
   • Set grob-property ‘stencil’ in *note TabNoteHead:: to
     ‘tab-note-head::whiteout-if-style-set’.
   • Set grob-property ‘stencil’ in *note TextScript:: to ‘#f’.
   • Set grob-property ‘stencil’ in *note TextSpanner:: to ‘#f’.
   • Set grob-property ‘stencil’ in *note Tie:: to ‘#f’.
   • Set grob-property ‘stencil’ in *note TimeSignature:: to ‘#f’.
   • Set grob-property ‘stencil’ in *note TupletBracket:: to ‘#f’.
   • Set grob-property ‘stencil’ in *note TupletNumber:: to ‘#f’.
   • Set grob-property ‘style’ in *note Flag:: to ‘'no-flag’.
   • Set translator property ‘autoBeaming’ to ‘#f’.
   • Set translator property ‘clefGlyph’ to ‘"clefs.tab"’.
   • Set translator property ‘clefPosition’ to ‘0’.
   • Set translator property ‘createSpacing’ to ‘#t’.
   • Set translator property ‘handleNegativeFrets’ to ‘'recalculate’.
   • Set translator property ‘ignoreFiguredBassRest’ to ‘#f’.
   • Set translator property ‘instrumentName’ to ‘'()’.
   • Set translator property ‘localAlterations’ to ‘'()’.
   • Set translator property ‘restrainOpenStrings’ to ‘#f’.
   • Set translator property ‘shortInstrumentName’ to ‘'()’.

   This is not a ‘Bottom’ context; search for such a one will commence
after creating an implicit context of type *note TabVoice::.

   Context TabStaff can contain *note CueVoice::, *note NullVoice:: and
*note TabVoice::.

   This context is built from the following engraver(s):

     ‘*note Axis_group_engraver::’
          Group all objects created in this context in a
          ‘VerticalAxisGroup’ spanner.

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘hasAxisGroup’ (boolean)
                    True if the current context is contained in an axis
                    group.

               ‘keepAliveInterfaces’ (list)
                    A list of symbols, signifying grob interfaces that
                    are worth keeping a staff with ‘remove-empty’ set
                    around for.

          Properties (write)

               ‘hasAxisGroup’ (boolean)
                    True if the current context is contained in an axis
                    group.

          This engraver creates the following layout object(s):

          *note VerticalAxisGroup::.

     ‘*note Bar_engraver::’
          Create barlines.  This engraver is controlled through the
          ‘whichBar’ property.  If it has no bar line to create, it will
          forbid a linebreak at this point.  This engraver is required
          to trigger the creation of clefs at the start of systems.

          Properties (read)

               ‘whichBar’ (string)
                    This property is read to determine what type of bar
                    line to create.

                    Example:

                         \set Staff.whichBar = ".|:"

                    This will create a start-repeat bar in this staff
                    only.  Valid values are described in
                    ‘scm/bar-line.scm’.

          Properties (write)

               ‘forbidBreak’ (boolean)
                    If set to ‘#t’, prevent a line break at this point.

          This engraver creates the following layout object(s):

          *note BarLine::.

     ‘*note Clef_engraver::’
          Determine and set reference point for pitches.

          Properties (read)

               ‘clefGlyph’ (string)
                    Name of the symbol within the music font.

               ‘clefPosition’ (number)
                    Where should the center of the clef symbol go,
                    measured in half staff spaces from the center of the
                    staff.

               ‘clefTransposition’ (integer)
                    Add this much extra transposition.  Values of 7 and
                    -7 are common.

               ‘clefTranspositionStyle’ (symbol)
                    Determines the way the ClefModifier grob is
                    displayed.  Possible values are ‘default’,
                    ‘parenthesized’ and ‘bracketed’.

               ‘explicitClefVisibility’ (vector)
                    ‘break-visibility’ function for clef changes.

               ‘forceClef’ (boolean)
                    Show clef symbol, even if it has not changed.  Only
                    active for the first clef after the property is set,
                    not for the full staff.

          This engraver creates the following layout object(s):

          *note Clef:: and *note ClefModifier::.

     ‘*note Collision_engraver::’
          Collect ‘NoteColumns’, and as soon as there are two or more,
          put them in a ‘NoteCollision’ object.

          This engraver creates the following layout object(s):

          *note NoteCollision::.

     ‘*note Cue_clef_engraver::’
          Determine and set reference point for pitches in cued voices.

          Properties (read)

               ‘clefTransposition’ (integer)
                    Add this much extra transposition.  Values of 7 and
                    -7 are common.

               ‘cueClefGlyph’ (string)
                    Name of the symbol within the music font.

               ‘cueClefPosition’ (number)
                    Where should the center of the clef symbol go,
                    measured in half staff spaces from the center of the
                    staff.

               ‘cueClefTransposition’ (integer)
                    Add this much extra transposition.  Values of 7 and
                    -7 are common.

               ‘cueClefTranspositionStyle’ (symbol)
                    Determines the way the ClefModifier grob is
                    displayed.  Possible values are ‘default’,
                    ‘parenthesized’ and ‘bracketed’.

               ‘explicitCueClefVisibility’ (vector)
                    ‘break-visibility’ function for cue clef changes.

               ‘middleCCuePosition’ (number)
                    The position of the middle C, as determined only by
                    the clef of the cue notes.  This can be calculated
                    by looking at ‘cueClefPosition’ and ‘cueClefGlyph’.

          This engraver creates the following layout object(s):

          *note ClefModifier::, *note CueClef:: and *note CueEndClef::.

     ‘*note Dot_column_engraver::’
          Engrave dots on dotted notes shifted to the right of the note.
          If omitted, then dots appear on top of the notes.

          This engraver creates the following layout object(s):

          *note DotColumn::.

     ‘*note Figured_bass_engraver::’
          Make figured bass numbers.

          Music types accepted:

          *note bass-figure-event:: and *note rest-event::

          Properties (read)

               ‘figuredBassAlterationDirection’ (direction)
                    Where to put alterations relative to the main
                    figure.

               ‘figuredBassCenterContinuations’ (boolean)
                    Whether to vertically center pairs of extender
                    lines.  This does not work with three or more lines.

               ‘figuredBassFormatter’ (procedure)
                    A routine generating a markup for a bass figure.

               ‘ignoreFiguredBassRest’ (boolean)
                    Don’t swallow rest events.

               ‘implicitBassFigures’ (list)
                    A list of bass figures that are not printed as
                    numbers, but only as extender lines.

               ‘useBassFigureExtenders’ (boolean)
                    Whether to use extender lines for repeated bass
                    figures.

          This engraver creates the following layout object(s):

          *note BassFigure::, *note BassFigureAlignment::, *note
          BassFigureBracket::, *note BassFigureContinuation:: and *note
          BassFigureLine::.

     ‘*note Figured_bass_position_engraver::’
          Position figured bass alignments over notes.

          This engraver creates the following layout object(s):

          *note BassFigureAlignmentPositioning::.

     ‘*note Fingering_column_engraver::’
          Find potentially colliding scripts and put them into a
          ‘FingeringColumn’ object; that will fix the collisions.

          This engraver creates the following layout object(s):

          *note FingeringColumn::.

     ‘*note Font_size_engraver::’
          Put ‘fontSize’ into ‘font-size’ grob property.

          Properties (read)

               ‘fontSize’ (number)
                    The relative size of all grobs in a context.

     ‘*note Grob_pq_engraver::’
          Administrate when certain grobs (e.g., note heads) stop
          playing.

          Properties (read)

               ‘busyGrobs’ (list)
                    A queue of ‘(END-MOMENT . GROB)’ cons cells.  This
                    is for internal (C++) use only.  This property
                    contains the grobs which are still busy (e.g.  note
                    heads, spanners, etc.).

          Properties (write)

               ‘busyGrobs’ (list)
                    A queue of ‘(END-MOMENT . GROB)’ cons cells.  This
                    is for internal (C++) use only.  This property
                    contains the grobs which are still busy (e.g.  note
                    heads, spanners, etc.).

     ‘*note Instrument_name_engraver::’
          Create a system start text for instrument or vocal names.

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘instrumentName’ (markup)
                    The name to print left of a staff.  The
                    ‘instrumentName’ property labels the staff in the
                    first system, and the ‘shortInstrumentName’ property
                    labels following lines.

               ‘shortInstrumentName’ (markup)
                    See ‘instrumentName’.

               ‘shortVocalName’ (markup)
                    Name of a vocal line, short version.

               ‘vocalName’ (markup)
                    Name of a vocal line.

          This engraver creates the following layout object(s):

          *note InstrumentName::.

     ‘*note Ledger_line_engraver::’
          Create the spanner to draw ledger lines, and notices objects
          that need ledger lines.

          This engraver creates the following layout object(s):

          *note LedgerLineSpanner::.

     ‘*note Piano_pedal_align_engraver::’
          Align piano pedal symbols and brackets.

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

          This engraver creates the following layout object(s):

          *note SostenutoPedalLineSpanner::, *note
          SustainPedalLineSpanner:: and *note
          UnaCordaPedalLineSpanner::.

     ‘*note Piano_pedal_engraver::’
          Engrave piano pedal symbols and brackets.

          Music types accepted:

          *note sostenuto-event::, *note sustain-event:: and *note
          una-corda-event::

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘pedalSostenutoStrings’ (list)
                    See ‘pedalSustainStrings’.

               ‘pedalSostenutoStyle’ (symbol)
                    See ‘pedalSustainStyle’.

               ‘pedalSustainStrings’ (list)
                    A list of strings to print for sustain-pedal.
                    Format is ‘(UP UPDOWN DOWN)’, where each of the
                    three is the string to print when this is done with
                    the pedal.

               ‘pedalSustainStyle’ (symbol)
                    A symbol that indicates how to print sustain pedals:
                    ‘text’, ‘bracket’ or ‘mixed’ (both).

               ‘pedalUnaCordaStrings’ (list)
                    See ‘pedalSustainStrings’.

               ‘pedalUnaCordaStyle’ (symbol)
                    See ‘pedalSustainStyle’.

          This engraver creates the following layout object(s):

          *note PianoPedalBracket::, *note SostenutoPedal::, *note
          SustainPedal:: and *note UnaCordaPedal::.

     ‘*note Pure_from_neighbor_engraver::’
          Coordinates items that get their pure heights from their
          neighbors.

     ‘*note Rest_collision_engraver::’
          Handle collisions of rests.

          Properties (read)

               ‘busyGrobs’ (list)
                    A queue of ‘(END-MOMENT . GROB)’ cons cells.  This
                    is for internal (C++) use only.  This property
                    contains the grobs which are still busy (e.g.  note
                    heads, spanners, etc.).

          This engraver creates the following layout object(s):

          *note RestCollision::.

     ‘*note Script_row_engraver::’
          Determine order in horizontal side position elements.

          This engraver creates the following layout object(s):

          *note ScriptRow::.

     ‘*note Separating_line_group_engraver::’
          Generate objects for computing spacing parameters.

          Properties (read)

               ‘createSpacing’ (boolean)
                    Create ‘StaffSpacing’ objects?  Should be set for
                    staves.

          Properties (write)

               ‘hasStaffSpacing’ (boolean)
                    True if the current ‘CommandColumn’ contains items
                    that will affect spacing.

          This engraver creates the following layout object(s):

          *note StaffSpacing::.

     ‘*note Staff_collecting_engraver::’
          Maintain the ‘stavesFound’ variable.

          Properties (read)

               ‘stavesFound’ (list of grobs)
                    A list of all staff-symbols found.

          Properties (write)

               ‘stavesFound’ (list of grobs)
                    A list of all staff-symbols found.

     ‘*note Staff_symbol_engraver::’
          Create the constellation of five (default) staff lines.

          Music types accepted:

          *note staff-span-event::

          This engraver creates the following layout object(s):

          *note StaffSymbol::.

     ‘*note Tab_staff_symbol_engraver::’
          Create a tablature staff symbol, but look at ‘stringTunings’
          for the number of lines.

          Properties (read)

               ‘stringTunings’ (list)
                    The tablature strings tuning.  It is a list of the
                    pitches of each string (starting with the lowest
                    numbered one).

          This engraver creates the following layout object(s):

          *note StaffSymbol::.

     ‘*note Time_signature_engraver::’
          Create a *note TimeSignature:: whenever
          ‘timeSignatureFraction’ changes.

          Music types accepted:

          *note time-signature-event::

          Properties (read)

               ‘initialTimeSignatureVisibility’ (vector)
                    break visibility for the initial time signature.

               ‘partialBusy’ (boolean)
                    Signal that \partial acts at the current timestep.

               ‘timeSignatureFraction’ (fraction, as pair)
                    A pair of numbers, signifying the time signature.
                    For example, ‘'(4 . 4)’ is a 4/4 time signature.

          This engraver creates the following layout object(s):

          *note TimeSignature::.


File: lilypond-internals.info,  Node: TabVoice,  Next: VaticanaStaff,  Prev: TabStaff,  Up: Contexts

2.1.30 TabVoice
---------------

Context for drawing notes in a Tab staff.

   This context also accepts commands for the following context(s):

   Voice.

   This context creates the following layout object(s):

   *note Arpeggio::, *note Beam::, *note BendAfter::, *note
BreathingSign::, *note ClusterSpanner::, *note ClusterSpannerBeacon::,
*note CombineTextScript::, *note Dots::, *note DoublePercentRepeat::,
*note DoublePercentRepeatCounter::, *note DoubleRepeatSlash::, *note
DynamicLineSpanner::, *note DynamicText::, *note DynamicTextSpanner::,
*note Flag::, *note Glissando::, *note Hairpin::, *note
InstrumentSwitch::, *note LaissezVibrerTie::, *note
LaissezVibrerTieColumn::, *note LigatureBracket::, *note
MultiMeasureRest::, *note MultiMeasureRestNumber::, *note
MultiMeasureRestText::, *note NoteColumn::, *note NoteSpacing::, *note
PercentRepeat::, *note PercentRepeatCounter::, *note PhrasingSlur::,
*note RepeatSlash::, *note RepeatTie::, *note RepeatTieColumn::, *note
Rest::, *note Script::, *note ScriptColumn::, *note Slur::, *note
Stem::, *note StemStub::, *note StemTremolo::, *note TabNoteHead::,
*note TextScript::, *note TextSpanner::, *note Tie::, *note TieColumn::,
*note TrillSpanner::, *note TupletBracket::, *note TupletNumber:: and
*note VoiceFollower::.

   This is a ‘Bottom’ context; no contexts will be created implicitly
from it.

   This context cannot contain other contexts.

   This context is built from the following engraver(s):

     ‘*note Arpeggio_engraver::’
          Generate an Arpeggio symbol.

          Music types accepted:

          *note arpeggio-event::

          This engraver creates the following layout object(s):

          *note Arpeggio::.

     ‘*note Auto_beam_engraver::’
          Generate beams based on measure characteristics and observed
          Stems.  Uses ‘baseMoment’, ‘beatStructure’, ‘beamExceptions’,
          ‘measureLength’, and ‘measurePosition’ to decide when to start
          and stop a beam.  Overriding beaming is done through *note
          Stem_engraver:: properties ‘stemLeftBeamCount’ and
          ‘stemRightBeamCount’.

          Music types accepted:

          *note beam-forbid-event::

          Properties (read)

               ‘autoBeaming’ (boolean)
                    If set to true then beams are generated
                    automatically.

               ‘baseMoment’ (moment)
                    Smallest unit of time that will stand on its own as
                    a subdivided section.

               ‘beamExceptions’ (list)
                    An alist of exceptions to autobeam rules that
                    normally end on beats.

               ‘beamHalfMeasure’ (boolean)
                    Whether to allow a beam to begin halfway through the
                    measure in triple time, which could look like 6/8.

               ‘beatStructure’ (list)
                    List of ‘baseMoment’s that are combined to make
                    beats.

               ‘subdivideBeams’ (boolean)
                    If set, multiple beams will be subdivided at
                    ‘baseMoment’ positions by only drawing one beam over
                    the beat.

          This engraver creates the following layout object(s):

          *note Beam::.

     ‘*note Beam_engraver::’
          Handle ‘Beam’ events by engraving beams.  If omitted, then
          notes are printed with flags instead of beams.

          Music types accepted:

          *note beam-event::

          Properties (read)

               ‘baseMoment’ (moment)
                    Smallest unit of time that will stand on its own as
                    a subdivided section.

               ‘beamMelismaBusy’ (boolean)
                    Signal if a beam is present.

               ‘beatStructure’ (list)
                    List of ‘baseMoment’s that are combined to make
                    beats.

               ‘subdivideBeams’ (boolean)
                    If set, multiple beams will be subdivided at
                    ‘baseMoment’ positions by only drawing one beam over
                    the beat.

          Properties (write)

               ‘forbidBreak’ (boolean)
                    If set to ‘#t’, prevent a line break at this point.

          This engraver creates the following layout object(s):

          *note Beam::.

     ‘*note Bend_engraver::’
          Create fall spanners.

          Music types accepted:

          *note bend-after-event::

          This engraver creates the following layout object(s):

          *note BendAfter::.

     ‘*note Breathing_sign_engraver::’
          Create a breathing sign.

          Music types accepted:

          *note breathing-event::

          This engraver creates the following layout object(s):

          *note BreathingSign::.

     ‘*note Chord_tremolo_engraver::’
          Generate beams for tremolo repeats.

          Music types accepted:

          *note tremolo-span-event::

          This engraver creates the following layout object(s):

          *note Beam::.

     ‘*note Cluster_spanner_engraver::’
          Engrave a cluster using ‘Spanner’ notation.

          Music types accepted:

          *note cluster-note-event::

          This engraver creates the following layout object(s):

          *note ClusterSpanner:: and *note ClusterSpannerBeacon::.

     ‘*note Dots_engraver::’
          Create *note Dots:: objects for *note
          rhythmic-head-interface::s.

          This engraver creates the following layout object(s):

          *note Dots::.

     ‘*note Double_percent_repeat_engraver::’
          Make double measure repeats.

          Music types accepted:

          *note double-percent-event::

          Properties (read)

               ‘countPercentRepeats’ (boolean)
                    If set, produce counters for percent repeats.

               ‘measureLength’ (moment)
                    Length of one measure in the current time signature.

               ‘repeatCountVisibility’ (procedure)
                    A procedure taking as arguments an integer and
                    context, returning whether the corresponding percent
                    repeat number should be printed when
                    ‘countPercentRepeats’ is set.

          Properties (write)

               ‘forbidBreak’ (boolean)
                    If set to ‘#t’, prevent a line break at this point.

          This engraver creates the following layout object(s):

          *note DoublePercentRepeat:: and *note
          DoublePercentRepeatCounter::.

     ‘*note Dynamic_align_engraver::’
          Align hairpins and dynamic texts on a horizontal line.

          Properties (read)

               ‘currentMusicalColumn’ (graphical (layout) object)
                    Grob that is X-parent to all non-breakable items
                    (note heads, lyrics, etc.).

          This engraver creates the following layout object(s):

          *note DynamicLineSpanner::.

     ‘*note Dynamic_engraver::’
          Create hairpins, dynamic texts and dynamic text spanners.

          Music types accepted:

          *note absolute-dynamic-event::, *note break-span-event:: and
          *note span-dynamic-event::

          Properties (read)

               ‘crescendoSpanner’ (symbol)
                    The type of spanner to be used for crescendi.
                    Available values are ‘hairpin’ and ‘text’.  If
                    unset, a hairpin crescendo is used.

               ‘crescendoText’ (markup)
                    The text to print at start of non-hairpin crescendo,
                    i.e., ‘cresc.’.

               ‘currentMusicalColumn’ (graphical (layout) object)
                    Grob that is X-parent to all non-breakable items
                    (note heads, lyrics, etc.).

               ‘decrescendoSpanner’ (symbol)
                    The type of spanner to be used for decrescendi.
                    Available values are ‘hairpin’ and ‘text’.  If
                    unset, a hairpin decrescendo is used.

               ‘decrescendoText’ (markup)
                    The text to print at start of non-hairpin
                    decrescendo, i.e., ‘dim.’.

          This engraver creates the following layout object(s):

          *note DynamicText::, *note DynamicTextSpanner:: and *note
          Hairpin::.

     ‘*note Font_size_engraver::’
          Put ‘fontSize’ into ‘font-size’ grob property.

          Properties (read)

               ‘fontSize’ (number)
                    The relative size of all grobs in a context.

     ‘*note Forbid_line_break_engraver::’
          Forbid line breaks when note heads are still playing at some
          point.

          Properties (read)

               ‘busyGrobs’ (list)
                    A queue of ‘(END-MOMENT . GROB)’ cons cells.  This
                    is for internal (C++) use only.  This property
                    contains the grobs which are still busy (e.g.  note
                    heads, spanners, etc.).

          Properties (write)

               ‘forbidBreak’ (boolean)
                    If set to ‘#t’, prevent a line break at this point.

     ‘*note Glissando_engraver::’
          Engrave glissandi.

          Music types accepted:

          *note glissando-event::

          Properties (read)

               ‘glissandoMap’ (list)
                    A map in the form of ’((source1 .  target1) (source2
                    .  target2) (sourcen .  targetn)) showing the
                    glissandi to be drawn for note columns.  The value
                    ’() will default to ’((0 .  0) (1 .  1) (n .  n)),
                    where n is the minimal number of note-heads in the
                    two note columns between which the glissandi occur.

          This engraver creates the following layout object(s):

          *note Glissando::.

     ‘*note Grace_auto_beam_engraver::’
          Generates one autobeam group across an entire grace phrase.
          As usual, any manual beaming or ‘\noBeam’ will block
          autobeaming, just like setting the context property
          ‘autoBeaming’ to ‘##f’.

          Music types accepted:

          *note beam-forbid-event::

          Properties (read)

               ‘autoBeaming’ (boolean)
                    If set to true then beams are generated
                    automatically.

          This engraver creates the following layout object(s):

          *note Beam::.

     ‘*note Grace_beam_engraver::’
          Handle ‘Beam’ events by engraving beams.  If omitted, then
          notes are printed with flags instead of beams.  Only engraves
          beams when we are at grace points in time.

          Music types accepted:

          *note beam-event::

          Properties (read)

               ‘baseMoment’ (moment)
                    Smallest unit of time that will stand on its own as
                    a subdivided section.

               ‘beamMelismaBusy’ (boolean)
                    Signal if a beam is present.

               ‘beatStructure’ (list)
                    List of ‘baseMoment’s that are combined to make
                    beats.

               ‘subdivideBeams’ (boolean)
                    If set, multiple beams will be subdivided at
                    ‘baseMoment’ positions by only drawing one beam over
                    the beat.

          This engraver creates the following layout object(s):

          *note Beam::.

     ‘*note Grace_engraver::’
          Set font size and other properties for grace notes.

          Properties (read)

               ‘graceSettings’ (list)
                    Overrides for grace notes.  This property should be
                    manipulated through the ‘add-grace-property’
                    function.

     ‘*note Grob_pq_engraver::’
          Administrate when certain grobs (e.g., note heads) stop
          playing.

          Properties (read)

               ‘busyGrobs’ (list)
                    A queue of ‘(END-MOMENT . GROB)’ cons cells.  This
                    is for internal (C++) use only.  This property
                    contains the grobs which are still busy (e.g.  note
                    heads, spanners, etc.).

          Properties (write)

               ‘busyGrobs’ (list)
                    A queue of ‘(END-MOMENT . GROB)’ cons cells.  This
                    is for internal (C++) use only.  This property
                    contains the grobs which are still busy (e.g.  note
                    heads, spanners, etc.).

     ‘*note Instrument_switch_engraver::’
          Create a cue text for taking instrument.

          Properties (read)

               ‘instrumentCueName’ (markup)
                    The name to print if another instrument is to be
                    taken.

          This engraver creates the following layout object(s):

          *note InstrumentSwitch::.

     ‘*note Laissez_vibrer_engraver::’
          Create laissez vibrer items.

          Music types accepted:

          *note laissez-vibrer-event::

          This engraver creates the following layout object(s):

          *note LaissezVibrerTie:: and *note LaissezVibrerTieColumn::.

     ‘*note Ligature_bracket_engraver::’
          Handle ‘Ligature_events’ by engraving ‘Ligature’ brackets.

          Music types accepted:

          *note ligature-event::

          This engraver creates the following layout object(s):

          *note LigatureBracket::.

     ‘*note Multi_measure_rest_engraver::’
          Engrave multi-measure rests that are produced with ‘R’.  It
          reads ‘measurePosition’ and ‘internalBarNumber’ to determine
          what number to print over the *note MultiMeasureRest::.

          Music types accepted:

          *note multi-measure-rest-event:: and *note
          multi-measure-text-event::

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘internalBarNumber’ (integer)
                    Contains the current barnumber.  This property is
                    used for internal timekeeping, among others by the
                    ‘Accidental_engraver’.

               ‘measurePosition’ (moment)
                    How much of the current measure have we had.  This
                    can be set manually to create incomplete measures.

               ‘restNumberThreshold’ (number)
                    If a multimeasure rest has more measures than this,
                    a number is printed.

               ‘whichBar’ (string)
                    This property is read to determine what type of bar
                    line to create.

                    Example:

                         \set Staff.whichBar = ".|:"

                    This will create a start-repeat bar in this staff
                    only.  Valid values are described in
                    ‘scm/bar-line.scm’.

          This engraver creates the following layout object(s):

          *note MultiMeasureRest::, *note MultiMeasureRestNumber:: and
          *note MultiMeasureRestText::.

     ‘*note Note_head_line_engraver::’
          Engrave a line between two note heads in a staff switch if
          ‘followVoice’ is set.

          Properties (read)

               ‘followVoice’ (boolean)
                    If set, note heads are tracked across staff switches
                    by a thin line.

          This engraver creates the following layout object(s):

          *note VoiceFollower::.

     ‘*note Note_spacing_engraver::’
          Generate ‘NoteSpacing’, an object linking horizontal lines for
          use in spacing.

          This engraver creates the following layout object(s):

          *note NoteSpacing::.

     ‘*note Part_combine_engraver::’
          Part combine engraver for orchestral scores: Print markings
          ‘a2’, ‘Solo’, ‘Solo II’, and ‘unisono’.

          Music types accepted:

          *note note-event:: and *note part-combine-event::

          Properties (read)

               ‘aDueText’ (markup)
                    Text to print at a unisono passage.

               ‘partCombineTextsOnNote’ (boolean)
                    Print part-combine texts only on the next note
                    rather than immediately on rests or skips.

               ‘printPartCombineTexts’ (boolean)
                    Set ‘Solo’ and ‘A due’ texts in the part combiner?

               ‘soloIIText’ (markup)
                    The text for the start of a solo for voice ‘two’
                    when part-combining.

               ‘soloText’ (markup)
                    The text for the start of a solo when
                    part-combining.

          This engraver creates the following layout object(s):

          *note CombineTextScript::.

     ‘*note Percent_repeat_engraver::’
          Make whole measure repeats.

          Music types accepted:

          *note percent-event::

          Properties (read)

               ‘countPercentRepeats’ (boolean)
                    If set, produce counters for percent repeats.

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘repeatCountVisibility’ (procedure)
                    A procedure taking as arguments an integer and
                    context, returning whether the corresponding percent
                    repeat number should be printed when
                    ‘countPercentRepeats’ is set.

          This engraver creates the following layout object(s):

          *note PercentRepeat:: and *note PercentRepeatCounter::.

     ‘*note Phrasing_slur_engraver::’
          Print phrasing slurs.  Similar to *note Slur_engraver::.

          Music types accepted:

          *note note-event:: and *note phrasing-slur-event::

          This engraver creates the following layout object(s):

          *note PhrasingSlur::.

     ‘*note Repeat_tie_engraver::’
          Create repeat ties.

          Music types accepted:

          *note repeat-tie-event::

          This engraver creates the following layout object(s):

          *note RepeatTie:: and *note RepeatTieColumn::.

     ‘*note Rest_engraver::’
          Engrave rests.

          Music types accepted:

          *note rest-event::

          Properties (read)

               ‘middleCPosition’ (number)
                    The place of the middle C, measured in half
                    staff-spaces.  Usually determined by looking at
                    ‘middleCClefPosition’ and ‘middleCOffset’.

          This engraver creates the following layout object(s):

          *note Rest::.

     ‘*note Rhythmic_column_engraver::’
          Generate ‘NoteColumn’, an object that groups stems, note
          heads, and rests.

          This engraver creates the following layout object(s):

          *note NoteColumn::.

     ‘*note Script_column_engraver::’
          Find potentially colliding scripts and put them into a
          ‘ScriptColumn’ object; that will fix the collisions.

          This engraver creates the following layout object(s):

          *note ScriptColumn::.

     ‘*note Script_engraver::’
          Handle note scripted articulations.

          Music types accepted:

          *note articulation-event::

          Properties (read)

               ‘scriptDefinitions’ (list)
                    The description of scripts.  This is used by the
                    ‘Script_engraver’ for typesetting note-superscripts
                    and subscripts.  See ‘scm/script.scm’ for more
                    information.

          This engraver creates the following layout object(s):

          *note Script::.

     ‘*note Slash_repeat_engraver::’
          Make beat repeats.

          Music types accepted:

          *note repeat-slash-event::

          This engraver creates the following layout object(s):

          *note DoubleRepeatSlash:: and *note RepeatSlash::.

     ‘*note Slur_engraver::’
          Build slur grobs from slur events.

          Music types accepted:

          *note note-event:: and *note slur-event::

          Properties (read)

               ‘doubleSlurs’ (boolean)
                    If set, two slurs are created for every slurred
                    note, one above and one below the chord.

               ‘slurMelismaBusy’ (boolean)
                    Signal if a slur is present.

          This engraver creates the following layout object(s):

          *note Slur::.

     ‘*note Spanner_break_forbid_engraver::’
          Forbid breaks in certain spanners.

     ‘*note Stem_engraver::’
          Create stems, flags and single-stem tremolos.  It also works
          together with the beam engraver for overriding beaming.

          Music types accepted:

          *note tremolo-event:: and *note tuplet-span-event::

          Properties (read)

               ‘stemLeftBeamCount’ (integer)
                    Specify the number of beams to draw on the left side
                    of the next note.  Overrides automatic beaming.  The
                    value is only used once, and then it is erased.

               ‘stemRightBeamCount’ (integer)
                    See ‘stemLeftBeamCount’.

               ‘whichBar’ (string)
                    This property is read to determine what type of bar
                    line to create.

                    Example:

                         \set Staff.whichBar = ".|:"

                    This will create a start-repeat bar in this staff
                    only.  Valid values are described in
                    ‘scm/bar-line.scm’.

          This engraver creates the following layout object(s):

          *note Flag::, *note Stem::, *note StemStub:: and *note
          StemTremolo::.

     ‘*note Tab_note_heads_engraver::’
          Generate one or more tablature note heads from event of type
          ‘NoteEvent’.

          Music types accepted:

          *note fingering-event::, *note note-event:: and *note
          string-number-event::

          Properties (read)

               ‘defaultStrings’ (list)
                    A list of strings to use in calculating frets for
                    tablatures and fretboards if no strings are provided
                    in the notes for the current moment.

               ‘fretLabels’ (list)
                    A list of strings or Scheme-formatted markups
                    containing, in the correct order, the labels to be
                    used for lettered frets in tablature.

               ‘highStringOne’ (boolean)
                    Whether the first string is the string with highest
                    pitch on the instrument.  This used by the automatic
                    string selector for tablature notation.

               ‘middleCPosition’ (number)
                    The place of the middle C, measured in half
                    staff-spaces.  Usually determined by looking at
                    ‘middleCClefPosition’ and ‘middleCOffset’.

               ‘minimumFret’ (number)
                    The tablature auto string-selecting mechanism
                    selects the highest string with a fret at least
                    ‘minimumFret’.

               ‘noteToFretFunction’ (procedure)
                    Convert list of notes and list of defined strings to
                    full list of strings and fret numbers.  Parameters:
                    The context, a list of note events, a list of
                    tabstring events, and the fretboard grob if a
                    fretboard is desired.

               ‘stringOneTopmost’ (boolean)
                    Whether the first string is printed on the top line
                    of the tablature.

               ‘stringTunings’ (list)
                    The tablature strings tuning.  It is a list of the
                    pitches of each string (starting with the lowest
                    numbered one).

               ‘tablatureFormat’ (procedure)
                    A function formatting a tablature note head.  Called
                    with three arguments: context, string number and,
                    fret number.  It returns the text as a markup.

               ‘tabStaffLineLayoutFunction’ (procedure)
                    A function determining the staff position of a
                    tablature note head.  Called with two arguments: the
                    context and the string.

          This engraver creates the following layout object(s):

          *note TabNoteHead::.

     ‘*note Tab_tie_follow_engraver::’
          Adjust TabNoteHead properties when a tie is followed by a slur
          or glissando.

     ‘*note Text_engraver::’
          Create text scripts.

          Music types accepted:

          *note text-script-event::

          This engraver creates the following layout object(s):

          *note TextScript::.

     ‘*note Text_spanner_engraver::’
          Create text spanner from an event.

          Music types accepted:

          *note text-span-event::

          Properties (read)

               ‘currentMusicalColumn’ (graphical (layout) object)
                    Grob that is X-parent to all non-breakable items
                    (note heads, lyrics, etc.).

          This engraver creates the following layout object(s):

          *note TextSpanner::.

     ‘*note Tie_engraver::’
          Generate ties between note heads of equal pitch.

          Music types accepted:

          *note tie-event::

          Properties (read)

               ‘skipTypesetting’ (boolean)
                    If true, no typesetting is done, speeding up the
                    interpretation phase.  Useful for debugging large
                    scores.

               ‘tieWaitForNote’ (boolean)
                    If true, tied notes do not have to follow each other
                    directly.  This can be used for writing out
                    arpeggios.

          Properties (write)

               ‘tieMelismaBusy’ (boolean)
                    Signal whether a tie is present.

          This engraver creates the following layout object(s):

          *note Tie:: and *note TieColumn::.

     ‘*note Trill_spanner_engraver::’
          Create trill spanner from an event.

          Music types accepted:

          *note trill-span-event::

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘currentMusicalColumn’ (graphical (layout) object)
                    Grob that is X-parent to all non-breakable items
                    (note heads, lyrics, etc.).

          This engraver creates the following layout object(s):

          *note TrillSpanner::.

     ‘*note Tuplet_engraver::’
          Catch tuplet events and generate appropriate bracket.

          Music types accepted:

          *note tuplet-span-event::

          Properties (read)

               ‘tupletFullLength’ (boolean)
                    If set, the tuplet is printed up to the start of the
                    next note.

               ‘tupletFullLengthNote’ (boolean)
                    If set, end at the next note, otherwise end on the
                    matter (time signatures, etc.)  before the note.

          This engraver creates the following layout object(s):

          *note TupletBracket:: and *note TupletNumber::.

