This is lilypond-internals.info, produced by makeinfo version 6.1 from
internals.texi.

INFO-DIR-SECTION LilyPond
START-INFO-DIR-ENTRY
* GNU LilyPond Internals Reference: (internals).          LilyPond Internals Reference.
END-INFO-DIR-ENTRY


File: lilypond-internals.info,  Node: Top,  Next: Music definitions,  Up: (dir)

GNU LilyPond – Internals Reference
**********************************

This is the Internals Reference (IR) for version 2.19.65 of LilyPond,
the GNU music typesetter.

* Menu:

* Music definitions::   Definition of the input data structures.
* Translation::         From music to layout.
* Backend::             Reference for the layout engine.
* Scheme functions::    Primitive functions exported by LilyPond.
* Indices::             


File: lilypond-internals.info,  Node: Music definitions,  Next: Translation,  Prev: Top,  Up: Top

1 Music definitions
*******************

* Menu:

* Music expressions::   Objects that represent music.
* Music classes::       
* Music properties::    All music properties, including descriptions.


File: lilypond-internals.info,  Node: Music expressions,  Next: Music classes,  Up: Music definitions

1.1 Music expressions
=====================

* Menu:

* AbsoluteDynamicEvent::      
* AlternativeEvent::          
* AnnotateOutputEvent::       
* ApplyContext::              
* ApplyOutputEvent::          
* ArpeggioEvent::             
* ArticulationEvent::         
* AutoChangeMusic::           
* BarCheck::                  
* BassFigureEvent::           
* BeamEvent::                 
* BeamForbidEvent::           
* BendAfterEvent::            
* BreakDynamicSpanEvent::     
* BreathingEvent::            
* ClusterNoteEvent::          
* CompletizeExtenderEvent::   
* ContextChange::             
* ContextSpeccedMusic::       
* CrescendoEvent::            
* DecrescendoEvent::          
* DoublePercentEvent::        
* EpisemaEvent::              
* Event::                     
* EventChord::                
* ExtenderEvent::             
* FingeringEvent::            
* FootnoteEvent::             
* GlissandoEvent::            
* GraceMusic::                
* HarmonicEvent::             
* HyphenEvent::               
* KeyChangeEvent::            
* LabelEvent::                
* LaissezVibrerEvent::        
* LigatureEvent::             
* LineBreakEvent::            
* LyricCombineMusic::         
* LyricEvent::                
* MarkEvent::                 
* MeasureCounterEvent::       
* MultiMeasureRestEvent::     
* MultiMeasureRestMusic::     
* MultiMeasureTextEvent::     
* Music::                     
* NoteEvent::                 
* NoteGroupingEvent::         
* OttavaMusic::               
* OverrideProperty::          
* PageBreakEvent::            
* PageTurnEvent::             
* PartCombineMusic::          
* PartCombinePartMusic::      
* PartialSet::                
* PercentEvent::              
* PercentRepeatedMusic::      
* PesOrFlexaEvent::           
* PhrasingSlurEvent::         
* PostEvents::                
* PropertySet::               
* PropertyUnset::             
* QuoteMusic::                
* RelativeOctaveCheck::       
* RelativeOctaveMusic::       
* RepeatSlashEvent::          
* RepeatTieEvent::            
* RepeatedMusic::             
* RestEvent::                 
* RevertProperty::            
* ScriptEvent::               
* SequentialMusic::           
* SimultaneousMusic::         
* SkipEvent::                 
* SkipMusic::                 
* SlurEvent::                 
* SoloOneEvent::              
* SoloTwoEvent::              
* SostenutoEvent::            
* SpacingSectionEvent::       
* SpanEvent::                 
* StaffSpanEvent::            
* StringNumberEvent::         
* StrokeFingerEvent::         
* SustainEvent::              
* TempoChangeEvent::          
* TextScriptEvent::           
* TextSpanEvent::             
* TieEvent::                  
* TimeScaledMusic::           
* TimeSignatureEvent::        
* TimeSignatureMusic::        
* TransposedMusic::           
* TremoloEvent::              
* TremoloRepeatedMusic::      
* TremoloSpanEvent::          
* TrillSpanEvent::            
* TupletSpanEvent::           
* UnaCordaEvent::             
* UnfoldedRepeatedMusic::     
* UnisonoEvent::              
* UnrelativableMusic::        
* VoiceSeparator::            
* VoltaRepeatedMusic::        


File: lilypond-internals.info,  Node: AbsoluteDynamicEvent,  Next: AlternativeEvent,  Up: Music expressions

1.1.1 AbsoluteDynamicEvent
--------------------------

Create a dynamic mark.

   Syntax: NOTE‘\x’, where ‘\x’ is a dynamic mark like ‘\ppp’ or ‘\sfz’.
A complete list is in file ‘ly/dynamic-scripts-init.ly’.

   Event classes: *note absolute-dynamic-event::, *note dynamic-event::,
*note music-event:: and *note StreamEvent::.

   Accepted by: *note Dynamic_engraver:: and *note Dynamic_performer::.

   Properties:

     ‘name’ (symbol):
          ‘'AbsoluteDynamicEvent’

          Name of this music object.

     ‘types’ (list):
          '(post-event
             event
             dynamic-event
             absolute-dynamic-event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: AlternativeEvent,  Next: AnnotateOutputEvent,  Prev: AbsoluteDynamicEvent,  Up: Music expressions

1.1.2 AlternativeEvent
----------------------

Create an alternative event.

   Event classes: *note alternative-event::, *note music-event:: and
*note StreamEvent::.

   Accepted by: *note Bar_number_engraver::.

   Properties:

     ‘name’ (symbol):
          ‘'AlternativeEvent’

          Name of this music object.

     ‘types’ (list):
          '(event alternative-event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: AnnotateOutputEvent,  Next: ApplyContext,  Prev: AlternativeEvent,  Up: Music expressions

1.1.3 AnnotateOutputEvent
-------------------------

Print an annotation of an output element.

   Event classes: *note annotate-output-event::, *note music-event:: and
*note StreamEvent::.

   Accepted by: *note Balloon_engraver::.

   Properties:

     ‘name’ (symbol):
          ‘'AnnotateOutputEvent’

          Name of this music object.

     ‘types’ (list):
          '(event annotate-output-event post-event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: ApplyContext,  Next: ApplyOutputEvent,  Prev: AnnotateOutputEvent,  Up: Music expressions

1.1.4 ApplyContext
------------------

Call the argument with the current context during interpreting phase.

   Properties:

     ‘iterator-ctor’ (procedure):
          ‘ly:apply-context-iterator::constructor’

          Function to construct a ‘music-event-iterator’ object for this
          music.

     ‘name’ (symbol):
          ‘'ApplyContext’

          Name of this music object.

     ‘types’ (list):
          '(apply-context)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: ApplyOutputEvent,  Next: ArpeggioEvent,  Prev: ApplyContext,  Up: Music expressions

1.1.5 ApplyOutputEvent
----------------------

Call the argument with all current grobs during interpreting phase.

   Syntax: ‘\applyOutput #'CONTEXT FUNC’

   Arguments to FUNC are 1. the grob, 2. the originating context, and
3. the context where FUNC is called.

   Event classes: *note apply-output-event::, *note
layout-instruction-event::, *note music-event:: and *note StreamEvent::.

   Accepted by: *note Output_property_engraver::.

   Properties:

     ‘name’ (symbol):
          ‘'ApplyOutputEvent’

          Name of this music object.

     ‘types’ (list):
          '(event apply-output-event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: ArpeggioEvent,  Next: ArticulationEvent,  Prev: ApplyOutputEvent,  Up: Music expressions

1.1.6 ArpeggioEvent
-------------------

Make an arpeggio on this note.

   Syntax: NOTE‘-\arpeggio’

   Event classes: *note arpeggio-event::, *note music-event:: and *note
StreamEvent::.

   Accepted by: *note Arpeggio_engraver::.

   Properties:

     ‘name’ (symbol):
          ‘'ArpeggioEvent’

          Name of this music object.

     ‘types’ (list):
          '(post-event arpeggio-event event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: ArticulationEvent,  Next: AutoChangeMusic,  Prev: ArpeggioEvent,  Up: Music expressions

1.1.7 ArticulationEvent
-----------------------

Add an articulation marking to a note.

   Syntax: NOTE‘x’‘y’, where ‘x’ is a direction (‘^’ for up or ‘_’ for
down), or LilyPond’s choice (no direction specified), and where ‘y’ is
an articulation (such as ‘-.’, ‘->’, ‘\tenuto’, ‘\downbow’).  See the
Notation Reference for details.

   Event classes: *note articulation-event::, *note music-event::, *note
script-event:: and *note StreamEvent::.

   Accepted by: *note Note_performer:: and *note Script_engraver::.

   Properties:

     ‘name’ (symbol):
          ‘'ArticulationEvent’

          Name of this music object.

     ‘types’ (list):
          '(post-event
             event
             articulation-event
             script-event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: AutoChangeMusic,  Next: BarCheck,  Prev: ArticulationEvent,  Up: Music expressions

1.1.8 AutoChangeMusic
---------------------

Used for making voices that switch between piano staves automatically.

   Properties:

     ‘iterator-ctor’ (procedure):
          ‘ly:auto-change-iterator::constructor’

          Function to construct a ‘music-event-iterator’ object for this
          music.

     ‘length-callback’ (procedure):
          ‘ly:music-wrapper::length-callback’

          How to compute the duration of this music.  This property can
          only be defined as initializer in
          ‘scm/define-music-types.scm’.

     ‘name’ (symbol):
          ‘'AutoChangeMusic’

          Name of this music object.

     ‘start-callback’ (procedure):
          ‘ly:music-wrapper::start-callback’

          Function to compute the negative length of starting grace
          notes.  This property can only be defined as initializer in
          ‘scm/define-music-types.scm’.

     ‘types’ (list):
          '(music-wrapper-music auto-change-instruction)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: BarCheck,  Next: BassFigureEvent,  Prev: AutoChangeMusic,  Up: Music expressions

1.1.9 BarCheck
--------------

Check whether this music coincides with the start of the measure.

   Properties:

     ‘iterator-ctor’ (procedure):
          ‘ly:bar-check-iterator::constructor’

          Function to construct a ‘music-event-iterator’ object for this
          music.

     ‘name’ (symbol):
          ‘'BarCheck’

          Name of this music object.

     ‘types’ (list):
          '(bar-check)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: BassFigureEvent,  Next: BeamEvent,  Prev: BarCheck,  Up: Music expressions

1.1.10 BassFigureEvent
----------------------

Print a bass-figure text.

   Event classes: *note bass-figure-event::, *note music-event::, *note
rhythmic-event:: and *note StreamEvent::.

   Accepted by: *note Figured_bass_engraver::.

   Properties:

     ‘name’ (symbol):
          ‘'BassFigureEvent’

          Name of this music object.

     ‘types’ (list):
          '(event rhythmic-event bass-figure-event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: BeamEvent,  Next: BeamForbidEvent,  Prev: BassFigureEvent,  Up: Music expressions

1.1.11 BeamEvent
----------------

Start or stop a beam.

   Syntax for manual control: ‘c8-[ c c-] c8’

   Event classes: *note beam-event::, *note music-event::, *note
span-event:: and *note StreamEvent::.

   Accepted by: *note Beam_engraver::, *note Beam_performer:: and *note
Grace_beam_engraver::.

   Properties:

     ‘name’ (symbol):
          ‘'BeamEvent’

          Name of this music object.

     ‘types’ (list):
          '(post-event event beam-event span-event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: BeamForbidEvent,  Next: BendAfterEvent,  Prev: BeamEvent,  Up: Music expressions

1.1.12 BeamForbidEvent
----------------------

Specify that a note may not auto-beamed.

   Event classes: *note beam-forbid-event::, *note music-event:: and
*note StreamEvent::.

   Accepted by: *note Auto_beam_engraver:: and *note
Grace_auto_beam_engraver::.

   Properties:

     ‘name’ (symbol):
          ‘'BeamForbidEvent’

          Name of this music object.

     ‘types’ (list):
          '(post-event event beam-forbid-event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: BendAfterEvent,  Next: BreakDynamicSpanEvent,  Prev: BeamForbidEvent,  Up: Music expressions

1.1.13 BendAfterEvent
---------------------

A drop/fall/doit jazz articulation.

   Event classes: *note bend-after-event::, *note music-event:: and
*note StreamEvent::.

   Accepted by: *note Bend_engraver::.

   Properties:

     ‘name’ (symbol):
          ‘'BendAfterEvent’

          Name of this music object.

     ‘types’ (list):
          '(post-event bend-after-event event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: BreakDynamicSpanEvent,  Next: BreathingEvent,  Prev: BendAfterEvent,  Up: Music expressions

1.1.14 BreakDynamicSpanEvent
----------------------------

End an alignment spanner for dynamics here.

   Event classes: *note break-dynamic-span-event::, *note
break-span-event::, *note music-event:: and *note StreamEvent::.

   Accepted by: *note Dynamic_engraver::.

   Properties:

     ‘name’ (symbol):
          ‘'BreakDynamicSpanEvent’

          Name of this music object.

     ‘types’ (list):
          '(post-event
             break-span-event
             break-dynamic-span-event
             event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: BreathingEvent,  Next: ClusterNoteEvent,  Prev: BreakDynamicSpanEvent,  Up: Music expressions

1.1.15 BreathingEvent
---------------------

Create a ‘breath mark’ or ‘comma’.

   Syntax: NOTE‘\breathe’

   Event classes: *note breathing-event::, *note music-event:: and *note
StreamEvent::.

   Accepted by: *note Breathing_sign_engraver:: and *note
Note_performer::.

   Properties:

     ‘midi-length’ (procedure):
          ‘breathe::midi-length’

          Function to determine how long to play a note in MIDI. It
          should take a moment (the written length of the note) and a
          context, and return a moment (the length to play the note).

     ‘name’ (symbol):
          ‘'BreathingEvent’

          Name of this music object.

     ‘types’ (list):
          '(event breathing-event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: ClusterNoteEvent,  Next: CompletizeExtenderEvent,  Prev: BreathingEvent,  Up: Music expressions

1.1.16 ClusterNoteEvent
-----------------------

A note that is part of a cluster.

   Event classes: *note cluster-note-event::, *note melodic-event::,
*note music-event::, *note rhythmic-event:: and *note StreamEvent::.

   Accepted by: *note Cluster_spanner_engraver::.

   Properties:

     ‘iterator-ctor’ (procedure):
          ‘ly:rhythmic-music-iterator::constructor’

          Function to construct a ‘music-event-iterator’ object for this
          music.

     ‘name’ (symbol):
          ‘'ClusterNoteEvent’

          Name of this music object.

     ‘types’ (list):
          '(cluster-note-event
             melodic-event
             rhythmic-event
             event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: CompletizeExtenderEvent,  Next: ContextChange,  Prev: ClusterNoteEvent,  Up: Music expressions

1.1.17 CompletizeExtenderEvent
------------------------------

Used internally to signal the end of a lyrics block to ensure extenders
are completed correctly when a ‘Lyrics’ context ends before its
associated ‘Voice’ context.

   Event classes: *note completize-extender-event::, *note music-event::
and *note StreamEvent::.

   Accepted by: *note Extender_engraver::.

   Properties:

     ‘name’ (symbol):
          ‘'CompletizeExtenderEvent’

          Name of this music object.

     ‘types’ (list):
          '(completize-extender-event event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: ContextChange,  Next: ContextSpeccedMusic,  Prev: CompletizeExtenderEvent,  Up: Music expressions

1.1.18 ContextChange
--------------------

Change staves in Piano staff.

   Syntax: ‘\change Staff = NEW-ID’

   Properties:

     ‘iterator-ctor’ (procedure):
          ‘ly:change-iterator::constructor’

          Function to construct a ‘music-event-iterator’ object for this
          music.

     ‘name’ (symbol):
          ‘'ContextChange’

          Name of this music object.

     ‘types’ (list):
          '(translator-change-instruction)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: ContextSpeccedMusic,  Next: CrescendoEvent,  Prev: ContextChange,  Up: Music expressions

1.1.19 ContextSpeccedMusic
--------------------------

Interpret the argument music within a specific context.

   Properties:

     ‘iterator-ctor’ (procedure):
          ‘ly:context-specced-music-iterator::constructor’

          Function to construct a ‘music-event-iterator’ object for this
          music.

     ‘length-callback’ (procedure):
          ‘ly:music-wrapper::length-callback’

          How to compute the duration of this music.  This property can
          only be defined as initializer in
          ‘scm/define-music-types.scm’.

     ‘name’ (symbol):
          ‘'ContextSpeccedMusic’

          Name of this music object.

     ‘start-callback’ (procedure):
          ‘ly:music-wrapper::start-callback’

          Function to compute the negative length of starting grace
          notes.  This property can only be defined as initializer in
          ‘scm/define-music-types.scm’.

     ‘types’ (list):
          '(context-specification music-wrapper-music)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: CrescendoEvent,  Next: DecrescendoEvent,  Prev: ContextSpeccedMusic,  Up: Music expressions

1.1.20 CrescendoEvent
---------------------

Begin or end a crescendo.

   Syntax: NOTE‘\<’ ... NOTE‘\!’

   An alternative syntax is NOTE‘\cr’ ... NOTE‘\endcr’.

   Event classes: *note crescendo-event::, *note music-event::, *note
span-dynamic-event::, *note span-event:: and *note StreamEvent::.

   Accepted by: *note Dynamic_engraver:: and *note Dynamic_performer::.

   Properties:

     ‘name’ (symbol):
          ‘'CrescendoEvent’

          Name of this music object.

     ‘types’ (list):
          '(post-event
             span-event
             span-dynamic-event
             crescendo-event
             event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: DecrescendoEvent,  Next: DoublePercentEvent,  Prev: CrescendoEvent,  Up: Music expressions

1.1.21 DecrescendoEvent
-----------------------

Begin or end a decrescendo.

   Syntax: NOTE‘\>’ ... NOTE‘\!’

   An alternative syntax is NOTE‘\decr’ ... NOTE‘\enddecr’.

   Event classes: *note decrescendo-event::, *note music-event::, *note
span-dynamic-event::, *note span-event:: and *note StreamEvent::.

   Accepted by: *note Dynamic_engraver:: and *note Dynamic_performer::.

   Properties:

     ‘name’ (symbol):
          ‘'DecrescendoEvent’

          Name of this music object.

     ‘types’ (list):
          '(post-event
             span-event
             span-dynamic-event
             decrescendo-event
             event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: DoublePercentEvent,  Next: EpisemaEvent,  Prev: DecrescendoEvent,  Up: Music expressions

1.1.22 DoublePercentEvent
-------------------------

Used internally to signal double percent repeats.

   Event classes: *note double-percent-event::, *note music-event::,
*note rhythmic-event:: and *note StreamEvent::.

   Accepted by: *note Double_percent_repeat_engraver::.

   Properties:

     ‘name’ (symbol):
          ‘'DoublePercentEvent’

          Name of this music object.

     ‘types’ (list):
          '(event double-percent-event rhythmic-event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: EpisemaEvent,  Next: Event,  Prev: DoublePercentEvent,  Up: Music expressions

1.1.23 EpisemaEvent
-------------------

Begin or end an episema.

   Event classes: *note episema-event::, *note music-event::, *note
span-event:: and *note StreamEvent::.

   Accepted by: *note Episema_engraver::.

   Properties:

     ‘name’ (symbol):
          ‘'EpisemaEvent’

          Name of this music object.

     ‘types’ (list):
          '(post-event span-event event episema-event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: Event,  Next: EventChord,  Prev: EpisemaEvent,  Up: Music expressions

1.1.24 Event
------------

Atomic music event.

   Properties:

     ‘name’ (symbol):
          ‘'Event’

          Name of this music object.

     ‘types’ (list):
          '(event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: EventChord,  Next: ExtenderEvent,  Prev: Event,  Up: Music expressions

1.1.25 EventChord
-----------------

Explicitly entered chords.

   When iterated, ‘elements’ are converted to events at the current
timestep, followed by any ‘articulations’.  Per-chord postevents
attached by the parser just follow any rhythmic events in ‘elements’
instead of utilizing ‘articulations’.

   An unexpanded chord repetition ‘q’ is recognizable by having its
duration stored in ‘duration’.

   Properties:

     ‘iterator-ctor’ (procedure):
          ‘ly:event-chord-iterator::constructor’

          Function to construct a ‘music-event-iterator’ object for this
          music.

     ‘length-callback’ (procedure):
          ‘ly:music-sequence::event-chord-length-callback’

          How to compute the duration of this music.  This property can
          only be defined as initializer in
          ‘scm/define-music-types.scm’.

     ‘name’ (symbol):
          ‘'EventChord’

          Name of this music object.

     ‘to-relative-callback’ (procedure):
          ‘ly:music-sequence::event-chord-relative-callback’

          How to transform a piece of music to relative pitches.

     ‘types’ (list):
          '(event-chord simultaneous-music)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: ExtenderEvent,  Next: FingeringEvent,  Prev: EventChord,  Up: Music expressions

1.1.26 ExtenderEvent
--------------------

Extend lyrics.

   Event classes: *note extender-event::, *note music-event:: and *note
StreamEvent::.

   Accepted by: *note Extender_engraver::.

   Properties:

     ‘name’ (symbol):
          ‘'ExtenderEvent’

          Name of this music object.

     ‘types’ (list):
          '(post-event extender-event event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: FingeringEvent,  Next: FootnoteEvent,  Prev: ExtenderEvent,  Up: Music expressions

1.1.27 FingeringEvent
---------------------

Specify what finger to use for this note.

   Event classes: *note fingering-event::, *note music-event:: and *note
StreamEvent::.

   Accepted by: *note Fingering_engraver::, *note Fretboard_engraver::
and *note Tab_note_heads_engraver::.

   Properties:

     ‘name’ (symbol):
          ‘'FingeringEvent’

          Name of this music object.

     ‘types’ (list):
          '(post-event fingering-event event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: FootnoteEvent,  Next: GlissandoEvent,  Prev: FingeringEvent,  Up: Music expressions

1.1.28 FootnoteEvent
--------------------

Footnote a grob.

   Event classes: *note footnote-event::, *note music-event:: and *note
StreamEvent::.

   Not accepted by any engraver or performer.

   Properties:

     ‘name’ (symbol):
          ‘'FootnoteEvent’

          Name of this music object.

     ‘types’ (list):
          '(event footnote-event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: GlissandoEvent,  Next: GraceMusic,  Prev: FootnoteEvent,  Up: Music expressions

1.1.29 GlissandoEvent
---------------------

Start a glissando on this note.

   Event classes: *note glissando-event::, *note music-event:: and *note
StreamEvent::.

   Accepted by: *note Glissando_engraver::.

   Properties:

     ‘name’ (symbol):
          ‘'GlissandoEvent’

          Name of this music object.

     ‘types’ (list):
          '(post-event glissando-event event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: GraceMusic,  Next: HarmonicEvent,  Prev: GlissandoEvent,  Up: Music expressions

1.1.30 GraceMusic
-----------------

Interpret the argument as grace notes.

   Properties:

     ‘iterator-ctor’ (procedure):
          ‘ly:grace-iterator::constructor’

          Function to construct a ‘music-event-iterator’ object for this
          music.

     ‘length’ (moment):
          ‘#<Mom 0>’

          The duration of this music.

     ‘name’ (symbol):
          ‘'GraceMusic’

          Name of this music object.

     ‘start-callback’ (procedure):
          ‘ly:grace-music::start-callback’

          Function to compute the negative length of starting grace
          notes.  This property can only be defined as initializer in
          ‘scm/define-music-types.scm’.

     ‘types’ (list):
          '(grace-music music-wrapper-music)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: HarmonicEvent,  Next: HyphenEvent,  Prev: GraceMusic,  Up: Music expressions

1.1.31 HarmonicEvent
--------------------

Mark a note as harmonic.

   Event classes: *note harmonic-event::, *note music-event:: and *note
StreamEvent::.

   Not accepted by any engraver or performer.

   Properties:

     ‘name’ (symbol):
          ‘'HarmonicEvent’

          Name of this music object.

     ‘types’ (list):
          '(post-event event harmonic-event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: HyphenEvent,  Next: KeyChangeEvent,  Prev: HarmonicEvent,  Up: Music expressions

1.1.32 HyphenEvent
------------------

A hyphen between lyric syllables.

   Event classes: *note hyphen-event::, *note music-event:: and *note
StreamEvent::.

   Accepted by: *note Hyphen_engraver::.

   Properties:

     ‘name’ (symbol):
          ‘'HyphenEvent’

          Name of this music object.

     ‘types’ (list):
          '(post-event hyphen-event event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: KeyChangeEvent,  Next: LabelEvent,  Prev: HyphenEvent,  Up: Music expressions

1.1.33 KeyChangeEvent
---------------------

Change the key signature.

   Syntax: ‘\key’ NAME SCALE

   Event classes: *note key-change-event::, *note music-event:: and
*note StreamEvent::.

   Accepted by: *note Key_engraver:: and *note Key_performer::.

   Properties:

     ‘name’ (symbol):
          ‘'KeyChangeEvent’

          Name of this music object.

     ‘to-relative-callback’ (procedure):
          ‘#<procedure #f (x p)>’

          How to transform a piece of music to relative pitches.

     ‘types’ (list):
          '(key-change-event event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: LabelEvent,  Next: LaissezVibrerEvent,  Prev: KeyChangeEvent,  Up: Music expressions

1.1.34 LabelEvent
-----------------

Place a bookmarking label.

   Event classes: *note label-event::, *note music-event:: and *note
StreamEvent::.

   Accepted by: *note Paper_column_engraver::.

   Properties:

     ‘name’ (symbol):
          ‘'LabelEvent’

          Name of this music object.

     ‘types’ (list):
          '(label-event event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: LaissezVibrerEvent,  Next: LigatureEvent,  Prev: LabelEvent,  Up: Music expressions

1.1.35 LaissezVibrerEvent
-------------------------

Don’t damp this chord.

   Syntax: NOTE‘\laissezVibrer’

   Event classes: *note laissez-vibrer-event::, *note music-event:: and
*note StreamEvent::.

   Accepted by: *note Laissez_vibrer_engraver::.

   Properties:

     ‘name’ (symbol):
          ‘'LaissezVibrerEvent’

          Name of this music object.

     ‘types’ (list):
          '(post-event event laissez-vibrer-event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: LigatureEvent,  Next: LineBreakEvent,  Prev: LaissezVibrerEvent,  Up: Music expressions

1.1.36 LigatureEvent
--------------------

Start or end a ligature.

   Event classes: *note ligature-event::, *note music-event::, *note
span-event:: and *note StreamEvent::.

   Accepted by: *note Kievan_ligature_engraver::, *note
Ligature_bracket_engraver::, *note Mensural_ligature_engraver:: and
*note Vaticana_ligature_engraver::.

   Properties:

     ‘name’ (symbol):
          ‘'LigatureEvent’

          Name of this music object.

     ‘types’ (list):
          '(span-event ligature-event event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: LineBreakEvent,  Next: LyricCombineMusic,  Prev: LigatureEvent,  Up: Music expressions

1.1.37 LineBreakEvent
---------------------

Allow, forbid or force a line break.

   Event classes: *note break-event::, *note line-break-event::, *note
music-event:: and *note StreamEvent::.

   Accepted by: *note Page_turn_engraver:: and *note
Paper_column_engraver::.

   Properties:

     ‘name’ (symbol):
          ‘'LineBreakEvent’

          Name of this music object.

     ‘types’ (list):
          '(line-break-event break-event event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: LyricCombineMusic,  Next: LyricEvent,  Prev: LineBreakEvent,  Up: Music expressions

1.1.38 LyricCombineMusic
------------------------

Align lyrics to the start of notes.

   Syntax: ‘\lyricsto’ VOICENAME LYRICS

   Properties:

     ‘iterator-ctor’ (procedure):
          ‘ly:lyric-combine-music-iterator::constructor’

          Function to construct a ‘music-event-iterator’ object for this
          music.

     ‘length’ (moment):
          ‘#<Mom 0>’

          The duration of this music.

     ‘name’ (symbol):
          ‘'LyricCombineMusic’

          Name of this music object.

     ‘types’ (list):
          '(lyric-combine-music)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: LyricEvent,  Next: MarkEvent,  Prev: LyricCombineMusic,  Up: Music expressions

1.1.39 LyricEvent
-----------------

A lyric syllable.  Must be entered in lyrics mode, i.e., ‘\lyrics {
twinkle4 twinkle4 } ’.

   Event classes: *note lyric-event::, *note music-event::, *note
rhythmic-event:: and *note StreamEvent::.

   Accepted by: *note Lyric_engraver:: and *note Lyric_performer::.

   Properties:

     ‘iterator-ctor’ (procedure):
          ‘ly:rhythmic-music-iterator::constructor’

          Function to construct a ‘music-event-iterator’ object for this
          music.

     ‘name’ (symbol):
          ‘'LyricEvent’

          Name of this music object.

     ‘types’ (list):
          '(rhythmic-event lyric-event event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: MarkEvent,  Next: MeasureCounterEvent,  Prev: LyricEvent,  Up: Music expressions

1.1.40 MarkEvent
----------------

Insert a rehearsal mark.

   Syntax: ‘\mark’ MARKER

   Example: ‘\mark "A"’

   Event classes: *note mark-event::, *note music-event:: and *note
StreamEvent::.

   Accepted by: *note Mark_engraver::.

   Properties:

     ‘name’ (symbol):
          ‘'MarkEvent’

          Name of this music object.

     ‘types’ (list):
          '(mark-event event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: MeasureCounterEvent,  Next: MultiMeasureRestEvent,  Prev: MarkEvent,  Up: Music expressions

1.1.41 MeasureCounterEvent
--------------------------

Used to signal the start and end of a measure count.

   Event classes: *note measure-counter-event::, *note music-event::,
*note span-event:: and *note StreamEvent::.

   Accepted by: *note Measure_counter_engraver::.

   Properties:

     ‘name’ (symbol):
          ‘'MeasureCounterEvent’

          Name of this music object.

     ‘types’ (list):
          '(measure-counter-event span-event event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: MultiMeasureRestEvent,  Next: MultiMeasureRestMusic,  Prev: MeasureCounterEvent,  Up: Music expressions

1.1.42 MultiMeasureRestEvent
----------------------------

Used internally by ‘MultiMeasureRestMusic’ to signal rests.

   Event classes: *note multi-measure-rest-event::, *note music-event::,
*note rhythmic-event:: and *note StreamEvent::.

   Accepted by: *note Multi_measure_rest_engraver::.

   Properties:

     ‘iterator-ctor’ (procedure):
          ‘ly:rhythmic-music-iterator::constructor’

          Function to construct a ‘music-event-iterator’ object for this
          music.

     ‘name’ (symbol):
          ‘'MultiMeasureRestEvent’

          Name of this music object.

     ‘types’ (list):
          '(event rhythmic-event multi-measure-rest-event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: MultiMeasureRestMusic,  Next: MultiMeasureTextEvent,  Prev: MultiMeasureRestEvent,  Up: Music expressions

1.1.43 MultiMeasureRestMusic
----------------------------

Rests that may be compressed into Multi rests.

   Syntax: ‘R2.*4’ for 4 measures in 3/4 time.

   Properties:

     ‘elements-callback’ (procedure):
          ‘mm-rest-child-list’

          Return a list of children, for use by a sequential iterator.
          Takes a single music parameter.

     ‘iterator-ctor’ (procedure):
          ‘ly:sequential-iterator::constructor’

          Function to construct a ‘music-event-iterator’ object for this
          music.

     ‘name’ (symbol):
          ‘'MultiMeasureRestMusic’

          Name of this music object.

     ‘types’ (list):
          '(multi-measure-rest)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: MultiMeasureTextEvent,  Next: Music,  Prev: MultiMeasureRestMusic,  Up: Music expressions

1.1.44 MultiMeasureTextEvent
----------------------------

Texts on multi measure rests.

   Syntax: ‘R-\markup { \roman "bla" }’

   Note the explicit font switch.

   Event classes: *note multi-measure-text-event::, *note music-event::
and *note StreamEvent::.

   Accepted by: *note Multi_measure_rest_engraver::.

   Properties:

     ‘name’ (symbol):
          ‘'MultiMeasureTextEvent’

          Name of this music object.

     ‘types’ (list):
          '(post-event event multi-measure-text-event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: Music,  Next: NoteEvent,  Prev: MultiMeasureTextEvent,  Up: Music expressions

1.1.45 Music
------------

Generic type for music expressions.

   Properties:

     ‘name’ (symbol):
          ‘'Music’

          Name of this music object.

     ‘types’ (list):
          ‘'()’

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: NoteEvent,  Next: NoteGroupingEvent,  Prev: Music,  Up: Music expressions

1.1.46 NoteEvent
----------------

A note.

   Outside of chords, any events in ‘articulations’ with a listener are
broadcast like chord articulations, the others are retained.

   For iteration inside of chords, *Note EventChord::.

   Event classes: *note melodic-event::, *note music-event::, *note
note-event::, *note rhythmic-event:: and *note StreamEvent::.

   Accepted by: *note Chord_name_engraver::, *note
Completion_heads_engraver::, *note Drum_note_performer::, *note
Drum_notes_engraver::, *note Fretboard_engraver::, *note
Note_heads_engraver::, *note Note_name_engraver::, *note
Note_performer::, *note Part_combine_engraver::, *note
Phrasing_slur_engraver::, *note Slur_engraver:: and *note
Tab_note_heads_engraver::.

   Properties:

     ‘iterator-ctor’ (procedure):
          ‘ly:rhythmic-music-iterator::constructor’

          Function to construct a ‘music-event-iterator’ object for this
          music.

     ‘name’ (symbol):
          ‘'NoteEvent’

          Name of this music object.

     ‘types’ (list):
          '(event note-event rhythmic-event melodic-event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: NoteGroupingEvent,  Next: OttavaMusic,  Prev: NoteEvent,  Up: Music expressions

1.1.47 NoteGroupingEvent
------------------------

Start or stop grouping brackets.

   Event classes: *note music-event::, *note note-grouping-event:: and
*note StreamEvent::.

   Accepted by: *note Horizontal_bracket_engraver::.

   Properties:

     ‘name’ (symbol):
          ‘'NoteGroupingEvent’

          Name of this music object.

     ‘types’ (list):
          '(post-event event note-grouping-event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: OttavaMusic,  Next: OverrideProperty,  Prev: NoteGroupingEvent,  Up: Music expressions

1.1.48 OttavaMusic
------------------

Start or stop an ottava bracket.

   Properties:

     ‘elements-callback’ (procedure):
          ‘make-ottava-set’

          Return a list of children, for use by a sequential iterator.
          Takes a single music parameter.

     ‘iterator-ctor’ (procedure):
          ‘ly:sequential-iterator::constructor’

          Function to construct a ‘music-event-iterator’ object for this
          music.

     ‘name’ (symbol):
          ‘'OttavaMusic’

          Name of this music object.

     ‘types’ (list):
          '(ottava-music)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: OverrideProperty,  Next: PageBreakEvent,  Prev: OttavaMusic,  Up: Music expressions

1.1.49 OverrideProperty
-----------------------

Extend the definition of a graphical object.

   Syntax: ‘\override’ [ CONTEXT ‘.’ ]  OBJECT PROPERTY ‘=’ VALUE

   Properties:

     ‘iterator-ctor’ (procedure):
          ‘ly:push-property-iterator::constructor’

          Function to construct a ‘music-event-iterator’ object for this
          music.

     ‘name’ (symbol):
          ‘'OverrideProperty’

          Name of this music object.

     ‘types’ (list):
          '(layout-instruction-event
             override-property-event)

          The types of this music object; determines by what engraver
          this music expression is processed.

     ‘untransposable’ (boolean):
          ‘#t’

          If set, this music is not transposed.


File: lilypond-internals.info,  Node: PageBreakEvent,  Next: PageTurnEvent,  Prev: OverrideProperty,  Up: Music expressions

1.1.50 PageBreakEvent
---------------------

Allow, forbid or force a page break.

   Event classes: *note break-event::, *note music-event::, *note
page-break-event:: and *note StreamEvent::.

   Accepted by: *note Page_turn_engraver:: and *note
Paper_column_engraver::.

   Properties:

     ‘name’ (symbol):
          ‘'PageBreakEvent’

          Name of this music object.

     ‘types’ (list):
          '(break-event page-break-event event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: PageTurnEvent,  Next: PartCombineMusic,  Prev: PageBreakEvent,  Up: Music expressions

1.1.51 PageTurnEvent
--------------------

Allow, forbid or force a page turn.

   Event classes: *note break-event::, *note music-event::, *note
page-turn-event:: and *note StreamEvent::.

   Accepted by: *note Page_turn_engraver:: and *note
Paper_column_engraver::.

   Properties:

     ‘name’ (symbol):
          ‘'PageTurnEvent’

          Name of this music object.

     ‘types’ (list):
          '(break-event page-turn-event event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: PartCombineMusic,  Next: PartCombinePartMusic,  Prev: PageTurnEvent,  Up: Music expressions

1.1.52 PartCombineMusic
-----------------------

Combine two parts on a staff, either merged or as separate voices.

   Properties:

     ‘iterator-ctor’ (procedure):
          ‘ly:part-combine-iterator::constructor’

          Function to construct a ‘music-event-iterator’ object for this
          music.

     ‘length-callback’ (procedure):
          ‘ly:music-sequence::maximum-length-callback’

          How to compute the duration of this music.  This property can
          only be defined as initializer in
          ‘scm/define-music-types.scm’.

     ‘name’ (symbol):
          ‘'PartCombineMusic’

          Name of this music object.

     ‘start-callback’ (procedure):
          ‘ly:music-sequence::minimum-start-callback’

          Function to compute the negative length of starting grace
          notes.  This property can only be defined as initializer in
          ‘scm/define-music-types.scm’.

     ‘types’ (list):
          '(part-combine-music)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: PartCombinePartMusic,  Next: PartialSet,  Prev: PartCombineMusic,  Up: Music expressions

1.1.53 PartCombinePartMusic
---------------------------

A part to be combined with other parts on a staff.

   Properties:

     ‘iterator-ctor’ (procedure):
          ‘ly:part-combine-part-iterator::constructor’

          Function to construct a ‘music-event-iterator’ object for this
          music.

     ‘length-callback’ (procedure):
          ‘ly:music-wrapper::length-callback’

          How to compute the duration of this music.  This property can
          only be defined as initializer in
          ‘scm/define-music-types.scm’.

     ‘name’ (symbol):
          ‘'PartCombinePartMusic’

          Name of this music object.

     ‘start-callback’ (procedure):
          ‘ly:music-wrapper::start-callback’

          Function to compute the negative length of starting grace
          notes.  This property can only be defined as initializer in
          ‘scm/define-music-types.scm’.

     ‘types’ (list):
          '(part-combine-part-music music-wrapper-music)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: PartialSet,  Next: PercentEvent,  Prev: PartCombinePartMusic,  Up: Music expressions

1.1.54 PartialSet
-----------------

Create an anacrusis or upbeat (partial measure).

   Properties:

     ‘iterator-ctor’ (procedure):
          ‘ly:partial-iterator::constructor’

          Function to construct a ‘music-event-iterator’ object for this
          music.

     ‘length-callback’ (procedure):
          ‘ly:music-sequence::cumulative-length-callback’

          How to compute the duration of this music.  This property can
          only be defined as initializer in
          ‘scm/define-music-types.scm’.

     ‘name’ (symbol):
          ‘'PartialSet’

          Name of this music object.

     ‘types’ (list):
          '(partial-set)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: PercentEvent,  Next: PercentRepeatedMusic,  Prev: PartialSet,  Up: Music expressions

1.1.55 PercentEvent
-------------------

Used internally to signal percent repeats.

   Event classes: *note music-event::, *note percent-event:: and *note
StreamEvent::.

   Accepted by: *note Percent_repeat_engraver::.

   Properties:

     ‘name’ (symbol):
          ‘'PercentEvent’

          Name of this music object.

     ‘types’ (list):
          '(event percent-event rhythmic-event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: PercentRepeatedMusic,  Next: PesOrFlexaEvent,  Prev: PercentEvent,  Up: Music expressions

1.1.56 PercentRepeatedMusic
---------------------------

Repeats encoded by percents and slashes.

   Properties:

     ‘iterator-ctor’ (procedure):
          ‘ly:percent-repeat-iterator::constructor’

          Function to construct a ‘music-event-iterator’ object for this
          music.

     ‘length-callback’ (procedure):
          ‘ly:repeated-music::unfolded-music-length’

          How to compute the duration of this music.  This property can
          only be defined as initializer in
          ‘scm/define-music-types.scm’.

     ‘name’ (symbol):
          ‘'PercentRepeatedMusic’

          Name of this music object.

     ‘start-callback’ (procedure):
          ‘ly:repeated-music::first-start’

          Function to compute the negative length of starting grace
          notes.  This property can only be defined as initializer in
          ‘scm/define-music-types.scm’.

     ‘types’ (list):
          '(repeated-music percent-repeated-music)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: PesOrFlexaEvent,  Next: PhrasingSlurEvent,  Prev: PercentRepeatedMusic,  Up: Music expressions

1.1.57 PesOrFlexaEvent
----------------------

Within a ligature, mark the previous and the following note to form a
pes (if melody goes up) or a flexa (if melody goes down).

   Event classes: *note music-event::, *note pes-or-flexa-event:: and
*note StreamEvent::.

   Accepted by: *note Vaticana_ligature_engraver::.

   Properties:

     ‘name’ (symbol):
          ‘'PesOrFlexaEvent’

          Name of this music object.

     ‘types’ (list):
          '(pes-or-flexa-event event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: PhrasingSlurEvent,  Next: PostEvents,  Prev: PesOrFlexaEvent,  Up: Music expressions

1.1.58 PhrasingSlurEvent
------------------------

Start or end phrasing slur.

   Syntax: NOTE‘\(’ and NOTE‘\)’

   Event classes: *note music-event::, *note phrasing-slur-event::,
*note span-event:: and *note StreamEvent::.

   Accepted by: *note Phrasing_slur_engraver::.

   Properties:

     ‘name’ (symbol):
          ‘'PhrasingSlurEvent’

          Name of this music object.

     ‘types’ (list):
          '(post-event span-event event phrasing-slur-event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: PostEvents,  Next: PropertySet,  Prev: PhrasingSlurEvent,  Up: Music expressions

1.1.59 PostEvents
-----------------

Container for several postevents.

   This can be used to package several events into a single one.  Should
not be seen outside of the parser.

   Properties:

     ‘name’ (symbol):
          ‘'PostEvents’

          Name of this music object.

     ‘types’ (list):
          '(post-event post-event-wrapper)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: PropertySet,  Next: PropertyUnset,  Prev: PostEvents,  Up: Music expressions

1.1.60 PropertySet
------------------

Set a context property.

   Syntax: ‘\set CONTEXT.PROP = SCHEME-VAL’

   Properties:

     ‘iterator-ctor’ (procedure):
          ‘ly:property-iterator::constructor’

          Function to construct a ‘music-event-iterator’ object for this
          music.

     ‘name’ (symbol):
          ‘'PropertySet’

          Name of this music object.

     ‘types’ (list):
          '(layout-instruction-event)

          The types of this music object; determines by what engraver
          this music expression is processed.

     ‘untransposable’ (boolean):
          ‘#t’

          If set, this music is not transposed.


File: lilypond-internals.info,  Node: PropertyUnset,  Next: QuoteMusic,  Prev: PropertySet,  Up: Music expressions

1.1.61 PropertyUnset
--------------------

Restore the default setting for a context property.  See *note
PropertySet::.

   Syntax: ‘\unset CONTEXT.PROP’

   Properties:

     ‘iterator-ctor’ (procedure):
          ‘ly:property-unset-iterator::constructor’

          Function to construct a ‘music-event-iterator’ object for this
          music.

     ‘name’ (symbol):
          ‘'PropertyUnset’

          Name of this music object.

     ‘types’ (list):
          '(layout-instruction-event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: QuoteMusic,  Next: RelativeOctaveCheck,  Prev: PropertyUnset,  Up: Music expressions

1.1.62 QuoteMusic
-----------------

Quote preprocessed snippets of music.

   Properties:

     ‘iterator-ctor’ (procedure):
          ‘ly:music-wrapper-iterator::constructor’

          Function to construct a ‘music-event-iterator’ object for this
          music.

     ‘length-callback’ (procedure):
          ‘ly:music-wrapper::length-callback’

          How to compute the duration of this music.  This property can
          only be defined as initializer in
          ‘scm/define-music-types.scm’.

     ‘name’ (symbol):
          ‘'QuoteMusic’

          Name of this music object.

     ‘start-callback’ (procedure):
          ‘ly:music-wrapper::start-callback’

          Function to compute the negative length of starting grace
          notes.  This property can only be defined as initializer in
          ‘scm/define-music-types.scm’.

     ‘types’ (list):
          '(music-wrapper-music)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: RelativeOctaveCheck,  Next: RelativeOctaveMusic,  Prev: QuoteMusic,  Up: Music expressions

1.1.63 RelativeOctaveCheck
--------------------------

Check if a pitch is in the correct octave.

   Properties:

     ‘name’ (symbol):
          ‘'RelativeOctaveCheck’

          Name of this music object.

     ‘to-relative-callback’ (procedure):
          ‘ly:relative-octave-check::relative-callback’

          How to transform a piece of music to relative pitches.

     ‘types’ (list):
          '(relative-octave-check)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: RelativeOctaveMusic,  Next: RepeatSlashEvent,  Prev: RelativeOctaveCheck,  Up: Music expressions

1.1.64 RelativeOctaveMusic
--------------------------

Music in which the assignment of octaves is complete.

   Properties:

     ‘iterator-ctor’ (procedure):
          ‘ly:music-wrapper-iterator::constructor’

          Function to construct a ‘music-event-iterator’ object for this
          music.

     ‘length-callback’ (procedure):
          ‘ly:music-wrapper::length-callback’

          How to compute the duration of this music.  This property can
          only be defined as initializer in
          ‘scm/define-music-types.scm’.

     ‘name’ (symbol):
          ‘'RelativeOctaveMusic’

          Name of this music object.

     ‘start-callback’ (procedure):
          ‘ly:music-wrapper::start-callback’

          Function to compute the negative length of starting grace
          notes.  This property can only be defined as initializer in
          ‘scm/define-music-types.scm’.

     ‘to-relative-callback’ (procedure):
          ‘ly:relative-octave-music::relative-callback’

          How to transform a piece of music to relative pitches.

     ‘types’ (list):
          '(music-wrapper-music relative-octave-music)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: RepeatSlashEvent,  Next: RepeatTieEvent,  Prev: RelativeOctaveMusic,  Up: Music expressions

1.1.65 RepeatSlashEvent
-----------------------

Used internally to signal beat repeats.

   Event classes: *note music-event::, *note repeat-slash-event::, *note
rhythmic-event:: and *note StreamEvent::.

   Accepted by: *note Slash_repeat_engraver::.

   Properties:

     ‘name’ (symbol):
          ‘'RepeatSlashEvent’

          Name of this music object.

     ‘types’ (list):
          '(event repeat-slash-event rhythmic-event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: RepeatTieEvent,  Next: RepeatedMusic,  Prev: RepeatSlashEvent,  Up: Music expressions

1.1.66 RepeatTieEvent
---------------------

Ties for starting a second volta bracket.

   Event classes: *note music-event::, *note repeat-tie-event:: and
*note StreamEvent::.

   Accepted by: *note Repeat_tie_engraver::.

   Properties:

     ‘name’ (symbol):
          ‘'RepeatTieEvent’

          Name of this music object.

     ‘types’ (list):
          '(post-event event repeat-tie-event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: RepeatedMusic,  Next: RestEvent,  Prev: RepeatTieEvent,  Up: Music expressions

1.1.67 RepeatedMusic
--------------------

Repeat music in different ways.

   Properties:

     ‘name’ (symbol):
          ‘'RepeatedMusic’

          Name of this music object.

     ‘types’ (list):
          '(repeated-music)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: RestEvent,  Next: RevertProperty,  Prev: RepeatedMusic,  Up: Music expressions

1.1.68 RestEvent
----------------

A Rest.

   Syntax: ‘r4’ for a quarter rest.

   Event classes: *note music-event::, *note rest-event::, *note
rhythmic-event:: and *note StreamEvent::.

   Accepted by: *note Chord_name_engraver::, *note
Completion_rest_engraver::, *note Figured_bass_engraver:: and *note
Rest_engraver::.

   Properties:

     ‘iterator-ctor’ (procedure):
          ‘ly:rhythmic-music-iterator::constructor’

          Function to construct a ‘music-event-iterator’ object for this
          music.

     ‘name’ (symbol):
          ‘'RestEvent’

          Name of this music object.

     ‘types’ (list):
          '(event rhythmic-event rest-event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: RevertProperty,  Next: ScriptEvent,  Prev: RestEvent,  Up: Music expressions

1.1.69 RevertProperty
---------------------

The opposite of *note OverrideProperty::: remove a previously added
property from a graphical object definition.

   Properties:

     ‘iterator-ctor’ (procedure):
          ‘ly:pop-property-iterator::constructor’

          Function to construct a ‘music-event-iterator’ object for this
          music.

     ‘name’ (symbol):
          ‘'RevertProperty’

          Name of this music object.

     ‘types’ (list):
          '(layout-instruction-event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: ScriptEvent,  Next: SequentialMusic,  Prev: RevertProperty,  Up: Music expressions

1.1.70 ScriptEvent
------------------

Add an articulation mark to a note.

   Event classes: *note music-event::, *note script-event:: and *note
StreamEvent::.

   Not accepted by any engraver or performer.

   Properties:

     ‘name’ (symbol):
          ‘'ScriptEvent’

          Name of this music object.

     ‘types’ (list):
          '(event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: SequentialMusic,  Next: SimultaneousMusic,  Prev: ScriptEvent,  Up: Music expressions

1.1.71 SequentialMusic
----------------------

Music expressions concatenated.

   Syntax: ‘\sequential { ... }’ or simply ‘{ ... }’

   Properties:

     ‘elements-callback’ (procedure):
          ‘#<procedure #f (m)>’

          Return a list of children, for use by a sequential iterator.
          Takes a single music parameter.

     ‘iterator-ctor’ (procedure):
          ‘ly:sequential-iterator::constructor’

          Function to construct a ‘music-event-iterator’ object for this
          music.

     ‘length-callback’ (procedure):
          ‘ly:music-sequence::cumulative-length-callback’

          How to compute the duration of this music.  This property can
          only be defined as initializer in
          ‘scm/define-music-types.scm’.

     ‘name’ (symbol):
          ‘'SequentialMusic’

          Name of this music object.

     ‘start-callback’ (procedure):
          ‘ly:music-sequence::first-start-callback’

          Function to compute the negative length of starting grace
          notes.  This property can only be defined as initializer in
          ‘scm/define-music-types.scm’.

     ‘types’ (list):
          '(sequential-music)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: SimultaneousMusic,  Next: SkipEvent,  Prev: SequentialMusic,  Up: Music expressions

1.1.72 SimultaneousMusic
------------------------

Music playing together.

   Syntax: ‘\simultaneous { ... }’ or ‘<< ... >>’

   Properties:

     ‘iterator-ctor’ (procedure):
          ‘ly:simultaneous-music-iterator::constructor’

          Function to construct a ‘music-event-iterator’ object for this
          music.

     ‘length-callback’ (procedure):
          ‘ly:music-sequence::maximum-length-callback’

          How to compute the duration of this music.  This property can
          only be defined as initializer in
          ‘scm/define-music-types.scm’.

     ‘name’ (symbol):
          ‘'SimultaneousMusic’

          Name of this music object.

     ‘start-callback’ (procedure):
          ‘ly:music-sequence::minimum-start-callback’

          Function to compute the negative length of starting grace
          notes.  This property can only be defined as initializer in
          ‘scm/define-music-types.scm’.

     ‘to-relative-callback’ (procedure):
          ‘ly:music-sequence::simultaneous-relative-callback’

          How to transform a piece of music to relative pitches.

     ‘types’ (list):
          '(simultaneous-music)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: SkipEvent,  Next: SkipMusic,  Prev: SimultaneousMusic,  Up: Music expressions

1.1.73 SkipEvent
----------------

Filler that takes up duration, but does not print anything.

   Syntax: ‘s4’ for a skip equivalent to a quarter rest.

   Event classes: *note music-event::, *note rhythmic-event::, *note
skip-event:: and *note StreamEvent::.

   Not accepted by any engraver or performer.

   Properties:

     ‘iterator-ctor’ (procedure):
          ‘ly:rhythmic-music-iterator::constructor’

          Function to construct a ‘music-event-iterator’ object for this
          music.

     ‘name’ (symbol):
          ‘'SkipEvent’

          Name of this music object.

     ‘types’ (list):
          '(event rhythmic-event skip-event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: SkipMusic,  Next: SlurEvent,  Prev: SkipEvent,  Up: Music expressions

1.1.74 SkipMusic
----------------

Filler that takes up duration, does not print anything, and also does
not create staves or voices implicitly.

   Syntax: ‘\skip’ DURATION

   Properties:

     ‘iterator-ctor’ (procedure):
          ‘ly:simple-music-iterator::constructor’

          Function to construct a ‘music-event-iterator’ object for this
          music.

     ‘length-callback’ (procedure):
          ‘ly:music-duration-length’

          How to compute the duration of this music.  This property can
          only be defined as initializer in
          ‘scm/define-music-types.scm’.

     ‘name’ (symbol):
          ‘'SkipMusic’

          Name of this music object.

     ‘types’ (list):
          '(event skip-event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: SlurEvent,  Next: SoloOneEvent,  Prev: SkipMusic,  Up: Music expressions

1.1.75 SlurEvent
----------------

Start or end slur.

   Syntax: NOTE‘(’ and NOTE‘)’

   Event classes: *note music-event::, *note slur-event::, *note
span-event:: and *note StreamEvent::.

   Accepted by: *note Slur_engraver:: and *note Slur_performer::.

   Properties:

     ‘name’ (symbol):
          ‘'SlurEvent’

          Name of this music object.

     ‘types’ (list):
          '(post-event span-event event slur-event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: SoloOneEvent,  Next: SoloTwoEvent,  Prev: SlurEvent,  Up: Music expressions

1.1.76 SoloOneEvent
-------------------

Print ‘Solo 1’.

   Event classes: *note music-event::, *note part-combine-event::, *note
solo-one-event:: and *note StreamEvent::.

   Accepted by: *note Part_combine_engraver::.

   Properties:

     ‘name’ (symbol):
          ‘'SoloOneEvent’

          Name of this music object.

     ‘part-combine-status’ (symbol):
          ‘'solo1’

          Change to what kind of state?  Options are ‘solo1’, ‘solo2’
          and ‘unisono’.

     ‘types’ (list):
          '(event part-combine-event solo-one-event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: SoloTwoEvent,  Next: SostenutoEvent,  Prev: SoloOneEvent,  Up: Music expressions

1.1.77 SoloTwoEvent
-------------------

Print ‘Solo 2’.

   Event classes: *note music-event::, *note part-combine-event::, *note
solo-two-event:: and *note StreamEvent::.

   Accepted by: *note Part_combine_engraver::.

   Properties:

     ‘name’ (symbol):
          ‘'SoloTwoEvent’

          Name of this music object.

     ‘part-combine-status’ (symbol):
          ‘'solo2’

          Change to what kind of state?  Options are ‘solo1’, ‘solo2’
          and ‘unisono’.

     ‘types’ (list):
          '(event part-combine-event solo-two-event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: SostenutoEvent,  Next: SpacingSectionEvent,  Prev: SoloTwoEvent,  Up: Music expressions

1.1.78 SostenutoEvent
---------------------

Depress or release sostenuto pedal.

   Event classes: *note music-event::, *note pedal-event::, *note
sostenuto-event::, *note span-event:: and *note StreamEvent::.

   Accepted by: *note Piano_pedal_engraver:: and *note
Piano_pedal_performer::.

   Properties:

     ‘name’ (symbol):
          ‘'SostenutoEvent’

          Name of this music object.

     ‘types’ (list):
          '(post-event event pedal-event sostenuto-event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: SpacingSectionEvent,  Next: SpanEvent,  Prev: SostenutoEvent,  Up: Music expressions

1.1.79 SpacingSectionEvent
--------------------------

Start a new spacing section.

   Event classes: *note music-event::, *note spacing-section-event:: and
*note StreamEvent::.

   Accepted by: *note Spacing_engraver::.

   Properties:

     ‘name’ (symbol):
          ‘'SpacingSectionEvent’

          Name of this music object.

     ‘types’ (list):
          '(event spacing-section-event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: SpanEvent,  Next: StaffSpanEvent,  Prev: SpacingSectionEvent,  Up: Music expressions

1.1.80 SpanEvent
----------------

Event for anything that is started at a different time than stopped.

   Event classes: *note music-event::, *note span-event:: and *note
StreamEvent::.

   Not accepted by any engraver or performer.

   Properties:

     ‘name’ (symbol):
          ‘'SpanEvent’

          Name of this music object.

     ‘types’ (list):
          '(event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: StaffSpanEvent,  Next: StringNumberEvent,  Prev: SpanEvent,  Up: Music expressions

1.1.81 StaffSpanEvent
---------------------

Start or stop a staff symbol.

   Event classes: *note music-event::, *note span-event::, *note
staff-span-event:: and *note StreamEvent::.

   Accepted by: *note Staff_symbol_engraver::.

   Properties:

     ‘name’ (symbol):
          ‘'StaffSpanEvent’

          Name of this music object.

     ‘types’ (list):
          '(event span-event staff-span-event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: StringNumberEvent,  Next: StrokeFingerEvent,  Prev: StaffSpanEvent,  Up: Music expressions

1.1.82 StringNumberEvent
------------------------

Specify on which string to play this note.

   Syntax: ‘\NUMBER’

   Event classes: *note music-event::, *note StreamEvent:: and *note
string-number-event::.

   Accepted by: *note Fretboard_engraver:: and *note
Tab_note_heads_engraver::.

   Properties:

     ‘name’ (symbol):
          ‘'StringNumberEvent’

          Name of this music object.

     ‘types’ (list):
          '(post-event string-number-event event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: StrokeFingerEvent,  Next: SustainEvent,  Prev: StringNumberEvent,  Up: Music expressions

1.1.83 StrokeFingerEvent
------------------------

Specify with which finger to pluck a string.

   Syntax: ‘\rightHandFinger TEXT’

   Event classes: *note music-event::, *note StreamEvent:: and *note
stroke-finger-event::.

   Not accepted by any engraver or performer.

   Properties:

     ‘name’ (symbol):
          ‘'StrokeFingerEvent’

          Name of this music object.

     ‘types’ (list):
          '(post-event stroke-finger-event event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: SustainEvent,  Next: TempoChangeEvent,  Prev: StrokeFingerEvent,  Up: Music expressions

1.1.84 SustainEvent
-------------------

Depress or release sustain pedal.

   Event classes: *note music-event::, *note pedal-event::, *note
span-event::, *note StreamEvent:: and *note sustain-event::.

   Accepted by: *note Piano_pedal_engraver:: and *note
Piano_pedal_performer::.

   Properties:

     ‘name’ (symbol):
          ‘'SustainEvent’

          Name of this music object.

     ‘types’ (list):
          '(post-event event pedal-event sustain-event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: TempoChangeEvent,  Next: TextScriptEvent,  Prev: SustainEvent,  Up: Music expressions

1.1.85 TempoChangeEvent
-----------------------

A metronome mark or tempo indication.

   Event classes: *note music-event::, *note StreamEvent:: and *note
tempo-change-event::.

   Accepted by: *note Metronome_mark_engraver::.

   Properties:

     ‘name’ (symbol):
          ‘'TempoChangeEvent’

          Name of this music object.

     ‘types’ (list):
          '(event tempo-change-event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: TextScriptEvent,  Next: TextSpanEvent,  Prev: TempoChangeEvent,  Up: Music expressions

1.1.86 TextScriptEvent
----------------------

Print text.

   Event classes: *note music-event::, *note script-event::, *note
StreamEvent:: and *note text-script-event::.

   Accepted by: *note Text_engraver::.

   Properties:

     ‘name’ (symbol):
          ‘'TextScriptEvent’

          Name of this music object.

     ‘types’ (list):
          '(post-event script-event text-script-event event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: TextSpanEvent,  Next: TieEvent,  Prev: TextScriptEvent,  Up: Music expressions

1.1.87 TextSpanEvent
--------------------

Start a text spanner, for example, an octavation.

   Event classes: *note music-event::, *note span-event::, *note
StreamEvent:: and *note text-span-event::.

   Accepted by: *note Text_spanner_engraver::.

   Properties:

     ‘name’ (symbol):
          ‘'TextSpanEvent’

          Name of this music object.

     ‘types’ (list):
          '(post-event span-event event text-span-event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: TieEvent,  Next: TimeScaledMusic,  Prev: TextSpanEvent,  Up: Music expressions

1.1.88 TieEvent
---------------

A tie.

   Syntax: NOTE‘-~’

   Event classes: *note music-event::, *note StreamEvent:: and *note
tie-event::.

   Accepted by: *note Note_performer::, *note Tie_engraver:: and *note
Tie_performer::.

   Properties:

     ‘name’ (symbol):
          ‘'TieEvent’

          Name of this music object.

     ‘types’ (list):
          '(post-event tie-event event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: TimeScaledMusic,  Next: TimeSignatureEvent,  Prev: TieEvent,  Up: Music expressions

1.1.89 TimeScaledMusic
----------------------

Multiply durations, as in tuplets.

   Syntax: ‘\times FRACTION MUSIC’, e.g., ‘\times 2/3 { ... }’ for
triplets.

   Properties:

     ‘iterator-ctor’ (procedure):
          ‘ly:tuplet-iterator::constructor’

          Function to construct a ‘music-event-iterator’ object for this
          music.

     ‘length-callback’ (procedure):
          ‘ly:music-wrapper::length-callback’

          How to compute the duration of this music.  This property can
          only be defined as initializer in
          ‘scm/define-music-types.scm’.

     ‘name’ (symbol):
          ‘'TimeScaledMusic’

          Name of this music object.

     ‘start-callback’ (procedure):
          ‘ly:music-wrapper::start-callback’

          Function to compute the negative length of starting grace
          notes.  This property can only be defined as initializer in
          ‘scm/define-music-types.scm’.

     ‘types’ (list):
          '(time-scaled-music music-wrapper-music)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: TimeSignatureEvent,  Next: TimeSignatureMusic,  Prev: TimeScaledMusic,  Up: Music expressions

1.1.90 TimeSignatureEvent
-------------------------

An event created when setting a new time signature

   Event classes: *note music-event::, *note StreamEvent:: and *note
time-signature-event::.

   Accepted by: *note Time_signature_engraver::.

   Properties:

     ‘name’ (symbol):
          ‘'TimeSignatureEvent’

          Name of this music object.

     ‘types’ (list):
          '(event time-signature-event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: TimeSignatureMusic,  Next: TransposedMusic,  Prev: TimeSignatureEvent,  Up: Music expressions

1.1.91 TimeSignatureMusic
-------------------------

Set a new time signature

   Properties:

     ‘elements-callback’ (procedure):
          ‘make-time-signature-set’

          Return a list of children, for use by a sequential iterator.
          Takes a single music parameter.

     ‘iterator-ctor’ (procedure):
          ‘ly:sequential-iterator::constructor’

          Function to construct a ‘music-event-iterator’ object for this
          music.

     ‘name’ (symbol):
          ‘'TimeSignatureMusic’

          Name of this music object.

     ‘types’ (list):
          '(time-signature-music)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: TransposedMusic,  Next: TremoloEvent,  Prev: TimeSignatureMusic,  Up: Music expressions

1.1.92 TransposedMusic
----------------------

Music that has been transposed.

   Properties:

     ‘iterator-ctor’ (procedure):
          ‘ly:music-wrapper-iterator::constructor’

          Function to construct a ‘music-event-iterator’ object for this
          music.

     ‘length-callback’ (procedure):
          ‘ly:music-wrapper::length-callback’

          How to compute the duration of this music.  This property can
          only be defined as initializer in
          ‘scm/define-music-types.scm’.

     ‘name’ (symbol):
          ‘'TransposedMusic’

          Name of this music object.

     ‘start-callback’ (procedure):
          ‘ly:music-wrapper::start-callback’

          Function to compute the negative length of starting grace
          notes.  This property can only be defined as initializer in
          ‘scm/define-music-types.scm’.

     ‘to-relative-callback’ (procedure):
          ‘ly:relative-octave-music::no-relative-callback’

          How to transform a piece of music to relative pitches.

     ‘types’ (list):
          '(music-wrapper-music transposed-music)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: TremoloEvent,  Next: TremoloRepeatedMusic,  Prev: TransposedMusic,  Up: Music expressions

1.1.93 TremoloEvent
-------------------

Unmeasured tremolo.

   Event classes: *note music-event::, *note StreamEvent:: and *note
tremolo-event::.

   Accepted by: *note Stem_engraver::.

   Properties:

     ‘name’ (symbol):
          ‘'TremoloEvent’

          Name of this music object.

     ‘types’ (list):
          '(post-event event tremolo-event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: TremoloRepeatedMusic,  Next: TremoloSpanEvent,  Prev: TremoloEvent,  Up: Music expressions

1.1.94 TremoloRepeatedMusic
---------------------------

Repeated notes denoted by tremolo beams.

   Properties:

     ‘iterator-ctor’ (procedure):
          ‘ly:chord-tremolo-iterator::constructor’

          Function to construct a ‘music-event-iterator’ object for this
          music.

     ‘length-callback’ (procedure):
          ‘ly:repeated-music::unfolded-music-length’

          How to compute the duration of this music.  This property can
          only be defined as initializer in
          ‘scm/define-music-types.scm’.

     ‘name’ (symbol):
          ‘'TremoloRepeatedMusic’

          Name of this music object.

     ‘start-callback’ (procedure):
          ‘ly:repeated-music::first-start’

          Function to compute the negative length of starting grace
          notes.  This property can only be defined as initializer in
          ‘scm/define-music-types.scm’.

     ‘types’ (list):
          '(repeated-music tremolo-repeated-music)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: TremoloSpanEvent,  Next: TrillSpanEvent,  Prev: TremoloRepeatedMusic,  Up: Music expressions

1.1.95 TremoloSpanEvent
-----------------------

Tremolo over two stems.

   Event classes: *note music-event::, *note span-event::, *note
StreamEvent:: and *note tremolo-span-event::.

   Accepted by: *note Chord_tremolo_engraver::.

   Properties:

     ‘name’ (symbol):
          ‘'TremoloSpanEvent’

          Name of this music object.

     ‘types’ (list):
          '(event span-event tremolo-span-event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: TrillSpanEvent,  Next: TupletSpanEvent,  Prev: TremoloSpanEvent,  Up: Music expressions

1.1.96 TrillSpanEvent
---------------------

Start a trill spanner.

   Event classes: *note music-event::, *note span-event::, *note
StreamEvent:: and *note trill-span-event::.

   Accepted by: *note Trill_spanner_engraver::.

   Properties:

     ‘name’ (symbol):
          ‘'TrillSpanEvent’

          Name of this music object.

     ‘types’ (list):
          '(post-event span-event event trill-span-event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: TupletSpanEvent,  Next: UnaCordaEvent,  Prev: TrillSpanEvent,  Up: Music expressions

1.1.97 TupletSpanEvent
----------------------

Used internally to signal where tuplet brackets start and stop.

   Event classes: *note music-event::, *note span-event::, *note
StreamEvent:: and *note tuplet-span-event::.

   Accepted by: *note Stem_engraver:: and *note Tuplet_engraver::.

   Properties:

     ‘name’ (symbol):
          ‘'TupletSpanEvent’

          Name of this music object.

     ‘types’ (list):
          '(tuplet-span-event span-event event post-event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: UnaCordaEvent,  Next: UnfoldedRepeatedMusic,  Prev: TupletSpanEvent,  Up: Music expressions

1.1.98 UnaCordaEvent
--------------------

Depress or release una-corda pedal.

   Event classes: *note music-event::, *note pedal-event::, *note
span-event::, *note StreamEvent:: and *note una-corda-event::.

   Accepted by: *note Piano_pedal_engraver:: and *note
Piano_pedal_performer::.

   Properties:

     ‘name’ (symbol):
          ‘'UnaCordaEvent’

          Name of this music object.

     ‘types’ (list):
          '(post-event event pedal-event una-corda-event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: UnfoldedRepeatedMusic,  Next: UnisonoEvent,  Prev: UnaCordaEvent,  Up: Music expressions

1.1.99 UnfoldedRepeatedMusic
----------------------------

Repeated music which is fully written (and played) out.

   Properties:

     ‘elements-callback’ (procedure):
          ‘make-unfolded-set’

          Return a list of children, for use by a sequential iterator.
          Takes a single music parameter.

     ‘iterator-ctor’ (procedure):
          ‘ly:sequential-iterator::constructor’

          Function to construct a ‘music-event-iterator’ object for this
          music.

     ‘length-callback’ (procedure):
          ‘ly:repeated-music::unfolded-music-length’

          How to compute the duration of this music.  This property can
          only be defined as initializer in
          ‘scm/define-music-types.scm’.

     ‘name’ (symbol):
          ‘'UnfoldedRepeatedMusic’

          Name of this music object.

     ‘start-callback’ (procedure):
          ‘ly:repeated-music::first-start’

          Function to compute the negative length of starting grace
          notes.  This property can only be defined as initializer in
          ‘scm/define-music-types.scm’.

     ‘types’ (list):
          '(repeated-music unfolded-repeated-music)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: UnisonoEvent,  Next: UnrelativableMusic,  Prev: UnfoldedRepeatedMusic,  Up: Music expressions

1.1.100 UnisonoEvent
--------------------

Print ‘a 2’.

   Event classes: *note music-event::, *note part-combine-event::, *note
StreamEvent:: and *note unisono-event::.

   Accepted by: *note Part_combine_engraver::.

   Properties:

     ‘name’ (symbol):
          ‘'UnisonoEvent’

          Name of this music object.

     ‘part-combine-status’ (symbol):
          ‘'unisono’

          Change to what kind of state?  Options are ‘solo1’, ‘solo2’
          and ‘unisono’.

     ‘types’ (list):
          '(event part-combine-event unisono-event)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: UnrelativableMusic,  Next: VoiceSeparator,  Prev: UnisonoEvent,  Up: Music expressions

1.1.101 UnrelativableMusic
--------------------------

Music that cannot be converted from relative to absolute notation.  For
example, transposed music.

   Properties:

     ‘iterator-ctor’ (procedure):
          ‘ly:music-wrapper-iterator::constructor’

          Function to construct a ‘music-event-iterator’ object for this
          music.

     ‘length-callback’ (procedure):
          ‘ly:music-wrapper::length-callback’

          How to compute the duration of this music.  This property can
          only be defined as initializer in
          ‘scm/define-music-types.scm’.

     ‘name’ (symbol):
          ‘'UnrelativableMusic’

          Name of this music object.

     ‘start-callback’ (procedure):
          ‘ly:music-wrapper::start-callback’

          Function to compute the negative length of starting grace
          notes.  This property can only be defined as initializer in
          ‘scm/define-music-types.scm’.

     ‘to-relative-callback’ (procedure):
          ‘ly:relative-octave-music::no-relative-callback’

          How to transform a piece of music to relative pitches.

     ‘types’ (list):
          '(music-wrapper-music unrelativable-music)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: VoiceSeparator,  Next: VoltaRepeatedMusic,  Prev: UnrelativableMusic,  Up: Music expressions

1.1.102 VoiceSeparator
----------------------

Separate polyphonic voices in simultaneous music.

   Syntax: ‘\\’

   Properties:

     ‘name’ (symbol):
          ‘'VoiceSeparator’

          Name of this music object.

     ‘types’ (list):
          '(separator)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: VoltaRepeatedMusic,  Prev: VoiceSeparator,  Up: Music expressions

1.1.103 VoltaRepeatedMusic
--------------------------

Repeats with alternatives placed sequentially.

   Properties:

     ‘elements-callback’ (procedure):
          ‘make-volta-set’

          Return a list of children, for use by a sequential iterator.
          Takes a single music parameter.

     ‘iterator-ctor’ (procedure):
          ‘ly:volta-repeat-iterator::constructor’

          Function to construct a ‘music-event-iterator’ object for this
          music.

     ‘length-callback’ (procedure):
          ‘ly:repeated-music::volta-music-length’

          How to compute the duration of this music.  This property can
          only be defined as initializer in
          ‘scm/define-music-types.scm’.

     ‘name’ (symbol):
          ‘'VoltaRepeatedMusic’

          Name of this music object.

     ‘start-callback’ (procedure):
          ‘ly:repeated-music::first-start’

          Function to compute the negative length of starting grace
          notes.  This property can only be defined as initializer in
          ‘scm/define-music-types.scm’.

     ‘types’ (list):
          '(repeated-music volta-repeated-music)

          The types of this music object; determines by what engraver
          this music expression is processed.


File: lilypond-internals.info,  Node: Music classes,  Next: Music properties,  Prev: Music expressions,  Up: Music definitions

1.2 Music classes
=================

* Menu:

* absolute-dynamic-event::      
* alternative-event::           
* annotate-output-event::       
* apply-output-event::          
* arpeggio-event::              
* articulation-event::          
* bass-figure-event::           
* beam-event::                  
* beam-forbid-event::           
* bend-after-event::            
* break-dynamic-span-event::    
* break-event::                 
* break-span-event::            
* breathing-event::             
* cluster-note-event::          
* completize-extender-event::   
* crescendo-event::             
* decrescendo-event::           
* double-percent-event::        
* dynamic-event::               
* episema-event::               
* extender-event::              
* fingering-event::             
* footnote-event::              
* glissando-event::             
* harmonic-event::              
* hyphen-event::                
* key-change-event::            
* label-event::                 
* laissez-vibrer-event::        
* layout-instruction-event::    
* ligature-event::              
* line-break-event::            
* lyric-event::                 
* mark-event::                  
* measure-counter-event::       
* melodic-event::               
* multi-measure-rest-event::    
* multi-measure-text-event::    
* music-event::                 
* note-event::                  
* note-grouping-event::         
* page-break-event::            
* page-turn-event::             
* part-combine-event::          
* pedal-event::                 
* percent-event::               
* pes-or-flexa-event::          
* phrasing-slur-event::         
* repeat-slash-event::          
* repeat-tie-event::            
* rest-event::                  
* rhythmic-event::              
* script-event::                
* skip-event::                  
* slur-event::                  
* solo-one-event::              
* solo-two-event::              
* sostenuto-event::             
* spacing-section-event::       
* span-dynamic-event::          
* span-event::                  
* staff-span-event::            
* StreamEvent::                 
* string-number-event::         
* stroke-finger-event::         
* sustain-event::               
* tempo-change-event::          
* text-script-event::           
* text-span-event::             
* tie-event::                   
* time-signature-event::        
* tremolo-event::               
* tremolo-span-event::          
* trill-span-event::            
* tuplet-span-event::           
* una-corda-event::             
* unisono-event::               


File: lilypond-internals.info,  Node: absolute-dynamic-event,  Next: alternative-event,  Up: Music classes

1.2.1 absolute-dynamic-event
----------------------------

Music event type ‘absolute-dynamic-event’ is in music objects of type
*note AbsoluteDynamicEvent::.

   Accepted by: *note Dynamic_engraver:: and *note Dynamic_performer::.


File: lilypond-internals.info,  Node: alternative-event,  Next: annotate-output-event,  Prev: absolute-dynamic-event,  Up: Music classes

1.2.2 alternative-event
-----------------------

Music event type ‘alternative-event’ is in music objects of type *note
AlternativeEvent::.

   Accepted by: *note Bar_number_engraver::.


File: lilypond-internals.info,  Node: annotate-output-event,  Next: apply-output-event,  Prev: alternative-event,  Up: Music classes

1.2.3 annotate-output-event
---------------------------

Music event type ‘annotate-output-event’ is in music objects of type
*note AnnotateOutputEvent::.

   Accepted by: *note Balloon_engraver::.


File: lilypond-internals.info,  Node: apply-output-event,  Next: arpeggio-event,  Prev: annotate-output-event,  Up: Music classes

1.2.4 apply-output-event
------------------------

Music event type ‘apply-output-event’ is in music objects of type *note
ApplyOutputEvent::.

   Accepted by: *note Output_property_engraver::.


File: lilypond-internals.info,  Node: arpeggio-event,  Next: articulation-event,  Prev: apply-output-event,  Up: Music classes

1.2.5 arpeggio-event
--------------------

Music event type ‘arpeggio-event’ is in music objects of type *note
ArpeggioEvent::.

   Accepted by: *note Arpeggio_engraver::.


File: lilypond-internals.info,  Node: articulation-event,  Next: bass-figure-event,  Prev: arpeggio-event,  Up: Music classes

1.2.6 articulation-event
------------------------

Music event type ‘articulation-event’ is in music objects of type *note
ArticulationEvent::.

   Accepted by: *note Note_performer:: and *note Script_engraver::.


File: lilypond-internals.info,  Node: bass-figure-event,  Next: beam-event,  Prev: articulation-event,  Up: Music classes

1.2.7 bass-figure-event
-----------------------

Music event type ‘bass-figure-event’ is in music objects of type *note
BassFigureEvent::.

   Accepted by: *note Figured_bass_engraver::.


File: lilypond-internals.info,  Node: beam-event,  Next: beam-forbid-event,  Prev: bass-figure-event,  Up: Music classes

1.2.8 beam-event
----------------

Music event type ‘beam-event’ is in music objects of type *note
BeamEvent::.

   Accepted by: *note Beam_engraver::, *note Beam_performer:: and *note
Grace_beam_engraver::.


File: lilypond-internals.info,  Node: beam-forbid-event,  Next: bend-after-event,  Prev: beam-event,  Up: Music classes

1.2.9 beam-forbid-event
-----------------------

Music event type ‘beam-forbid-event’ is in music objects of type *note
BeamForbidEvent::.

   Accepted by: *note Auto_beam_engraver:: and *note
Grace_auto_beam_engraver::.


File: lilypond-internals.info,  Node: bend-after-event,  Next: break-dynamic-span-event,  Prev: beam-forbid-event,  Up: Music classes

1.2.10 bend-after-event
-----------------------

Music event type ‘bend-after-event’ is in music objects of type *note
BendAfterEvent::.

   Accepted by: *note Bend_engraver::.


File: lilypond-internals.info,  Node: break-dynamic-span-event,  Next: break-event,  Prev: bend-after-event,  Up: Music classes

1.2.11 break-dynamic-span-event
-------------------------------

Music event type ‘break-dynamic-span-event’ is in music objects of type
*note BreakDynamicSpanEvent::.

   Not accepted by any engraver or performer.


File: lilypond-internals.info,  Node: break-event,  Next: break-span-event,  Prev: break-dynamic-span-event,  Up: Music classes

1.2.12 break-event
------------------

Music event type ‘break-event’ is in music objects of type *note
LineBreakEvent::, *note PageBreakEvent:: and *note PageTurnEvent::.

   Accepted by: *note Page_turn_engraver:: and *note
Paper_column_engraver::.


File: lilypond-internals.info,  Node: break-span-event,  Next: breathing-event,  Prev: break-event,  Up: Music classes

1.2.13 break-span-event
-----------------------

Music event type ‘break-span-event’ is in music objects of type *note
BreakDynamicSpanEvent::.

   Accepted by: *note Dynamic_engraver::.


File: lilypond-internals.info,  Node: breathing-event,  Next: cluster-note-event,  Prev: break-span-event,  Up: Music classes

1.2.14 breathing-event
----------------------

Music event type ‘breathing-event’ is in music objects of type *note
BreathingEvent::.

   Accepted by: *note Breathing_sign_engraver:: and *note
Note_performer::.


File: lilypond-internals.info,  Node: cluster-note-event,  Next: completize-extender-event,  Prev: breathing-event,  Up: Music classes

1.2.15 cluster-note-event
-------------------------

Music event type ‘cluster-note-event’ is in music objects of type *note
ClusterNoteEvent::.

   Accepted by: *note Cluster_spanner_engraver::.


File: lilypond-internals.info,  Node: completize-extender-event,  Next: crescendo-event,  Prev: cluster-note-event,  Up: Music classes

1.2.16 completize-extender-event
--------------------------------

Music event type ‘completize-extender-event’ is in music objects of type
*note CompletizeExtenderEvent::.

   Accepted by: *note Extender_engraver::.


File: lilypond-internals.info,  Node: crescendo-event,  Next: decrescendo-event,  Prev: completize-extender-event,  Up: Music classes

1.2.17 crescendo-event
----------------------

Music event type ‘crescendo-event’ is in music objects of type *note
CrescendoEvent::.

   Accepted by: *note Dynamic_performer::.


File: lilypond-internals.info,  Node: decrescendo-event,  Next: double-percent-event,  Prev: crescendo-event,  Up: Music classes

1.2.18 decrescendo-event
------------------------

Music event type ‘decrescendo-event’ is in music objects of type *note
DecrescendoEvent::.

   Accepted by: *note Dynamic_performer::.


File: lilypond-internals.info,  Node: double-percent-event,  Next: dynamic-event,  Prev: decrescendo-event,  Up: Music classes

1.2.19 double-percent-event
---------------------------

Music event type ‘double-percent-event’ is in music objects of type
*note DoublePercentEvent::.

   Accepted by: *note Double_percent_repeat_engraver::.


File: lilypond-internals.info,  Node: dynamic-event,  Next: episema-event,  Prev: double-percent-event,  Up: Music classes

1.2.20 dynamic-event
--------------------

Music event type ‘dynamic-event’ is in music objects of type *note
AbsoluteDynamicEvent::.

   Not accepted by any engraver or performer.


File: lilypond-internals.info,  Node: episema-event,  Next: extender-event,  Prev: dynamic-event,  Up: Music classes

1.2.21 episema-event
--------------------

Music event type ‘episema-event’ is in music objects of type *note
EpisemaEvent::.

   Accepted by: *note Episema_engraver::.


File: lilypond-internals.info,  Node: extender-event,  Next: fingering-event,  Prev: episema-event,  Up: Music classes

1.2.22 extender-event
---------------------

Music event type ‘extender-event’ is in music objects of type *note
ExtenderEvent::.

   Accepted by: *note Extender_engraver::.


File: lilypond-internals.info,  Node: fingering-event,  Next: footnote-event,  Prev: extender-event,  Up: Music classes

1.2.23 fingering-event
----------------------

Music event type ‘fingering-event’ is in music objects of type *note
FingeringEvent::.

   Accepted by: *note Fingering_engraver::, *note Fretboard_engraver::
and *note Tab_note_heads_engraver::.


File: lilypond-internals.info,  Node: footnote-event,  Next: glissando-event,  Prev: fingering-event,  Up: Music classes

1.2.24 footnote-event
---------------------

Music event type ‘footnote-event’ is in music objects of type *note
FootnoteEvent::.

   Not accepted by any engraver or performer.


File: lilypond-internals.info,  Node: glissando-event,  Next: harmonic-event,  Prev: footnote-event,  Up: Music classes

1.2.25 glissando-event
----------------------

Music event type ‘glissando-event’ is in music objects of type *note
GlissandoEvent::.

   Accepted by: *note Glissando_engraver::.


File: lilypond-internals.info,  Node: harmonic-event,  Next: hyphen-event,  Prev: glissando-event,  Up: Music classes

1.2.26 harmonic-event
---------------------

Music event type ‘harmonic-event’ is in music objects of type *note
HarmonicEvent::.

   Not accepted by any engraver or performer.


File: lilypond-internals.info,  Node: hyphen-event,  Next: key-change-event,  Prev: harmonic-event,  Up: Music classes

1.2.27 hyphen-event
-------------------

Music event type ‘hyphen-event’ is in music objects of type *note
HyphenEvent::.

   Accepted by: *note Hyphen_engraver::.


File: lilypond-internals.info,  Node: key-change-event,  Next: label-event,  Prev: hyphen-event,  Up: Music classes

1.2.28 key-change-event
-----------------------

Music event type ‘key-change-event’ is in music objects of type *note
KeyChangeEvent::.

   Accepted by: *note Key_engraver:: and *note Key_performer::.


File: lilypond-internals.info,  Node: label-event,  Next: laissez-vibrer-event,  Prev: key-change-event,  Up: Music classes

1.2.29 label-event
------------------

Music event type ‘label-event’ is in music objects of type *note
LabelEvent::.

   Accepted by: *note Paper_column_engraver::.


File: lilypond-internals.info,  Node: laissez-vibrer-event,  Next: layout-instruction-event,  Prev: label-event,  Up: Music classes

1.2.30 laissez-vibrer-event
---------------------------

Music event type ‘laissez-vibrer-event’ is in music objects of type
*note LaissezVibrerEvent::.

   Accepted by: *note Laissez_vibrer_engraver::.


File: lilypond-internals.info,  Node: layout-instruction-event,  Next: ligature-event,  Prev: laissez-vibrer-event,  Up: Music classes

1.2.31 layout-instruction-event
-------------------------------

Music event type ‘layout-instruction-event’ is in music objects of type
*note ApplyOutputEvent::.

   Not accepted by any engraver or performer.


File: lilypond-internals.info,  Node: ligature-event,  Next: line-break-event,  Prev: layout-instruction-event,  Up: Music classes

1.2.32 ligature-event
---------------------

Music event type ‘ligature-event’ is in music objects of type *note
LigatureEvent::.

   Accepted by: *note Kievan_ligature_engraver::, *note
Ligature_bracket_engraver::, *note Mensural_ligature_engraver:: and
*note Vaticana_ligature_engraver::.


File: lilypond-internals.info,  Node: line-break-event,  Next: lyric-event,  Prev: ligature-event,  Up: Music classes

1.2.33 line-break-event
-----------------------

Music event type ‘line-break-event’ is in music objects of type *note
LineBreakEvent::.

   Not accepted by any engraver or performer.


File: lilypond-internals.info,  Node: lyric-event,  Next: mark-event,  Prev: line-break-event,  Up: Music classes

1.2.34 lyric-event
------------------

Music event type ‘lyric-event’ is in music objects of type *note
LyricEvent::.

   Accepted by: *note Lyric_engraver:: and *note Lyric_performer::.


File: lilypond-internals.info,  Node: mark-event,  Next: measure-counter-event,  Prev: lyric-event,  Up: Music classes

1.2.35 mark-event
-----------------

Music event type ‘mark-event’ is in music objects of type *note
MarkEvent::.

   Accepted by: *note Mark_engraver::.


File: lilypond-internals.info,  Node: measure-counter-event,  Next: melodic-event,  Prev: mark-event,  Up: Music classes

1.2.36 measure-counter-event
----------------------------

Music event type ‘measure-counter-event’ is in music objects of type
*note MeasureCounterEvent::.

   Accepted by: *note Measure_counter_engraver::.


File: lilypond-internals.info,  Node: melodic-event,  Next: multi-measure-rest-event,  Prev: measure-counter-event,  Up: Music classes

1.2.37 melodic-event
--------------------

Music event type ‘melodic-event’ is in music objects of type *note
ClusterNoteEvent:: and *note NoteEvent::.

   Not accepted by any engraver or performer.


File: lilypond-internals.info,  Node: multi-measure-rest-event,  Next: multi-measure-text-event,  Prev: melodic-event,  Up: Music classes

1.2.38 multi-measure-rest-event
-------------------------------

Music event type ‘multi-measure-rest-event’ is in music objects of type
*note MultiMeasureRestEvent::.

   Accepted by: *note Multi_measure_rest_engraver::.


File: lilypond-internals.info,  Node: multi-measure-text-event,  Next: music-event,  Prev: multi-measure-rest-event,  Up: Music classes

1.2.39 multi-measure-text-event
-------------------------------

Music event type ‘multi-measure-text-event’ is in music objects of type
*note MultiMeasureTextEvent::.

   Accepted by: *note Multi_measure_rest_engraver::.


File: lilypond-internals.info,  Node: music-event,  Next: note-event,  Prev: multi-measure-text-event,  Up: Music classes

1.2.40 music-event
------------------

Music event type ‘music-event’ is in music objects of type *note
AbsoluteDynamicEvent::, *note AlternativeEvent::, *note
AnnotateOutputEvent::, *note ApplyOutputEvent::, *note ArpeggioEvent::,
*note ArticulationEvent::, *note BassFigureEvent::, *note BeamEvent::,
*note BeamForbidEvent::, *note BendAfterEvent::, *note
BreakDynamicSpanEvent::, *note BreathingEvent::, *note
ClusterNoteEvent::, *note CompletizeExtenderEvent::, *note
CrescendoEvent::, *note DecrescendoEvent::, *note DoublePercentEvent::,
*note EpisemaEvent::, *note ExtenderEvent::, *note FingeringEvent::,
*note FootnoteEvent::, *note GlissandoEvent::, *note HarmonicEvent::,
*note HyphenEvent::, *note KeyChangeEvent::, *note LabelEvent::, *note
LaissezVibrerEvent::, *note LigatureEvent::, *note LineBreakEvent::,
*note LyricEvent::, *note MarkEvent::, *note MeasureCounterEvent::,
*note MultiMeasureRestEvent::, *note MultiMeasureTextEvent::, *note
NoteEvent::, *note NoteGroupingEvent::, *note PageBreakEvent::, *note
PageTurnEvent::, *note PercentEvent::, *note PesOrFlexaEvent::, *note
PhrasingSlurEvent::, *note RepeatSlashEvent::, *note RepeatTieEvent::,
*note RestEvent::, *note ScriptEvent::, *note SkipEvent::, *note
SlurEvent::, *note SoloOneEvent::, *note SoloTwoEvent::, *note
SostenutoEvent::, *note SpacingSectionEvent::, *note SpanEvent::, *note
StaffSpanEvent::, *note StringNumberEvent::, *note StrokeFingerEvent::,
*note SustainEvent::, *note TempoChangeEvent::, *note TextScriptEvent::,
*note TextSpanEvent::, *note TieEvent::, *note TimeSignatureEvent::,
*note TremoloEvent::, *note TremoloSpanEvent::, *note TrillSpanEvent::,
*note TupletSpanEvent::, *note UnaCordaEvent:: and *note UnisonoEvent::.

   Not accepted by any engraver or performer.


File: lilypond-internals.info,  Node: note-event,  Next: note-grouping-event,  Prev: music-event,  Up: Music classes

1.2.41 note-event
-----------------

Music event type ‘note-event’ is in music objects of type *note
NoteEvent::.

   Accepted by: *note Chord_name_engraver::, *note
Completion_heads_engraver::, *note Drum_note_performer::, *note
Drum_notes_engraver::, *note Fretboard_engraver::, *note
Note_heads_engraver::, *note Note_name_engraver::, *note
Note_performer::, *note Part_combine_engraver::, *note
Phrasing_slur_engraver::, *note Slur_engraver:: and *note
Tab_note_heads_engraver::.


File: lilypond-internals.info,  Node: note-grouping-event,  Next: page-break-event,  Prev: note-event,  Up: Music classes

1.2.42 note-grouping-event
--------------------------

Music event type ‘note-grouping-event’ is in music objects of type *note
NoteGroupingEvent::.

   Accepted by: *note Horizontal_bracket_engraver::.


File: lilypond-internals.info,  Node: page-break-event,  Next: page-turn-event,  Prev: note-grouping-event,  Up: Music classes

1.2.43 page-break-event
-----------------------

Music event type ‘page-break-event’ is in music objects of type *note
PageBreakEvent::.

   Not accepted by any engraver or performer.


File: lilypond-internals.info,  Node: page-turn-event,  Next: part-combine-event,  Prev: page-break-event,  Up: Music classes

1.2.44 page-turn-event
----------------------

Music event type ‘page-turn-event’ is in music objects of type *note
PageTurnEvent::.

   Not accepted by any engraver or performer.


File: lilypond-internals.info,  Node: part-combine-event,  Next: pedal-event,  Prev: page-turn-event,  Up: Music classes

1.2.45 part-combine-event
-------------------------

Music event type ‘part-combine-event’ is in music objects of type *note
SoloOneEvent::, *note SoloTwoEvent:: and *note UnisonoEvent::.

   Accepted by: *note Part_combine_engraver::.


File: lilypond-internals.info,  Node: pedal-event,  Next: percent-event,  Prev: part-combine-event,  Up: Music classes

1.2.46 pedal-event
------------------

Music event type ‘pedal-event’ is in music objects of type *note
SostenutoEvent::, *note SustainEvent:: and *note UnaCordaEvent::.

   Not accepted by any engraver or performer.


File: lilypond-internals.info,  Node: percent-event,  Next: pes-or-flexa-event,  Prev: pedal-event,  Up: Music classes

1.2.47 percent-event
--------------------

Music event type ‘percent-event’ is in music objects of type *note
PercentEvent::.

   Accepted by: *note Percent_repeat_engraver::.


File: lilypond-internals.info,  Node: pes-or-flexa-event,  Next: phrasing-slur-event,  Prev: percent-event,  Up: Music classes

1.2.48 pes-or-flexa-event
-------------------------

Music event type ‘pes-or-flexa-event’ is in music objects of type *note
PesOrFlexaEvent::.

   Accepted by: *note Vaticana_ligature_engraver::.


File: lilypond-internals.info,  Node: phrasing-slur-event,  Next: repeat-slash-event,  Prev: pes-or-flexa-event,  Up: Music classes

1.2.49 phrasing-slur-event
--------------------------

Music event type ‘phrasing-slur-event’ is in music objects of type *note
PhrasingSlurEvent::.

   Accepted by: *note Phrasing_slur_engraver::.


File: lilypond-internals.info,  Node: repeat-slash-event,  Next: repeat-tie-event,  Prev: phrasing-slur-event,  Up: Music classes

1.2.50 repeat-slash-event
-------------------------

Music event type ‘repeat-slash-event’ is in music objects of type *note
RepeatSlashEvent::.

   Accepted by: *note Slash_repeat_engraver::.


File: lilypond-internals.info,  Node: repeat-tie-event,  Next: rest-event,  Prev: repeat-slash-event,  Up: Music classes

1.2.51 repeat-tie-event
-----------------------

Music event type ‘repeat-tie-event’ is in music objects of type *note
RepeatTieEvent::.

   Accepted by: *note Repeat_tie_engraver::.


File: lilypond-internals.info,  Node: rest-event,  Next: rhythmic-event,  Prev: repeat-tie-event,  Up: Music classes

1.2.52 rest-event
-----------------

Music event type ‘rest-event’ is in music objects of type *note
RestEvent::.

   Accepted by: *note Chord_name_engraver::, *note
Completion_rest_engraver::, *note Figured_bass_engraver:: and *note
Rest_engraver::.


File: lilypond-internals.info,  Node: rhythmic-event,  Next: script-event,  Prev: rest-event,  Up: Music classes

1.2.53 rhythmic-event
---------------------

Music event type ‘rhythmic-event’ is in music objects of type *note
BassFigureEvent::, *note ClusterNoteEvent::, *note DoublePercentEvent::,
*note LyricEvent::, *note MultiMeasureRestEvent::, *note NoteEvent::,
*note RepeatSlashEvent::, *note RestEvent:: and *note SkipEvent::.

   Not accepted by any engraver or performer.


File: lilypond-internals.info,  Node: script-event,  Next: skip-event,  Prev: rhythmic-event,  Up: Music classes

1.2.54 script-event
-------------------

Music event type ‘script-event’ is in music objects of type *note
ArticulationEvent::, *note ScriptEvent:: and *note TextScriptEvent::.

   Not accepted by any engraver or performer.


File: lilypond-internals.info,  Node: skip-event,  Next: slur-event,  Prev: script-event,  Up: Music classes

1.2.55 skip-event
-----------------

Music event type ‘skip-event’ is in music objects of type *note
SkipEvent::.

   Not accepted by any engraver or performer.


File: lilypond-internals.info,  Node: slur-event,  Next: solo-one-event,  Prev: skip-event,  Up: Music classes

1.2.56 slur-event
-----------------

Music event type ‘slur-event’ is in music objects of type *note
SlurEvent::.

   Accepted by: *note Slur_engraver:: and *note Slur_performer::.


File: lilypond-internals.info,  Node: solo-one-event,  Next: solo-two-event,  Prev: slur-event,  Up: Music classes

1.2.57 solo-one-event
---------------------

Music event type ‘solo-one-event’ is in music objects of type *note
SoloOneEvent::.

   Not accepted by any engraver or performer.


File: lilypond-internals.info,  Node: solo-two-event,  Next: sostenuto-event,  Prev: solo-one-event,  Up: Music classes

1.2.58 solo-two-event
---------------------

Music event type ‘solo-two-event’ is in music objects of type *note
SoloTwoEvent::.

   Not accepted by any engraver or performer.


File: lilypond-internals.info,  Node: sostenuto-event,  Next: spacing-section-event,  Prev: solo-two-event,  Up: Music classes

1.2.59 sostenuto-event
----------------------

Music event type ‘sostenuto-event’ is in music objects of type *note
SostenutoEvent::.

   Accepted by: *note Piano_pedal_engraver:: and *note
Piano_pedal_performer::.


File: lilypond-internals.info,  Node: spacing-section-event,  Next: span-dynamic-event,  Prev: sostenuto-event,  Up: Music classes

1.2.60 spacing-section-event
----------------------------

Music event type ‘spacing-section-event’ is in music objects of type
*note SpacingSectionEvent::.

   Accepted by: *note Spacing_engraver::.


File: lilypond-internals.info,  Node: span-dynamic-event,  Next: span-event,  Prev: spacing-section-event,  Up: Music classes

1.2.61 span-dynamic-event
-------------------------

Music event type ‘span-dynamic-event’ is in music objects of type *note
CrescendoEvent:: and *note DecrescendoEvent::.

   Accepted by: *note Dynamic_engraver::.


File: lilypond-internals.info,  Node: span-event,  Next: staff-span-event,  Prev: span-dynamic-event,  Up: Music classes

1.2.62 span-event
-----------------

Music event type ‘span-event’ is in music objects of type *note
BeamEvent::, *note CrescendoEvent::, *note DecrescendoEvent::, *note
EpisemaEvent::, *note LigatureEvent::, *note MeasureCounterEvent::,
*note PhrasingSlurEvent::, *note SlurEvent::, *note SostenutoEvent::,
*note SpanEvent::, *note StaffSpanEvent::, *note SustainEvent::, *note
TextSpanEvent::, *note TremoloSpanEvent::, *note TrillSpanEvent::, *note
TupletSpanEvent:: and *note UnaCordaEvent::.

   Not accepted by any engraver or performer.


File: lilypond-internals.info,  Node: staff-span-event,  Next: StreamEvent,  Prev: span-event,  Up: Music classes

1.2.63 staff-span-event
-----------------------

Music event type ‘staff-span-event’ is in music objects of type *note
StaffSpanEvent::.

   Accepted by: *note Staff_symbol_engraver::.


File: lilypond-internals.info,  Node: StreamEvent,  Next: string-number-event,  Prev: staff-span-event,  Up: Music classes

1.2.64 StreamEvent
------------------

Music event type ‘StreamEvent’ is in music objects of type *note
AbsoluteDynamicEvent::, *note AlternativeEvent::, *note
AnnotateOutputEvent::, *note ApplyOutputEvent::, *note ArpeggioEvent::,
*note ArticulationEvent::, *note BassFigureEvent::, *note BeamEvent::,
*note BeamForbidEvent::, *note BendAfterEvent::, *note
BreakDynamicSpanEvent::, *note BreathingEvent::, *note
ClusterNoteEvent::, *note CompletizeExtenderEvent::, *note
CrescendoEvent::, *note DecrescendoEvent::, *note DoublePercentEvent::,
*note EpisemaEvent::, *note ExtenderEvent::, *note FingeringEvent::,
*note FootnoteEvent::, *note GlissandoEvent::, *note HarmonicEvent::,
*note HyphenEvent::, *note KeyChangeEvent::, *note LabelEvent::, *note
LaissezVibrerEvent::, *note LigatureEvent::, *note LineBreakEvent::,
*note LyricEvent::, *note MarkEvent::, *note MeasureCounterEvent::,
*note MultiMeasureRestEvent::, *note MultiMeasureTextEvent::, *note
NoteEvent::, *note NoteGroupingEvent::, *note PageBreakEvent::, *note
PageTurnEvent::, *note PercentEvent::, *note PesOrFlexaEvent::, *note
PhrasingSlurEvent::, *note RepeatSlashEvent::, *note RepeatTieEvent::,
*note RestEvent::, *note ScriptEvent::, *note SkipEvent::, *note
SlurEvent::, *note SoloOneEvent::, *note SoloTwoEvent::, *note
SostenutoEvent::, *note SpacingSectionEvent::, *note SpanEvent::, *note
StaffSpanEvent::, *note StringNumberEvent::, *note StrokeFingerEvent::,
*note SustainEvent::, *note TempoChangeEvent::, *note TextScriptEvent::,
*note TextSpanEvent::, *note TieEvent::, *note TimeSignatureEvent::,
*note TremoloEvent::, *note TremoloSpanEvent::, *note TrillSpanEvent::,
*note TupletSpanEvent::, *note UnaCordaEvent:: and *note UnisonoEvent::.

   Not accepted by any engraver or performer.


File: lilypond-internals.info,  Node: string-number-event,  Next: stroke-finger-event,  Prev: StreamEvent,  Up: Music classes

1.2.65 string-number-event
--------------------------

Music event type ‘string-number-event’ is in music objects of type *note
StringNumberEvent::.

   Accepted by: *note Fretboard_engraver:: and *note
Tab_note_heads_engraver::.


File: lilypond-internals.info,  Node: stroke-finger-event,  Next: sustain-event,  Prev: string-number-event,  Up: Music classes

1.2.66 stroke-finger-event
--------------------------

Music event type ‘stroke-finger-event’ is in music objects of type *note
StrokeFingerEvent::.

   Not accepted by any engraver or performer.


File: lilypond-internals.info,  Node: sustain-event,  Next: tempo-change-event,  Prev: stroke-finger-event,  Up: Music classes

1.2.67 sustain-event
--------------------

Music event type ‘sustain-event’ is in music objects of type *note
SustainEvent::.

   Accepted by: *note Piano_pedal_engraver:: and *note
Piano_pedal_performer::.


File: lilypond-internals.info,  Node: tempo-change-event,  Next: text-script-event,  Prev: sustain-event,  Up: Music classes

1.2.68 tempo-change-event
-------------------------

Music event type ‘tempo-change-event’ is in music objects of type *note
TempoChangeEvent::.

   Accepted by: *note Metronome_mark_engraver::.


File: lilypond-internals.info,  Node: text-script-event,  Next: text-span-event,  Prev: tempo-change-event,  Up: Music classes

1.2.69 text-script-event
------------------------

Music event type ‘text-script-event’ is in music objects of type *note
TextScriptEvent::.

   Accepted by: *note Text_engraver::.


File: lilypond-internals.info,  Node: text-span-event,  Next: tie-event,  Prev: text-script-event,  Up: Music classes

1.2.70 text-span-event
----------------------

Music event type ‘text-span-event’ is in music objects of type *note
TextSpanEvent::.

   Accepted by: *note Text_spanner_engraver::.


File: lilypond-internals.info,  Node: tie-event,  Next: time-signature-event,  Prev: text-span-event,  Up: Music classes

1.2.71 tie-event
----------------

Music event type ‘tie-event’ is in music objects of type *note
TieEvent::.

   Accepted by: *note Note_performer::, *note Tie_engraver:: and *note
Tie_performer::.


File: lilypond-internals.info,  Node: time-signature-event,  Next: tremolo-event,  Prev: tie-event,  Up: Music classes

1.2.72 time-signature-event
---------------------------

Music event type ‘time-signature-event’ is in music objects of type
*note TimeSignatureEvent::.

   Accepted by: *note Time_signature_engraver::.


File: lilypond-internals.info,  Node: tremolo-event,  Next: tremolo-span-event,  Prev: time-signature-event,  Up: Music classes

1.2.73 tremolo-event
--------------------

Music event type ‘tremolo-event’ is in music objects of type *note
TremoloEvent::.

   Accepted by: *note Stem_engraver::.


File: lilypond-internals.info,  Node: tremolo-span-event,  Next: trill-span-event,  Prev: tremolo-event,  Up: Music classes

1.2.74 tremolo-span-event
-------------------------

Music event type ‘tremolo-span-event’ is in music objects of type *note
TremoloSpanEvent::.

   Accepted by: *note Chord_tremolo_engraver::.


File: lilypond-internals.info,  Node: trill-span-event,  Next: tuplet-span-event,  Prev: tremolo-span-event,  Up: Music classes

1.2.75 trill-span-event
-----------------------

Music event type ‘trill-span-event’ is in music objects of type *note
TrillSpanEvent::.

   Accepted by: *note Trill_spanner_engraver::.


File: lilypond-internals.info,  Node: tuplet-span-event,  Next: una-corda-event,  Prev: trill-span-event,  Up: Music classes

1.2.76 tuplet-span-event
------------------------

Music event type ‘tuplet-span-event’ is in music objects of type *note
TupletSpanEvent::.

   Accepted by: *note Stem_engraver:: and *note Tuplet_engraver::.


File: lilypond-internals.info,  Node: una-corda-event,  Next: unisono-event,  Prev: tuplet-span-event,  Up: Music classes

1.2.77 una-corda-event
----------------------

Music event type ‘una-corda-event’ is in music objects of type *note
UnaCordaEvent::.

   Accepted by: *note Piano_pedal_engraver:: and *note
Piano_pedal_performer::.


File: lilypond-internals.info,  Node: unisono-event,  Prev: una-corda-event,  Up: Music classes

1.2.78 unisono-event
--------------------

Music event type ‘unisono-event’ is in music objects of type *note
UnisonoEvent::.

   Not accepted by any engraver or performer.


File: lilypond-internals.info,  Node: Music properties,  Prev: Music classes,  Up: Music definitions

1.3 Music properties
====================

‘absolute-octave’ (integer)
     The absolute octave for an octave check note.

‘alteration’ (number)
     Alteration for figured bass.

‘alternative-dir’ (direction)
     Indicates if an AlternativeMusic is the First (-1), Middle (0), or
     Last (1) of group of alternate endings.

‘alternative-increment’ (integer)
     The number of times an alternative’s lettering should be
     incremented.

‘articulation-type’ (string)
     Key for script definitions alist.

     TODO: Consider making type into symbol.

‘articulations’ (list of music objects)
     Articulation events specifically for this note.

‘associated-context’ (string)
     Name of the context associated with this ‘\lyricsto’ section.

‘associated-context-type’ (symbol)
     Type of the context associated with this ‘\lyricsto’ section.

‘augmented’ (boolean)
     This figure is for an augmented figured bass (with ‘+’ sign).

‘augmented-slash’ (boolean)
     This figure is for an augmented figured bass (back-slashed number).

‘automatically-numbered’ (boolean)
     Should a footnote be automatically numbered?

‘autosplit-end’ (boolean)
     Duration of event was truncated by automatic splitting in
     ‘Completion_heads_engraver’.

‘bass’ (boolean)
     Set if this note is a bass note in a chord.

‘beat-structure’ (list)
     A beatStructure to be used in autobeaming.

‘bracket-start’ (boolean)
     Start a bracket here.

     TODO: Use SpanEvents?

‘bracket-stop’ (boolean)
     Stop a bracket here.

‘break-penalty’ (number)
     Penalty for line break hint.

‘break-permission’ (symbol)
     Whether to allow, forbid or force a line break.

‘cautionary’ (boolean)
     If set, this alteration needs a cautionary accidental.

‘change-to-id’ (string)
     Name of the context to change to.

‘change-to-type’ (symbol)
     Type of the context to change to.

‘class’ (symbol)
     The class name of an event class.

‘context’ (context)
     The context to which an event is sent.

‘context-change-list’ (list)
     Context changes for ‘\autochange’ or ‘\partcombine’.

‘context-id’ (string)
     Name of context.

‘context-type’ (symbol)
     Type of context.

‘create-new’ (boolean)
     Create a fresh context.

‘delta-step’ (number)
     How much should a fall change pitch?

‘denominator’ (integer)
     Denominator in a time signature.

‘descend-only’ (boolean)
     If set, this ‘\context’ only descends in the context tree.

‘digit’ (integer)
     Digit for fingering.

‘diminished’ (boolean)
     This bass figure should be slashed.

‘direction’ (direction)
     Print this up or down?

‘drum-type’ (symbol)
     Which percussion instrument to play this note on.

‘duration’ (duration)
     Duration of this note or lyric.

‘element’ (music)
     The single child of a Music_wrapper music object, or the body of a
     repeat.

‘elements’ (list of music objects)
     A list of elements for sequential of simultaneous music, or the
     alternatives of repeated music.

‘elements-callback’ (procedure)
     Return a list of children, for use by a sequential iterator.  Takes
     a single music parameter.

‘error-found’ (boolean)
     If true, a parsing error was found in this expression.

‘figure’ (integer)
     A bass figure.

‘footnote-text’ (markup)
     Text to appear in a footnote.

‘force-accidental’ (boolean)
     If set, a cautionary accidental should always be printed on this
     note.

‘grob-property’ (symbol)
     The symbol of the grob property to set.

‘grob-property-path’ (list)
     A list of symbols, locating a nested grob property, e.g.,
     ‘(beamed-lengths details)’.

‘grob-value’ (any type)
     The value of the grob property to set.

‘id’ (symbol)
     The ID of an event.

‘input-tag’ (any type)
     Arbitrary marker to relate input and output.

‘inversion’ (boolean)
     If set, this chord note is inverted.

‘iterator-ctor’ (procedure)
     Function to construct a ‘music-event-iterator’ object for this
     music.

‘label’ (number or markup)
     Label of a mark.

‘last-pitch’ (pitch)
     The last pitch after relativization.

‘length’ (moment)
     The duration of this music.

‘length-callback’ (procedure)
     How to compute the duration of this music.  This property can only
     be defined as initializer in ‘scm/define-music-types.scm’.

‘line-break-permission’ (symbol)
     When the music is at top-level, whether to allow, forbid or force a
     line break.

‘metronome-count’ (number or pair)
     How many beats in a minute?

‘midi-extra-velocity’ (integer)
     How much louder or softer should this note be in MIDI output?  The
     default is 0.

‘midi-length’ (procedure)
     Function to determine how long to play a note in MIDI. It should
     take a moment (the written length of the note) and a context, and
     return a moment (the length to play the note).

‘moment’ (moment)
     The moment at which an event happens.

‘music-cause’ (music)
     The music object that is the cause of an event.

‘name’ (symbol)
     Name of this music object.

‘no-continuation’ (boolean)
     If set, disallow continuation lines.

‘numerator’ (integer)
     Numerator of a time signature.

‘octavation’ (integer)
     This pitch was octavated by how many octaves?  For chord
     inversions, this is negative.

‘once’ (boolean)
     Apply this operation only during one time step?

‘ops’ (any type)
     The operations to apply during the creation of a context.

‘origin’ (input location)
     Where was this piece of music defined?

‘ottava-number’ (integer)
     The octavation for ‘\ottava’.

‘page-break-permission’ (symbol)
     When the music is at top-level, whether to allow, forbid or force a
     page break.

‘page-label’ (symbol)
     The label of a page marker.

‘page-marker’ (boolean)
     If true, and the music expression is found at top-level, a page
     marker object is instanciated instead of a score.

‘page-turn-permission’ (symbol)
     When the music is at top-level, whether to allow, forbid or force a
     page turn.

‘parenthesize’ (boolean)
     Enclose resulting objects in parentheses?

‘part-combine-status’ (symbol)
     Change to what kind of state?  Options are ‘solo1’, ‘solo2’ and
     ‘unisono’.

‘pitch’ (pitch)
     The pitch of this note.

‘pitch-alist’ (list)
     A list of pitches jointly forming the scale of a key signature.

‘pop-first’ (boolean)
     Do a revert before we try to do an override on some grob property.

‘procedure’ (procedure)
     The function to run with ‘\applycontext’.  It must take a single
     argument, being the context.

‘property-operations’ (list)
     Do these operations for instantiating the context.

‘property-path’ (symbol)
     The path of a property.

‘quoted-context-id’ (string)
     The ID of the context to direct quotes to, e.g., ‘cue’.

‘quoted-context-type’ (symbol)
     The name of the context to direct quotes to, e.g., ‘Voice’.

‘quoted-events’ (vector)
     A vector of with ‘moment’ and ‘event-list’ entries.

‘quoted-music-clef’ (string)
     The clef of the voice to quote.

‘quoted-music-name’ (string)
     The name of the voice to quote.

‘quoted-transposition’ (pitch)
     The pitch used for the quote, overriding ‘\transposition’.

‘quoted-voice-direction’ (direction)
     Should the quoted voice be up-stem or down-stem?

‘repeat-count’ (integer)
     Do a ‘\repeat’ how often?

‘slash-count’ (integer)
     The number of slashes in a single-beat repeat.  If zero, signals a
     beat containing varying durations.

‘span-direction’ (direction)
     Does this start or stop a spanner?

‘span-text’ (markup)
     The displayed text for dynamic text spanners (e.g., cresc.)

‘span-type’ (symbol)
     What kind of dynamic spanner should be created?  Options are
     ‘'text’ and ‘'hairpin’.

‘spanner-id’ (index or symbol)
     Identifier to distinguish concurrent spanners.

‘start-callback’ (procedure)
     Function to compute the negative length of starting grace notes.
     This property can only be defined as initializer in
     ‘scm/define-music-types.scm’.

‘string-number’ (integer)
     The number of the string in a ‘StringNumberEvent’.

‘symbol’ (symbol)
     Grob name to perform an override or revert on.

‘tags’ (list)
     List of symbols that for denoting extra details, e.g., ‘\tag #'part
     ...’ could tag a piece of music as only being active in a part.

‘tempo-unit’ (duration)
     The unit for the metronome count.

‘text’ (markup)
     Markup expression to be printed.

‘to-relative-callback’ (procedure)
     How to transform a piece of music to relative pitches.

‘tonic’ (pitch)
     Base of the scale.

‘tremolo-type’ (integer)
     Speed of tremolo, e.g., 16 for ‘c4:16’.

‘trill-pitch’ (pitch)
     Pitch of other note of the trill.

‘tweaks’ (list)
     An alist of properties to override in the backend for the grob made
     of this event.

‘type’ (symbol)
     The type of this music object.  Determines iteration in some cases.

‘types’ (list)
     The types of this music object; determines by what engraver this
     music expression is processed.

‘untransposable’ (boolean)
     If set, this music is not transposed.

‘value’ (any type)
     Assignment value for a translation property.

‘void’ (boolean)
     If this property is ‘#t’, then the music expression is to be
     discarded by the toplevel music handler.

‘volta-repeats’ (list)
     A list that is transformed into a volta repeat element list.

‘what’ (symbol)
     What to change for auto-change.

     FIXME: Naming.

‘X-offset’ (number)
     Offset of resulting grob; only used for balloon texts.

‘Y-offset’ (number)
     Offset of resulting grob; only used for balloon texts.


File: lilypond-internals.info,  Node: Translation,  Next: Backend,  Prev: Music definitions,  Up: Top

2 Translation
*************

* Menu:

* Contexts::                      Complete descriptions of all contexts.
* Engravers and Performers::      All separate engravers and performers.
* Tunable context properties::    All tunable context properties.
* Internal context properties::   All internal context properties.


File: lilypond-internals.info,  Node: Contexts,  Next: Engravers and Performers,  Up: Translation

2.1 Contexts
============

* Menu:

* ChoirStaff::                    
* ChordNames::                    
* CueVoice::                      
* Devnull::                       
* DrumStaff::                     
* DrumVoice::                     
* Dynamics::                      
* FiguredBass::                   
* FretBoards::                    
* Global::                        
* GrandStaff::                    
* GregorianTranscriptionStaff::   
* GregorianTranscriptionVoice::   
* KievanStaff::                   
* KievanVoice::                   
* Lyrics::                        
* MensuralStaff::                 
* MensuralVoice::                 
* NoteNames::                     
* NullVoice::                     
* OneStaff::                      
* PetrucciStaff::                 
* PetrucciVoice::                 
* PianoStaff::                    
* RhythmicStaff::                 
* Score::                         
* Staff::                         
* StaffGroup::                    
* TabStaff::                      
* TabVoice::                      
* VaticanaStaff::                 
* VaticanaVoice::                 
* Voice::                         


File: lilypond-internals.info,  Node: ChoirStaff,  Next: ChordNames,  Up: Contexts

2.1.1 ChoirStaff
----------------

Identical to ‘StaffGroup’ except that the contained staves are not
connected vertically.

   This context creates the following layout object(s):

   *note InstrumentName::, *note SystemStartBar::, *note
SystemStartBrace::, *note SystemStartBracket::, *note
SystemStartSquare:: and *note VerticalAlignment::.

   This context sets the following properties:

   • Set translator property ‘instrumentName’ to ‘'()’.
   • Set translator property ‘localAlterations’ to ‘'()’.
   • Set translator property ‘shortInstrumentName’ to ‘'()’.
   • Set translator property ‘shortVocalName’ to ‘'()’.
   • Set translator property ‘systemStartDelimiter’ to
     ‘'SystemStartBracket’.
   • Set translator property ‘topLevelAlignment’ to ‘#f’.
   • Set translator property ‘vocalName’ to ‘'()’.

   This is not a ‘Bottom’ context; search for such a one will commence
after creating an implicit context of type *note Staff::.

   Context ChoirStaff can contain *note ChoirStaff::, *note
ChordNames::, *note DrumStaff::, *note Dynamics::, *note FiguredBass::,
*note GrandStaff::, *note Lyrics::, *note OneStaff::, *note
PianoStaff::, *note RhythmicStaff::, *note Staff:: and *note
StaffGroup::.

   This context is built from the following engraver(s):

     ‘*note Instrument_name_engraver::’
          Create a system start text for instrument or vocal names.

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘instrumentName’ (markup)
                    The name to print left of a staff.  The
                    ‘instrumentName’ property labels the staff in the
                    first system, and the ‘shortInstrumentName’ property
                    labels following lines.

               ‘shortInstrumentName’ (markup)
                    See ‘instrumentName’.

               ‘shortVocalName’ (markup)
                    Name of a vocal line, short version.

               ‘vocalName’ (markup)
                    Name of a vocal line.

          This engraver creates the following layout object(s):

          *note InstrumentName::.

     ‘*note System_start_delimiter_engraver::’
          Create a system start delimiter (i.e., a ‘SystemStartBar’,
          ‘SystemStartBrace’, ‘SystemStartBracket’ or
          ‘SystemStartSquare’ spanner).

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘systemStartDelimiter’ (symbol)
                    Which grob to make for the start of the
                    system/staff?  Set to ‘SystemStartBrace’,
                    ‘SystemStartBracket’ or ‘SystemStartBar’.

               ‘systemStartDelimiterHierarchy’ (pair)
                    A nested list, indicating the nesting of a start
                    delimiters.

          This engraver creates the following layout object(s):

          *note SystemStartBar::, *note SystemStartBrace::, *note
          SystemStartBracket:: and *note SystemStartSquare::.

     ‘*note Vertical_align_engraver::’
          Catch groups (staves, lyrics lines, etc.)  and stack them
          vertically.

          Properties (read)

               ‘alignAboveContext’ (string)
                    Where to insert newly created context in vertical
                    alignment.

               ‘alignBelowContext’ (string)
                    Where to insert newly created context in vertical
                    alignment.

               ‘hasAxisGroup’ (boolean)
                    True if the current context is contained in an axis
                    group.

          This engraver creates the following layout object(s):

          *note VerticalAlignment::.


File: lilypond-internals.info,  Node: ChordNames,  Next: CueVoice,  Prev: ChoirStaff,  Up: Contexts

2.1.2 ChordNames
----------------

Typesets chord names.

   This context also accepts commands for the following context(s):

   Staff.

   This context creates the following layout object(s):

   *note ChordName::, *note StaffSpacing:: and *note
VerticalAxisGroup::.

   This context sets the following properties:

   • Set grob-property ‘font-size’ in *note ParenthesesItem:: to ‘1.5’.
   • Set grob-property ‘nonstaff-nonstaff-spacing.padding’ in *note
     VerticalAxisGroup:: to ‘0.5’.
   • Set grob-property ‘nonstaff-relatedstaff-spacing.padding’ in *note
     VerticalAxisGroup:: to ‘0.5’.
   • Set grob-property ‘remove-empty’ in *note VerticalAxisGroup:: to
     ‘#t’.
   • Set grob-property ‘remove-first’ in *note VerticalAxisGroup:: to
     ‘#t’.
   • Set grob-property ‘staff-affinity’ in *note VerticalAxisGroup:: to
     ‘-1’.

   This is a ‘Bottom’ context; no contexts will be created implicitly
from it.

   This context cannot contain other contexts.

   This context is built from the following engraver(s):

     ‘*note Axis_group_engraver::’
          Group all objects created in this context in a
          ‘VerticalAxisGroup’ spanner.

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘hasAxisGroup’ (boolean)
                    True if the current context is contained in an axis
                    group.

               ‘keepAliveInterfaces’ (list)
                    A list of symbols, signifying grob interfaces that
                    are worth keeping a staff with ‘remove-empty’ set
                    around for.

          Properties (write)

               ‘hasAxisGroup’ (boolean)
                    True if the current context is contained in an axis
                    group.

          This engraver creates the following layout object(s):

          *note VerticalAxisGroup::.

     ‘*note Chord_name_engraver::’
          Catch note and rest events and generate the appropriate
          chordname.

          Music types accepted:

          *note note-event:: and *note rest-event::

          Properties (read)

               ‘chordChanges’ (boolean)
                    Only show changes in chords scheme?

               ‘chordNameExceptions’ (list)
                    An alist of chord exceptions.  Contains ‘(CHORD .
                    MARKUP)’ entries.

               ‘chordNameExceptions’ (list)
                    An alist of chord exceptions.  Contains ‘(CHORD .
                    MARKUP)’ entries.

               ‘chordNameFunction’ (procedure)
                    The function that converts lists of pitches to chord
                    names.

               ‘chordNoteNamer’ (procedure)
                    A function that converts from a pitch object to a
                    text markup.  Used for single pitches.

               ‘chordRootNamer’ (procedure)
                    A function that converts from a pitch object to a
                    text markup.  Used for chords.

               ‘lastChord’ (markup)
                    Last chord, used for detecting chord changes.

               ‘majorSevenSymbol’ (markup)
                    How should the major 7th be formatted in a chord
                    name?

               ‘noChordSymbol’ (markup)
                    Markup to be displayed for rests in a ChordNames
                    context.

          Properties (write)

               ‘lastChord’ (markup)
                    Last chord, used for detecting chord changes.

          This engraver creates the following layout object(s):

          *note ChordName::.

     ‘*note Separating_line_group_engraver::’
          Generate objects for computing spacing parameters.

          Properties (read)

               ‘createSpacing’ (boolean)
                    Create ‘StaffSpacing’ objects?  Should be set for
                    staves.

          Properties (write)

               ‘hasStaffSpacing’ (boolean)
                    True if the current ‘CommandColumn’ contains items
                    that will affect spacing.

          This engraver creates the following layout object(s):

          *note StaffSpacing::.


File: lilypond-internals.info,  Node: CueVoice,  Next: Devnull,  Prev: ChordNames,  Up: Contexts

2.1.3 CueVoice
--------------

Corresponds to a voice on a staff.  This context handles the conversion
of dynamic signs, stems, beams, super- and subscripts, slurs, ties, and
rests.

   You have to instantiate this explicitly if you want to have multiple
voices on the same staff.

   This context also accepts commands for the following context(s):

   Voice.

   This context creates the following layout object(s):

   *note Arpeggio::, *note Beam::, *note BendAfter::, *note
BreathingSign::, *note ClusterSpanner::, *note ClusterSpannerBeacon::,
*note CombineTextScript::, *note Dots::, *note DoublePercentRepeat::,
*note DoublePercentRepeatCounter::, *note DoubleRepeatSlash::, *note
DynamicLineSpanner::, *note DynamicText::, *note DynamicTextSpanner::,
*note Fingering::, *note Flag::, *note Glissando::, *note Hairpin::,
*note InstrumentSwitch::, *note LaissezVibrerTie::, *note
LaissezVibrerTieColumn::, *note LigatureBracket::, *note
MultiMeasureRest::, *note MultiMeasureRestNumber::, *note
MultiMeasureRestText::, *note NoteColumn::, *note NoteHead::, *note
NoteSpacing::, *note PercentRepeat::, *note PercentRepeatCounter::,
*note PhrasingSlur::, *note RepeatSlash::, *note RepeatTie::, *note
RepeatTieColumn::, *note Rest::, *note Script::, *note ScriptColumn::,
*note Slur::, *note Stem::, *note StemStub::, *note StemTremolo::, *note
StringNumber::, *note StrokeFinger::, *note TextScript::, *note
TextSpanner::, *note Tie::, *note TieColumn::, *note
TrillPitchAccidental::, *note TrillPitchGroup::, *note TrillPitchHead::,
*note TrillSpanner::, *note TupletBracket::, *note TupletNumber:: and
*note VoiceFollower::.

   This context sets the following properties:

   • Set grob-property ‘beam-thickness’ in *note Beam:: to ‘0.35’.
   • Set grob-property ‘ignore-ambitus’ in *note NoteHead:: to ‘#t’.
   • Set grob-property ‘length-fraction’ in *note Beam:: to
     ‘0.629960524947437’.
   • Set grob-property ‘length-fraction’ in *note Stem:: to
     ‘0.629960524947437’.
   • Set translator property ‘fontSize’ to ‘-4’.

   This is a ‘Bottom’ context; no contexts will be created implicitly
from it.

   This context cannot contain other contexts.

   This context is built from the following engraver(s):

     ‘*note Arpeggio_engraver::’
          Generate an Arpeggio symbol.

          Music types accepted:

          *note arpeggio-event::

          This engraver creates the following layout object(s):

          *note Arpeggio::.

     ‘*note Auto_beam_engraver::’
          Generate beams based on measure characteristics and observed
          Stems.  Uses ‘baseMoment’, ‘beatStructure’, ‘beamExceptions’,
          ‘measureLength’, and ‘measurePosition’ to decide when to start
          and stop a beam.  Overriding beaming is done through *note
          Stem_engraver:: properties ‘stemLeftBeamCount’ and
          ‘stemRightBeamCount’.

          Music types accepted:

          *note beam-forbid-event::

          Properties (read)

               ‘autoBeaming’ (boolean)
                    If set to true then beams are generated
                    automatically.

               ‘baseMoment’ (moment)
                    Smallest unit of time that will stand on its own as
                    a subdivided section.

               ‘beamExceptions’ (list)
                    An alist of exceptions to autobeam rules that
                    normally end on beats.

               ‘beamHalfMeasure’ (boolean)
                    Whether to allow a beam to begin halfway through the
                    measure in triple time, which could look like 6/8.

               ‘beatStructure’ (list)
                    List of ‘baseMoment’s that are combined to make
                    beats.

               ‘subdivideBeams’ (boolean)
                    If set, multiple beams will be subdivided at
                    ‘baseMoment’ positions by only drawing one beam over
                    the beat.

          This engraver creates the following layout object(s):

          *note Beam::.

     ‘*note Beam_engraver::’
          Handle ‘Beam’ events by engraving beams.  If omitted, then
          notes are printed with flags instead of beams.

          Music types accepted:

          *note beam-event::

          Properties (read)

               ‘baseMoment’ (moment)
                    Smallest unit of time that will stand on its own as
                    a subdivided section.

               ‘beamMelismaBusy’ (boolean)
                    Signal if a beam is present.

               ‘beatStructure’ (list)
                    List of ‘baseMoment’s that are combined to make
                    beats.

               ‘subdivideBeams’ (boolean)
                    If set, multiple beams will be subdivided at
                    ‘baseMoment’ positions by only drawing one beam over
                    the beat.

          Properties (write)

               ‘forbidBreak’ (boolean)
                    If set to ‘#t’, prevent a line break at this point.

          This engraver creates the following layout object(s):

          *note Beam::.

     ‘*note Bend_engraver::’
          Create fall spanners.

          Music types accepted:

          *note bend-after-event::

          This engraver creates the following layout object(s):

          *note BendAfter::.

     ‘*note Breathing_sign_engraver::’
          Create a breathing sign.

          Music types accepted:

          *note breathing-event::

          This engraver creates the following layout object(s):

          *note BreathingSign::.

     ‘*note Chord_tremolo_engraver::’
          Generate beams for tremolo repeats.

          Music types accepted:

          *note tremolo-span-event::

          This engraver creates the following layout object(s):

          *note Beam::.

     ‘*note Cluster_spanner_engraver::’
          Engrave a cluster using ‘Spanner’ notation.

          Music types accepted:

          *note cluster-note-event::

          This engraver creates the following layout object(s):

          *note ClusterSpanner:: and *note ClusterSpannerBeacon::.

     ‘*note Dots_engraver::’
          Create *note Dots:: objects for *note
          rhythmic-head-interface::s.

          This engraver creates the following layout object(s):

          *note Dots::.

     ‘*note Double_percent_repeat_engraver::’
          Make double measure repeats.

          Music types accepted:

          *note double-percent-event::

          Properties (read)

               ‘countPercentRepeats’ (boolean)
                    If set, produce counters for percent repeats.

               ‘measureLength’ (moment)
                    Length of one measure in the current time signature.

               ‘repeatCountVisibility’ (procedure)
                    A procedure taking as arguments an integer and
                    context, returning whether the corresponding percent
                    repeat number should be printed when
                    ‘countPercentRepeats’ is set.

          Properties (write)

               ‘forbidBreak’ (boolean)
                    If set to ‘#t’, prevent a line break at this point.

          This engraver creates the following layout object(s):

          *note DoublePercentRepeat:: and *note
          DoublePercentRepeatCounter::.

     ‘*note Dynamic_align_engraver::’
          Align hairpins and dynamic texts on a horizontal line.

          Properties (read)

               ‘currentMusicalColumn’ (graphical (layout) object)
                    Grob that is X-parent to all non-breakable items
                    (note heads, lyrics, etc.).

          This engraver creates the following layout object(s):

          *note DynamicLineSpanner::.

     ‘*note Dynamic_engraver::’
          Create hairpins, dynamic texts and dynamic text spanners.

          Music types accepted:

          *note absolute-dynamic-event::, *note break-span-event:: and
          *note span-dynamic-event::

          Properties (read)

               ‘crescendoSpanner’ (symbol)
                    The type of spanner to be used for crescendi.
                    Available values are ‘hairpin’ and ‘text’.  If
                    unset, a hairpin crescendo is used.

               ‘crescendoText’ (markup)
                    The text to print at start of non-hairpin crescendo,
                    i.e., ‘cresc.’.

               ‘currentMusicalColumn’ (graphical (layout) object)
                    Grob that is X-parent to all non-breakable items
                    (note heads, lyrics, etc.).

               ‘decrescendoSpanner’ (symbol)
                    The type of spanner to be used for decrescendi.
                    Available values are ‘hairpin’ and ‘text’.  If
                    unset, a hairpin decrescendo is used.

               ‘decrescendoText’ (markup)
                    The text to print at start of non-hairpin
                    decrescendo, i.e., ‘dim.’.

          This engraver creates the following layout object(s):

          *note DynamicText::, *note DynamicTextSpanner:: and *note
          Hairpin::.

     ‘*note Fingering_engraver::’
          Create fingering scripts.

          Music types accepted:

          *note fingering-event::

          This engraver creates the following layout object(s):

          *note Fingering::.

     ‘*note Font_size_engraver::’
          Put ‘fontSize’ into ‘font-size’ grob property.

          Properties (read)

               ‘fontSize’ (number)
                    The relative size of all grobs in a context.

     ‘*note Forbid_line_break_engraver::’
          Forbid line breaks when note heads are still playing at some
          point.

          Properties (read)

               ‘busyGrobs’ (list)
                    A queue of ‘(END-MOMENT . GROB)’ cons cells.  This
                    is for internal (C++) use only.  This property
                    contains the grobs which are still busy (e.g.  note
                    heads, spanners, etc.).

          Properties (write)

               ‘forbidBreak’ (boolean)
                    If set to ‘#t’, prevent a line break at this point.

     ‘*note Glissando_engraver::’
          Engrave glissandi.

          Music types accepted:

          *note glissando-event::

          Properties (read)

               ‘glissandoMap’ (list)
                    A map in the form of ’((source1 .  target1) (source2
                    .  target2) (sourcen .  targetn)) showing the
                    glissandi to be drawn for note columns.  The value
                    ’() will default to ’((0 .  0) (1 .  1) (n .  n)),
                    where n is the minimal number of note-heads in the
                    two note columns between which the glissandi occur.

          This engraver creates the following layout object(s):

          *note Glissando::.

     ‘*note Grace_auto_beam_engraver::’
          Generates one autobeam group across an entire grace phrase.
          As usual, any manual beaming or ‘\noBeam’ will block
          autobeaming, just like setting the context property
          ‘autoBeaming’ to ‘##f’.

          Music types accepted:

          *note beam-forbid-event::

          Properties (read)

               ‘autoBeaming’ (boolean)
                    If set to true then beams are generated
                    automatically.

          This engraver creates the following layout object(s):

          *note Beam::.

     ‘*note Grace_beam_engraver::’
          Handle ‘Beam’ events by engraving beams.  If omitted, then
          notes are printed with flags instead of beams.  Only engraves
          beams when we are at grace points in time.

          Music types accepted:

          *note beam-event::

          Properties (read)

               ‘baseMoment’ (moment)
                    Smallest unit of time that will stand on its own as
                    a subdivided section.

               ‘beamMelismaBusy’ (boolean)
                    Signal if a beam is present.

               ‘beatStructure’ (list)
                    List of ‘baseMoment’s that are combined to make
                    beats.

               ‘subdivideBeams’ (boolean)
                    If set, multiple beams will be subdivided at
                    ‘baseMoment’ positions by only drawing one beam over
                    the beat.

          This engraver creates the following layout object(s):

          *note Beam::.

     ‘*note Grace_engraver::’
          Set font size and other properties for grace notes.

          Properties (read)

               ‘graceSettings’ (list)
                    Overrides for grace notes.  This property should be
                    manipulated through the ‘add-grace-property’
                    function.

     ‘*note Grob_pq_engraver::’
          Administrate when certain grobs (e.g., note heads) stop
          playing.

          Properties (read)

               ‘busyGrobs’ (list)
                    A queue of ‘(END-MOMENT . GROB)’ cons cells.  This
                    is for internal (C++) use only.  This property
                    contains the grobs which are still busy (e.g.  note
                    heads, spanners, etc.).

          Properties (write)

               ‘busyGrobs’ (list)
                    A queue of ‘(END-MOMENT . GROB)’ cons cells.  This
                    is for internal (C++) use only.  This property
                    contains the grobs which are still busy (e.g.  note
                    heads, spanners, etc.).

     ‘*note Instrument_switch_engraver::’
          Create a cue text for taking instrument.

          Properties (read)

               ‘instrumentCueName’ (markup)
                    The name to print if another instrument is to be
                    taken.

          This engraver creates the following layout object(s):

          *note InstrumentSwitch::.

     ‘*note Laissez_vibrer_engraver::’
          Create laissez vibrer items.

          Music types accepted:

          *note laissez-vibrer-event::

          This engraver creates the following layout object(s):

          *note LaissezVibrerTie:: and *note LaissezVibrerTieColumn::.

     ‘*note Ligature_bracket_engraver::’
          Handle ‘Ligature_events’ by engraving ‘Ligature’ brackets.

          Music types accepted:

          *note ligature-event::

          This engraver creates the following layout object(s):

          *note LigatureBracket::.

     ‘*note Multi_measure_rest_engraver::’
          Engrave multi-measure rests that are produced with ‘R’.  It
          reads ‘measurePosition’ and ‘internalBarNumber’ to determine
          what number to print over the *note MultiMeasureRest::.

          Music types accepted:

          *note multi-measure-rest-event:: and *note
          multi-measure-text-event::

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘internalBarNumber’ (integer)
                    Contains the current barnumber.  This property is
                    used for internal timekeeping, among others by the
                    ‘Accidental_engraver’.

               ‘measurePosition’ (moment)
                    How much of the current measure have we had.  This
                    can be set manually to create incomplete measures.

               ‘restNumberThreshold’ (number)
                    If a multimeasure rest has more measures than this,
                    a number is printed.

               ‘whichBar’ (string)
                    This property is read to determine what type of bar
                    line to create.

                    Example:

                         \set Staff.whichBar = ".|:"

                    This will create a start-repeat bar in this staff
                    only.  Valid values are described in
                    ‘scm/bar-line.scm’.

          This engraver creates the following layout object(s):

          *note MultiMeasureRest::, *note MultiMeasureRestNumber:: and
          *note MultiMeasureRestText::.

     ‘*note New_fingering_engraver::’
          Create fingering scripts for notes in a new chord.  This
          engraver is ill-named, since it also takes care of
          articulations and harmonic note heads.

          Properties (read)

               ‘fingeringOrientations’ (list)
                    A list of symbols, containing ‘left’, ‘right’, ‘up’
                    and/or ‘down’.  This list determines where
                    fingerings are put relative to the chord being
                    fingered.

               ‘harmonicDots’ (boolean)
                    If set, harmonic notes in dotted chords get dots.

               ‘stringNumberOrientations’ (list)
                    See ‘fingeringOrientations’.

               ‘strokeFingerOrientations’ (list)
                    See ‘fingeringOrientations’.

          This engraver creates the following layout object(s):

          *note Fingering::, *note Script::, *note StringNumber:: and
          *note StrokeFinger::.

     ‘*note Note_head_line_engraver::’
          Engrave a line between two note heads in a staff switch if
          ‘followVoice’ is set.

          Properties (read)

               ‘followVoice’ (boolean)
                    If set, note heads are tracked across staff switches
                    by a thin line.

          This engraver creates the following layout object(s):

          *note VoiceFollower::.

     ‘*note Note_heads_engraver::’
          Generate note heads.

          Music types accepted:

          *note note-event::

          Properties (read)

               ‘middleCPosition’ (number)
                    The place of the middle C, measured in half
                    staff-spaces.  Usually determined by looking at
                    ‘middleCClefPosition’ and ‘middleCOffset’.

               ‘staffLineLayoutFunction’ (procedure)
                    Layout of staff lines, ‘traditional’, or ‘semitone’.

          This engraver creates the following layout object(s):

          *note NoteHead::.

     ‘*note Note_spacing_engraver::’
          Generate ‘NoteSpacing’, an object linking horizontal lines for
          use in spacing.

          This engraver creates the following layout object(s):

          *note NoteSpacing::.

     ‘*note Part_combine_engraver::’
          Part combine engraver for orchestral scores: Print markings
          ‘a2’, ‘Solo’, ‘Solo II’, and ‘unisono’.

          Music types accepted:

          *note note-event:: and *note part-combine-event::

          Properties (read)

               ‘aDueText’ (markup)
                    Text to print at a unisono passage.

               ‘partCombineTextsOnNote’ (boolean)
                    Print part-combine texts only on the next note
                    rather than immediately on rests or skips.

               ‘printPartCombineTexts’ (boolean)
                    Set ‘Solo’ and ‘A due’ texts in the part combiner?

               ‘soloIIText’ (markup)
                    The text for the start of a solo for voice ‘two’
                    when part-combining.

               ‘soloText’ (markup)
                    The text for the start of a solo when
                    part-combining.

          This engraver creates the following layout object(s):

          *note CombineTextScript::.

     ‘*note Percent_repeat_engraver::’
          Make whole measure repeats.

          Music types accepted:

          *note percent-event::

          Properties (read)

               ‘countPercentRepeats’ (boolean)
                    If set, produce counters for percent repeats.

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘repeatCountVisibility’ (procedure)
                    A procedure taking as arguments an integer and
                    context, returning whether the corresponding percent
                    repeat number should be printed when
                    ‘countPercentRepeats’ is set.

          This engraver creates the following layout object(s):

          *note PercentRepeat:: and *note PercentRepeatCounter::.

     ‘*note Phrasing_slur_engraver::’
          Print phrasing slurs.  Similar to *note Slur_engraver::.

          Music types accepted:

          *note note-event:: and *note phrasing-slur-event::

          This engraver creates the following layout object(s):

          *note PhrasingSlur::.

     ‘*note Pitched_trill_engraver::’
          Print the bracketed note head after a note head with trill.

          This engraver creates the following layout object(s):

          *note TrillPitchAccidental::, *note TrillPitchGroup:: and
          *note TrillPitchHead::.

     ‘*note Repeat_tie_engraver::’
          Create repeat ties.

          Music types accepted:

          *note repeat-tie-event::

          This engraver creates the following layout object(s):

          *note RepeatTie:: and *note RepeatTieColumn::.

     ‘*note Rest_engraver::’
          Engrave rests.

          Music types accepted:

          *note rest-event::

          Properties (read)

               ‘middleCPosition’ (number)
                    The place of the middle C, measured in half
                    staff-spaces.  Usually determined by looking at
                    ‘middleCClefPosition’ and ‘middleCOffset’.

          This engraver creates the following layout object(s):

          *note Rest::.

     ‘*note Rhythmic_column_engraver::’
          Generate ‘NoteColumn’, an object that groups stems, note
          heads, and rests.

          This engraver creates the following layout object(s):

          *note NoteColumn::.

     ‘*note Script_column_engraver::’
          Find potentially colliding scripts and put them into a
          ‘ScriptColumn’ object; that will fix the collisions.

          This engraver creates the following layout object(s):

          *note ScriptColumn::.

     ‘*note Script_engraver::’
          Handle note scripted articulations.

          Music types accepted:

          *note articulation-event::

          Properties (read)

               ‘scriptDefinitions’ (list)
                    The description of scripts.  This is used by the
                    ‘Script_engraver’ for typesetting note-superscripts
                    and subscripts.  See ‘scm/script.scm’ for more
                    information.

          This engraver creates the following layout object(s):

          *note Script::.

     ‘*note Slash_repeat_engraver::’
          Make beat repeats.

          Music types accepted:

          *note repeat-slash-event::

          This engraver creates the following layout object(s):

          *note DoubleRepeatSlash:: and *note RepeatSlash::.

     ‘*note Slur_engraver::’
          Build slur grobs from slur events.

          Music types accepted:

          *note note-event:: and *note slur-event::

          Properties (read)

               ‘doubleSlurs’ (boolean)
                    If set, two slurs are created for every slurred
                    note, one above and one below the chord.

               ‘slurMelismaBusy’ (boolean)
                    Signal if a slur is present.

          This engraver creates the following layout object(s):

          *note Slur::.

     ‘*note Spanner_break_forbid_engraver::’
          Forbid breaks in certain spanners.

     ‘*note Stem_engraver::’
          Create stems, flags and single-stem tremolos.  It also works
          together with the beam engraver for overriding beaming.

          Music types accepted:

          *note tremolo-event:: and *note tuplet-span-event::

          Properties (read)

               ‘stemLeftBeamCount’ (integer)
                    Specify the number of beams to draw on the left side
                    of the next note.  Overrides automatic beaming.  The
                    value is only used once, and then it is erased.

               ‘stemRightBeamCount’ (integer)
                    See ‘stemLeftBeamCount’.

               ‘whichBar’ (string)
                    This property is read to determine what type of bar
                    line to create.

                    Example:

                         \set Staff.whichBar = ".|:"

                    This will create a start-repeat bar in this staff
                    only.  Valid values are described in
                    ‘scm/bar-line.scm’.

          This engraver creates the following layout object(s):

          *note Flag::, *note Stem::, *note StemStub:: and *note
          StemTremolo::.

     ‘*note Text_engraver::’
          Create text scripts.

          Music types accepted:

          *note text-script-event::

          This engraver creates the following layout object(s):

          *note TextScript::.

     ‘*note Text_spanner_engraver::’
          Create text spanner from an event.

          Music types accepted:

          *note text-span-event::

          Properties (read)

               ‘currentMusicalColumn’ (graphical (layout) object)
                    Grob that is X-parent to all non-breakable items
                    (note heads, lyrics, etc.).

          This engraver creates the following layout object(s):

          *note TextSpanner::.

     ‘*note Tie_engraver::’
          Generate ties between note heads of equal pitch.

          Music types accepted:

          *note tie-event::

          Properties (read)

               ‘skipTypesetting’ (boolean)
                    If true, no typesetting is done, speeding up the
                    interpretation phase.  Useful for debugging large
                    scores.

               ‘tieWaitForNote’ (boolean)
                    If true, tied notes do not have to follow each other
                    directly.  This can be used for writing out
                    arpeggios.

          Properties (write)

               ‘tieMelismaBusy’ (boolean)
                    Signal whether a tie is present.

          This engraver creates the following layout object(s):

          *note Tie:: and *note TieColumn::.

     ‘*note Trill_spanner_engraver::’
          Create trill spanner from an event.

          Music types accepted:

          *note trill-span-event::

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘currentMusicalColumn’ (graphical (layout) object)
                    Grob that is X-parent to all non-breakable items
                    (note heads, lyrics, etc.).

          This engraver creates the following layout object(s):

          *note TrillSpanner::.

     ‘*note Tuplet_engraver::’
          Catch tuplet events and generate appropriate bracket.

          Music types accepted:

          *note tuplet-span-event::

          Properties (read)

               ‘tupletFullLength’ (boolean)
                    If set, the tuplet is printed up to the start of the
                    next note.

               ‘tupletFullLengthNote’ (boolean)
                    If set, end at the next note, otherwise end on the
                    matter (time signatures, etc.)  before the note.

          This engraver creates the following layout object(s):

          *note TupletBracket:: and *note TupletNumber::.


File: lilypond-internals.info,  Node: Devnull,  Next: DrumStaff,  Prev: CueVoice,  Up: Contexts

2.1.4 Devnull
-------------

Silently discards all musical information given to this context.

   This context also accepts commands for the following context(s):

   Staff and Voice.

   This context creates the following layout object(s):

   none.

   This is a ‘Bottom’ context; no contexts will be created implicitly
from it.

   This context cannot contain other contexts.


File: lilypond-internals.info,  Node: DrumStaff,  Next: DrumVoice,  Prev: Devnull,  Up: Contexts

2.1.5 DrumStaff
---------------

Handles typesetting for percussion.

   This context also accepts commands for the following context(s):

   Staff.

   This context creates the following layout object(s):

   *note BarLine::, *note BassFigure::, *note BassFigureAlignment::,
*note BassFigureAlignmentPositioning::, *note BassFigureBracket::, *note
BassFigureContinuation::, *note BassFigureLine::, *note Clef::, *note
ClefModifier::, *note CueClef::, *note CueEndClef::, *note DotColumn::,
*note FingeringColumn::, *note InstrumentName::, *note
LedgerLineSpanner::, *note NoteCollision::, *note RestCollision::, *note
ScriptRow::, *note SostenutoPedalLineSpanner::, *note StaffSpacing::,
*note StaffSymbol::, *note SustainPedalLineSpanner::, *note
TimeSignature::, *note UnaCordaPedalLineSpanner:: and *note
VerticalAxisGroup::.

   This context sets the following properties:

   • Set grob-property ‘staff-padding’ in *note Script:: to ‘0.75’.
   • Set translator property ‘clefGlyph’ to ‘"clefs.percussion"’.
   • Set translator property ‘clefPosition’ to ‘0’.
   • Set translator property ‘createSpacing’ to ‘#t’.
   • Set translator property ‘ignoreFiguredBassRest’ to ‘#f’.
   • Set translator property ‘instrumentName’ to ‘'()’.
   • Set translator property ‘localAlterations’ to ‘'()’.
   • Set translator property ‘shortInstrumentName’ to ‘'()’.

   This is not a ‘Bottom’ context; search for such a one will commence
after creating an implicit context of type *note DrumVoice::.

   Context DrumStaff can contain *note CueVoice::, *note DrumVoice:: and
*note NullVoice::.

   This context is built from the following engraver(s):

     ‘*note Axis_group_engraver::’
          Group all objects created in this context in a
          ‘VerticalAxisGroup’ spanner.

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘hasAxisGroup’ (boolean)
                    True if the current context is contained in an axis
                    group.

               ‘keepAliveInterfaces’ (list)
                    A list of symbols, signifying grob interfaces that
                    are worth keeping a staff with ‘remove-empty’ set
                    around for.

          Properties (write)

               ‘hasAxisGroup’ (boolean)
                    True if the current context is contained in an axis
                    group.

          This engraver creates the following layout object(s):

          *note VerticalAxisGroup::.

     ‘*note Bar_engraver::’
          Create barlines.  This engraver is controlled through the
          ‘whichBar’ property.  If it has no bar line to create, it will
          forbid a linebreak at this point.  This engraver is required
          to trigger the creation of clefs at the start of systems.

          Properties (read)

               ‘whichBar’ (string)
                    This property is read to determine what type of bar
                    line to create.

                    Example:

                         \set Staff.whichBar = ".|:"

                    This will create a start-repeat bar in this staff
                    only.  Valid values are described in
                    ‘scm/bar-line.scm’.

          Properties (write)

               ‘forbidBreak’ (boolean)
                    If set to ‘#t’, prevent a line break at this point.

          This engraver creates the following layout object(s):

          *note BarLine::.

     ‘*note Clef_engraver::’
          Determine and set reference point for pitches.

          Properties (read)

               ‘clefGlyph’ (string)
                    Name of the symbol within the music font.

               ‘clefPosition’ (number)
                    Where should the center of the clef symbol go,
                    measured in half staff spaces from the center of the
                    staff.

               ‘clefTransposition’ (integer)
                    Add this much extra transposition.  Values of 7 and
                    -7 are common.

               ‘clefTranspositionStyle’ (symbol)
                    Determines the way the ClefModifier grob is
                    displayed.  Possible values are ‘default’,
                    ‘parenthesized’ and ‘bracketed’.

               ‘explicitClefVisibility’ (vector)
                    ‘break-visibility’ function for clef changes.

               ‘forceClef’ (boolean)
                    Show clef symbol, even if it has not changed.  Only
                    active for the first clef after the property is set,
                    not for the full staff.

          This engraver creates the following layout object(s):

          *note Clef:: and *note ClefModifier::.

     ‘*note Collision_engraver::’
          Collect ‘NoteColumns’, and as soon as there are two or more,
          put them in a ‘NoteCollision’ object.

          This engraver creates the following layout object(s):

          *note NoteCollision::.

     ‘*note Cue_clef_engraver::’
          Determine and set reference point for pitches in cued voices.

          Properties (read)

               ‘clefTransposition’ (integer)
                    Add this much extra transposition.  Values of 7 and
                    -7 are common.

               ‘cueClefGlyph’ (string)
                    Name of the symbol within the music font.

               ‘cueClefPosition’ (number)
                    Where should the center of the clef symbol go,
                    measured in half staff spaces from the center of the
                    staff.

               ‘cueClefTransposition’ (integer)
                    Add this much extra transposition.  Values of 7 and
                    -7 are common.

               ‘cueClefTranspositionStyle’ (symbol)
                    Determines the way the ClefModifier grob is
                    displayed.  Possible values are ‘default’,
                    ‘parenthesized’ and ‘bracketed’.

               ‘explicitCueClefVisibility’ (vector)
                    ‘break-visibility’ function for cue clef changes.

               ‘middleCCuePosition’ (number)
                    The position of the middle C, as determined only by
                    the clef of the cue notes.  This can be calculated
                    by looking at ‘cueClefPosition’ and ‘cueClefGlyph’.

          This engraver creates the following layout object(s):

          *note ClefModifier::, *note CueClef:: and *note CueEndClef::.

     ‘*note Dot_column_engraver::’
          Engrave dots on dotted notes shifted to the right of the note.
          If omitted, then dots appear on top of the notes.

          This engraver creates the following layout object(s):

          *note DotColumn::.

     ‘*note Figured_bass_engraver::’
          Make figured bass numbers.

          Music types accepted:

          *note bass-figure-event:: and *note rest-event::

          Properties (read)

               ‘figuredBassAlterationDirection’ (direction)
                    Where to put alterations relative to the main
                    figure.

               ‘figuredBassCenterContinuations’ (boolean)
                    Whether to vertically center pairs of extender
                    lines.  This does not work with three or more lines.

               ‘figuredBassFormatter’ (procedure)
                    A routine generating a markup for a bass figure.

               ‘ignoreFiguredBassRest’ (boolean)
                    Don’t swallow rest events.

               ‘implicitBassFigures’ (list)
                    A list of bass figures that are not printed as
                    numbers, but only as extender lines.

               ‘useBassFigureExtenders’ (boolean)
                    Whether to use extender lines for repeated bass
                    figures.

          This engraver creates the following layout object(s):

          *note BassFigure::, *note BassFigureAlignment::, *note
          BassFigureBracket::, *note BassFigureContinuation:: and *note
          BassFigureLine::.

     ‘*note Figured_bass_position_engraver::’
          Position figured bass alignments over notes.

          This engraver creates the following layout object(s):

          *note BassFigureAlignmentPositioning::.

     ‘*note Fingering_column_engraver::’
          Find potentially colliding scripts and put them into a
          ‘FingeringColumn’ object; that will fix the collisions.

          This engraver creates the following layout object(s):

          *note FingeringColumn::.

     ‘*note Font_size_engraver::’
          Put ‘fontSize’ into ‘font-size’ grob property.

          Properties (read)

               ‘fontSize’ (number)
                    The relative size of all grobs in a context.

     ‘*note Grob_pq_engraver::’
          Administrate when certain grobs (e.g., note heads) stop
          playing.

          Properties (read)

               ‘busyGrobs’ (list)
                    A queue of ‘(END-MOMENT . GROB)’ cons cells.  This
                    is for internal (C++) use only.  This property
                    contains the grobs which are still busy (e.g.  note
                    heads, spanners, etc.).

          Properties (write)

               ‘busyGrobs’ (list)
                    A queue of ‘(END-MOMENT . GROB)’ cons cells.  This
                    is for internal (C++) use only.  This property
                    contains the grobs which are still busy (e.g.  note
                    heads, spanners, etc.).

     ‘*note Instrument_name_engraver::’
          Create a system start text for instrument or vocal names.

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘instrumentName’ (markup)
                    The name to print left of a staff.  The
                    ‘instrumentName’ property labels the staff in the
                    first system, and the ‘shortInstrumentName’ property
                    labels following lines.

               ‘shortInstrumentName’ (markup)
                    See ‘instrumentName’.

               ‘shortVocalName’ (markup)
                    Name of a vocal line, short version.

               ‘vocalName’ (markup)
                    Name of a vocal line.

          This engraver creates the following layout object(s):

          *note InstrumentName::.

     ‘*note Ledger_line_engraver::’
          Create the spanner to draw ledger lines, and notices objects
          that need ledger lines.

          This engraver creates the following layout object(s):

          *note LedgerLineSpanner::.

     ‘*note Piano_pedal_align_engraver::’
          Align piano pedal symbols and brackets.

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

          This engraver creates the following layout object(s):

          *note SostenutoPedalLineSpanner::, *note
          SustainPedalLineSpanner:: and *note
          UnaCordaPedalLineSpanner::.

     ‘*note Pure_from_neighbor_engraver::’
          Coordinates items that get their pure heights from their
          neighbors.

     ‘*note Rest_collision_engraver::’
          Handle collisions of rests.

          Properties (read)

               ‘busyGrobs’ (list)
                    A queue of ‘(END-MOMENT . GROB)’ cons cells.  This
                    is for internal (C++) use only.  This property
                    contains the grobs which are still busy (e.g.  note
                    heads, spanners, etc.).

          This engraver creates the following layout object(s):

          *note RestCollision::.

     ‘*note Script_row_engraver::’
          Determine order in horizontal side position elements.

          This engraver creates the following layout object(s):

          *note ScriptRow::.

     ‘*note Separating_line_group_engraver::’
          Generate objects for computing spacing parameters.

          Properties (read)

               ‘createSpacing’ (boolean)
                    Create ‘StaffSpacing’ objects?  Should be set for
                    staves.

          Properties (write)

               ‘hasStaffSpacing’ (boolean)
                    True if the current ‘CommandColumn’ contains items
                    that will affect spacing.

          This engraver creates the following layout object(s):

          *note StaffSpacing::.

     ‘*note Staff_collecting_engraver::’
          Maintain the ‘stavesFound’ variable.

          Properties (read)

               ‘stavesFound’ (list of grobs)
                    A list of all staff-symbols found.

          Properties (write)

               ‘stavesFound’ (list of grobs)
                    A list of all staff-symbols found.

     ‘*note Staff_symbol_engraver::’
          Create the constellation of five (default) staff lines.

          Music types accepted:

          *note staff-span-event::

          This engraver creates the following layout object(s):

          *note StaffSymbol::.

     ‘*note Time_signature_engraver::’
          Create a *note TimeSignature:: whenever
          ‘timeSignatureFraction’ changes.

          Music types accepted:

          *note time-signature-event::

          Properties (read)

               ‘initialTimeSignatureVisibility’ (vector)
                    break visibility for the initial time signature.

               ‘partialBusy’ (boolean)
                    Signal that \partial acts at the current timestep.

               ‘timeSignatureFraction’ (fraction, as pair)
                    A pair of numbers, signifying the time signature.
                    For example, ‘'(4 . 4)’ is a 4/4 time signature.

          This engraver creates the following layout object(s):

          *note TimeSignature::.


File: lilypond-internals.info,  Node: DrumVoice,  Next: Dynamics,  Prev: DrumStaff,  Up: Contexts

2.1.6 DrumVoice
---------------

A voice on a percussion staff.

   This context also accepts commands for the following context(s):

   Voice.

   This context creates the following layout object(s):

   *note Beam::, *note BendAfter::, *note BreathingSign::, *note
CombineTextScript::, *note Dots::, *note DoublePercentRepeat::, *note
DoublePercentRepeatCounter::, *note DoubleRepeatSlash::, *note
DynamicLineSpanner::, *note DynamicText::, *note DynamicTextSpanner::,
*note Flag::, *note Hairpin::, *note InstrumentSwitch::, *note
LaissezVibrerTie::, *note LaissezVibrerTieColumn::, *note
MultiMeasureRest::, *note MultiMeasureRestNumber::, *note
MultiMeasureRestText::, *note NoteColumn::, *note NoteHead::, *note
NoteSpacing::, *note PercentRepeat::, *note PercentRepeatCounter::,
*note PhrasingSlur::, *note RepeatSlash::, *note RepeatTie::, *note
RepeatTieColumn::, *note Rest::, *note Script::, *note ScriptColumn::,
*note Slur::, *note Stem::, *note StemStub::, *note StemTremolo::, *note
TextScript::, *note TextSpanner::, *note Tie::, *note TieColumn::, *note
TrillPitchAccidental::, *note TrillPitchGroup::, *note TrillPitchHead::,
*note TrillSpanner::, *note TupletBracket:: and *note TupletNumber::.

   This is a ‘Bottom’ context; no contexts will be created implicitly
from it.

   This context cannot contain other contexts.

   This context is built from the following engraver(s):

     ‘*note Auto_beam_engraver::’
          Generate beams based on measure characteristics and observed
          Stems.  Uses ‘baseMoment’, ‘beatStructure’, ‘beamExceptions’,
          ‘measureLength’, and ‘measurePosition’ to decide when to start
          and stop a beam.  Overriding beaming is done through *note
          Stem_engraver:: properties ‘stemLeftBeamCount’ and
          ‘stemRightBeamCount’.

          Music types accepted:

          *note beam-forbid-event::

          Properties (read)

               ‘autoBeaming’ (boolean)
                    If set to true then beams are generated
                    automatically.

               ‘baseMoment’ (moment)
                    Smallest unit of time that will stand on its own as
                    a subdivided section.

               ‘beamExceptions’ (list)
                    An alist of exceptions to autobeam rules that
                    normally end on beats.

               ‘beamHalfMeasure’ (boolean)
                    Whether to allow a beam to begin halfway through the
                    measure in triple time, which could look like 6/8.

               ‘beatStructure’ (list)
                    List of ‘baseMoment’s that are combined to make
                    beats.

               ‘subdivideBeams’ (boolean)
                    If set, multiple beams will be subdivided at
                    ‘baseMoment’ positions by only drawing one beam over
                    the beat.

          This engraver creates the following layout object(s):

          *note Beam::.

     ‘*note Beam_engraver::’
          Handle ‘Beam’ events by engraving beams.  If omitted, then
          notes are printed with flags instead of beams.

          Music types accepted:

          *note beam-event::

          Properties (read)

               ‘baseMoment’ (moment)
                    Smallest unit of time that will stand on its own as
                    a subdivided section.

               ‘beamMelismaBusy’ (boolean)
                    Signal if a beam is present.

               ‘beatStructure’ (list)
                    List of ‘baseMoment’s that are combined to make
                    beats.

               ‘subdivideBeams’ (boolean)
                    If set, multiple beams will be subdivided at
                    ‘baseMoment’ positions by only drawing one beam over
                    the beat.

          Properties (write)

               ‘forbidBreak’ (boolean)
                    If set to ‘#t’, prevent a line break at this point.

          This engraver creates the following layout object(s):

          *note Beam::.

     ‘*note Bend_engraver::’
          Create fall spanners.

          Music types accepted:

          *note bend-after-event::

          This engraver creates the following layout object(s):

          *note BendAfter::.

     ‘*note Breathing_sign_engraver::’
          Create a breathing sign.

          Music types accepted:

          *note breathing-event::

          This engraver creates the following layout object(s):

          *note BreathingSign::.

     ‘*note Chord_tremolo_engraver::’
          Generate beams for tremolo repeats.

          Music types accepted:

          *note tremolo-span-event::

          This engraver creates the following layout object(s):

          *note Beam::.

     ‘*note Dots_engraver::’
          Create *note Dots:: objects for *note
          rhythmic-head-interface::s.

          This engraver creates the following layout object(s):

          *note Dots::.

     ‘*note Double_percent_repeat_engraver::’
          Make double measure repeats.

          Music types accepted:

          *note double-percent-event::

          Properties (read)

               ‘countPercentRepeats’ (boolean)
                    If set, produce counters for percent repeats.

               ‘measureLength’ (moment)
                    Length of one measure in the current time signature.

               ‘repeatCountVisibility’ (procedure)
                    A procedure taking as arguments an integer and
                    context, returning whether the corresponding percent
                    repeat number should be printed when
                    ‘countPercentRepeats’ is set.

          Properties (write)

               ‘forbidBreak’ (boolean)
                    If set to ‘#t’, prevent a line break at this point.

          This engraver creates the following layout object(s):

          *note DoublePercentRepeat:: and *note
          DoublePercentRepeatCounter::.

     ‘*note Drum_notes_engraver::’
          Generate drum note heads.

          Music types accepted:

          *note note-event::

          Properties (read)

               ‘drumStyleTable’ (hash table)
                    A hash table which maps drums to layout settings.
                    Predefined values: ‘drums-style’,
                    ‘agostini-drums-style’, ‘timbales-style’,
                    ‘congas-style’, ‘bongos-style’, and
                    ‘percussion-style’.

                    The layout style is a hash table, containing the
                    drum-pitches (e.g., the symbol ‘hihat’) as keys, and
                    a list ‘(NOTEHEAD-STYLE SCRIPT VERTICAL-POSITION)’
                    as values.

          This engraver creates the following layout object(s):

          *note NoteHead:: and *note Script::.

     ‘*note Dynamic_align_engraver::’
          Align hairpins and dynamic texts on a horizontal line.

          Properties (read)

               ‘currentMusicalColumn’ (graphical (layout) object)
                    Grob that is X-parent to all non-breakable items
                    (note heads, lyrics, etc.).

          This engraver creates the following layout object(s):

          *note DynamicLineSpanner::.

     ‘*note Dynamic_engraver::’
          Create hairpins, dynamic texts and dynamic text spanners.

          Music types accepted:

          *note absolute-dynamic-event::, *note break-span-event:: and
          *note span-dynamic-event::

          Properties (read)

               ‘crescendoSpanner’ (symbol)
                    The type of spanner to be used for crescendi.
                    Available values are ‘hairpin’ and ‘text’.  If
                    unset, a hairpin crescendo is used.

               ‘crescendoText’ (markup)
                    The text to print at start of non-hairpin crescendo,
                    i.e., ‘cresc.’.

               ‘currentMusicalColumn’ (graphical (layout) object)
                    Grob that is X-parent to all non-breakable items
                    (note heads, lyrics, etc.).

               ‘decrescendoSpanner’ (symbol)
                    The type of spanner to be used for decrescendi.
                    Available values are ‘hairpin’ and ‘text’.  If
                    unset, a hairpin decrescendo is used.

               ‘decrescendoText’ (markup)
                    The text to print at start of non-hairpin
                    decrescendo, i.e., ‘dim.’.

          This engraver creates the following layout object(s):

          *note DynamicText::, *note DynamicTextSpanner:: and *note
          Hairpin::.

     ‘*note Font_size_engraver::’
          Put ‘fontSize’ into ‘font-size’ grob property.

          Properties (read)

               ‘fontSize’ (number)
                    The relative size of all grobs in a context.

     ‘*note Forbid_line_break_engraver::’
          Forbid line breaks when note heads are still playing at some
          point.

          Properties (read)

               ‘busyGrobs’ (list)
                    A queue of ‘(END-MOMENT . GROB)’ cons cells.  This
                    is for internal (C++) use only.  This property
                    contains the grobs which are still busy (e.g.  note
                    heads, spanners, etc.).

          Properties (write)

               ‘forbidBreak’ (boolean)
                    If set to ‘#t’, prevent a line break at this point.

     ‘*note Grace_auto_beam_engraver::’
          Generates one autobeam group across an entire grace phrase.
          As usual, any manual beaming or ‘\noBeam’ will block
          autobeaming, just like setting the context property
          ‘autoBeaming’ to ‘##f’.

          Music types accepted:

          *note beam-forbid-event::

          Properties (read)

               ‘autoBeaming’ (boolean)
                    If set to true then beams are generated
                    automatically.

          This engraver creates the following layout object(s):

          *note Beam::.

     ‘*note Grace_beam_engraver::’
          Handle ‘Beam’ events by engraving beams.  If omitted, then
          notes are printed with flags instead of beams.  Only engraves
          beams when we are at grace points in time.

          Music types accepted:

          *note beam-event::

          Properties (read)

               ‘baseMoment’ (moment)
                    Smallest unit of time that will stand on its own as
                    a subdivided section.

               ‘beamMelismaBusy’ (boolean)
                    Signal if a beam is present.

               ‘beatStructure’ (list)
                    List of ‘baseMoment’s that are combined to make
                    beats.

               ‘subdivideBeams’ (boolean)
                    If set, multiple beams will be subdivided at
                    ‘baseMoment’ positions by only drawing one beam over
                    the beat.

          This engraver creates the following layout object(s):

          *note Beam::.

     ‘*note Grace_engraver::’
          Set font size and other properties for grace notes.

          Properties (read)

               ‘graceSettings’ (list)
                    Overrides for grace notes.  This property should be
                    manipulated through the ‘add-grace-property’
                    function.

     ‘*note Grob_pq_engraver::’
          Administrate when certain grobs (e.g., note heads) stop
          playing.

          Properties (read)

               ‘busyGrobs’ (list)
                    A queue of ‘(END-MOMENT . GROB)’ cons cells.  This
                    is for internal (C++) use only.  This property
                    contains the grobs which are still busy (e.g.  note
                    heads, spanners, etc.).

          Properties (write)

               ‘busyGrobs’ (list)
                    A queue of ‘(END-MOMENT . GROB)’ cons cells.  This
                    is for internal (C++) use only.  This property
                    contains the grobs which are still busy (e.g.  note
                    heads, spanners, etc.).

     ‘*note Grob_pq_engraver::’
          Administrate when certain grobs (e.g., note heads) stop
          playing.

          Properties (read)

               ‘busyGrobs’ (list)
                    A queue of ‘(END-MOMENT . GROB)’ cons cells.  This
                    is for internal (C++) use only.  This property
                    contains the grobs which are still busy (e.g.  note
                    heads, spanners, etc.).

          Properties (write)

               ‘busyGrobs’ (list)
                    A queue of ‘(END-MOMENT . GROB)’ cons cells.  This
                    is for internal (C++) use only.  This property
                    contains the grobs which are still busy (e.g.  note
                    heads, spanners, etc.).

     ‘*note Instrument_switch_engraver::’
          Create a cue text for taking instrument.

          Properties (read)

               ‘instrumentCueName’ (markup)
                    The name to print if another instrument is to be
                    taken.

          This engraver creates the following layout object(s):

          *note InstrumentSwitch::.

     ‘*note Laissez_vibrer_engraver::’
          Create laissez vibrer items.

          Music types accepted:

          *note laissez-vibrer-event::

          This engraver creates the following layout object(s):

          *note LaissezVibrerTie:: and *note LaissezVibrerTieColumn::.

     ‘*note Multi_measure_rest_engraver::’
          Engrave multi-measure rests that are produced with ‘R’.  It
          reads ‘measurePosition’ and ‘internalBarNumber’ to determine
          what number to print over the *note MultiMeasureRest::.

          Music types accepted:

          *note multi-measure-rest-event:: and *note
          multi-measure-text-event::

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘internalBarNumber’ (integer)
                    Contains the current barnumber.  This property is
                    used for internal timekeeping, among others by the
                    ‘Accidental_engraver’.

               ‘measurePosition’ (moment)
                    How much of the current measure have we had.  This
                    can be set manually to create incomplete measures.

               ‘restNumberThreshold’ (number)
                    If a multimeasure rest has more measures than this,
                    a number is printed.

               ‘whichBar’ (string)
                    This property is read to determine what type of bar
                    line to create.

                    Example:

                         \set Staff.whichBar = ".|:"

                    This will create a start-repeat bar in this staff
                    only.  Valid values are described in
                    ‘scm/bar-line.scm’.

          This engraver creates the following layout object(s):

          *note MultiMeasureRest::, *note MultiMeasureRestNumber:: and
          *note MultiMeasureRestText::.

     ‘*note Note_spacing_engraver::’
          Generate ‘NoteSpacing’, an object linking horizontal lines for
          use in spacing.

          This engraver creates the following layout object(s):

          *note NoteSpacing::.

     ‘*note Part_combine_engraver::’
          Part combine engraver for orchestral scores: Print markings
          ‘a2’, ‘Solo’, ‘Solo II’, and ‘unisono’.

          Music types accepted:

          *note note-event:: and *note part-combine-event::

          Properties (read)

               ‘aDueText’ (markup)
                    Text to print at a unisono passage.

               ‘partCombineTextsOnNote’ (boolean)
                    Print part-combine texts only on the next note
                    rather than immediately on rests or skips.

               ‘printPartCombineTexts’ (boolean)
                    Set ‘Solo’ and ‘A due’ texts in the part combiner?

               ‘soloIIText’ (markup)
                    The text for the start of a solo for voice ‘two’
                    when part-combining.

               ‘soloText’ (markup)
                    The text for the start of a solo when
                    part-combining.

          This engraver creates the following layout object(s):

          *note CombineTextScript::.

     ‘*note Percent_repeat_engraver::’
          Make whole measure repeats.

          Music types accepted:

          *note percent-event::

          Properties (read)

               ‘countPercentRepeats’ (boolean)
                    If set, produce counters for percent repeats.

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘repeatCountVisibility’ (procedure)
                    A procedure taking as arguments an integer and
                    context, returning whether the corresponding percent
                    repeat number should be printed when
                    ‘countPercentRepeats’ is set.

          This engraver creates the following layout object(s):

          *note PercentRepeat:: and *note PercentRepeatCounter::.

     ‘*note Phrasing_slur_engraver::’
          Print phrasing slurs.  Similar to *note Slur_engraver::.

          Music types accepted:

          *note note-event:: and *note phrasing-slur-event::

          This engraver creates the following layout object(s):

          *note PhrasingSlur::.

     ‘*note Pitched_trill_engraver::’
          Print the bracketed note head after a note head with trill.

          This engraver creates the following layout object(s):

          *note TrillPitchAccidental::, *note TrillPitchGroup:: and
          *note TrillPitchHead::.

     ‘*note Repeat_tie_engraver::’
          Create repeat ties.

          Music types accepted:

          *note repeat-tie-event::

          This engraver creates the following layout object(s):

          *note RepeatTie:: and *note RepeatTieColumn::.

     ‘*note Rest_engraver::’
          Engrave rests.

          Music types accepted:

          *note rest-event::

          Properties (read)

               ‘middleCPosition’ (number)
                    The place of the middle C, measured in half
                    staff-spaces.  Usually determined by looking at
                    ‘middleCClefPosition’ and ‘middleCOffset’.

          This engraver creates the following layout object(s):

          *note Rest::.

     ‘*note Rhythmic_column_engraver::’
          Generate ‘NoteColumn’, an object that groups stems, note
          heads, and rests.

          This engraver creates the following layout object(s):

          *note NoteColumn::.

     ‘*note Script_column_engraver::’
          Find potentially colliding scripts and put them into a
          ‘ScriptColumn’ object; that will fix the collisions.

          This engraver creates the following layout object(s):

          *note ScriptColumn::.

     ‘*note Script_engraver::’
          Handle note scripted articulations.

          Music types accepted:

          *note articulation-event::

          Properties (read)

               ‘scriptDefinitions’ (list)
                    The description of scripts.  This is used by the
                    ‘Script_engraver’ for typesetting note-superscripts
                    and subscripts.  See ‘scm/script.scm’ for more
                    information.

          This engraver creates the following layout object(s):

          *note Script::.

     ‘*note Slash_repeat_engraver::’
          Make beat repeats.

          Music types accepted:

          *note repeat-slash-event::

          This engraver creates the following layout object(s):

          *note DoubleRepeatSlash:: and *note RepeatSlash::.

     ‘*note Slur_engraver::’
          Build slur grobs from slur events.

          Music types accepted:

          *note note-event:: and *note slur-event::

          Properties (read)

               ‘doubleSlurs’ (boolean)
                    If set, two slurs are created for every slurred
                    note, one above and one below the chord.

               ‘slurMelismaBusy’ (boolean)
                    Signal if a slur is present.

          This engraver creates the following layout object(s):

          *note Slur::.

     ‘*note Spanner_break_forbid_engraver::’
          Forbid breaks in certain spanners.

     ‘*note Stem_engraver::’
          Create stems, flags and single-stem tremolos.  It also works
          together with the beam engraver for overriding beaming.

          Music types accepted:

          *note tremolo-event:: and *note tuplet-span-event::

          Properties (read)

               ‘stemLeftBeamCount’ (integer)
                    Specify the number of beams to draw on the left side
                    of the next note.  Overrides automatic beaming.  The
                    value is only used once, and then it is erased.

               ‘stemRightBeamCount’ (integer)
                    See ‘stemLeftBeamCount’.

               ‘whichBar’ (string)
                    This property is read to determine what type of bar
                    line to create.

                    Example:

                         \set Staff.whichBar = ".|:"

                    This will create a start-repeat bar in this staff
                    only.  Valid values are described in
                    ‘scm/bar-line.scm’.

          This engraver creates the following layout object(s):

          *note Flag::, *note Stem::, *note StemStub:: and *note
          StemTremolo::.

     ‘*note Text_engraver::’
          Create text scripts.

          Music types accepted:

          *note text-script-event::

          This engraver creates the following layout object(s):

          *note TextScript::.

     ‘*note Text_spanner_engraver::’
          Create text spanner from an event.

          Music types accepted:

          *note text-span-event::

          Properties (read)

               ‘currentMusicalColumn’ (graphical (layout) object)
                    Grob that is X-parent to all non-breakable items
                    (note heads, lyrics, etc.).

          This engraver creates the following layout object(s):

          *note TextSpanner::.

     ‘*note Tie_engraver::’
          Generate ties between note heads of equal pitch.

          Music types accepted:

          *note tie-event::

          Properties (read)

               ‘skipTypesetting’ (boolean)
                    If true, no typesetting is done, speeding up the
                    interpretation phase.  Useful for debugging large
                    scores.

               ‘tieWaitForNote’ (boolean)
                    If true, tied notes do not have to follow each other
                    directly.  This can be used for writing out
                    arpeggios.

          Properties (write)

               ‘tieMelismaBusy’ (boolean)
                    Signal whether a tie is present.

          This engraver creates the following layout object(s):

          *note Tie:: and *note TieColumn::.

     ‘*note Trill_spanner_engraver::’
          Create trill spanner from an event.

          Music types accepted:

          *note trill-span-event::

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘currentMusicalColumn’ (graphical (layout) object)
                    Grob that is X-parent to all non-breakable items
                    (note heads, lyrics, etc.).

          This engraver creates the following layout object(s):

          *note TrillSpanner::.

     ‘*note Tuplet_engraver::’
          Catch tuplet events and generate appropriate bracket.

          Music types accepted:

          *note tuplet-span-event::

          Properties (read)

               ‘tupletFullLength’ (boolean)
                    If set, the tuplet is printed up to the start of the
                    next note.

               ‘tupletFullLengthNote’ (boolean)
                    If set, end at the next note, otherwise end on the
                    matter (time signatures, etc.)  before the note.

          This engraver creates the following layout object(s):

          *note TupletBracket:: and *note TupletNumber::.


File: lilypond-internals.info,  Node: Dynamics,  Next: FiguredBass,  Prev: DrumVoice,  Up: Contexts

2.1.7 Dynamics
--------------

Holds a single line of dynamics, which will be centered between the
staves surrounding this context.

   This context also accepts commands for the following context(s):

   Voice.

   This context creates the following layout object(s):

   *note BarLine::, *note DynamicLineSpanner::, *note DynamicText::,
*note DynamicTextSpanner::, *note Hairpin::, *note PianoPedalBracket::,
*note Script::, *note SostenutoPedal::, *note SustainPedal::, *note
TextScript::, *note TextSpanner::, *note UnaCordaPedal:: and *note
VerticalAxisGroup::.

   This context sets the following properties:

   • Set grob-property ‘font-shape’ in *note TextScript:: to ‘'italic’.
   • Set grob-property ‘nonstaff-relatedstaff-spacing’ in *note
     VerticalAxisGroup:: to:
     '((basic-distance . 5) (padding . 0.5))
   • Set grob-property ‘outside-staff-priority’ in *note
     DynamicLineSpanner:: to ‘#f’.
   • Set grob-property ‘outside-staff-priority’ in *note DynamicText::
     to ‘#f’.
   • Set grob-property ‘outside-staff-priority’ in *note Hairpin:: to
     ‘#f’.
   • Set grob-property ‘staff-affinity’ in *note VerticalAxisGroup:: to
     ‘0’.
   • Set grob-property ‘Y-offset’ in *note DynamicLineSpanner:: to ‘0’.
   • Set translator property ‘pedalSustainStrings’ to:
     '("Ped." "*Ped." "*")
   • Set translator property ‘pedalUnaCordaStrings’ to:
     '("una corda" "" "tre corde")

   This is a ‘Bottom’ context; no contexts will be created implicitly
from it.

   This context cannot contain other contexts.

   This context is built from the following engraver(s):

     ‘*note Axis_group_engraver::’
          Group all objects created in this context in a
          ‘VerticalAxisGroup’ spanner.

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘hasAxisGroup’ (boolean)
                    True if the current context is contained in an axis
                    group.

               ‘keepAliveInterfaces’ (list)
                    A list of symbols, signifying grob interfaces that
                    are worth keeping a staff with ‘remove-empty’ set
                    around for.

          Properties (write)

               ‘hasAxisGroup’ (boolean)
                    True if the current context is contained in an axis
                    group.

          This engraver creates the following layout object(s):

          *note VerticalAxisGroup::.

     ‘*note Bar_engraver::’
          Create barlines.  This engraver is controlled through the
          ‘whichBar’ property.  If it has no bar line to create, it will
          forbid a linebreak at this point.  This engraver is required
          to trigger the creation of clefs at the start of systems.

          Properties (read)

               ‘whichBar’ (string)
                    This property is read to determine what type of bar
                    line to create.

                    Example:

                         \set Staff.whichBar = ".|:"

                    This will create a start-repeat bar in this staff
                    only.  Valid values are described in
                    ‘scm/bar-line.scm’.

          Properties (write)

               ‘forbidBreak’ (boolean)
                    If set to ‘#t’, prevent a line break at this point.

          This engraver creates the following layout object(s):

          *note BarLine::.

     ‘*note Dynamic_align_engraver::’
          Align hairpins and dynamic texts on a horizontal line.

          Properties (read)

               ‘currentMusicalColumn’ (graphical (layout) object)
                    Grob that is X-parent to all non-breakable items
                    (note heads, lyrics, etc.).

          This engraver creates the following layout object(s):

          *note DynamicLineSpanner::.

     ‘*note Dynamic_engraver::’
          Create hairpins, dynamic texts and dynamic text spanners.

          Music types accepted:

          *note absolute-dynamic-event::, *note break-span-event:: and
          *note span-dynamic-event::

          Properties (read)

               ‘crescendoSpanner’ (symbol)
                    The type of spanner to be used for crescendi.
                    Available values are ‘hairpin’ and ‘text’.  If
                    unset, a hairpin crescendo is used.

               ‘crescendoText’ (markup)
                    The text to print at start of non-hairpin crescendo,
                    i.e., ‘cresc.’.

               ‘currentMusicalColumn’ (graphical (layout) object)
                    Grob that is X-parent to all non-breakable items
                    (note heads, lyrics, etc.).

               ‘decrescendoSpanner’ (symbol)
                    The type of spanner to be used for decrescendi.
                    Available values are ‘hairpin’ and ‘text’.  If
                    unset, a hairpin decrescendo is used.

               ‘decrescendoText’ (markup)
                    The text to print at start of non-hairpin
                    decrescendo, i.e., ‘dim.’.

          This engraver creates the following layout object(s):

          *note DynamicText::, *note DynamicTextSpanner:: and *note
          Hairpin::.

     ‘*note Font_size_engraver::’
          Put ‘fontSize’ into ‘font-size’ grob property.

          Properties (read)

               ‘fontSize’ (number)
                    The relative size of all grobs in a context.

     ‘*note Piano_pedal_engraver::’
          Engrave piano pedal symbols and brackets.

          Music types accepted:

          *note sostenuto-event::, *note sustain-event:: and *note
          una-corda-event::

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘pedalSostenutoStrings’ (list)
                    See ‘pedalSustainStrings’.

               ‘pedalSostenutoStyle’ (symbol)
                    See ‘pedalSustainStyle’.

               ‘pedalSustainStrings’ (list)
                    A list of strings to print for sustain-pedal.
                    Format is ‘(UP UPDOWN DOWN)’, where each of the
                    three is the string to print when this is done with
                    the pedal.

               ‘pedalSustainStyle’ (symbol)
                    A symbol that indicates how to print sustain pedals:
                    ‘text’, ‘bracket’ or ‘mixed’ (both).

               ‘pedalUnaCordaStrings’ (list)
                    See ‘pedalSustainStrings’.

               ‘pedalUnaCordaStyle’ (symbol)
                    See ‘pedalSustainStyle’.

          This engraver creates the following layout object(s):

          *note PianoPedalBracket::, *note SostenutoPedal::, *note
          SustainPedal:: and *note UnaCordaPedal::.

     ‘*note Script_engraver::’
          Handle note scripted articulations.

          Music types accepted:

          *note articulation-event::

          Properties (read)

               ‘scriptDefinitions’ (list)
                    The description of scripts.  This is used by the
                    ‘Script_engraver’ for typesetting note-superscripts
                    and subscripts.  See ‘scm/script.scm’ for more
                    information.

          This engraver creates the following layout object(s):

          *note Script::.

     ‘*note Text_engraver::’
          Create text scripts.

          Music types accepted:

          *note text-script-event::

          This engraver creates the following layout object(s):

          *note TextScript::.

     ‘*note Text_spanner_engraver::’
          Create text spanner from an event.

          Music types accepted:

          *note text-span-event::

          Properties (read)

               ‘currentMusicalColumn’ (graphical (layout) object)
                    Grob that is X-parent to all non-breakable items
                    (note heads, lyrics, etc.).

          This engraver creates the following layout object(s):

          *note TextSpanner::.


File: lilypond-internals.info,  Node: FiguredBass,  Next: FretBoards,  Prev: Dynamics,  Up: Contexts

2.1.8 FiguredBass
-----------------

A context for printing a figured bass line.

   This context creates the following layout object(s):

   *note BassFigure::, *note BassFigureAlignment::, *note
BassFigureBracket::, *note BassFigureContinuation::, *note
BassFigureLine::, *note StaffSpacing:: and *note VerticalAxisGroup::.

   This context sets the following properties:

   • Set grob-property ‘nonstaff-nonstaff-spacing.padding’ in *note
     VerticalAxisGroup:: to ‘0.5’.
   • Set grob-property ‘nonstaff-relatedstaff-spacing.padding’ in *note
     VerticalAxisGroup:: to ‘0.5’.
   • Set grob-property ‘remove-empty’ in *note VerticalAxisGroup:: to
     ‘#t’.
   • Set grob-property ‘remove-first’ in *note VerticalAxisGroup:: to
     ‘#t’.
   • Set grob-property ‘staff-affinity’ in *note VerticalAxisGroup:: to
     ‘1’.

   This is a ‘Bottom’ context; no contexts will be created implicitly
from it.

   This context cannot contain other contexts.

   This context is built from the following engraver(s):

     ‘*note Axis_group_engraver::’
          Group all objects created in this context in a
          ‘VerticalAxisGroup’ spanner.

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘hasAxisGroup’ (boolean)
                    True if the current context is contained in an axis
                    group.

               ‘keepAliveInterfaces’ (list)
                    A list of symbols, signifying grob interfaces that
                    are worth keeping a staff with ‘remove-empty’ set
                    around for.

          Properties (write)

               ‘hasAxisGroup’ (boolean)
                    True if the current context is contained in an axis
                    group.

          This engraver creates the following layout object(s):

          *note VerticalAxisGroup::.

     ‘*note Figured_bass_engraver::’
          Make figured bass numbers.

          Music types accepted:

          *note bass-figure-event:: and *note rest-event::

          Properties (read)

               ‘figuredBassAlterationDirection’ (direction)
                    Where to put alterations relative to the main
                    figure.

               ‘figuredBassCenterContinuations’ (boolean)
                    Whether to vertically center pairs of extender
                    lines.  This does not work with three or more lines.

               ‘figuredBassFormatter’ (procedure)
                    A routine generating a markup for a bass figure.

               ‘ignoreFiguredBassRest’ (boolean)
                    Don’t swallow rest events.

               ‘implicitBassFigures’ (list)
                    A list of bass figures that are not printed as
                    numbers, but only as extender lines.

               ‘useBassFigureExtenders’ (boolean)
                    Whether to use extender lines for repeated bass
                    figures.

          This engraver creates the following layout object(s):

          *note BassFigure::, *note BassFigureAlignment::, *note
          BassFigureBracket::, *note BassFigureContinuation:: and *note
          BassFigureLine::.

     ‘*note Separating_line_group_engraver::’
          Generate objects for computing spacing parameters.

          Properties (read)

               ‘createSpacing’ (boolean)
                    Create ‘StaffSpacing’ objects?  Should be set for
                    staves.

          Properties (write)

               ‘hasStaffSpacing’ (boolean)
                    True if the current ‘CommandColumn’ contains items
                    that will affect spacing.

          This engraver creates the following layout object(s):

          *note StaffSpacing::.


File: lilypond-internals.info,  Node: FretBoards,  Next: Global,  Prev: FiguredBass,  Up: Contexts

2.1.9 FretBoards
----------------

A context for displaying fret diagrams.

   This context also accepts commands for the following context(s):

   Staff.

   This context creates the following layout object(s):

   *note FretBoard::, *note InstrumentName::, *note StaffSpacing:: and
*note VerticalAxisGroup::.

   This context sets the following properties:

   • Set translator property ‘handleNegativeFrets’ to ‘'recalculate’.
   • Set translator property ‘instrumentName’ to ‘'()’.
   • Set translator property ‘predefinedDiagramTable’ to ‘#<hash-table
     0/113>’.
   • Set translator property ‘restrainOpenStrings’ to ‘#f’.
   • Set translator property ‘shortInstrumentName’ to ‘'()’.

   This is a ‘Bottom’ context; no contexts will be created implicitly
from it.

   This context cannot contain other contexts.

   This context is built from the following engraver(s):

     ‘*note Axis_group_engraver::’
          Group all objects created in this context in a
          ‘VerticalAxisGroup’ spanner.

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘hasAxisGroup’ (boolean)
                    True if the current context is contained in an axis
                    group.

               ‘keepAliveInterfaces’ (list)
                    A list of symbols, signifying grob interfaces that
                    are worth keeping a staff with ‘remove-empty’ set
                    around for.

          Properties (write)

               ‘hasAxisGroup’ (boolean)
                    True if the current context is contained in an axis
                    group.

          This engraver creates the following layout object(s):

          *note VerticalAxisGroup::.

     ‘*note Font_size_engraver::’
          Put ‘fontSize’ into ‘font-size’ grob property.

          Properties (read)

               ‘fontSize’ (number)
                    The relative size of all grobs in a context.

     ‘*note Fretboard_engraver::’
          Generate fret diagram from one or more events of type
          ‘NoteEvent’.

          Music types accepted:

          *note fingering-event::, *note note-event:: and *note
          string-number-event::

          Properties (read)

               ‘chordChanges’ (boolean)
                    Only show changes in chords scheme?

               ‘defaultStrings’ (list)
                    A list of strings to use in calculating frets for
                    tablatures and fretboards if no strings are provided
                    in the notes for the current moment.

               ‘highStringOne’ (boolean)
                    Whether the first string is the string with highest
                    pitch on the instrument.  This used by the automatic
                    string selector for tablature notation.

               ‘maximumFretStretch’ (number)
                    Don’t allocate frets further than this from
                    specified frets.

               ‘minimumFret’ (number)
                    The tablature auto string-selecting mechanism
                    selects the highest string with a fret at least
                    ‘minimumFret’.

               ‘noteToFretFunction’ (procedure)
                    Convert list of notes and list of defined strings to
                    full list of strings and fret numbers.  Parameters:
                    The context, a list of note events, a list of
                    tabstring events, and the fretboard grob if a
                    fretboard is desired.

               ‘predefinedDiagramTable’ (hash table)
                    The hash table of predefined fret diagrams to use in
                    FretBoards.

               ‘stringTunings’ (list)
                    The tablature strings tuning.  It is a list of the
                    pitches of each string (starting with the lowest
                    numbered one).

               ‘tablatureFormat’ (procedure)
                    A function formatting a tablature note head.  Called
                    with three arguments: context, string number and,
                    fret number.  It returns the text as a markup.

          This engraver creates the following layout object(s):

          *note FretBoard::.

     ‘*note Instrument_name_engraver::’
          Create a system start text for instrument or vocal names.

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘instrumentName’ (markup)
                    The name to print left of a staff.  The
                    ‘instrumentName’ property labels the staff in the
                    first system, and the ‘shortInstrumentName’ property
                    labels following lines.

               ‘shortInstrumentName’ (markup)
                    See ‘instrumentName’.

               ‘shortVocalName’ (markup)
                    Name of a vocal line, short version.

               ‘vocalName’ (markup)
                    Name of a vocal line.

          This engraver creates the following layout object(s):

          *note InstrumentName::.

     ‘*note Separating_line_group_engraver::’
          Generate objects for computing spacing parameters.

          Properties (read)

               ‘createSpacing’ (boolean)
                    Create ‘StaffSpacing’ objects?  Should be set for
                    staves.

          Properties (write)

               ‘hasStaffSpacing’ (boolean)
                    True if the current ‘CommandColumn’ contains items
                    that will affect spacing.

          This engraver creates the following layout object(s):

          *note StaffSpacing::.


File: lilypond-internals.info,  Node: Global,  Next: GrandStaff,  Prev: FretBoards,  Up: Contexts

2.1.10 Global
-------------

Hard coded entry point for LilyPond.  Cannot be tuned.

   This context creates the following layout object(s):

   none.

   This is not a ‘Bottom’ context; search for such a one will commence
after creating an implicit context of type *note Score::.

   Context Global can contain *note Score::.


File: lilypond-internals.info,  Node: GrandStaff,  Next: GregorianTranscriptionStaff,  Prev: Global,  Up: Contexts

2.1.11 GrandStaff
-----------------

A group of staves, with a brace on the left side, grouping the staves
together.  The bar lines of the contained staves are connected
vertically.

   This context creates the following layout object(s):

   *note Arpeggio::, *note InstrumentName::, *note SpanBar::, *note
SpanBarStub::, *note SystemStartBar::, *note SystemStartBrace::, *note
SystemStartBracket::, *note SystemStartSquare:: and *note
VerticalAlignment::.

   This context sets the following properties:

   • Set grob-property ‘extra-spacing-width’ in *note DynamicText:: to
     ‘#f’.
   • Set translator property ‘instrumentName’ to ‘'()’.
   • Set translator property ‘localAlterations’ to ‘'()’.
   • Set translator property ‘shortInstrumentName’ to ‘'()’.
   • Set translator property ‘systemStartDelimiter’ to
     ‘'SystemStartBrace’.
   • Set translator property ‘topLevelAlignment’ to ‘#f’.

   This is not a ‘Bottom’ context; search for such a one will commence
after creating an implicit context of type *note Staff::.

   Context GrandStaff can contain *note ChordNames::, *note DrumStaff::,
*note Dynamics::, *note FiguredBass::, *note Lyrics::, *note
RhythmicStaff::, *note Staff:: and *note TabStaff::.

   This context is built from the following engraver(s):

     ‘*note Instrument_name_engraver::’
          Create a system start text for instrument or vocal names.

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘instrumentName’ (markup)
                    The name to print left of a staff.  The
                    ‘instrumentName’ property labels the staff in the
                    first system, and the ‘shortInstrumentName’ property
                    labels following lines.

               ‘shortInstrumentName’ (markup)
                    See ‘instrumentName’.

               ‘shortVocalName’ (markup)
                    Name of a vocal line, short version.

               ‘vocalName’ (markup)
                    Name of a vocal line.

          This engraver creates the following layout object(s):

          *note InstrumentName::.

     ‘*note Span_arpeggio_engraver::’
          Make arpeggios that span multiple staves.

          Properties (read)

               ‘connectArpeggios’ (boolean)
                    If set, connect arpeggios across piano staff.

          This engraver creates the following layout object(s):

          *note Arpeggio::.

     ‘*note Span_bar_engraver::’
          Make cross-staff bar lines: It catches all normal bar lines
          and draws a single span bar across them.

          This engraver creates the following layout object(s):

          *note SpanBar::.

     ‘*note Span_bar_stub_engraver::’
          Make stubs for span bars in all contexts that the span bars
          cross.

          This engraver creates the following layout object(s):

          *note SpanBarStub::.

     ‘*note System_start_delimiter_engraver::’
          Create a system start delimiter (i.e., a ‘SystemStartBar’,
          ‘SystemStartBrace’, ‘SystemStartBracket’ or
          ‘SystemStartSquare’ spanner).

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘systemStartDelimiter’ (symbol)
                    Which grob to make for the start of the
                    system/staff?  Set to ‘SystemStartBrace’,
                    ‘SystemStartBracket’ or ‘SystemStartBar’.

               ‘systemStartDelimiterHierarchy’ (pair)
                    A nested list, indicating the nesting of a start
                    delimiters.

          This engraver creates the following layout object(s):

          *note SystemStartBar::, *note SystemStartBrace::, *note
          SystemStartBracket:: and *note SystemStartSquare::.

     ‘*note Vertical_align_engraver::’
          Catch groups (staves, lyrics lines, etc.)  and stack them
          vertically.

          Properties (read)

               ‘alignAboveContext’ (string)
                    Where to insert newly created context in vertical
                    alignment.

               ‘alignBelowContext’ (string)
                    Where to insert newly created context in vertical
                    alignment.

               ‘hasAxisGroup’ (boolean)
                    True if the current context is contained in an axis
                    group.

          This engraver creates the following layout object(s):

          *note VerticalAlignment::.


File: lilypond-internals.info,  Node: GregorianTranscriptionStaff,  Next: GregorianTranscriptionVoice,  Prev: GrandStaff,  Up: Contexts

2.1.12 GregorianTranscriptionStaff
----------------------------------

Handles clefs, bar lines, keys, accidentals.  It can contain ‘Voice’
contexts.

   This context also accepts commands for the following context(s):

   Staff.

   This context creates the following layout object(s):

   *note Accidental::, *note AccidentalCautionary::, *note
AccidentalPlacement::, *note AccidentalSuggestion::, *note BarLine::,
*note BassFigure::, *note BassFigureAlignment::, *note
BassFigureAlignmentPositioning::, *note BassFigureBracket::, *note
BassFigureContinuation::, *note BassFigureLine::, *note Clef::, *note
ClefModifier::, *note CueClef::, *note CueEndClef::, *note DotColumn::,
*note FingeringColumn::, *note InstrumentName::, *note
KeyCancellation::, *note KeySignature::, *note LedgerLineSpanner::,
*note NoteCollision::, *note OttavaBracket::, *note PianoPedalBracket::,
*note RestCollision::, *note ScriptRow::, *note SostenutoPedal::, *note
SostenutoPedalLineSpanner::, *note StaffSpacing::, *note StaffSymbol::,
*note SustainPedal::, *note SustainPedalLineSpanner::, *note
TimeSignature::, *note UnaCordaPedal::, *note UnaCordaPedalLineSpanner::
and *note VerticalAxisGroup::.

   This context sets the following properties:

   • Set grob-property ‘transparent’ in *note BarLine:: to ‘#t’.
   • Set translator property ‘createSpacing’ to ‘#t’.
   • Set translator property ‘ignoreFiguredBassRest’ to ‘#f’.
   • Set translator property ‘instrumentName’ to ‘'()’.
   • Set translator property ‘localAlterations’ to ‘'()’.
   • Set translator property ‘shortInstrumentName’ to ‘'()’.

   This is not a ‘Bottom’ context; search for such a one will commence
after creating an implicit context of type *note
GregorianTranscriptionVoice::.

   Context GregorianTranscriptionStaff can contain *note CueVoice::,
*note GregorianTranscriptionVoice:: and *note NullVoice::.

   This context is built from the following engraver(s):

     ‘*note Accidental_engraver::’
          Make accidentals.  Catch note heads, ties and notices
          key-change events.  This engraver usually lives at Staff
          level, but reads the settings for Accidental at ‘Voice’ level,
          so you can ‘\override’ them at ‘Voice’.

          Properties (read)

               ‘accidentalGrouping’ (symbol)
                    If set to ‘'voice’, accidentals on the same note in
                    different octaves may be horizontally staggered if
                    in different voices.

               ‘autoAccidentals’ (list)
                    List of different ways to typeset an accidental.

                    For determining when to print an accidental, several
                    different rules are tried.  The rule that gives the
                    highest number of accidentals is used.

                    Each entry in the list is either a symbol or a
                    procedure.

                    SYMBOL
                         The symbol is the name of the context in which
                         the following rules are to be applied.  For
                         example, if CONTEXT is *note
                         (lilypond-internals)Score:: then all staves
                         share accidentals, and if CONTEXT is *note
                         (lilypond-internals)Staff:: then all voices in
                         the same staff share accidentals, but staves do
                         not.

                    PROCEDURE
                         The procedure represents an accidental rule to
                         be applied to the previously specified context.

                         The procedure takes the following arguments:

                         ‘context’
                              The current context to which the rule
                              should be applied.

                         ‘pitch’
                              The pitch of the note to be evaluated.

                         ‘barnum’
                              The current bar number.

                         ‘measurepos’
                              The current measure position.

                         The procedure returns a pair of booleans.  The
                         first states whether an extra natural should be
                         added.  The second states whether an accidental
                         should be printed.  ‘(#t . #f)’ does not make
                         sense.

               ‘autoCautionaries’ (list)
                    List similar to ‘autoAccidentals’, but it controls
                    cautionary accidentals rather than normal ones.
                    Both lists are tried, and the one giving the most
                    accidentals wins.  In case of draw, a normal
                    accidental is typeset.

               ‘extraNatural’ (boolean)
                    Whether to typeset an extra natural sign before
                    accidentals that reduce the effect of a previous
                    alteration.

               ‘harmonicAccidentals’ (boolean)
                    If set, harmonic notes in chords get accidentals.

               ‘internalBarNumber’ (integer)
                    Contains the current barnumber.  This property is
                    used for internal timekeeping, among others by the
                    ‘Accidental_engraver’.

               ‘keyAlterations’ (list)
                    The current key signature.  This is an alist
                    containing ‘(STEP . ALTER)’ or ‘((OCTAVE . STEP) .
                    ALTER)’, where STEP is a number in the range 0 to 6
                    and ALTER a fraction, denoting alteration.  For
                    alterations, use symbols, e.g.  ‘keyAlterations =
                    #`((6 . ,FLAT))’.

               ‘localAlterations’ (list)
                    The key signature at this point in the measure.  The
                    format is the same as for ‘keyAlterations’, but can
                    also contain ‘((OCTAVE . NAME) . (ALTER BARNUMBER .
                    MEASUREPOSITION))’ pairs.

          Properties (write)

               ‘localAlterations’ (list)
                    The key signature at this point in the measure.  The
                    format is the same as for ‘keyAlterations’, but can
                    also contain ‘((OCTAVE . NAME) . (ALTER BARNUMBER .
                    MEASUREPOSITION))’ pairs.

          This engraver creates the following layout object(s):

          *note Accidental::, *note AccidentalCautionary::, *note
          AccidentalPlacement:: and *note AccidentalSuggestion::.

     ‘*note Axis_group_engraver::’
          Group all objects created in this context in a
          ‘VerticalAxisGroup’ spanner.

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘hasAxisGroup’ (boolean)
                    True if the current context is contained in an axis
                    group.

               ‘keepAliveInterfaces’ (list)
                    A list of symbols, signifying grob interfaces that
                    are worth keeping a staff with ‘remove-empty’ set
                    around for.

          Properties (write)

               ‘hasAxisGroup’ (boolean)
                    True if the current context is contained in an axis
                    group.

          This engraver creates the following layout object(s):

          *note VerticalAxisGroup::.

     ‘*note Bar_engraver::’
          Create barlines.  This engraver is controlled through the
          ‘whichBar’ property.  If it has no bar line to create, it will
          forbid a linebreak at this point.  This engraver is required
          to trigger the creation of clefs at the start of systems.

          Properties (read)

               ‘whichBar’ (string)
                    This property is read to determine what type of bar
                    line to create.

                    Example:

                         \set Staff.whichBar = ".|:"

                    This will create a start-repeat bar in this staff
                    only.  Valid values are described in
                    ‘scm/bar-line.scm’.

          Properties (write)

               ‘forbidBreak’ (boolean)
                    If set to ‘#t’, prevent a line break at this point.

          This engraver creates the following layout object(s):

          *note BarLine::.

     ‘*note Clef_engraver::’
          Determine and set reference point for pitches.

          Properties (read)

               ‘clefGlyph’ (string)
                    Name of the symbol within the music font.

               ‘clefPosition’ (number)
                    Where should the center of the clef symbol go,
                    measured in half staff spaces from the center of the
                    staff.

               ‘clefTransposition’ (integer)
                    Add this much extra transposition.  Values of 7 and
                    -7 are common.

               ‘clefTranspositionStyle’ (symbol)
                    Determines the way the ClefModifier grob is
                    displayed.  Possible values are ‘default’,
                    ‘parenthesized’ and ‘bracketed’.

               ‘explicitClefVisibility’ (vector)
                    ‘break-visibility’ function for clef changes.

               ‘forceClef’ (boolean)
                    Show clef symbol, even if it has not changed.  Only
                    active for the first clef after the property is set,
                    not for the full staff.

          This engraver creates the following layout object(s):

          *note Clef:: and *note ClefModifier::.

     ‘*note Collision_engraver::’
          Collect ‘NoteColumns’, and as soon as there are two or more,
          put them in a ‘NoteCollision’ object.

          This engraver creates the following layout object(s):

          *note NoteCollision::.

     ‘*note Cue_clef_engraver::’
          Determine and set reference point for pitches in cued voices.

          Properties (read)

               ‘clefTransposition’ (integer)
                    Add this much extra transposition.  Values of 7 and
                    -7 are common.

               ‘cueClefGlyph’ (string)
                    Name of the symbol within the music font.

               ‘cueClefPosition’ (number)
                    Where should the center of the clef symbol go,
                    measured in half staff spaces from the center of the
                    staff.

               ‘cueClefTransposition’ (integer)
                    Add this much extra transposition.  Values of 7 and
                    -7 are common.

               ‘cueClefTranspositionStyle’ (symbol)
                    Determines the way the ClefModifier grob is
                    displayed.  Possible values are ‘default’,
                    ‘parenthesized’ and ‘bracketed’.

               ‘explicitCueClefVisibility’ (vector)
                    ‘break-visibility’ function for cue clef changes.

               ‘middleCCuePosition’ (number)
                    The position of the middle C, as determined only by
                    the clef of the cue notes.  This can be calculated
                    by looking at ‘cueClefPosition’ and ‘cueClefGlyph’.

          This engraver creates the following layout object(s):

          *note ClefModifier::, *note CueClef:: and *note CueEndClef::.

     ‘*note Dot_column_engraver::’
          Engrave dots on dotted notes shifted to the right of the note.
          If omitted, then dots appear on top of the notes.

          This engraver creates the following layout object(s):

          *note DotColumn::.

     ‘*note Figured_bass_engraver::’
          Make figured bass numbers.

          Music types accepted:

          *note bass-figure-event:: and *note rest-event::

          Properties (read)

               ‘figuredBassAlterationDirection’ (direction)
                    Where to put alterations relative to the main
                    figure.

               ‘figuredBassCenterContinuations’ (boolean)
                    Whether to vertically center pairs of extender
                    lines.  This does not work with three or more lines.

               ‘figuredBassFormatter’ (procedure)
                    A routine generating a markup for a bass figure.

               ‘ignoreFiguredBassRest’ (boolean)
                    Don’t swallow rest events.

               ‘implicitBassFigures’ (list)
                    A list of bass figures that are not printed as
                    numbers, but only as extender lines.

               ‘useBassFigureExtenders’ (boolean)
                    Whether to use extender lines for repeated bass
                    figures.

          This engraver creates the following layout object(s):

          *note BassFigure::, *note BassFigureAlignment::, *note
          BassFigureBracket::, *note BassFigureContinuation:: and *note
          BassFigureLine::.

     ‘*note Figured_bass_position_engraver::’
          Position figured bass alignments over notes.

          This engraver creates the following layout object(s):

          *note BassFigureAlignmentPositioning::.

     ‘*note Fingering_column_engraver::’
          Find potentially colliding scripts and put them into a
          ‘FingeringColumn’ object; that will fix the collisions.

          This engraver creates the following layout object(s):

          *note FingeringColumn::.

     ‘*note Font_size_engraver::’
          Put ‘fontSize’ into ‘font-size’ grob property.

          Properties (read)

               ‘fontSize’ (number)
                    The relative size of all grobs in a context.

     ‘*note Grob_pq_engraver::’
          Administrate when certain grobs (e.g., note heads) stop
          playing.

          Properties (read)

               ‘busyGrobs’ (list)
                    A queue of ‘(END-MOMENT . GROB)’ cons cells.  This
                    is for internal (C++) use only.  This property
                    contains the grobs which are still busy (e.g.  note
                    heads, spanners, etc.).

          Properties (write)

               ‘busyGrobs’ (list)
                    A queue of ‘(END-MOMENT . GROB)’ cons cells.  This
                    is for internal (C++) use only.  This property
                    contains the grobs which are still busy (e.g.  note
                    heads, spanners, etc.).

     ‘*note Instrument_name_engraver::’
          Create a system start text for instrument or vocal names.

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘instrumentName’ (markup)
                    The name to print left of a staff.  The
                    ‘instrumentName’ property labels the staff in the
                    first system, and the ‘shortInstrumentName’ property
                    labels following lines.

               ‘shortInstrumentName’ (markup)
                    See ‘instrumentName’.

               ‘shortVocalName’ (markup)
                    Name of a vocal line, short version.

               ‘vocalName’ (markup)
                    Name of a vocal line.

          This engraver creates the following layout object(s):

          *note InstrumentName::.

     ‘*note Key_engraver::’
          Engrave a key signature.

          Music types accepted:

          *note key-change-event::

          Properties (read)

               ‘createKeyOnClefChange’ (boolean)
                    Print a key signature whenever the clef is changed.

               ‘explicitKeySignatureVisibility’ (vector)
                    ‘break-visibility’ function for explicit key
                    changes.  ‘\override’ of the ‘break-visibility’
                    property will set the visibility for normal (i.e.,
                    at the start of the line) key signatures.

               ‘extraNatural’ (boolean)
                    Whether to typeset an extra natural sign before
                    accidentals that reduce the effect of a previous
                    alteration.

               ‘keyAlterationOrder’ (list)
                    An alist that defines in what order alterations
                    should be printed.  The format is ‘(STEP . ALTER)’,
                    where STEP is a number from 0 to 6 and ALTER from -2
                    (sharp) to 2 (flat).

               ‘keyAlterations’ (list)
                    The current key signature.  This is an alist
                    containing ‘(STEP . ALTER)’ or ‘((OCTAVE . STEP) .
                    ALTER)’, where STEP is a number in the range 0 to 6
                    and ALTER a fraction, denoting alteration.  For
                    alterations, use symbols, e.g.  ‘keyAlterations =
                    #`((6 . ,FLAT))’.

               ‘lastKeyAlterations’ (list)
                    Last key signature before a key signature change.

               ‘middleCClefPosition’ (number)
                    The position of the middle C, as determined only by
                    the clef.  This can be calculated by looking at
                    ‘clefPosition’ and ‘clefGlyph’.

               ‘printKeyCancellation’ (boolean)
                    Print restoration alterations before a key signature
                    change.

          Properties (write)

               ‘keyAlterations’ (list)
                    The current key signature.  This is an alist
                    containing ‘(STEP . ALTER)’ or ‘((OCTAVE . STEP) .
                    ALTER)’, where STEP is a number in the range 0 to 6
                    and ALTER a fraction, denoting alteration.  For
                    alterations, use symbols, e.g.  ‘keyAlterations =
                    #`((6 . ,FLAT))’.

               ‘lastKeyAlterations’ (list)
                    Last key signature before a key signature change.

               ‘tonic’ (pitch)
                    The tonic of the current scale.

          This engraver creates the following layout object(s):

          *note KeyCancellation:: and *note KeySignature::.

     ‘*note Ledger_line_engraver::’
          Create the spanner to draw ledger lines, and notices objects
          that need ledger lines.

          This engraver creates the following layout object(s):

          *note LedgerLineSpanner::.

     ‘*note Ottava_spanner_engraver::’
          Create a text spanner when the ottavation property changes.

          Properties (read)

               ‘currentMusicalColumn’ (graphical (layout) object)
                    Grob that is X-parent to all non-breakable items
                    (note heads, lyrics, etc.).

               ‘middleCOffset’ (number)
                    The offset of middle C from the position given by
                    ‘middleCClefPosition’ This is used for ottava
                    brackets.

               ‘ottavation’ (markup)
                    If set, the text for an ottava spanner.  Changing
                    this creates a new text spanner.

          This engraver creates the following layout object(s):

          *note OttavaBracket::.

     ‘*note Piano_pedal_align_engraver::’
          Align piano pedal symbols and brackets.

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

          This engraver creates the following layout object(s):

          *note SostenutoPedalLineSpanner::, *note
          SustainPedalLineSpanner:: and *note
          UnaCordaPedalLineSpanner::.

     ‘*note Piano_pedal_engraver::’
          Engrave piano pedal symbols and brackets.

          Music types accepted:

          *note sostenuto-event::, *note sustain-event:: and *note
          una-corda-event::

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘pedalSostenutoStrings’ (list)
                    See ‘pedalSustainStrings’.

               ‘pedalSostenutoStyle’ (symbol)
                    See ‘pedalSustainStyle’.

               ‘pedalSustainStrings’ (list)
                    A list of strings to print for sustain-pedal.
                    Format is ‘(UP UPDOWN DOWN)’, where each of the
                    three is the string to print when this is done with
                    the pedal.

               ‘pedalSustainStyle’ (symbol)
                    A symbol that indicates how to print sustain pedals:
                    ‘text’, ‘bracket’ or ‘mixed’ (both).

               ‘pedalUnaCordaStrings’ (list)
                    See ‘pedalSustainStrings’.

               ‘pedalUnaCordaStyle’ (symbol)
                    See ‘pedalSustainStyle’.

          This engraver creates the following layout object(s):

          *note PianoPedalBracket::, *note SostenutoPedal::, *note
          SustainPedal:: and *note UnaCordaPedal::.

     ‘*note Pure_from_neighbor_engraver::’
          Coordinates items that get their pure heights from their
          neighbors.

     ‘*note Rest_collision_engraver::’
          Handle collisions of rests.

          Properties (read)

               ‘busyGrobs’ (list)
                    A queue of ‘(END-MOMENT . GROB)’ cons cells.  This
                    is for internal (C++) use only.  This property
                    contains the grobs which are still busy (e.g.  note
                    heads, spanners, etc.).

          This engraver creates the following layout object(s):

          *note RestCollision::.

     ‘*note Script_row_engraver::’
          Determine order in horizontal side position elements.

          This engraver creates the following layout object(s):

          *note ScriptRow::.

     ‘*note Separating_line_group_engraver::’
          Generate objects for computing spacing parameters.

          Properties (read)

               ‘createSpacing’ (boolean)
                    Create ‘StaffSpacing’ objects?  Should be set for
                    staves.

          Properties (write)

               ‘hasStaffSpacing’ (boolean)
                    True if the current ‘CommandColumn’ contains items
                    that will affect spacing.

          This engraver creates the following layout object(s):

          *note StaffSpacing::.

     ‘*note Staff_collecting_engraver::’
          Maintain the ‘stavesFound’ variable.

          Properties (read)

               ‘stavesFound’ (list of grobs)
                    A list of all staff-symbols found.

          Properties (write)

               ‘stavesFound’ (list of grobs)
                    A list of all staff-symbols found.

     ‘*note Staff_symbol_engraver::’
          Create the constellation of five (default) staff lines.

          Music types accepted:

          *note staff-span-event::

          This engraver creates the following layout object(s):

          *note StaffSymbol::.

     ‘*note Time_signature_engraver::’
          Create a *note TimeSignature:: whenever
          ‘timeSignatureFraction’ changes.

          Music types accepted:

          *note time-signature-event::

          Properties (read)

               ‘initialTimeSignatureVisibility’ (vector)
                    break visibility for the initial time signature.

               ‘partialBusy’ (boolean)
                    Signal that \partial acts at the current timestep.

               ‘timeSignatureFraction’ (fraction, as pair)
                    A pair of numbers, signifying the time signature.
                    For example, ‘'(4 . 4)’ is a 4/4 time signature.

          This engraver creates the following layout object(s):

          *note TimeSignature::.


File: lilypond-internals.info,  Node: GregorianTranscriptionVoice,  Next: KievanStaff,  Prev: GregorianTranscriptionStaff,  Up: Contexts

2.1.13 GregorianTranscriptionVoice
----------------------------------

Corresponds to a voice on a staff.  This context handles the conversion
of dynamic signs, stems, beams, super- and subscripts, slurs, ties, and
rests.

   You have to instantiate this explicitly if you want to have multiple
voices on the same staff.

   This context also accepts commands for the following context(s):

   Voice.

   This context creates the following layout object(s):

   *note Arpeggio::, *note Beam::, *note BendAfter::, *note
BreathingSign::, *note ClusterSpanner::, *note ClusterSpannerBeacon::,
*note CombineTextScript::, *note Dots::, *note DoublePercentRepeat::,
*note DoublePercentRepeatCounter::, *note DoubleRepeatSlash::, *note
DynamicLineSpanner::, *note DynamicText::, *note DynamicTextSpanner::,
*note Episema::, *note Fingering::, *note Flag::, *note Glissando::,
*note Hairpin::, *note InstrumentSwitch::, *note LaissezVibrerTie::,
*note LaissezVibrerTieColumn::, *note LigatureBracket::, *note
MultiMeasureRest::, *note MultiMeasureRestNumber::, *note
MultiMeasureRestText::, *note NoteColumn::, *note NoteHead::, *note
NoteSpacing::, *note PercentRepeat::, *note PercentRepeatCounter::,
*note PhrasingSlur::, *note RepeatSlash::, *note RepeatTie::, *note
RepeatTieColumn::, *note Rest::, *note Script::, *note ScriptColumn::,
*note Slur::, *note Stem::, *note StemStub::, *note StemTremolo::, *note
StringNumber::, *note StrokeFinger::, *note TextScript::, *note
TextSpanner::, *note Tie::, *note TieColumn::, *note
TrillPitchAccidental::, *note TrillPitchGroup::, *note TrillPitchHead::,
*note TrillSpanner::, *note TupletBracket::, *note TupletNumber:: and
*note VoiceFollower::.

   This context sets the following properties:

   • Set grob-property ‘padding’ in *note Script:: to ‘0.5’.
   • Set grob-property ‘transparent’ in *note LigatureBracket:: to ‘#t’.
   • Set translator property ‘autoBeaming’ to ‘#f’.

   This is a ‘Bottom’ context; no contexts will be created implicitly
from it.

   This context cannot contain other contexts.

   This context is built from the following engraver(s):

     ‘*note Arpeggio_engraver::’
          Generate an Arpeggio symbol.

          Music types accepted:

          *note arpeggio-event::

          This engraver creates the following layout object(s):

          *note Arpeggio::.

     ‘*note Auto_beam_engraver::’
          Generate beams based on measure characteristics and observed
          Stems.  Uses ‘baseMoment’, ‘beatStructure’, ‘beamExceptions’,
          ‘measureLength’, and ‘measurePosition’ to decide when to start
          and stop a beam.  Overriding beaming is done through *note
          Stem_engraver:: properties ‘stemLeftBeamCount’ and
          ‘stemRightBeamCount’.

          Music types accepted:

          *note beam-forbid-event::

          Properties (read)

               ‘autoBeaming’ (boolean)
                    If set to true then beams are generated
                    automatically.

               ‘baseMoment’ (moment)
                    Smallest unit of time that will stand on its own as
                    a subdivided section.

               ‘beamExceptions’ (list)
                    An alist of exceptions to autobeam rules that
                    normally end on beats.

               ‘beamHalfMeasure’ (boolean)
                    Whether to allow a beam to begin halfway through the
                    measure in triple time, which could look like 6/8.

               ‘beatStructure’ (list)
                    List of ‘baseMoment’s that are combined to make
                    beats.

               ‘subdivideBeams’ (boolean)
                    If set, multiple beams will be subdivided at
                    ‘baseMoment’ positions by only drawing one beam over
                    the beat.

          This engraver creates the following layout object(s):

          *note Beam::.

     ‘*note Beam_engraver::’
          Handle ‘Beam’ events by engraving beams.  If omitted, then
          notes are printed with flags instead of beams.

          Music types accepted:

          *note beam-event::

          Properties (read)

               ‘baseMoment’ (moment)
                    Smallest unit of time that will stand on its own as
                    a subdivided section.

               ‘beamMelismaBusy’ (boolean)
                    Signal if a beam is present.

               ‘beatStructure’ (list)
                    List of ‘baseMoment’s that are combined to make
                    beats.

               ‘subdivideBeams’ (boolean)
                    If set, multiple beams will be subdivided at
                    ‘baseMoment’ positions by only drawing one beam over
                    the beat.

          Properties (write)

               ‘forbidBreak’ (boolean)
                    If set to ‘#t’, prevent a line break at this point.

          This engraver creates the following layout object(s):

          *note Beam::.

     ‘*note Bend_engraver::’
          Create fall spanners.

          Music types accepted:

          *note bend-after-event::

          This engraver creates the following layout object(s):

          *note BendAfter::.

     ‘*note Breathing_sign_engraver::’
          Create a breathing sign.

          Music types accepted:

          *note breathing-event::

          This engraver creates the following layout object(s):

          *note BreathingSign::.

     ‘*note Chord_tremolo_engraver::’
          Generate beams for tremolo repeats.

          Music types accepted:

          *note tremolo-span-event::

          This engraver creates the following layout object(s):

          *note Beam::.

     ‘*note Cluster_spanner_engraver::’
          Engrave a cluster using ‘Spanner’ notation.

          Music types accepted:

          *note cluster-note-event::

          This engraver creates the following layout object(s):

          *note ClusterSpanner:: and *note ClusterSpannerBeacon::.

     ‘*note Dots_engraver::’
          Create *note Dots:: objects for *note
          rhythmic-head-interface::s.

          This engraver creates the following layout object(s):

          *note Dots::.

     ‘*note Double_percent_repeat_engraver::’
          Make double measure repeats.

          Music types accepted:

          *note double-percent-event::

          Properties (read)

               ‘countPercentRepeats’ (boolean)
                    If set, produce counters for percent repeats.

               ‘measureLength’ (moment)
                    Length of one measure in the current time signature.

               ‘repeatCountVisibility’ (procedure)
                    A procedure taking as arguments an integer and
                    context, returning whether the corresponding percent
                    repeat number should be printed when
                    ‘countPercentRepeats’ is set.

          Properties (write)

               ‘forbidBreak’ (boolean)
                    If set to ‘#t’, prevent a line break at this point.

          This engraver creates the following layout object(s):

          *note DoublePercentRepeat:: and *note
          DoublePercentRepeatCounter::.

     ‘*note Dynamic_align_engraver::’
          Align hairpins and dynamic texts on a horizontal line.

          Properties (read)

               ‘currentMusicalColumn’ (graphical (layout) object)
                    Grob that is X-parent to all non-breakable items
                    (note heads, lyrics, etc.).

          This engraver creates the following layout object(s):

          *note DynamicLineSpanner::.

     ‘*note Dynamic_engraver::’
          Create hairpins, dynamic texts and dynamic text spanners.

          Music types accepted:

          *note absolute-dynamic-event::, *note break-span-event:: and
          *note span-dynamic-event::

          Properties (read)

               ‘crescendoSpanner’ (symbol)
                    The type of spanner to be used for crescendi.
                    Available values are ‘hairpin’ and ‘text’.  If
                    unset, a hairpin crescendo is used.

               ‘crescendoText’ (markup)
                    The text to print at start of non-hairpin crescendo,
                    i.e., ‘cresc.’.

               ‘currentMusicalColumn’ (graphical (layout) object)
                    Grob that is X-parent to all non-breakable items
                    (note heads, lyrics, etc.).

               ‘decrescendoSpanner’ (symbol)
                    The type of spanner to be used for decrescendi.
                    Available values are ‘hairpin’ and ‘text’.  If
                    unset, a hairpin decrescendo is used.

               ‘decrescendoText’ (markup)
                    The text to print at start of non-hairpin
                    decrescendo, i.e., ‘dim.’.

          This engraver creates the following layout object(s):

          *note DynamicText::, *note DynamicTextSpanner:: and *note
          Hairpin::.

     ‘*note Episema_engraver::’
          Create an _Editio Vaticana_-style episema line.

          Music types accepted:

          *note episema-event::

          This engraver creates the following layout object(s):

          *note Episema::.

     ‘*note Fingering_engraver::’
          Create fingering scripts.

          Music types accepted:

          *note fingering-event::

          This engraver creates the following layout object(s):

          *note Fingering::.

     ‘*note Font_size_engraver::’
          Put ‘fontSize’ into ‘font-size’ grob property.

          Properties (read)

               ‘fontSize’ (number)
                    The relative size of all grobs in a context.

     ‘*note Forbid_line_break_engraver::’
          Forbid line breaks when note heads are still playing at some
          point.

          Properties (read)

               ‘busyGrobs’ (list)
                    A queue of ‘(END-MOMENT . GROB)’ cons cells.  This
                    is for internal (C++) use only.  This property
                    contains the grobs which are still busy (e.g.  note
                    heads, spanners, etc.).

          Properties (write)

               ‘forbidBreak’ (boolean)
                    If set to ‘#t’, prevent a line break at this point.

     ‘*note Glissando_engraver::’
          Engrave glissandi.

          Music types accepted:

          *note glissando-event::

          Properties (read)

               ‘glissandoMap’ (list)
                    A map in the form of ’((source1 .  target1) (source2
                    .  target2) (sourcen .  targetn)) showing the
                    glissandi to be drawn for note columns.  The value
                    ’() will default to ’((0 .  0) (1 .  1) (n .  n)),
                    where n is the minimal number of note-heads in the
                    two note columns between which the glissandi occur.

          This engraver creates the following layout object(s):

          *note Glissando::.

     ‘*note Grace_auto_beam_engraver::’
          Generates one autobeam group across an entire grace phrase.
          As usual, any manual beaming or ‘\noBeam’ will block
          autobeaming, just like setting the context property
          ‘autoBeaming’ to ‘##f’.

          Music types accepted:

          *note beam-forbid-event::

          Properties (read)

               ‘autoBeaming’ (boolean)
                    If set to true then beams are generated
                    automatically.

          This engraver creates the following layout object(s):

          *note Beam::.

     ‘*note Grace_beam_engraver::’
          Handle ‘Beam’ events by engraving beams.  If omitted, then
          notes are printed with flags instead of beams.  Only engraves
          beams when we are at grace points in time.

          Music types accepted:

          *note beam-event::

          Properties (read)

               ‘baseMoment’ (moment)
                    Smallest unit of time that will stand on its own as
                    a subdivided section.

               ‘beamMelismaBusy’ (boolean)
                    Signal if a beam is present.

               ‘beatStructure’ (list)
                    List of ‘baseMoment’s that are combined to make
                    beats.

               ‘subdivideBeams’ (boolean)
                    If set, multiple beams will be subdivided at
                    ‘baseMoment’ positions by only drawing one beam over
                    the beat.

          This engraver creates the following layout object(s):

          *note Beam::.

     ‘*note Grace_engraver::’
          Set font size and other properties for grace notes.

          Properties (read)

               ‘graceSettings’ (list)
                    Overrides for grace notes.  This property should be
                    manipulated through the ‘add-grace-property’
                    function.

     ‘*note Grob_pq_engraver::’
          Administrate when certain grobs (e.g., note heads) stop
          playing.

          Properties (read)

               ‘busyGrobs’ (list)
                    A queue of ‘(END-MOMENT . GROB)’ cons cells.  This
                    is for internal (C++) use only.  This property
                    contains the grobs which are still busy (e.g.  note
                    heads, spanners, etc.).

          Properties (write)

               ‘busyGrobs’ (list)
                    A queue of ‘(END-MOMENT . GROB)’ cons cells.  This
                    is for internal (C++) use only.  This property
                    contains the grobs which are still busy (e.g.  note
                    heads, spanners, etc.).

     ‘*note Instrument_switch_engraver::’
          Create a cue text for taking instrument.

          Properties (read)

               ‘instrumentCueName’ (markup)
                    The name to print if another instrument is to be
                    taken.

          This engraver creates the following layout object(s):

          *note InstrumentSwitch::.

     ‘*note Laissez_vibrer_engraver::’
          Create laissez vibrer items.

          Music types accepted:

          *note laissez-vibrer-event::

          This engraver creates the following layout object(s):

          *note LaissezVibrerTie:: and *note LaissezVibrerTieColumn::.

     ‘*note Ligature_bracket_engraver::’
          Handle ‘Ligature_events’ by engraving ‘Ligature’ brackets.

          Music types accepted:

          *note ligature-event::

          This engraver creates the following layout object(s):

          *note LigatureBracket::.

     ‘*note Multi_measure_rest_engraver::’
          Engrave multi-measure rests that are produced with ‘R’.  It
          reads ‘measurePosition’ and ‘internalBarNumber’ to determine
          what number to print over the *note MultiMeasureRest::.

          Music types accepted:

          *note multi-measure-rest-event:: and *note
          multi-measure-text-event::

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘internalBarNumber’ (integer)
                    Contains the current barnumber.  This property is
                    used for internal timekeeping, among others by the
                    ‘Accidental_engraver’.

               ‘measurePosition’ (moment)
                    How much of the current measure have we had.  This
                    can be set manually to create incomplete measures.

               ‘restNumberThreshold’ (number)
                    If a multimeasure rest has more measures than this,
                    a number is printed.

               ‘whichBar’ (string)
                    This property is read to determine what type of bar
                    line to create.

                    Example:

                         \set Staff.whichBar = ".|:"

                    This will create a start-repeat bar in this staff
                    only.  Valid values are described in
                    ‘scm/bar-line.scm’.

          This engraver creates the following layout object(s):

          *note MultiMeasureRest::, *note MultiMeasureRestNumber:: and
          *note MultiMeasureRestText::.

     ‘*note New_fingering_engraver::’
          Create fingering scripts for notes in a new chord.  This
          engraver is ill-named, since it also takes care of
          articulations and harmonic note heads.

          Properties (read)

               ‘fingeringOrientations’ (list)
                    A list of symbols, containing ‘left’, ‘right’, ‘up’
                    and/or ‘down’.  This list determines where
                    fingerings are put relative to the chord being
                    fingered.

               ‘harmonicDots’ (boolean)
                    If set, harmonic notes in dotted chords get dots.

               ‘stringNumberOrientations’ (list)
                    See ‘fingeringOrientations’.

               ‘strokeFingerOrientations’ (list)
                    See ‘fingeringOrientations’.

          This engraver creates the following layout object(s):

          *note Fingering::, *note Script::, *note StringNumber:: and
          *note StrokeFinger::.

     ‘*note Note_head_line_engraver::’
          Engrave a line between two note heads in a staff switch if
          ‘followVoice’ is set.

          Properties (read)

               ‘followVoice’ (boolean)
                    If set, note heads are tracked across staff switches
                    by a thin line.

          This engraver creates the following layout object(s):

          *note VoiceFollower::.

     ‘*note Note_heads_engraver::’
          Generate note heads.

          Music types accepted:

          *note note-event::

          Properties (read)

               ‘middleCPosition’ (number)
                    The place of the middle C, measured in half
                    staff-spaces.  Usually determined by looking at
                    ‘middleCClefPosition’ and ‘middleCOffset’.

               ‘staffLineLayoutFunction’ (procedure)
                    Layout of staff lines, ‘traditional’, or ‘semitone’.

          This engraver creates the following layout object(s):

          *note NoteHead::.

     ‘*note Note_spacing_engraver::’
          Generate ‘NoteSpacing’, an object linking horizontal lines for
          use in spacing.

          This engraver creates the following layout object(s):

          *note NoteSpacing::.

     ‘*note Part_combine_engraver::’
          Part combine engraver for orchestral scores: Print markings
          ‘a2’, ‘Solo’, ‘Solo II’, and ‘unisono’.

          Music types accepted:

          *note note-event:: and *note part-combine-event::

          Properties (read)

               ‘aDueText’ (markup)
                    Text to print at a unisono passage.

               ‘partCombineTextsOnNote’ (boolean)
                    Print part-combine texts only on the next note
                    rather than immediately on rests or skips.

               ‘printPartCombineTexts’ (boolean)
                    Set ‘Solo’ and ‘A due’ texts in the part combiner?

               ‘soloIIText’ (markup)
                    The text for the start of a solo for voice ‘two’
                    when part-combining.

               ‘soloText’ (markup)
                    The text for the start of a solo when
                    part-combining.

          This engraver creates the following layout object(s):

          *note CombineTextScript::.

     ‘*note Percent_repeat_engraver::’
          Make whole measure repeats.

          Music types accepted:

          *note percent-event::

          Properties (read)

               ‘countPercentRepeats’ (boolean)
                    If set, produce counters for percent repeats.

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘repeatCountVisibility’ (procedure)
                    A procedure taking as arguments an integer and
                    context, returning whether the corresponding percent
                    repeat number should be printed when
                    ‘countPercentRepeats’ is set.

          This engraver creates the following layout object(s):

          *note PercentRepeat:: and *note PercentRepeatCounter::.

     ‘*note Phrasing_slur_engraver::’
          Print phrasing slurs.  Similar to *note Slur_engraver::.

          Music types accepted:

          *note note-event:: and *note phrasing-slur-event::

          This engraver creates the following layout object(s):

          *note PhrasingSlur::.

     ‘*note Pitched_trill_engraver::’
          Print the bracketed note head after a note head with trill.

          This engraver creates the following layout object(s):

          *note TrillPitchAccidental::, *note TrillPitchGroup:: and
          *note TrillPitchHead::.

     ‘*note Repeat_tie_engraver::’
          Create repeat ties.

          Music types accepted:

          *note repeat-tie-event::

          This engraver creates the following layout object(s):

          *note RepeatTie:: and *note RepeatTieColumn::.

     ‘*note Rest_engraver::’
          Engrave rests.

          Music types accepted:

          *note rest-event::

          Properties (read)

               ‘middleCPosition’ (number)
                    The place of the middle C, measured in half
                    staff-spaces.  Usually determined by looking at
                    ‘middleCClefPosition’ and ‘middleCOffset’.

          This engraver creates the following layout object(s):

          *note Rest::.

     ‘*note Rhythmic_column_engraver::’
          Generate ‘NoteColumn’, an object that groups stems, note
          heads, and rests.

          This engraver creates the following layout object(s):

          *note NoteColumn::.

     ‘*note Script_column_engraver::’
          Find potentially colliding scripts and put them into a
          ‘ScriptColumn’ object; that will fix the collisions.

          This engraver creates the following layout object(s):

          *note ScriptColumn::.

     ‘*note Script_engraver::’
          Handle note scripted articulations.

          Music types accepted:

          *note articulation-event::

          Properties (read)

               ‘scriptDefinitions’ (list)
                    The description of scripts.  This is used by the
                    ‘Script_engraver’ for typesetting note-superscripts
                    and subscripts.  See ‘scm/script.scm’ for more
                    information.

          This engraver creates the following layout object(s):

          *note Script::.

     ‘*note Slash_repeat_engraver::’
          Make beat repeats.

          Music types accepted:

          *note repeat-slash-event::

          This engraver creates the following layout object(s):

          *note DoubleRepeatSlash:: and *note RepeatSlash::.

     ‘*note Slur_engraver::’
          Build slur grobs from slur events.

          Music types accepted:

          *note note-event:: and *note slur-event::

          Properties (read)

               ‘doubleSlurs’ (boolean)
                    If set, two slurs are created for every slurred
                    note, one above and one below the chord.

               ‘slurMelismaBusy’ (boolean)
                    Signal if a slur is present.

          This engraver creates the following layout object(s):

          *note Slur::.

     ‘*note Spanner_break_forbid_engraver::’
          Forbid breaks in certain spanners.

     ‘*note Stem_engraver::’
          Create stems, flags and single-stem tremolos.  It also works
          together with the beam engraver for overriding beaming.

          Music types accepted:

          *note tremolo-event:: and *note tuplet-span-event::

          Properties (read)

               ‘stemLeftBeamCount’ (integer)
                    Specify the number of beams to draw on the left side
                    of the next note.  Overrides automatic beaming.  The
                    value is only used once, and then it is erased.

               ‘stemRightBeamCount’ (integer)
                    See ‘stemLeftBeamCount’.

               ‘whichBar’ (string)
                    This property is read to determine what type of bar
                    line to create.

                    Example:

                         \set Staff.whichBar = ".|:"

                    This will create a start-repeat bar in this staff
                    only.  Valid values are described in
                    ‘scm/bar-line.scm’.

          This engraver creates the following layout object(s):

          *note Flag::, *note Stem::, *note StemStub:: and *note
          StemTremolo::.

     ‘*note Text_engraver::’
          Create text scripts.

          Music types accepted:

          *note text-script-event::

          This engraver creates the following layout object(s):

          *note TextScript::.

     ‘*note Text_spanner_engraver::’
          Create text spanner from an event.

          Music types accepted:

          *note text-span-event::

          Properties (read)

               ‘currentMusicalColumn’ (graphical (layout) object)
                    Grob that is X-parent to all non-breakable items
                    (note heads, lyrics, etc.).

          This engraver creates the following layout object(s):

          *note TextSpanner::.

     ‘*note Tie_engraver::’
          Generate ties between note heads of equal pitch.

          Music types accepted:

          *note tie-event::

          Properties (read)

               ‘skipTypesetting’ (boolean)
                    If true, no typesetting is done, speeding up the
                    interpretation phase.  Useful for debugging large
                    scores.

               ‘tieWaitForNote’ (boolean)
                    If true, tied notes do not have to follow each other
                    directly.  This can be used for writing out
                    arpeggios.

          Properties (write)

               ‘tieMelismaBusy’ (boolean)
                    Signal whether a tie is present.

          This engraver creates the following layout object(s):

          *note Tie:: and *note TieColumn::.

     ‘*note Trill_spanner_engraver::’
          Create trill spanner from an event.

          Music types accepted:

          *note trill-span-event::

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘currentMusicalColumn’ (graphical (layout) object)
                    Grob that is X-parent to all non-breakable items
                    (note heads, lyrics, etc.).

          This engraver creates the following layout object(s):

          *note TrillSpanner::.

     ‘*note Tuplet_engraver::’
          Catch tuplet events and generate appropriate bracket.

          Music types accepted:

          *note tuplet-span-event::

          Properties (read)

               ‘tupletFullLength’ (boolean)
                    If set, the tuplet is printed up to the start of the
                    next note.

               ‘tupletFullLengthNote’ (boolean)
                    If set, end at the next note, otherwise end on the
                    matter (time signatures, etc.)  before the note.

          This engraver creates the following layout object(s):

          *note TupletBracket:: and *note TupletNumber::.


File: lilypond-internals.info,  Node: KievanStaff,  Next: KievanVoice,  Prev: GregorianTranscriptionVoice,  Up: Contexts

2.1.14 KievanStaff
------------------

Same as ‘Staff’ context, except that it is accommodated for typesetting
a piece in Kievan style.

   This context also accepts commands for the following context(s):

   Staff.

   This context creates the following layout object(s):

   *note Accidental::, *note AccidentalCautionary::, *note
AccidentalPlacement::, *note AccidentalSuggestion::, *note BarLine::,
*note BassFigure::, *note BassFigureAlignment::, *note
BassFigureAlignmentPositioning::, *note BassFigureBracket::, *note
BassFigureContinuation::, *note BassFigureLine::, *note Clef::, *note
ClefModifier::, *note CueClef::, *note CueEndClef::, *note DotColumn::,
*note FingeringColumn::, *note InstrumentName::, *note
KeyCancellation::, *note KeySignature::, *note LedgerLineSpanner::,
*note NoteCollision::, *note OttavaBracket::, *note PianoPedalBracket::,
*note RestCollision::, *note ScriptRow::, *note SostenutoPedal::, *note
SostenutoPedalLineSpanner::, *note StaffSpacing::, *note StaffSymbol::,
*note SustainPedal::, *note SustainPedalLineSpanner::, *note
UnaCordaPedal::, *note UnaCordaPedalLineSpanner:: and *note
VerticalAxisGroup::.

   This context sets the following properties:

   • Set translator property ‘autoAccidentals’ to:
     '(Staff #<procedure #f (context pitch barnum measurepos)>
             #<procedure neo-modern-accidental-rule (context pitch barnum measurepos)>)
   • Set translator property ‘autoCautionaries’ to ‘'()’.
   • Set translator property ‘clefGlyph’ to ‘"clefs.kievan.do"’.
   • Set translator property ‘clefPosition’ to ‘0’.
   • Set translator property ‘clefTransposition’ to ‘0’.
   • Set translator property ‘createSpacing’ to ‘#t’.
   • Set translator property ‘extraNatural’ to ‘#f’.
   • Set translator property ‘ignoreFiguredBassRest’ to ‘#f’.
   • Set translator property ‘instrumentName’ to ‘'()’.
   • Set translator property ‘localAlterations’ to ‘'()’.
   • Set translator property ‘middleCClefPosition’ to ‘0’.
   • Set translator property ‘middleCPosition’ to ‘0’.
   • Set translator property ‘printKeyCancellation’ to ‘#f’.
   • Set translator property ‘shortInstrumentName’ to ‘'()’.

   This is not a ‘Bottom’ context; search for such a one will commence
after creating an implicit context of type *note KievanVoice::.

   Context KievanStaff can contain *note CueVoice::, *note KievanVoice::
and *note NullVoice::.

   This context is built from the following engraver(s):

     ‘*note Accidental_engraver::’
          Make accidentals.  Catch note heads, ties and notices
          key-change events.  This engraver usually lives at Staff
          level, but reads the settings for Accidental at ‘Voice’ level,
          so you can ‘\override’ them at ‘Voice’.

          Properties (read)

               ‘accidentalGrouping’ (symbol)
                    If set to ‘'voice’, accidentals on the same note in
                    different octaves may be horizontally staggered if
                    in different voices.

               ‘autoAccidentals’ (list)
                    List of different ways to typeset an accidental.

                    For determining when to print an accidental, several
                    different rules are tried.  The rule that gives the
                    highest number of accidentals is used.

                    Each entry in the list is either a symbol or a
                    procedure.

                    SYMBOL
                         The symbol is the name of the context in which
                         the following rules are to be applied.  For
                         example, if CONTEXT is *note
                         (lilypond-internals)Score:: then all staves
                         share accidentals, and if CONTEXT is *note
                         (lilypond-internals)Staff:: then all voices in
                         the same staff share accidentals, but staves do
                         not.

                    PROCEDURE
                         The procedure represents an accidental rule to
                         be applied to the previously specified context.

                         The procedure takes the following arguments:

                         ‘context’
                              The current context to which the rule
                              should be applied.

                         ‘pitch’
                              The pitch of the note to be evaluated.

                         ‘barnum’
                              The current bar number.

                         ‘measurepos’
                              The current measure position.

                         The procedure returns a pair of booleans.  The
                         first states whether an extra natural should be
                         added.  The second states whether an accidental
                         should be printed.  ‘(#t . #f)’ does not make
                         sense.

               ‘autoCautionaries’ (list)
                    List similar to ‘autoAccidentals’, but it controls
                    cautionary accidentals rather than normal ones.
                    Both lists are tried, and the one giving the most
                    accidentals wins.  In case of draw, a normal
                    accidental is typeset.

               ‘extraNatural’ (boolean)
                    Whether to typeset an extra natural sign before
                    accidentals that reduce the effect of a previous
                    alteration.

               ‘harmonicAccidentals’ (boolean)
                    If set, harmonic notes in chords get accidentals.

               ‘internalBarNumber’ (integer)
                    Contains the current barnumber.  This property is
                    used for internal timekeeping, among others by the
                    ‘Accidental_engraver’.

               ‘keyAlterations’ (list)
                    The current key signature.  This is an alist
                    containing ‘(STEP . ALTER)’ or ‘((OCTAVE . STEP) .
                    ALTER)’, where STEP is a number in the range 0 to 6
                    and ALTER a fraction, denoting alteration.  For
                    alterations, use symbols, e.g.  ‘keyAlterations =
                    #`((6 . ,FLAT))’.

               ‘localAlterations’ (list)
                    The key signature at this point in the measure.  The
                    format is the same as for ‘keyAlterations’, but can
                    also contain ‘((OCTAVE . NAME) . (ALTER BARNUMBER .
                    MEASUREPOSITION))’ pairs.

          Properties (write)

               ‘localAlterations’ (list)
                    The key signature at this point in the measure.  The
                    format is the same as for ‘keyAlterations’, but can
                    also contain ‘((OCTAVE . NAME) . (ALTER BARNUMBER .
                    MEASUREPOSITION))’ pairs.

          This engraver creates the following layout object(s):

          *note Accidental::, *note AccidentalCautionary::, *note
          AccidentalPlacement:: and *note AccidentalSuggestion::.

     ‘*note Axis_group_engraver::’
          Group all objects created in this context in a
          ‘VerticalAxisGroup’ spanner.

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘hasAxisGroup’ (boolean)
                    True if the current context is contained in an axis
                    group.

               ‘keepAliveInterfaces’ (list)
                    A list of symbols, signifying grob interfaces that
                    are worth keeping a staff with ‘remove-empty’ set
                    around for.

          Properties (write)

               ‘hasAxisGroup’ (boolean)
                    True if the current context is contained in an axis
                    group.

          This engraver creates the following layout object(s):

          *note VerticalAxisGroup::.

     ‘*note Bar_engraver::’
          Create barlines.  This engraver is controlled through the
          ‘whichBar’ property.  If it has no bar line to create, it will
          forbid a linebreak at this point.  This engraver is required
          to trigger the creation of clefs at the start of systems.

          Properties (read)

               ‘whichBar’ (string)
                    This property is read to determine what type of bar
                    line to create.

                    Example:

                         \set Staff.whichBar = ".|:"

                    This will create a start-repeat bar in this staff
                    only.  Valid values are described in
                    ‘scm/bar-line.scm’.

          Properties (write)

               ‘forbidBreak’ (boolean)
                    If set to ‘#t’, prevent a line break at this point.

          This engraver creates the following layout object(s):

          *note BarLine::.

     ‘*note Clef_engraver::’
          Determine and set reference point for pitches.

          Properties (read)

               ‘clefGlyph’ (string)
                    Name of the symbol within the music font.

               ‘clefPosition’ (number)
                    Where should the center of the clef symbol go,
                    measured in half staff spaces from the center of the
                    staff.

               ‘clefTransposition’ (integer)
                    Add this much extra transposition.  Values of 7 and
                    -7 are common.

               ‘clefTranspositionStyle’ (symbol)
                    Determines the way the ClefModifier grob is
                    displayed.  Possible values are ‘default’,
                    ‘parenthesized’ and ‘bracketed’.

               ‘explicitClefVisibility’ (vector)
                    ‘break-visibility’ function for clef changes.

               ‘forceClef’ (boolean)
                    Show clef symbol, even if it has not changed.  Only
                    active for the first clef after the property is set,
                    not for the full staff.

          This engraver creates the following layout object(s):

          *note Clef:: and *note ClefModifier::.

     ‘*note Collision_engraver::’
          Collect ‘NoteColumns’, and as soon as there are two or more,
          put them in a ‘NoteCollision’ object.

          This engraver creates the following layout object(s):

          *note NoteCollision::.

     ‘*note Cue_clef_engraver::’
          Determine and set reference point for pitches in cued voices.

          Properties (read)

               ‘clefTransposition’ (integer)
                    Add this much extra transposition.  Values of 7 and
                    -7 are common.

               ‘cueClefGlyph’ (string)
                    Name of the symbol within the music font.

               ‘cueClefPosition’ (number)
                    Where should the center of the clef symbol go,
                    measured in half staff spaces from the center of the
                    staff.

               ‘cueClefTransposition’ (integer)
                    Add this much extra transposition.  Values of 7 and
                    -7 are common.

               ‘cueClefTranspositionStyle’ (symbol)
                    Determines the way the ClefModifier grob is
                    displayed.  Possible values are ‘default’,
                    ‘parenthesized’ and ‘bracketed’.

               ‘explicitCueClefVisibility’ (vector)
                    ‘break-visibility’ function for cue clef changes.

               ‘middleCCuePosition’ (number)
                    The position of the middle C, as determined only by
                    the clef of the cue notes.  This can be calculated
                    by looking at ‘cueClefPosition’ and ‘cueClefGlyph’.

          This engraver creates the following layout object(s):

          *note ClefModifier::, *note CueClef:: and *note CueEndClef::.

     ‘*note Dot_column_engraver::’
          Engrave dots on dotted notes shifted to the right of the note.
          If omitted, then dots appear on top of the notes.

          This engraver creates the following layout object(s):

          *note DotColumn::.

     ‘*note Figured_bass_engraver::’
          Make figured bass numbers.

          Music types accepted:

          *note bass-figure-event:: and *note rest-event::

          Properties (read)

               ‘figuredBassAlterationDirection’ (direction)
                    Where to put alterations relative to the main
                    figure.

               ‘figuredBassCenterContinuations’ (boolean)
                    Whether to vertically center pairs of extender
                    lines.  This does not work with three or more lines.

               ‘figuredBassFormatter’ (procedure)
                    A routine generating a markup for a bass figure.

               ‘ignoreFiguredBassRest’ (boolean)
                    Don’t swallow rest events.

               ‘implicitBassFigures’ (list)
                    A list of bass figures that are not printed as
                    numbers, but only as extender lines.

               ‘useBassFigureExtenders’ (boolean)
                    Whether to use extender lines for repeated bass
                    figures.

          This engraver creates the following layout object(s):

          *note BassFigure::, *note BassFigureAlignment::, *note
          BassFigureBracket::, *note BassFigureContinuation:: and *note
          BassFigureLine::.

     ‘*note Figured_bass_position_engraver::’
          Position figured bass alignments over notes.

          This engraver creates the following layout object(s):

          *note BassFigureAlignmentPositioning::.

     ‘*note Fingering_column_engraver::’
          Find potentially colliding scripts and put them into a
          ‘FingeringColumn’ object; that will fix the collisions.

          This engraver creates the following layout object(s):

          *note FingeringColumn::.

     ‘*note Font_size_engraver::’
          Put ‘fontSize’ into ‘font-size’ grob property.

          Properties (read)

               ‘fontSize’ (number)
                    The relative size of all grobs in a context.

     ‘*note Grob_pq_engraver::’
          Administrate when certain grobs (e.g., note heads) stop
          playing.

          Properties (read)

               ‘busyGrobs’ (list)
                    A queue of ‘(END-MOMENT . GROB)’ cons cells.  This
                    is for internal (C++) use only.  This property
                    contains the grobs which are still busy (e.g.  note
                    heads, spanners, etc.).

          Properties (write)

               ‘busyGrobs’ (list)
                    A queue of ‘(END-MOMENT . GROB)’ cons cells.  This
                    is for internal (C++) use only.  This property
                    contains the grobs which are still busy (e.g.  note
                    heads, spanners, etc.).

     ‘*note Instrument_name_engraver::’
          Create a system start text for instrument or vocal names.

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘instrumentName’ (markup)
                    The name to print left of a staff.  The
                    ‘instrumentName’ property labels the staff in the
                    first system, and the ‘shortInstrumentName’ property
                    labels following lines.

               ‘shortInstrumentName’ (markup)
                    See ‘instrumentName’.

               ‘shortVocalName’ (markup)
                    Name of a vocal line, short version.

               ‘vocalName’ (markup)
                    Name of a vocal line.

          This engraver creates the following layout object(s):

          *note InstrumentName::.

     ‘*note Key_engraver::’
          Engrave a key signature.

          Music types accepted:

          *note key-change-event::

          Properties (read)

               ‘createKeyOnClefChange’ (boolean)
                    Print a key signature whenever the clef is changed.

               ‘explicitKeySignatureVisibility’ (vector)
                    ‘break-visibility’ function for explicit key
                    changes.  ‘\override’ of the ‘break-visibility’
                    property will set the visibility for normal (i.e.,
                    at the start of the line) key signatures.

               ‘extraNatural’ (boolean)
                    Whether to typeset an extra natural sign before
                    accidentals that reduce the effect of a previous
                    alteration.

               ‘keyAlterationOrder’ (list)
                    An alist that defines in what order alterations
                    should be printed.  The format is ‘(STEP . ALTER)’,
                    where STEP is a number from 0 to 6 and ALTER from -2
                    (sharp) to 2 (flat).

               ‘keyAlterations’ (list)
                    The current key signature.  This is an alist
                    containing ‘(STEP . ALTER)’ or ‘((OCTAVE . STEP) .
                    ALTER)’, where STEP is a number in the range 0 to 6
                    and ALTER a fraction, denoting alteration.  For
                    alterations, use symbols, e.g.  ‘keyAlterations =
                    #`((6 . ,FLAT))’.

               ‘lastKeyAlterations’ (list)
                    Last key signature before a key signature change.

               ‘middleCClefPosition’ (number)
                    The position of the middle C, as determined only by
                    the clef.  This can be calculated by looking at
                    ‘clefPosition’ and ‘clefGlyph’.

               ‘printKeyCancellation’ (boolean)
                    Print restoration alterations before a key signature
                    change.

          Properties (write)

               ‘keyAlterations’ (list)
                    The current key signature.  This is an alist
                    containing ‘(STEP . ALTER)’ or ‘((OCTAVE . STEP) .
                    ALTER)’, where STEP is a number in the range 0 to 6
                    and ALTER a fraction, denoting alteration.  For
                    alterations, use symbols, e.g.  ‘keyAlterations =
                    #`((6 . ,FLAT))’.

               ‘lastKeyAlterations’ (list)
                    Last key signature before a key signature change.

               ‘tonic’ (pitch)
                    The tonic of the current scale.

          This engraver creates the following layout object(s):

          *note KeyCancellation:: and *note KeySignature::.

     ‘*note Ledger_line_engraver::’
          Create the spanner to draw ledger lines, and notices objects
          that need ledger lines.

          This engraver creates the following layout object(s):

          *note LedgerLineSpanner::.

     ‘*note Ottava_spanner_engraver::’
          Create a text spanner when the ottavation property changes.

          Properties (read)

               ‘currentMusicalColumn’ (graphical (layout) object)
                    Grob that is X-parent to all non-breakable items
                    (note heads, lyrics, etc.).

               ‘middleCOffset’ (number)
                    The offset of middle C from the position given by
                    ‘middleCClefPosition’ This is used for ottava
                    brackets.

               ‘ottavation’ (markup)
                    If set, the text for an ottava spanner.  Changing
                    this creates a new text spanner.

          This engraver creates the following layout object(s):

          *note OttavaBracket::.

     ‘*note Piano_pedal_align_engraver::’
          Align piano pedal symbols and brackets.

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

          This engraver creates the following layout object(s):

          *note SostenutoPedalLineSpanner::, *note
          SustainPedalLineSpanner:: and *note
          UnaCordaPedalLineSpanner::.

     ‘*note Piano_pedal_engraver::’
          Engrave piano pedal symbols and brackets.

          Music types accepted:

          *note sostenuto-event::, *note sustain-event:: and *note
          una-corda-event::

          Properties (read)

               ‘currentCommandColumn’ (graphical (layout) object)
                    Grob that is X-parent to all current breakable
                    (clef, key signature, etc.)  items.

               ‘pedalSostenutoStrings’ (list)
                    See ‘pedalSustainStrings’.

               ‘pedalSostenutoStyle’ (symbol)
                    See ‘pedalSustainStyle’.

               ‘pedalSustainStrings’ (list)
                    A list of strings to print for sustain-pedal.
                    Format is ‘(UP UPDOWN DOWN)’, where each of the
                    three is the string to print when this is done with
                    the pedal.

               ‘pedalSustainStyle’ (symbol)
                    A symbol that indicates how to print sustain pedals:
                    ‘text’, ‘bracket’ or ‘mixed’ (both).

               ‘pedalUnaCordaStrings’ (list)
                    See ‘pedalSustainStrings’.

               ‘pedalUnaCordaStyle’ (symbol)
                    See ‘pedalSustainStyle’.

          This engraver creates the following layout object(s):

          *note PianoPedalBracket::, *note SostenutoPedal::, *note
          SustainPedal:: and *note UnaCordaPedal::.

     ‘*note Pure_from_neighbor_engraver::’
          Coordinates items that get their pure heights from their
          neighbors.

     ‘*note Rest_collision_engraver::’
          Handle collisions of rests.

          Properties (read)

               ‘busyGrobs’ (list)
                    A queue of ‘(END-MOMENT . GROB)’ cons cells.  This
                    is for internal (C++) use only.  This property
                    contains the grobs which are still busy (e.g.  note
                    heads, spanners, etc.).

          This engraver creates the following layout object(s):

          *note RestCollision::.

     ‘*note Script_row_engraver::’
          Determine order in horizontal side position elements.

          This engraver creates the following layout object(s):

          *note ScriptRow::.

     ‘*note Separating_line_group_engraver::’
          Generate objects for computing spacing parameters.

          Properties (read)

               ‘createSpacing’ (boolean)
                    Create ‘StaffSpacing’ objects?  Should be set for
                    staves.

          Properties (write)

               ‘hasStaffSpacing’ (boolean)
                    True if the current ‘CommandColumn’ contains items
                    that will affect spacing.

          This engraver creates the following layout object(s):

          *note StaffSpacing::.

     ‘*note Staff_collecting_engraver::’
          Maintain the ‘stavesFound’ variable.

          Properties (read)

               ‘stavesFound’ (list of grobs)
                    A list of all staff-symbols found.

          Properties (write)

               ‘stavesFound’ (list of grobs)
                    A list of all staff-symbols found.

     ‘*note Staff_symbol_engraver::’
          Create the constellation of five (default) staff lines.

          Music types accepted:

          *note staff-span-event::

          This engraver creates the following layout object(s):

          *note StaffSymbol::.

