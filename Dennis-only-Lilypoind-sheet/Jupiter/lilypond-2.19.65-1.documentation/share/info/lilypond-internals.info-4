This is lilypond-internals.info, produced by makeinfo version 6.1 from
internals.texi.

INFO-DIR-SECTION LilyPond
START-INFO-DIR-ENTRY
* GNU LilyPond Internals Reference: (internals).          LilyPond Internals Reference.
END-INFO-DIR-ENTRY


File: lilypond-internals.info,  Node: BarNumber,  Next: BassFigure,  Prev: BarLine,  Up: All layout objects

3.1.12 BarNumber
----------------

BarNumber objects are created by: *note Bar_number_engraver::.

   Standard settings:

     ‘after-line-breaking’ (boolean):
          ‘ly:side-position-interface::move-to-extremal-staff’

          Dummy property, used to trigger callback for
          ‘after-line-breaking’.

     ‘break-align-symbols’ (list):
          '(left-edge staff-bar)

          A list of _break-align symbols_ that determines which
          breakable items to align this to.  If the grob selected by the
          first symbol in the list is invisible due to
          ‘break-visibility’, we will align to the next grob (and so
          on).  Choices are listed in *note
          (lilypond-internals)break-alignment-interface::.

     ‘break-visibility’ (vector):
          #(#f #f #t)

          A vector of 3 booleans,
          ‘#(END-OF-LINE UNBROKEN BEGIN-OF-LINE)’.  ‘#t’ means visible,
          ‘#f’ means killed.

     ‘direction’ (direction):
          ‘1’

          If ‘side-axis’ is ‘0’ (or ‘X’), then this property determines
          whether the object is placed ‘LEFT’, ‘CENTER’ or ‘RIGHT’ with
          respect to the other object.  Otherwise, it determines whether
          the object is placed ‘UP’, ‘CENTER’ or ‘DOWN’.  Numerical
          values may also be used: ‘UP’=‘1’, ‘DOWN’=‘-1’, ‘LEFT’=‘-1’,
          ‘RIGHT’=‘1’, ‘CENTER’=‘0’.

     ‘extra-spacing-width’ (pair of numbers):
          '(+inf.0 . -inf.0)

          In the horizontal spacing problem, we pad each item by this
          amount (by adding the ‘car’ on the left side of the item and
          adding the ‘cdr’ on the right side of the item).  In order to
          make a grob take up no horizontal space at all, set this to
          ‘(+inf.0 . -inf.0)’.

     ‘font-family’ (symbol):
          ‘'roman’

          The font family is the broadest category for selecting text
          fonts.  Options include: ‘sans’, ‘roman’.

     ‘font-size’ (number):
          ‘-2’

          The font size, compared to the ‘normal’ size.  ‘0’ is
          style-sheet’s normal size, ‘-1’ is smaller, ‘+1’ is bigger.
          Each step of 1 is approximately 12% larger; 6 steps are
          exactly a factor 2 larger.  If the context property ‘fontSize’
          is set, its value is added to this before the glyph is
          printed.  Fractional values are allowed.

     ‘horizon-padding’ (number):
          ‘0.05’

          The amount to pad the axis along which a ‘Skyline’ is built
          for the ‘side-position-interface’.

     ‘non-musical’ (boolean):
          ‘#t’

          True if the grob belongs to a ‘NonMusicalPaperColumn’.

     ‘outside-staff-priority’ (number):
          ‘100’

          If set, the grob is positioned outside the staff in such a way
          as to avoid all collisions.  In case of a potential collision,
          the grob with the smaller ‘outside-staff-priority’ is closer
          to the staff.

     ‘padding’ (dimension, in staff space):
          ‘1.0’

          Add this much extra space between objects that are next to
          each other.

     ‘self-alignment-X’ (number):
          ‘1’

          Specify alignment of an object.  The value ‘-1’ means left
          aligned, ‘0’ centered, and ‘1’ right-aligned in X direction.
          Other numerical values may also be specified - the unit is
          half the object width.

     ‘side-axis’ (number):
          ‘1’

          If the value is ‘X’ (or equivalently ‘0’), the object is
          placed horizontally next to the other object.  If the value is
          ‘Y’ or ‘1’, it is placed vertically.

     ‘stencil’ (stencil):
          ‘ly:text-interface::print’

          The symbol to print.

     ‘X-offset’ (number):
          ‘self-alignment-interface::self-aligned-on-breakable’

          The horizontal amount that this object is moved relative to
          its X-parent.

     ‘Y-extent’ (pair of numbers):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::stencil-height> >’

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

     ‘Y-offset’ (number):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:side-position-interface::y-aligned-side>
          #<primitive-procedure
          ly:side-position-interface::pure-y-aligned-side> >’

          The vertical amount that this object is moved relative to its
          Y-parent.

   This object supports the following interface(s): *note
break-alignable-interface::, *note font-interface::, *note
grob-interface::, *note item-interface::, *note
outside-staff-interface::, *note self-alignment-interface::, *note
side-position-interface:: and *note text-interface::.


File: lilypond-internals.info,  Node: BassFigure,  Next: BassFigureAlignment,  Prev: BarNumber,  Up: All layout objects

3.1.13 BassFigure
-----------------

BassFigure objects are created by: *note Figured_bass_engraver::.

   Standard settings:

     ‘stencil’ (stencil):
          ‘ly:text-interface::print’

          The symbol to print.

     ‘Y-extent’ (pair of numbers):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::stencil-height> >’

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

   This object supports the following interface(s): *note
bass-figure-interface::, *note font-interface::, *note grob-interface::,
*note item-interface::, *note rhythmic-grob-interface:: and *note
text-interface::.


File: lilypond-internals.info,  Node: BassFigureAlignment,  Next: BassFigureAlignmentPositioning,  Prev: BassFigure,  Up: All layout objects

3.1.14 BassFigureAlignment
--------------------------

BassFigureAlignment objects are created by: *note
Figured_bass_engraver::.

   Standard settings:

     ‘axes’ (list):
          '(1)

          List of axis numbers.  In the case of alignment grobs, this
          should contain only one number.

     ‘padding’ (dimension, in staff space):
          ‘0.2’

          Add this much extra space between objects that are next to
          each other.

     ‘stacking-dir’ (direction):
          ‘-1’

          Stack objects in which direction?

     ‘X-extent’ (pair of numbers):
          ‘ly:axis-group-interface::width’

          Extent (size) in the X direction, measured in staff-space
          units, relative to object’s reference point.

     ‘Y-extent’ (pair of numbers):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:axis-group-interface::height> #<primitive-procedure
          ly:axis-group-interface::pure-height> >’

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

   This object supports the following interface(s): *note
align-interface::, *note axis-group-interface::, *note
bass-figure-alignment-interface::, *note grob-interface:: and *note
spanner-interface::.


File: lilypond-internals.info,  Node: BassFigureAlignmentPositioning,  Next: BassFigureBracket,  Prev: BassFigureAlignment,  Up: All layout objects

3.1.15 BassFigureAlignmentPositioning
-------------------------------------

BassFigureAlignmentPositioning objects are created by: *note
Figured_bass_position_engraver::.

   Standard settings:

     ‘axes’ (list):
          '(1)

          List of axis numbers.  In the case of alignment grobs, this
          should contain only one number.

     ‘direction’ (direction):
          ‘1’

          If ‘side-axis’ is ‘0’ (or ‘X’), then this property determines
          whether the object is placed ‘LEFT’, ‘CENTER’ or ‘RIGHT’ with
          respect to the other object.  Otherwise, it determines whether
          the object is placed ‘UP’, ‘CENTER’ or ‘DOWN’.  Numerical
          values may also be used: ‘UP’=‘1’, ‘DOWN’=‘-1’, ‘LEFT’=‘-1’,
          ‘RIGHT’=‘1’, ‘CENTER’=‘0’.

     ‘padding’ (dimension, in staff space):
          ‘0.5’

          Add this much extra space between objects that are next to
          each other.

     ‘side-axis’ (number):
          ‘1’

          If the value is ‘X’ (or equivalently ‘0’), the object is
          placed horizontally next to the other object.  If the value is
          ‘Y’ or ‘1’, it is placed vertically.

     ‘staff-padding’ (dimension, in staff space):
          ‘1.0’

          Maintain this much space between reference points and the
          staff.  Its effect is to align objects of differing sizes
          (like the dynamics p and f) on their baselines.

     ‘X-extent’ (pair of numbers):
          ‘ly:axis-group-interface::width’

          Extent (size) in the X direction, measured in staff-space
          units, relative to object’s reference point.

     ‘Y-extent’ (pair of numbers):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:axis-group-interface::height> #<primitive-procedure
          ly:axis-group-interface::pure-height> >’

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

     ‘Y-offset’ (number):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:side-position-interface::y-aligned-side>
          #<primitive-procedure
          ly:side-position-interface::pure-y-aligned-side> >’

          The vertical amount that this object is moved relative to its
          Y-parent.

   This object supports the following interface(s): *note
axis-group-interface::, *note grob-interface::, *note
outside-staff-interface::, *note side-position-interface:: and *note
spanner-interface::.


File: lilypond-internals.info,  Node: BassFigureBracket,  Next: BassFigureContinuation,  Prev: BassFigureAlignmentPositioning,  Up: All layout objects

3.1.16 BassFigureBracket
------------------------

BassFigureBracket objects are created by: *note Figured_bass_engraver::.

   Standard settings:

     ‘edge-height’ (pair):
          '(0.2 . 0.2)

          A pair of numbers specifying the heights of the vertical
          edges: ‘(LEFT-HEIGHT . RIGHT-HEIGHT)’.

     ‘stencil’ (stencil):
          ‘ly:enclosing-bracket::print’

          The symbol to print.

     ‘X-extent’ (pair of numbers):
          ‘ly:enclosing-bracket::width’

          Extent (size) in the X direction, measured in staff-space
          units, relative to object’s reference point.

   This object supports the following interface(s): *note
enclosing-bracket-interface::, *note grob-interface:: and *note
item-interface::.


File: lilypond-internals.info,  Node: BassFigureContinuation,  Next: BassFigureLine,  Prev: BassFigureBracket,  Up: All layout objects

3.1.17 BassFigureContinuation
-----------------------------

BassFigureContinuation objects are created by: *note
Figured_bass_engraver::.

   Standard settings:

     ‘stencil’ (stencil):
          ‘ly:figured-bass-continuation::print’

          The symbol to print.

     ‘Y-offset’ (number):
          ‘ly:figured-bass-continuation::center-on-figures’

          The vertical amount that this object is moved relative to its
          Y-parent.

   This object supports the following interface(s): *note
figured-bass-continuation-interface::, *note grob-interface:: and *note
spanner-interface::.


File: lilypond-internals.info,  Node: BassFigureLine,  Next: Beam,  Prev: BassFigureContinuation,  Up: All layout objects

3.1.18 BassFigureLine
---------------------

BassFigureLine objects are created by: *note Figured_bass_engraver::.

   Standard settings:

     ‘axes’ (list):
          '(1)

          List of axis numbers.  In the case of alignment grobs, this
          should contain only one number.

     ‘vertical-skylines’ (pair of skylines):
          ‘ly:axis-group-interface::calc-skylines’

          Two skylines, one above and one below this grob.

     ‘X-extent’ (pair of numbers):
          ‘ly:axis-group-interface::width’

          Extent (size) in the X direction, measured in staff-space
          units, relative to object’s reference point.

     ‘Y-extent’ (pair of numbers):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:axis-group-interface::height> #<primitive-procedure
          ly:axis-group-interface::pure-height> >’

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

   This object supports the following interface(s): *note
axis-group-interface::, *note grob-interface::, *note
outside-staff-axis-group-interface:: and *note spanner-interface::.


File: lilypond-internals.info,  Node: Beam,  Next: BendAfter,  Prev: BassFigureLine,  Up: All layout objects

3.1.19 Beam
-----------

Beam objects are created by: *note Auto_beam_engraver::, *note
Beam_engraver::, *note Chord_tremolo_engraver::, *note
Grace_auto_beam_engraver:: and *note Grace_beam_engraver::.

   Standard settings:

     ‘auto-knee-gap’ (dimension, in staff space):
          ‘5.5’

          If a gap is found between note heads where a horizontal beam
          fits that is larger than this number, make a kneed beam.

     ‘beam-thickness’ (dimension, in staff space):
          ‘0.48’

          Beam thickness, measured in ‘staff-space’ units.

     ‘beamed-stem-shorten’ (list):
          '(1.0 0.5 0.25)

          How much to shorten beamed stems, when their direction is
          forced.  It is a list, since the value is different depending
          on the number of flags and beams.

     ‘beaming’ (pair):
          ‘ly:beam::calc-beaming’

          Pair of number lists.  Each number list specifies which beams
          to make.  ‘0’ is the central beam, ‘1’ is the next beam toward
          the note, etc.  This information is used to determine how to
          connect the beaming patterns from stem to stem inside a beam.

     ‘clip-edges’ (boolean):
          ‘#t’

          Allow outward pointing beamlets at the edges of beams?

     ‘collision-interfaces’ (list):
          '(beam-interface
             clef-interface
             clef-modifier-interface
             flag-interface
             inline-accidental-interface
             key-signature-interface
             note-head-interface
             stem-interface
             time-signature-interface)

          A list of interfaces for which automatic beam-collision
          resolution is run.

     ‘damping’ (number):
          ‘1’

          Amount of beam slope damping.

     ‘details’ (list):
          '((secondary-beam-demerit . 10)
            (stem-length-demerit-factor . 5)
            (region-size . 2)
            (beam-eps . 0.001)
            (stem-length-limit-penalty . 5000)
            (damping-direction-penalty . 800)
            (hint-direction-penalty . 20)
            (musical-direction-factor . 400)
            (ideal-slope-factor . 10)
            (collision-penalty . 500)
            (collision-padding . 0.35)
            (round-to-zero-slope . 0.02))

          Alist of parameters for detailed grob behavior.  More
          information on the allowed parameters for a grob can be found
          by looking at the top of the Internals Reference page for each
          interface having a ‘details’ property.

     ‘direction’ (direction):
          ‘ly:beam::calc-direction’

          If ‘side-axis’ is ‘0’ (or ‘X’), then this property determines
          whether the object is placed ‘LEFT’, ‘CENTER’ or ‘RIGHT’ with
          respect to the other object.  Otherwise, it determines whether
          the object is placed ‘UP’, ‘CENTER’ or ‘DOWN’.  Numerical
          values may also be used: ‘UP’=‘1’, ‘DOWN’=‘-1’, ‘LEFT’=‘-1’,
          ‘RIGHT’=‘1’, ‘CENTER’=‘0’.

     ‘font-family’ (symbol):
          ‘'roman’

          The font family is the broadest category for selecting text
          fonts.  Options include: ‘sans’, ‘roman’.

     ‘gap’ (dimension, in staff space):
          ‘0.8’

          Size of a gap in a variable symbol.

     ‘neutral-direction’ (direction):
          ‘-1’

          Which direction to take in the center of the staff.

     ‘normalized-endpoints’ (pair):
          ‘ly:spanner::calc-normalized-endpoints’

          Represents left and right placement over the total spanner,
          where the width of the spanner is normalized between 0 and 1.

     ‘positions’ (pair of numbers):
          ‘beam::place-broken-parts-individually’

          Pair of staff coordinates ‘(LEFT . RIGHT)’, where both LEFT
          and RIGHT are in ‘staff-space’ units of the current staff.
          For slurs, this value selects which slur candidate to use; if
          extreme positions are requested, the closest one is taken.

     ‘stencil’ (stencil):
          ‘ly:beam::print’

          The symbol to print.

     ‘transparent’ (boolean):
          ‘#<procedure #f (grob)>’

          This makes the grob invisible.

     ‘vertical-skylines’ (pair of skylines):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::vertical-skylines-from-stencil> #<primitive-procedure
          ly:grob::pure-simple-vertical-skylines-from-extents> >’

          Two skylines, one above and one below this grob.

     ‘X-positions’ (pair of numbers):
          ‘ly:beam::calc-x-positions’

          Pair of X staff coordinates of a spanner in the form ‘(LEFT .
          RIGHT)’, where both LEFT and RIGHT are in ‘staff-space’ units
          of the current staff.

   This object supports the following interface(s): *note
beam-interface::, *note font-interface::, *note grob-interface::, *note
spanner-interface::, *note staff-symbol-referencer-interface:: and *note
unbreakable-spanner-interface::.


File: lilypond-internals.info,  Node: BendAfter,  Next: BreakAlignGroup,  Prev: Beam,  Up: All layout objects

3.1.20 BendAfter
----------------

BendAfter objects are created by: *note Bend_engraver::.

   Standard settings:

     ‘minimum-length’ (dimension, in staff space):
          ‘0.5’

          Try to make a spanner at least this long, normally in the
          horizontal direction.  This requires an appropriate callback
          for the ‘springs-and-rods’ property.  If added to a ‘Tie’,
          this sets the minimum distance between noteheads.

     ‘stencil’ (stencil):
          ‘bend::print’

          The symbol to print.

     ‘thickness’ (number):
          ‘2.0’

          For grobs made up of lines, this is the thickness of the line.
          For slurs and ties, this is the distance between the two arcs
          of the curve’s outline at its thickest point, not counting the
          diameter of the virtual “pen” that draws the arcs.  This
          property is expressed as a multiple of the current staff-line
          thickness (i.e.  the visual output is influenced by changes to
          ‘STAFF.StaffSymbol.thickness’).

   This object supports the following interface(s): *note
bend-after-interface::, *note grob-interface:: and *note
spanner-interface::.


File: lilypond-internals.info,  Node: BreakAlignGroup,  Next: BreakAlignment,  Prev: BendAfter,  Up: All layout objects

3.1.21 BreakAlignGroup
----------------------

BreakAlignGroup objects are created by: *note Break_align_engraver::.

   Standard settings:

     ‘axes’ (list):
          '(0)

          List of axis numbers.  In the case of alignment grobs, this
          should contain only one number.

     ‘break-align-anchor’ (number):
          ‘ly:break-aligned-interface::calc-average-anchor’

          Grobs aligned to this breakable item will have their X-offsets
          shifted by this number.  In bar lines, for example, this is
          used to position grobs relative to the (visual) center of the
          bar line.

     ‘break-visibility’ (vector):
          ‘ly:break-aligned-interface::calc-break-visibility’

          A vector of 3 booleans,
          ‘#(END-OF-LINE UNBROKEN BEGIN-OF-LINE)’.  ‘#t’ means visible,
          ‘#f’ means killed.

     ‘X-extent’ (pair of numbers):
          ‘ly:axis-group-interface::width’

          Extent (size) in the X direction, measured in staff-space
          units, relative to object’s reference point.

   This object supports the following interface(s): *note
axis-group-interface::, *note break-aligned-interface::, *note
grob-interface:: and *note item-interface::.


File: lilypond-internals.info,  Node: BreakAlignment,  Next: BreathingSign,  Prev: BreakAlignGroup,  Up: All layout objects

3.1.22 BreakAlignment
---------------------

BreakAlignment objects are created by: *note Break_align_engraver::.

   Standard settings:

     ‘axes’ (list):
          '(0)

          List of axis numbers.  In the case of alignment grobs, this
          should contain only one number.

     ‘break-align-orders’ (vector):
          #((left-edge
              cue-end-clef
              ambitus
              breathing-sign
              clef
              cue-clef
              staff-bar
              key-cancellation
              key-signature
              time-signature
              custos)
            (left-edge
              cue-end-clef
              ambitus
              breathing-sign
              clef
              cue-clef
              staff-bar
              key-cancellation
              key-signature
              time-signature
              custos)
            (left-edge
              ambitus
              breathing-sign
              clef
              key-cancellation
              key-signature
              time-signature
              staff-bar
              cue-clef
              custos))

          This is a vector of 3 lists:
          ‘#(END-OF-LINE UNBROKEN START-OF-LINE’).  Each list contains
          _break-align symbols_ that specify an order of breakable items
          (see *note (lilypond-internals)break-alignment-interface::).

          For example, this places time signatures before clefs:

               \override Score.BreakAlignment.break-align-orders =
                 #(make-vector 3 '(left-edge
                                   cue-end-clef
                                   ambitus
                                   breathing-sign
                                   time-signature
                                   clef
                                   cue-clef
                                   staff-bar
                                   key-cancellation
                                   key-signature
                                   custos))

     ‘non-musical’ (boolean):
          ‘#t’

          True if the grob belongs to a ‘NonMusicalPaperColumn’.

     ‘stacking-dir’ (direction):
          ‘1’

          Stack objects in which direction?

     ‘X-extent’ (pair of numbers):
          ‘ly:axis-group-interface::width’

          Extent (size) in the X direction, measured in staff-space
          units, relative to object’s reference point.

   This object supports the following interface(s): *note
axis-group-interface::, *note break-alignment-interface::, *note
grob-interface:: and *note item-interface::.


File: lilypond-internals.info,  Node: BreathingSign,  Next: ChordName,  Prev: BreakAlignment,  Up: All layout objects

3.1.23 BreathingSign
--------------------

BreathingSign objects are created by: *note Breathing_sign_engraver::.

   Standard settings:

     ‘break-align-symbol’ (symbol):
          ‘'breathing-sign’

          This key is used for aligning, ordering, and spacing breakable
          items.  See *note
          (lilypond-internals)break-alignment-interface::.

     ‘break-visibility’ (vector):
          #(#t #t #f)

          A vector of 3 booleans,
          ‘#(END-OF-LINE UNBROKEN BEGIN-OF-LINE)’.  ‘#t’ means visible,
          ‘#f’ means killed.

     ‘non-musical’ (boolean):
          ‘#t’

          True if the grob belongs to a ‘NonMusicalPaperColumn’.

     ‘space-alist’ (list):
          '((ambitus extra-space . 2.0)
            (custos minimum-space . 1.0)
            (key-signature minimum-space . 1.5)
            (time-signature minimum-space . 1.5)
            (staff-bar minimum-space . 1.5)
            (clef minimum-space . 2.0)
            (cue-clef minimum-space . 2.0)
            (cue-end-clef minimum-space . 2.0)
            (first-note fixed-space . 1.0)
            (right-edge extra-space . 0.1))

          An alist that specifies distances from this grob to other
          breakable items, using the format:

               '((BREAK-ALIGN-SYMBOL . (SPACING-STYLE . SPACE))
                 (BREAK-ALIGN-SYMBOL . (SPACING-STYLE . SPACE))
                 ...)

          Standard choices for ‘BREAK-ALIGN-SYMBOL’ are listed in *note
          (lilypond-internals)break-alignment-interface::.
          Additionally, three special break-align symbols available to
          ‘space-alist’ are:

               ‘first-note’
                    used when the grob is just left of the first note on
                    a line

               ‘next-note’
                    used when the grob is just left of any other note;
                    if not set, the value of ‘first-note’ gets used

               ‘right-edge’
                    used when the grob is the last item on the line
                    (only compatible with the ‘extra-space’ spacing
                    style)

          Choices for ‘SPACING-STYLE’ are:

               ‘extra-space’
                    Put this much space between the two grobs.  The
                    space is stretchable when paired with ‘first-note’
                    or ‘next-note’; otherwise it is fixed.

               ‘minimum-space’
                    Put at least this much space between the left sides
                    of both grobs, without allowing them to collide.
                    The space is stretchable when paired with
                    ‘first-note’ or ‘next-note’; otherwise it is fixed.
                    Not compatible with ‘right-edge’.

               ‘fixed-space’
                    Only compatible with ‘first-note’ and ‘next-note’.
                    Put this much fixed space between the grob and the
                    note.

               ‘minimum-fixed-space’
                    Only compatible with ‘first-note’ and ‘next-note’.
                    Put at least this much fixed space between the left
                    side of the grob and the left side of the note,
                    without allowing them to collide.

               ‘semi-fixed-space’
                    Only compatible with ‘first-note’ and ‘next-note’.
                    Put this much space between the grob and the note,
                    such that half of the space is fixed and half is
                    stretchable.

          Rules for this spacing are much more complicated than this.
          See [Wanske] page 126–134, [Ross] page 143–147.

     ‘stencil’ (stencil):
          ‘ly:text-interface::print’

          The symbol to print.

     ‘text’ (markup):
          '(#<procedure musicglyph-markup (layout props glyph-name)>
            "scripts.rcomma")

          Text markup.  See *note (lilypond-notation)Formatting text::.

     ‘Y-extent’ (pair of numbers):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::stencil-height> >’

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

     ‘Y-offset’ (number):
          ‘ly:breathing-sign::offset-callback’

          The vertical amount that this object is moved relative to its
          Y-parent.

   This object supports the following interface(s): *note
break-aligned-interface::, *note breathing-sign-interface::, *note
font-interface::, *note grob-interface::, *note item-interface::, *note
outside-staff-interface:: and *note text-interface::.


File: lilypond-internals.info,  Node: ChordName,  Next: Clef,  Prev: BreathingSign,  Up: All layout objects

3.1.24 ChordName
----------------

ChordName objects are created by: *note Chord_name_engraver::.

   Standard settings:

     ‘after-line-breaking’ (boolean):
          ‘ly:chord-name::after-line-breaking’

          Dummy property, used to trigger callback for
          ‘after-line-breaking’.

     ‘extra-spacing-height’ (pair of numbers):
          '(0.2 . -0.2)

          In the horizontal spacing problem, we increase the height of
          each item by this amount (by adding the ‘car’ to the bottom of
          the item and adding the ‘cdr’ to the top of the item).  In
          order to make a grob infinitely high (to prevent the
          horizontal spacing problem from placing any other grobs above
          or below this grob), set this to ‘(-inf.0 . +inf.0)’.

     ‘extra-spacing-width’ (pair of numbers):
          '(-0.5 . 0.5)

          In the horizontal spacing problem, we pad each item by this
          amount (by adding the ‘car’ on the left side of the item and
          adding the ‘cdr’ on the right side of the item).  In order to
          make a grob take up no horizontal space at all, set this to
          ‘(+inf.0 . -inf.0)’.

     ‘font-family’ (symbol):
          ‘'sans’

          The font family is the broadest category for selecting text
          fonts.  Options include: ‘sans’, ‘roman’.

     ‘font-size’ (number):
          ‘1.5’

          The font size, compared to the ‘normal’ size.  ‘0’ is
          style-sheet’s normal size, ‘-1’ is smaller, ‘+1’ is bigger.
          Each step of 1 is approximately 12% larger; 6 steps are
          exactly a factor 2 larger.  If the context property ‘fontSize’
          is set, its value is added to this before the glyph is
          printed.  Fractional values are allowed.

     ‘stencil’ (stencil):
          ‘ly:text-interface::print’

          The symbol to print.

     ‘word-space’ (dimension, in staff space):
          ‘0.0’

          Space to insert between words in texts.

     ‘Y-extent’ (pair of numbers):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::stencil-height> >’

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

   This object supports the following interface(s): *note
chord-name-interface::, *note font-interface::, *note grob-interface::,
*note item-interface::, *note outside-staff-interface::, *note
rhythmic-grob-interface:: and *note text-interface::.


File: lilypond-internals.info,  Node: Clef,  Next: ClefModifier,  Prev: ChordName,  Up: All layout objects

3.1.25 Clef
-----------

Clef objects are created by: *note Clef_engraver::.

   Standard settings:

     ‘avoid-slur’ (symbol):
          ‘'inside’

          Method of handling slur collisions.  Choices are ‘inside’,
          ‘outside’, ‘around’, and ‘ignore’.  ‘inside’ adjusts the slur
          if needed to keep the grob inside the slur.  ‘outside’ moves
          the grob vertically to the outside of the slur.  ‘around’
          moves the grob vertically to the outside of the slur only if
          there is a collision.  ‘ignore’ does not move either.  In
          grobs whose notational significance depends on vertical
          position (such as accidentals, clefs, etc.), ‘outside’ and
          ‘around’ behave like ‘ignore’.

     ‘break-align-anchor’ (number):
          ‘ly:break-aligned-interface::calc-extent-aligned-anchor’

          Grobs aligned to this breakable item will have their X-offsets
          shifted by this number.  In bar lines, for example, this is
          used to position grobs relative to the (visual) center of the
          bar line.

     ‘break-align-anchor-alignment’ (number):
          ‘1’

          Read by
          ‘ly:break-aligned-interface::calc-extent-aligned-anchor’ for
          aligning an anchor to a grob’s extent.

     ‘break-align-symbol’ (symbol):
          ‘'clef’

          This key is used for aligning, ordering, and spacing breakable
          items.  See *note
          (lilypond-internals)break-alignment-interface::.

     ‘break-visibility’ (vector):
          #(#f #f #t)

          A vector of 3 booleans,
          ‘#(END-OF-LINE UNBROKEN BEGIN-OF-LINE)’.  ‘#t’ means visible,
          ‘#f’ means killed.

     ‘extra-spacing-height’ (pair of numbers):
          ‘pure-from-neighbor-interface::extra-spacing-height-at-beginning-of-line’

          In the horizontal spacing problem, we increase the height of
          each item by this amount (by adding the ‘car’ to the bottom of
          the item and adding the ‘cdr’ to the top of the item).  In
          order to make a grob infinitely high (to prevent the
          horizontal spacing problem from placing any other grobs above
          or below this grob), set this to ‘(-inf.0 . +inf.0)’.

     ‘glyph-name’ (string):
          ‘ly:clef::calc-glyph-name’

          The glyph name within the font.

          In the context of (span) bar lines, GLYPH-NAME represents a
          processed form of ‘glyph’, where decisions about line breaking
          etc.  are already taken.

     ‘non-musical’ (boolean):
          ‘#t’

          True if the grob belongs to a ‘NonMusicalPaperColumn’.

     ‘space-alist’ (list):
          '((cue-clef extra-space . 2.0)
            (staff-bar extra-space . 0.7)
            (key-cancellation minimum-space . 3.5)
            (key-signature minimum-space . 3.5)
            (time-signature minimum-space . 4.2)
            (first-note minimum-fixed-space . 5.0)
            (next-note extra-space . 1.0)
            (right-edge extra-space . 0.5))

          An alist that specifies distances from this grob to other
          breakable items, using the format:

               '((BREAK-ALIGN-SYMBOL . (SPACING-STYLE . SPACE))
                 (BREAK-ALIGN-SYMBOL . (SPACING-STYLE . SPACE))
                 ...)

          Standard choices for ‘BREAK-ALIGN-SYMBOL’ are listed in *note
          (lilypond-internals)break-alignment-interface::.
          Additionally, three special break-align symbols available to
          ‘space-alist’ are:

               ‘first-note’
                    used when the grob is just left of the first note on
                    a line

               ‘next-note’
                    used when the grob is just left of any other note;
                    if not set, the value of ‘first-note’ gets used

               ‘right-edge’
                    used when the grob is the last item on the line
                    (only compatible with the ‘extra-space’ spacing
                    style)

          Choices for ‘SPACING-STYLE’ are:

               ‘extra-space’
                    Put this much space between the two grobs.  The
                    space is stretchable when paired with ‘first-note’
                    or ‘next-note’; otherwise it is fixed.

               ‘minimum-space’
                    Put at least this much space between the left sides
                    of both grobs, without allowing them to collide.
                    The space is stretchable when paired with
                    ‘first-note’ or ‘next-note’; otherwise it is fixed.
                    Not compatible with ‘right-edge’.

               ‘fixed-space’
                    Only compatible with ‘first-note’ and ‘next-note’.
                    Put this much fixed space between the grob and the
                    note.

               ‘minimum-fixed-space’
                    Only compatible with ‘first-note’ and ‘next-note’.
                    Put at least this much fixed space between the left
                    side of the grob and the left side of the note,
                    without allowing them to collide.

               ‘semi-fixed-space’
                    Only compatible with ‘first-note’ and ‘next-note’.
                    Put this much space between the grob and the note,
                    such that half of the space is fixed and half is
                    stretchable.

          Rules for this spacing are much more complicated than this.
          See [Wanske] page 126–134, [Ross] page 143–147.

     ‘stencil’ (stencil):
          ‘ly:clef::print’

          The symbol to print.

     ‘vertical-skylines’ (pair of skylines):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::vertical-skylines-from-stencil> >’

          Two skylines, one above and one below this grob.

     ‘Y-extent’ (pair of numbers):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::stencil-height> >’

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

     ‘Y-offset’ (number):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:staff-symbol-referencer::callback> >’

          The vertical amount that this object is moved relative to its
          Y-parent.

   This object supports the following interface(s): *note
break-aligned-interface::, *note clef-interface::, *note
font-interface::, *note grob-interface::, *note item-interface::, *note
pure-from-neighbor-interface:: and *note
staff-symbol-referencer-interface::.


File: lilypond-internals.info,  Node: ClefModifier,  Next: ClusterSpanner,  Prev: Clef,  Up: All layout objects

3.1.26 ClefModifier
-------------------

ClefModifier objects are created by: *note Clef_engraver:: and *note
Cue_clef_engraver::.

   Standard settings:

     ‘break-visibility’ (vector):
          ‘#<procedure #f (grob)>’

          A vector of 3 booleans,
          ‘#(END-OF-LINE UNBROKEN BEGIN-OF-LINE)’.  ‘#t’ means visible,
          ‘#f’ means killed.

     ‘clef-alignments’ (list):
          '((G -0.2 . 0.1) (F -0.3 . -0.2) (C 0 . 0))

          An alist of parent-alignments that should be used for clef
          modifiers with various clefs

     ‘color’ (color):
          ‘#<procedure #f (grob)>’

          The color of this grob.

     ‘font-shape’ (symbol):
          ‘'italic’

          Select the shape of a font.  Choices include ‘upright’,
          ‘italic’, ‘caps’.

     ‘font-size’ (number):
          ‘-4’

          The font size, compared to the ‘normal’ size.  ‘0’ is
          style-sheet’s normal size, ‘-1’ is smaller, ‘+1’ is bigger.
          Each step of 1 is approximately 12% larger; 6 steps are
          exactly a factor 2 larger.  If the context property ‘fontSize’
          is set, its value is added to this before the glyph is
          printed.  Fractional values are allowed.

     ‘parent-alignment-X’ (number):
          ‘ly:clef-modifier::calc-parent-alignment’

          Specify on which point of the parent the object is aligned.
          The value ‘-1’ means aligned on parent’s left edge,
          ‘0’ on center, and ‘1’ right edge, in X direction.  Other
          numerical values may also be specified - the unit is half the
          parent’s width.  If unset, the value from ‘self-alignment-X’
          property will be used.

     ‘self-alignment-X’ (number):
          ‘0’

          Specify alignment of an object.  The value ‘-1’ means left
          aligned, ‘0’ centered, and ‘1’ right-aligned in X direction.
          Other numerical values may also be specified - the unit is
          half the object width.

     ‘staff-padding’ (dimension, in staff space):
          ‘0.7’

          Maintain this much space between reference points and the
          staff.  Its effect is to align objects of differing sizes
          (like the dynamics p and f) on their baselines.

     ‘stencil’ (stencil):
          ‘ly:text-interface::print’

          The symbol to print.

     ‘transparent’ (boolean):
          ‘#<procedure #f (grob)>’

          This makes the grob invisible.

     ‘vertical-skylines’ (pair of skylines):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::vertical-skylines-from-stencil> >’

          Two skylines, one above and one below this grob.

     ‘X-offset’ (number):
          ‘ly:self-alignment-interface::aligned-on-x-parent’

          The horizontal amount that this object is moved relative to
          its X-parent.

     ‘Y-extent’ (pair of numbers):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::stencil-height> >’

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

     ‘Y-offset’ (number):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:side-position-interface::y-aligned-side>
          #<primitive-procedure
          ly:side-position-interface::pure-y-aligned-side> >’

          The vertical amount that this object is moved relative to its
          Y-parent.

   This object supports the following interface(s): *note
clef-modifier-interface::, *note font-interface::, *note
grob-interface::, *note item-interface::, *note
outside-staff-interface::, *note self-alignment-interface::, *note
side-position-interface:: and *note text-interface::.


File: lilypond-internals.info,  Node: ClusterSpanner,  Next: ClusterSpannerBeacon,  Prev: ClefModifier,  Up: All layout objects

3.1.27 ClusterSpanner
---------------------

ClusterSpanner objects are created by: *note Cluster_spanner_engraver::.

   Standard settings:

     ‘minimum-length’ (dimension, in staff space):
          ‘0.0’

          Try to make a spanner at least this long, normally in the
          horizontal direction.  This requires an appropriate callback
          for the ‘springs-and-rods’ property.  If added to a ‘Tie’,
          this sets the minimum distance between noteheads.

     ‘padding’ (dimension, in staff space):
          ‘0.25’

          Add this much extra space between objects that are next to
          each other.

     ‘springs-and-rods’ (boolean):
          ‘ly:spanner::set-spacing-rods’

          Dummy variable for triggering spacing routines.

     ‘stencil’ (stencil):
          ‘ly:cluster::print’

          The symbol to print.

     ‘style’ (symbol):
          ‘'ramp’

          This setting determines in what style a grob is typeset.
          Valid choices depend on the ‘stencil’ callback reading this
          property.

   This object supports the following interface(s): *note
cluster-interface::, *note grob-interface:: and *note
spanner-interface::.


File: lilypond-internals.info,  Node: ClusterSpannerBeacon,  Next: CombineTextScript,  Prev: ClusterSpanner,  Up: All layout objects

3.1.28 ClusterSpannerBeacon
---------------------------

ClusterSpannerBeacon objects are created by: *note
Cluster_spanner_engraver::.

   Standard settings:

     ‘Y-extent’ (pair of numbers):
          ‘ly:cluster-beacon::height’

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

   This object supports the following interface(s): *note
cluster-beacon-interface::, *note grob-interface::, *note
item-interface:: and *note rhythmic-grob-interface::.


File: lilypond-internals.info,  Node: CombineTextScript,  Next: CueClef,  Prev: ClusterSpannerBeacon,  Up: All layout objects

3.1.29 CombineTextScript
------------------------

CombineTextScript objects are created by: *note Part_combine_engraver::.

   Standard settings:

     ‘avoid-slur’ (symbol):
          ‘'outside’

          Method of handling slur collisions.  Choices are ‘inside’,
          ‘outside’, ‘around’, and ‘ignore’.  ‘inside’ adjusts the slur
          if needed to keep the grob inside the slur.  ‘outside’ moves
          the grob vertically to the outside of the slur.  ‘around’
          moves the grob vertically to the outside of the slur only if
          there is a collision.  ‘ignore’ does not move either.  In
          grobs whose notational significance depends on vertical
          position (such as accidentals, clefs, etc.), ‘outside’ and
          ‘around’ behave like ‘ignore’.

     ‘baseline-skip’ (dimension, in staff space):
          ‘2’

          Distance between base lines of multiple lines of text.

     ‘direction’ (direction):
          ‘1’

          If ‘side-axis’ is ‘0’ (or ‘X’), then this property determines
          whether the object is placed ‘LEFT’, ‘CENTER’ or ‘RIGHT’ with
          respect to the other object.  Otherwise, it determines whether
          the object is placed ‘UP’, ‘CENTER’ or ‘DOWN’.  Numerical
          values may also be used: ‘UP’=‘1’, ‘DOWN’=‘-1’, ‘LEFT’=‘-1’,
          ‘RIGHT’=‘1’, ‘CENTER’=‘0’.

     ‘extra-spacing-width’ (pair of numbers):
          '(+inf.0 . -inf.0)

          In the horizontal spacing problem, we pad each item by this
          amount (by adding the ‘car’ on the left side of the item and
          adding the ‘cdr’ on the right side of the item).  In order to
          make a grob take up no horizontal space at all, set this to
          ‘(+inf.0 . -inf.0)’.

     ‘font-series’ (symbol):
          ‘'bold’

          Select the series of a font.  Choices include ‘medium’,
          ‘bold’, ‘bold-narrow’, etc.

     ‘outside-staff-priority’ (number):
          ‘450’

          If set, the grob is positioned outside the staff in such a way
          as to avoid all collisions.  In case of a potential collision,
          the grob with the smaller ‘outside-staff-priority’ is closer
          to the staff.

     ‘padding’ (dimension, in staff space):
          ‘0.5’

          Add this much extra space between objects that are next to
          each other.

     ‘parent-alignment-X’ (number)
          Specify on which point of the parent the object is aligned.
          The value ‘-1’ means aligned on parent’s left edge,
          ‘0’ on center, and ‘1’ right edge, in X direction.  Other
          numerical values may also be specified - the unit is half the
          parent’s width.  If unset, the value from ‘self-alignment-X’
          property will be used.

     ‘script-priority’ (number):
          ‘200’

          A key for determining the order of scripts in a stack, by
          being added to the position of the script in the user input,
          the sum being the overall priority.  Smaller means closer to
          the head.

     ‘self-alignment-X’ (number)
          Specify alignment of an object.  The value ‘-1’ means left
          aligned, ‘0’ centered, and ‘1’ right-aligned in X direction.
          Other numerical values may also be specified - the unit is
          half the object width.

     ‘side-axis’ (number):
          ‘1’

          If the value is ‘X’ (or equivalently ‘0’), the object is
          placed horizontally next to the other object.  If the value is
          ‘Y’ or ‘1’, it is placed vertically.

     ‘staff-padding’ (dimension, in staff space):
          ‘0.5’

          Maintain this much space between reference points and the
          staff.  Its effect is to align objects of differing sizes
          (like the dynamics p and f) on their baselines.

     ‘stencil’ (stencil):
          ‘ly:text-interface::print’

          The symbol to print.

     ‘X-offset’ (number):
          ‘ly:self-alignment-interface::aligned-on-x-parent’

          The horizontal amount that this object is moved relative to
          its X-parent.

     ‘Y-extent’ (pair of numbers):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::stencil-height> >’

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

     ‘Y-offset’ (number):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:side-position-interface::y-aligned-side>
          #<primitive-procedure
          ly:side-position-interface::pure-y-aligned-side> >’

          The vertical amount that this object is moved relative to its
          Y-parent.

   This object supports the following interface(s): *note
font-interface::, *note grob-interface::, *note item-interface::, *note
outside-staff-interface::, *note self-alignment-interface::, *note
side-position-interface::, *note text-interface:: and *note
text-script-interface::.


File: lilypond-internals.info,  Node: CueClef,  Next: CueEndClef,  Prev: CombineTextScript,  Up: All layout objects

3.1.30 CueClef
--------------

CueClef objects are created by: *note Cue_clef_engraver::.

   Standard settings:

     ‘avoid-slur’ (symbol):
          ‘'inside’

          Method of handling slur collisions.  Choices are ‘inside’,
          ‘outside’, ‘around’, and ‘ignore’.  ‘inside’ adjusts the slur
          if needed to keep the grob inside the slur.  ‘outside’ moves
          the grob vertically to the outside of the slur.  ‘around’
          moves the grob vertically to the outside of the slur only if
          there is a collision.  ‘ignore’ does not move either.  In
          grobs whose notational significance depends on vertical
          position (such as accidentals, clefs, etc.), ‘outside’ and
          ‘around’ behave like ‘ignore’.

     ‘break-align-anchor’ (number):
          ‘ly:break-aligned-interface::calc-extent-aligned-anchor’

          Grobs aligned to this breakable item will have their X-offsets
          shifted by this number.  In bar lines, for example, this is
          used to position grobs relative to the (visual) center of the
          bar line.

     ‘break-align-symbol’ (symbol):
          ‘'cue-clef’

          This key is used for aligning, ordering, and spacing breakable
          items.  See *note
          (lilypond-internals)break-alignment-interface::.

     ‘break-visibility’ (vector):
          #(#f #f #t)

          A vector of 3 booleans,
          ‘#(END-OF-LINE UNBROKEN BEGIN-OF-LINE)’.  ‘#t’ means visible,
          ‘#f’ means killed.

     ‘extra-spacing-height’ (pair of numbers):
          ‘pure-from-neighbor-interface::extra-spacing-height-at-beginning-of-line’

          In the horizontal spacing problem, we increase the height of
          each item by this amount (by adding the ‘car’ to the bottom of
          the item and adding the ‘cdr’ to the top of the item).  In
          order to make a grob infinitely high (to prevent the
          horizontal spacing problem from placing any other grobs above
          or below this grob), set this to ‘(-inf.0 . +inf.0)’.

     ‘font-size’ (number):
          ‘-4’

          The font size, compared to the ‘normal’ size.  ‘0’ is
          style-sheet’s normal size, ‘-1’ is smaller, ‘+1’ is bigger.
          Each step of 1 is approximately 12% larger; 6 steps are
          exactly a factor 2 larger.  If the context property ‘fontSize’
          is set, its value is added to this before the glyph is
          printed.  Fractional values are allowed.

     ‘full-size-change’ (boolean):
          ‘#t’

          Don’t make a change clef smaller.

     ‘glyph-name’ (string):
          ‘ly:clef::calc-glyph-name’

          The glyph name within the font.

          In the context of (span) bar lines, GLYPH-NAME represents a
          processed form of ‘glyph’, where decisions about line breaking
          etc.  are already taken.

     ‘non-musical’ (boolean):
          ‘#t’

          True if the grob belongs to a ‘NonMusicalPaperColumn’.

     ‘space-alist’ (list):
          '((staff-bar minimum-space . 2.7)
            (key-cancellation minimum-space . 3.5)
            (key-signature minimum-space . 3.5)
            (time-signature minimum-space . 4.2)
            (custos minimum-space . 0.0)
            (first-note minimum-fixed-space . 3.0)
            (next-note extra-space . 1.0)
            (right-edge extra-space . 0.5))

          An alist that specifies distances from this grob to other
          breakable items, using the format:

               '((BREAK-ALIGN-SYMBOL . (SPACING-STYLE . SPACE))
                 (BREAK-ALIGN-SYMBOL . (SPACING-STYLE . SPACE))
                 ...)

          Standard choices for ‘BREAK-ALIGN-SYMBOL’ are listed in *note
          (lilypond-internals)break-alignment-interface::.
          Additionally, three special break-align symbols available to
          ‘space-alist’ are:

               ‘first-note’
                    used when the grob is just left of the first note on
                    a line

               ‘next-note’
                    used when the grob is just left of any other note;
                    if not set, the value of ‘first-note’ gets used

               ‘right-edge’
                    used when the grob is the last item on the line
                    (only compatible with the ‘extra-space’ spacing
                    style)

          Choices for ‘SPACING-STYLE’ are:

               ‘extra-space’
                    Put this much space between the two grobs.  The
                    space is stretchable when paired with ‘first-note’
                    or ‘next-note’; otherwise it is fixed.

               ‘minimum-space’
                    Put at least this much space between the left sides
                    of both grobs, without allowing them to collide.
                    The space is stretchable when paired with
                    ‘first-note’ or ‘next-note’; otherwise it is fixed.
                    Not compatible with ‘right-edge’.

               ‘fixed-space’
                    Only compatible with ‘first-note’ and ‘next-note’.
                    Put this much fixed space between the grob and the
                    note.

               ‘minimum-fixed-space’
                    Only compatible with ‘first-note’ and ‘next-note’.
                    Put at least this much fixed space between the left
                    side of the grob and the left side of the note,
                    without allowing them to collide.

               ‘semi-fixed-space’
                    Only compatible with ‘first-note’ and ‘next-note’.
                    Put this much space between the grob and the note,
                    such that half of the space is fixed and half is
                    stretchable.

          Rules for this spacing are much more complicated than this.
          See [Wanske] page 126–134, [Ross] page 143–147.

     ‘stencil’ (stencil):
          ‘ly:clef::print’

          The symbol to print.

     ‘vertical-skylines’ (pair of skylines):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::vertical-skylines-from-stencil> >’

          Two skylines, one above and one below this grob.

     ‘Y-extent’ (pair of numbers):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::stencil-height> >’

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

     ‘Y-offset’ (number):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:staff-symbol-referencer::callback> >’

          The vertical amount that this object is moved relative to its
          Y-parent.

   This object supports the following interface(s): *note
break-aligned-interface::, *note clef-interface::, *note
font-interface::, *note grob-interface::, *note item-interface::, *note
pure-from-neighbor-interface:: and *note
staff-symbol-referencer-interface::.


File: lilypond-internals.info,  Node: CueEndClef,  Next: Custos,  Prev: CueClef,  Up: All layout objects

3.1.31 CueEndClef
-----------------

CueEndClef objects are created by: *note Cue_clef_engraver::.

   Standard settings:

     ‘avoid-slur’ (symbol):
          ‘'inside’

          Method of handling slur collisions.  Choices are ‘inside’,
          ‘outside’, ‘around’, and ‘ignore’.  ‘inside’ adjusts the slur
          if needed to keep the grob inside the slur.  ‘outside’ moves
          the grob vertically to the outside of the slur.  ‘around’
          moves the grob vertically to the outside of the slur only if
          there is a collision.  ‘ignore’ does not move either.  In
          grobs whose notational significance depends on vertical
          position (such as accidentals, clefs, etc.), ‘outside’ and
          ‘around’ behave like ‘ignore’.

     ‘break-align-anchor’ (number):
          ‘ly:break-aligned-interface::calc-extent-aligned-anchor’

          Grobs aligned to this breakable item will have their X-offsets
          shifted by this number.  In bar lines, for example, this is
          used to position grobs relative to the (visual) center of the
          bar line.

     ‘break-align-symbol’ (symbol):
          ‘'cue-end-clef’

          This key is used for aligning, ordering, and spacing breakable
          items.  See *note
          (lilypond-internals)break-alignment-interface::.

     ‘break-visibility’ (vector):
          #(#t #t #f)

          A vector of 3 booleans,
          ‘#(END-OF-LINE UNBROKEN BEGIN-OF-LINE)’.  ‘#t’ means visible,
          ‘#f’ means killed.

     ‘extra-spacing-height’ (pair of numbers):
          ‘pure-from-neighbor-interface::extra-spacing-height-at-beginning-of-line’

          In the horizontal spacing problem, we increase the height of
          each item by this amount (by adding the ‘car’ to the bottom of
          the item and adding the ‘cdr’ to the top of the item).  In
          order to make a grob infinitely high (to prevent the
          horizontal spacing problem from placing any other grobs above
          or below this grob), set this to ‘(-inf.0 . +inf.0)’.

     ‘font-size’ (number):
          ‘-4’

          The font size, compared to the ‘normal’ size.  ‘0’ is
          style-sheet’s normal size, ‘-1’ is smaller, ‘+1’ is bigger.
          Each step of 1 is approximately 12% larger; 6 steps are
          exactly a factor 2 larger.  If the context property ‘fontSize’
          is set, its value is added to this before the glyph is
          printed.  Fractional values are allowed.

     ‘full-size-change’ (boolean):
          ‘#t’

          Don’t make a change clef smaller.

     ‘glyph-name’ (string):
          ‘ly:clef::calc-glyph-name’

          The glyph name within the font.

          In the context of (span) bar lines, GLYPH-NAME represents a
          processed form of ‘glyph’, where decisions about line breaking
          etc.  are already taken.

     ‘non-musical’ (boolean):
          ‘#t’

          True if the grob belongs to a ‘NonMusicalPaperColumn’.

     ‘space-alist’ (list):
          '((clef extra-space . 0.7)
            (cue-clef extra-space . 0.7)
            (staff-bar extra-space . 0.7)
            (key-cancellation minimum-space . 3.5)
            (key-signature minimum-space . 3.5)
            (time-signature minimum-space . 4.2)
            (first-note minimum-fixed-space . 5.0)
            (next-note extra-space . 1.0)
            (right-edge extra-space . 0.5))

          An alist that specifies distances from this grob to other
          breakable items, using the format:

               '((BREAK-ALIGN-SYMBOL . (SPACING-STYLE . SPACE))
                 (BREAK-ALIGN-SYMBOL . (SPACING-STYLE . SPACE))
                 ...)

          Standard choices for ‘BREAK-ALIGN-SYMBOL’ are listed in *note
          (lilypond-internals)break-alignment-interface::.
          Additionally, three special break-align symbols available to
          ‘space-alist’ are:

               ‘first-note’
                    used when the grob is just left of the first note on
                    a line

               ‘next-note’
                    used when the grob is just left of any other note;
                    if not set, the value of ‘first-note’ gets used

               ‘right-edge’
                    used when the grob is the last item on the line
                    (only compatible with the ‘extra-space’ spacing
                    style)

          Choices for ‘SPACING-STYLE’ are:

               ‘extra-space’
                    Put this much space between the two grobs.  The
                    space is stretchable when paired with ‘first-note’
                    or ‘next-note’; otherwise it is fixed.

               ‘minimum-space’
                    Put at least this much space between the left sides
                    of both grobs, without allowing them to collide.
                    The space is stretchable when paired with
                    ‘first-note’ or ‘next-note’; otherwise it is fixed.
                    Not compatible with ‘right-edge’.

               ‘fixed-space’
                    Only compatible with ‘first-note’ and ‘next-note’.
                    Put this much fixed space between the grob and the
                    note.

               ‘minimum-fixed-space’
                    Only compatible with ‘first-note’ and ‘next-note’.
                    Put at least this much fixed space between the left
                    side of the grob and the left side of the note,
                    without allowing them to collide.

               ‘semi-fixed-space’
                    Only compatible with ‘first-note’ and ‘next-note’.
                    Put this much space between the grob and the note,
                    such that half of the space is fixed and half is
                    stretchable.

          Rules for this spacing are much more complicated than this.
          See [Wanske] page 126–134, [Ross] page 143–147.

     ‘stencil’ (stencil):
          ‘ly:clef::print’

          The symbol to print.

     ‘Y-extent’ (pair of numbers):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::stencil-height> >’

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

     ‘Y-offset’ (number):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:staff-symbol-referencer::callback> >’

          The vertical amount that this object is moved relative to its
          Y-parent.

   This object supports the following interface(s): *note
break-aligned-interface::, *note clef-interface::, *note
font-interface::, *note grob-interface::, *note item-interface::, *note
pure-from-neighbor-interface:: and *note
staff-symbol-referencer-interface::.


File: lilypond-internals.info,  Node: Custos,  Next: DotColumn,  Prev: CueEndClef,  Up: All layout objects

3.1.32 Custos
-------------

Custos objects are created by: *note Custos_engraver::.

   Standard settings:

     ‘break-align-symbol’ (symbol):
          ‘'custos’

          This key is used for aligning, ordering, and spacing breakable
          items.  See *note
          (lilypond-internals)break-alignment-interface::.

     ‘break-visibility’ (vector):
          #(#t #f #f)

          A vector of 3 booleans,
          ‘#(END-OF-LINE UNBROKEN BEGIN-OF-LINE)’.  ‘#t’ means visible,
          ‘#f’ means killed.

     ‘neutral-direction’ (direction):
          ‘-1’

          Which direction to take in the center of the staff.

     ‘non-musical’ (boolean):
          ‘#t’

          True if the grob belongs to a ‘NonMusicalPaperColumn’.

     ‘space-alist’ (list):
          '((first-note minimum-fixed-space . 0.0)
            (right-edge extra-space . 0.1))

          An alist that specifies distances from this grob to other
          breakable items, using the format:

               '((BREAK-ALIGN-SYMBOL . (SPACING-STYLE . SPACE))
                 (BREAK-ALIGN-SYMBOL . (SPACING-STYLE . SPACE))
                 ...)

          Standard choices for ‘BREAK-ALIGN-SYMBOL’ are listed in *note
          (lilypond-internals)break-alignment-interface::.
          Additionally, three special break-align symbols available to
          ‘space-alist’ are:

               ‘first-note’
                    used when the grob is just left of the first note on
                    a line

               ‘next-note’
                    used when the grob is just left of any other note;
                    if not set, the value of ‘first-note’ gets used

               ‘right-edge’
                    used when the grob is the last item on the line
                    (only compatible with the ‘extra-space’ spacing
                    style)

          Choices for ‘SPACING-STYLE’ are:

               ‘extra-space’
                    Put this much space between the two grobs.  The
                    space is stretchable when paired with ‘first-note’
                    or ‘next-note’; otherwise it is fixed.

               ‘minimum-space’
                    Put at least this much space between the left sides
                    of both grobs, without allowing them to collide.
                    The space is stretchable when paired with
                    ‘first-note’ or ‘next-note’; otherwise it is fixed.
                    Not compatible with ‘right-edge’.

               ‘fixed-space’
                    Only compatible with ‘first-note’ and ‘next-note’.
                    Put this much fixed space between the grob and the
                    note.

               ‘minimum-fixed-space’
                    Only compatible with ‘first-note’ and ‘next-note’.
                    Put at least this much fixed space between the left
                    side of the grob and the left side of the note,
                    without allowing them to collide.

               ‘semi-fixed-space’
                    Only compatible with ‘first-note’ and ‘next-note’.
                    Put this much space between the grob and the note,
                    such that half of the space is fixed and half is
                    stretchable.

          Rules for this spacing are much more complicated than this.
          See [Wanske] page 126–134, [Ross] page 143–147.

     ‘stencil’ (stencil):
          ‘ly:custos::print’

          The symbol to print.

     ‘style’ (symbol):
          ‘'vaticana’

          This setting determines in what style a grob is typeset.
          Valid choices depend on the ‘stencil’ callback reading this
          property.

     ‘Y-offset’ (number):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:staff-symbol-referencer::callback> >’

          The vertical amount that this object is moved relative to its
          Y-parent.

   This object supports the following interface(s): *note
break-aligned-interface::, *note custos-interface::, *note
font-interface::, *note grob-interface::, *note item-interface:: and
*note staff-symbol-referencer-interface::.


File: lilypond-internals.info,  Node: DotColumn,  Next: Dots,  Prev: Custos,  Up: All layout objects

3.1.33 DotColumn
----------------

DotColumn objects are created by: *note Dot_column_engraver:: and *note
Vaticana_ligature_engraver::.

   Standard settings:

     ‘axes’ (list):
          '(0)

          List of axis numbers.  In the case of alignment grobs, this
          should contain only one number.

     ‘chord-dots-limit’ (integer):
          ‘3’

          Limits the column of dots on each chord to the height of the
          chord plus ‘chord-dots-limit’ staff-positions.

     ‘direction’ (direction):
          ‘1’

          If ‘side-axis’ is ‘0’ (or ‘X’), then this property determines
          whether the object is placed ‘LEFT’, ‘CENTER’ or ‘RIGHT’ with
          respect to the other object.  Otherwise, it determines whether
          the object is placed ‘UP’, ‘CENTER’ or ‘DOWN’.  Numerical
          values may also be used: ‘UP’=‘1’, ‘DOWN’=‘-1’, ‘LEFT’=‘-1’,
          ‘RIGHT’=‘1’, ‘CENTER’=‘0’.

     ‘X-extent’ (pair of numbers):
          ‘ly:axis-group-interface::width’

          Extent (size) in the X direction, measured in staff-space
          units, relative to object’s reference point.

   This object supports the following interface(s): *note
axis-group-interface::, *note dot-column-interface::, *note
grob-interface:: and *note item-interface::.


File: lilypond-internals.info,  Node: Dots,  Next: DoublePercentRepeat,  Prev: DotColumn,  Up: All layout objects

3.1.34 Dots
-----------

Dots objects are created by: *note Dots_engraver::.

   Standard settings:

     ‘avoid-slur’ (symbol):
          ‘'inside’

          Method of handling slur collisions.  Choices are ‘inside’,
          ‘outside’, ‘around’, and ‘ignore’.  ‘inside’ adjusts the slur
          if needed to keep the grob inside the slur.  ‘outside’ moves
          the grob vertically to the outside of the slur.  ‘around’
          moves the grob vertically to the outside of the slur only if
          there is a collision.  ‘ignore’ does not move either.  In
          grobs whose notational significance depends on vertical
          position (such as accidentals, clefs, etc.), ‘outside’ and
          ‘around’ behave like ‘ignore’.

     ‘dot-count’ (integer):
          ‘dots::calc-dot-count’

          The number of dots.

     ‘extra-spacing-height’ (pair of numbers):
          '(-0.5 . 0.5)

          In the horizontal spacing problem, we increase the height of
          each item by this amount (by adding the ‘car’ to the bottom of
          the item and adding the ‘cdr’ to the top of the item).  In
          order to make a grob infinitely high (to prevent the
          horizontal spacing problem from placing any other grobs above
          or below this grob), set this to ‘(-inf.0 . +inf.0)’.

     ‘extra-spacing-width’ (pair of numbers):
          '(0.0 . 0.2)

          In the horizontal spacing problem, we pad each item by this
          amount (by adding the ‘car’ on the left side of the item and
          adding the ‘cdr’ on the right side of the item).  In order to
          make a grob take up no horizontal space at all, set this to
          ‘(+inf.0 . -inf.0)’.

     ‘staff-position’ (number):
          ‘dots::calc-staff-position’

          Vertical position, measured in half staff spaces, counted from
          the middle line.

     ‘stencil’ (stencil):
          ‘ly:dots::print’

          The symbol to print.

     ‘Y-extent’ (pair of numbers):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::stencil-height> >’

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

   This object supports the following interface(s): *note
dots-interface::, *note font-interface::, *note grob-interface::, *note
item-interface:: and *note staff-symbol-referencer-interface::.


File: lilypond-internals.info,  Node: DoublePercentRepeat,  Next: DoublePercentRepeatCounter,  Prev: Dots,  Up: All layout objects

3.1.35 DoublePercentRepeat
--------------------------

DoublePercentRepeat objects are created by: *note
Double_percent_repeat_engraver::.

   Standard settings:

     ‘break-align-symbol’ (symbol):
          ‘'staff-bar’

          This key is used for aligning, ordering, and spacing breakable
          items.  See *note
          (lilypond-internals)break-alignment-interface::.

     ‘break-visibility’ (vector):
          #(#t #t #f)

          A vector of 3 booleans,
          ‘#(END-OF-LINE UNBROKEN BEGIN-OF-LINE)’.  ‘#t’ means visible,
          ‘#f’ means killed.

     ‘dot-negative-kern’ (number):
          ‘0.75’

          The space to remove between a dot and a slash in percent
          repeat glyphs.  Larger values bring the two elements closer
          together.

     ‘font-encoding’ (symbol):
          ‘'fetaMusic’

          The font encoding is the broadest category for selecting a
          font.  Currently, only lilypond’s system fonts (Emmentaler)
          are using this property.  Available values are ‘fetaMusic’
          (Emmentaler), ‘fetaBraces’, ‘fetaText’ (Emmentaler).

     ‘non-musical’ (boolean):
          ‘#t’

          True if the grob belongs to a ‘NonMusicalPaperColumn’.

     ‘slash-negative-kern’ (number):
          ‘1.6’

          The space to remove between slashes in percent repeat glyphs.
          Larger values bring the two elements closer together.

     ‘slope’ (number):
          ‘1.0’

          The slope of this object.

     ‘stencil’ (stencil):
          ‘ly:percent-repeat-item-interface::double-percent’

          The symbol to print.

     ‘thickness’ (number):
          ‘0.48’

          For grobs made up of lines, this is the thickness of the line.
          For slurs and ties, this is the distance between the two arcs
          of the curve’s outline at its thickest point, not counting the
          diameter of the virtual “pen” that draws the arcs.  This
          property is expressed as a multiple of the current staff-line
          thickness (i.e.  the visual output is influenced by changes to
          ‘STAFF.StaffSymbol.thickness’).

     ‘Y-extent’ (pair of numbers):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::stencil-height> >’

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

   This object supports the following interface(s): *note
break-aligned-interface::, *note font-interface::, *note
grob-interface::, *note item-interface::, *note
percent-repeat-interface:: and *note percent-repeat-item-interface::.


File: lilypond-internals.info,  Node: DoublePercentRepeatCounter,  Next: DoubleRepeatSlash,  Prev: DoublePercentRepeat,  Up: All layout objects

3.1.36 DoublePercentRepeatCounter
---------------------------------

DoublePercentRepeatCounter objects are created by: *note
Double_percent_repeat_engraver::.

   Standard settings:

     ‘direction’ (direction):
          ‘1’

          If ‘side-axis’ is ‘0’ (or ‘X’), then this property determines
          whether the object is placed ‘LEFT’, ‘CENTER’ or ‘RIGHT’ with
          respect to the other object.  Otherwise, it determines whether
          the object is placed ‘UP’, ‘CENTER’ or ‘DOWN’.  Numerical
          values may also be used: ‘UP’=‘1’, ‘DOWN’=‘-1’, ‘LEFT’=‘-1’,
          ‘RIGHT’=‘1’, ‘CENTER’=‘0’.

     ‘font-encoding’ (symbol):
          ‘'fetaText’

          The font encoding is the broadest category for selecting a
          font.  Currently, only lilypond’s system fonts (Emmentaler)
          are using this property.  Available values are ‘fetaMusic’
          (Emmentaler), ‘fetaBraces’, ‘fetaText’ (Emmentaler).

     ‘font-size’ (number):
          ‘-2’

          The font size, compared to the ‘normal’ size.  ‘0’ is
          style-sheet’s normal size, ‘-1’ is smaller, ‘+1’ is bigger.
          Each step of 1 is approximately 12% larger; 6 steps are
          exactly a factor 2 larger.  If the context property ‘fontSize’
          is set, its value is added to this before the glyph is
          printed.  Fractional values are allowed.

     ‘padding’ (dimension, in staff space):
          ‘0.2’

          Add this much extra space between objects that are next to
          each other.

     ‘parent-alignment-X’ (number):
          ‘0’

          Specify on which point of the parent the object is aligned.
          The value ‘-1’ means aligned on parent’s left edge,
          ‘0’ on center, and ‘1’ right edge, in X direction.  Other
          numerical values may also be specified - the unit is half the
          parent’s width.  If unset, the value from ‘self-alignment-X’
          property will be used.

     ‘self-alignment-X’ (number):
          ‘0’

          Specify alignment of an object.  The value ‘-1’ means left
          aligned, ‘0’ centered, and ‘1’ right-aligned in X direction.
          Other numerical values may also be specified - the unit is
          half the object width.

     ‘side-axis’ (number):
          ‘1’

          If the value is ‘X’ (or equivalently ‘0’), the object is
          placed horizontally next to the other object.  If the value is
          ‘Y’ or ‘1’, it is placed vertically.

     ‘staff-padding’ (dimension, in staff space):
          ‘0.25’

          Maintain this much space between reference points and the
          staff.  Its effect is to align objects of differing sizes
          (like the dynamics p and f) on their baselines.

     ‘stencil’ (stencil):
          ‘ly:text-interface::print’

          The symbol to print.

     ‘X-offset’ (number):
          ‘ly:self-alignment-interface::aligned-on-x-parent’

          The horizontal amount that this object is moved relative to
          its X-parent.

     ‘Y-extent’ (pair of numbers):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::stencil-height> >’

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

     ‘Y-offset’ (number):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:side-position-interface::y-aligned-side>
          #<primitive-procedure
          ly:side-position-interface::pure-y-aligned-side> >’

          The vertical amount that this object is moved relative to its
          Y-parent.

   This object supports the following interface(s): *note
font-interface::, *note grob-interface::, *note item-interface::, *note
outside-staff-interface::, *note percent-repeat-interface::, *note
percent-repeat-item-interface::, *note self-alignment-interface::, *note
side-position-interface:: and *note text-interface::.


File: lilypond-internals.info,  Node: DoubleRepeatSlash,  Next: DynamicLineSpanner,  Prev: DoublePercentRepeatCounter,  Up: All layout objects

3.1.37 DoubleRepeatSlash
------------------------

DoubleRepeatSlash objects are created by: *note Slash_repeat_engraver::.

   Standard settings:

     ‘dot-negative-kern’ (number):
          ‘0.75’

          The space to remove between a dot and a slash in percent
          repeat glyphs.  Larger values bring the two elements closer
          together.

     ‘font-encoding’ (symbol):
          ‘'fetaMusic’

          The font encoding is the broadest category for selecting a
          font.  Currently, only lilypond’s system fonts (Emmentaler)
          are using this property.  Available values are ‘fetaMusic’
          (Emmentaler), ‘fetaBraces’, ‘fetaText’ (Emmentaler).

     ‘slash-negative-kern’ (number):
          ‘1.6’

          The space to remove between slashes in percent repeat glyphs.
          Larger values bring the two elements closer together.

     ‘slope’ (number):
          ‘1.0’

          The slope of this object.

     ‘stencil’ (stencil):
          ‘ly:percent-repeat-item-interface::beat-slash’

          The symbol to print.

     ‘thickness’ (number):
          ‘0.48’

          For grobs made up of lines, this is the thickness of the line.
          For slurs and ties, this is the distance between the two arcs
          of the curve’s outline at its thickest point, not counting the
          diameter of the virtual “pen” that draws the arcs.  This
          property is expressed as a multiple of the current staff-line
          thickness (i.e.  the visual output is influenced by changes to
          ‘STAFF.StaffSymbol.thickness’).

     ‘Y-extent’ (pair of numbers):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::stencil-height> >’

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

   This object supports the following interface(s): *note
font-interface::, *note grob-interface::, *note item-interface::, *note
outside-staff-interface::, *note percent-repeat-interface::, *note
percent-repeat-item-interface:: and *note rhythmic-grob-interface::.


File: lilypond-internals.info,  Node: DynamicLineSpanner,  Next: DynamicText,  Prev: DoubleRepeatSlash,  Up: All layout objects

3.1.38 DynamicLineSpanner
-------------------------

DynamicLineSpanner objects are created by: *note
Dynamic_align_engraver::.

   Standard settings:

     ‘axes’ (list):
          '(1)

          List of axis numbers.  In the case of alignment grobs, this
          should contain only one number.

     ‘direction’ (direction):
          ‘-1’

          If ‘side-axis’ is ‘0’ (or ‘X’), then this property determines
          whether the object is placed ‘LEFT’, ‘CENTER’ or ‘RIGHT’ with
          respect to the other object.  Otherwise, it determines whether
          the object is placed ‘UP’, ‘CENTER’ or ‘DOWN’.  Numerical
          values may also be used: ‘UP’=‘1’, ‘DOWN’=‘-1’, ‘LEFT’=‘-1’,
          ‘RIGHT’=‘1’, ‘CENTER’=‘0’.

     ‘minimum-space’ (dimension, in staff space):
          ‘1.2’

          Minimum distance that the victim should move (after padding).

     ‘outside-staff-priority’ (number):
          ‘250’

          If set, the grob is positioned outside the staff in such a way
          as to avoid all collisions.  In case of a potential collision,
          the grob with the smaller ‘outside-staff-priority’ is closer
          to the staff.

     ‘padding’ (dimension, in staff space):
          ‘0.6’

          Add this much extra space between objects that are next to
          each other.

     ‘side-axis’ (number):
          ‘1’

          If the value is ‘X’ (or equivalently ‘0’), the object is
          placed horizontally next to the other object.  If the value is
          ‘Y’ or ‘1’, it is placed vertically.

     ‘slur-padding’ (number):
          ‘0.3’

          Extra distance between slur and script.

     ‘staff-padding’ (dimension, in staff space):
          ‘0.1’

          Maintain this much space between reference points and the
          staff.  Its effect is to align objects of differing sizes
          (like the dynamics p and f) on their baselines.

     ‘vertical-skylines’ (pair of skylines):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::vertical-skylines-from-element-stencils>
          #<primitive-procedure
          ly:grob::pure-vertical-skylines-from-element-stencils> >’

          Two skylines, one above and one below this grob.

     ‘X-extent’ (pair of numbers):
          ‘ly:axis-group-interface::width’

          Extent (size) in the X direction, measured in staff-space
          units, relative to object’s reference point.

     ‘Y-extent’ (pair of numbers):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:axis-group-interface::height> #<primitive-procedure
          ly:axis-group-interface::pure-height> >’

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

     ‘Y-offset’ (number):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:side-position-interface::y-aligned-side>
          #<primitive-procedure
          ly:side-position-interface::pure-y-aligned-side> >’

          The vertical amount that this object is moved relative to its
          Y-parent.

   This object supports the following interface(s): *note
axis-group-interface::, *note dynamic-interface::, *note
dynamic-line-spanner-interface::, *note grob-interface::, *note
outside-staff-interface::, *note side-position-interface:: and *note
spanner-interface::.


File: lilypond-internals.info,  Node: DynamicText,  Next: DynamicTextSpanner,  Prev: DynamicLineSpanner,  Up: All layout objects

3.1.39 DynamicText
------------------

DynamicText objects are created by: *note Dynamic_engraver::.

   Standard settings:

     ‘direction’ (direction):
          ‘ly:script-interface::calc-direction’

          If ‘side-axis’ is ‘0’ (or ‘X’), then this property determines
          whether the object is placed ‘LEFT’, ‘CENTER’ or ‘RIGHT’ with
          respect to the other object.  Otherwise, it determines whether
          the object is placed ‘UP’, ‘CENTER’ or ‘DOWN’.  Numerical
          values may also be used: ‘UP’=‘1’, ‘DOWN’=‘-1’, ‘LEFT’=‘-1’,
          ‘RIGHT’=‘1’, ‘CENTER’=‘0’.

     ‘extra-spacing-width’ (pair of numbers):
          '(+inf.0 . -inf.0)

          In the horizontal spacing problem, we pad each item by this
          amount (by adding the ‘car’ on the left side of the item and
          adding the ‘cdr’ on the right side of the item).  In order to
          make a grob take up no horizontal space at all, set this to
          ‘(+inf.0 . -inf.0)’.

     ‘font-encoding’ (symbol):
          ‘'fetaText’

          The font encoding is the broadest category for selecting a
          font.  Currently, only lilypond’s system fonts (Emmentaler)
          are using this property.  Available values are ‘fetaMusic’
          (Emmentaler), ‘fetaBraces’, ‘fetaText’ (Emmentaler).

     ‘font-series’ (symbol):
          ‘'bold’

          Select the series of a font.  Choices include ‘medium’,
          ‘bold’, ‘bold-narrow’, etc.

     ‘font-shape’ (symbol):
          ‘'italic’

          Select the shape of a font.  Choices include ‘upright’,
          ‘italic’, ‘caps’.

     ‘parent-alignment-X’ (number):
          ‘0’

          Specify on which point of the parent the object is aligned.
          The value ‘-1’ means aligned on parent’s left edge,
          ‘0’ on center, and ‘1’ right edge, in X direction.  Other
          numerical values may also be specified - the unit is half the
          parent’s width.  If unset, the value from ‘self-alignment-X’
          property will be used.

     ‘right-padding’ (dimension, in staff space):
          ‘0.5’

          Space to insert on the right side of an object (e.g., between
          note and its accidentals).

     ‘self-alignment-X’ (number):
          ‘0’

          Specify alignment of an object.  The value ‘-1’ means left
          aligned, ‘0’ centered, and ‘1’ right-aligned in X direction.
          Other numerical values may also be specified - the unit is
          half the object width.

     ‘stencil’ (stencil):
          ‘ly:text-interface::print’

          The symbol to print.

     ‘vertical-skylines’ (pair of skylines):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::vertical-skylines-from-stencil> >’

          Two skylines, one above and one below this grob.

     ‘X-align-on-main-noteheads’ (boolean):
          ‘#t’

          If true, this grob will ignore suspended noteheads when
          aligning itself on NoteColumn.

     ‘X-offset’ (number):
          ‘ly:self-alignment-interface::aligned-on-x-parent’

          The horizontal amount that this object is moved relative to
          its X-parent.

     ‘Y-extent’ (pair of numbers):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::stencil-height> >’

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

     ‘Y-offset’ (number):
          ‘#<unpure-pure-container #<procedure #f (grob)> >’

          The vertical amount that this object is moved relative to its
          Y-parent.

   This object supports the following interface(s): *note
dynamic-interface::, *note dynamic-text-interface::, *note
font-interface::, *note grob-interface::, *note item-interface::, *note
outside-staff-interface::, *note script-interface::, *note
self-alignment-interface:: and *note text-interface::.


File: lilypond-internals.info,  Node: DynamicTextSpanner,  Next: Episema,  Prev: DynamicText,  Up: All layout objects

3.1.40 DynamicTextSpanner
-------------------------

DynamicTextSpanner objects are created by: *note Dynamic_engraver::.

   Standard settings:

     ‘before-line-breaking’ (boolean):
          ‘dynamic-text-spanner::before-line-breaking’

          Dummy property, used to trigger a callback function.

     ‘bound-details’ (list):
          '((right (attach-dir . -1)
                   (Y . 0)
                   (padding . 0.75))
            (right-broken (attach-dir . 1) (padding . 0.0))
            (left (attach-dir . -1)
                  (Y . 0)
                  (stencil-offset -0.75 . -0.5)
                  (padding . 0.75))
            (left-broken (attach-dir . 1)))

          An alist of properties for determining attachments of spanners
          to edges.

     ‘dash-fraction’ (number):
          ‘0.2’

          Size of the dashes, relative to ‘dash-period’.  Should be
          between ‘0.1’ and ‘1.0’ (continuous line).  If set to ‘0.0’, a
          dotted line is produced

     ‘dash-period’ (number):
          ‘3.0’

          The length of one dash together with whitespace.  If negative,
          no line is drawn at all.

     ‘font-shape’ (symbol):
          ‘'italic’

          Select the shape of a font.  Choices include ‘upright’,
          ‘italic’, ‘caps’.

     ‘font-size’ (number):
          ‘1’

          The font size, compared to the ‘normal’ size.  ‘0’ is
          style-sheet’s normal size, ‘-1’ is smaller, ‘+1’ is bigger.
          Each step of 1 is approximately 12% larger; 6 steps are
          exactly a factor 2 larger.  If the context property ‘fontSize’
          is set, its value is added to this before the glyph is
          printed.  Fractional values are allowed.

     ‘left-bound-info’ (list):
          ‘ly:line-spanner::calc-left-bound-info-and-text’

          An alist of properties for determining attachments of spanners
          to edges.

     ‘minimum-length’ (dimension, in staff space):
          ‘2.0’

          Try to make a spanner at least this long, normally in the
          horizontal direction.  This requires an appropriate callback
          for the ‘springs-and-rods’ property.  If added to a ‘Tie’,
          this sets the minimum distance between noteheads.

     ‘minimum-Y-extent’ (pair of numbers):
          '(-1 . 1)

          Minimum size of an object in Y dimension, measured in
          ‘staff-space’ units.

     ‘right-bound-info’ (list):
          ‘ly:line-spanner::calc-right-bound-info’

          An alist of properties for determining attachments of spanners
          to edges.

     ‘skyline-horizontal-padding’ (number):
          ‘0.2’

          For determining the vertical distance between two staves, it
          is possible to have a configuration which would result in a
          tight interleaving of grobs from the top staff and the bottom
          staff.  The larger this parameter is, the farther apart the
          staves are placed in such a configuration.

     ‘springs-and-rods’ (boolean):
          ‘ly:spanner::set-spacing-rods’

          Dummy variable for triggering spacing routines.

     ‘stencil’ (stencil):
          ‘ly:line-spanner::print’

          The symbol to print.

     ‘style’ (symbol):
          ‘'dashed-line’

          This setting determines in what style a grob is typeset.
          Valid choices depend on the ‘stencil’ callback reading this
          property.

     ‘vertical-skylines’ (pair of skylines):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::vertical-skylines-from-stencil> #<primitive-procedure
          ly:grob::pure-simple-vertical-skylines-from-extents> >’

          Two skylines, one above and one below this grob.

   This object supports the following interface(s): *note
dynamic-interface::, *note dynamic-text-spanner-interface::, *note
font-interface::, *note grob-interface::, *note line-interface::, *note
line-spanner-interface::, *note spanner-interface:: and *note
text-interface::.


File: lilypond-internals.info,  Node: Episema,  Next: Fingering,  Prev: DynamicTextSpanner,  Up: All layout objects

3.1.41 Episema
--------------

Episema objects are created by: *note Episema_engraver::.

   Standard settings:

     ‘bound-details’ (list):
          '((left (Y . 0) (padding . 0) (attach-dir . -1))
            (right (Y . 0) (padding . 0) (attach-dir . 1)))

          An alist of properties for determining attachments of spanners
          to edges.

     ‘direction’ (direction):
          ‘1’

          If ‘side-axis’ is ‘0’ (or ‘X’), then this property determines
          whether the object is placed ‘LEFT’, ‘CENTER’ or ‘RIGHT’ with
          respect to the other object.  Otherwise, it determines whether
          the object is placed ‘UP’, ‘CENTER’ or ‘DOWN’.  Numerical
          values may also be used: ‘UP’=‘1’, ‘DOWN’=‘-1’, ‘LEFT’=‘-1’,
          ‘RIGHT’=‘1’, ‘CENTER’=‘0’.

     ‘left-bound-info’ (list):
          ‘ly:line-spanner::calc-left-bound-info’

          An alist of properties for determining attachments of spanners
          to edges.

     ‘right-bound-info’ (list):
          ‘ly:line-spanner::calc-right-bound-info’

          An alist of properties for determining attachments of spanners
          to edges.

     ‘side-axis’ (number):
          ‘1’

          If the value is ‘X’ (or equivalently ‘0’), the object is
          placed horizontally next to the other object.  If the value is
          ‘Y’ or ‘1’, it is placed vertically.

     ‘stencil’ (stencil):
          ‘ly:line-spanner::print’

          The symbol to print.

     ‘style’ (symbol):
          ‘'line’

          This setting determines in what style a grob is typeset.
          Valid choices depend on the ‘stencil’ callback reading this
          property.

     ‘Y-offset’ (number):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:side-position-interface::y-aligned-side>
          #<primitive-procedure
          ly:side-position-interface::pure-y-aligned-side> >’

          The vertical amount that this object is moved relative to its
          Y-parent.

   This object supports the following interface(s): *note
episema-interface::, *note font-interface::, *note grob-interface::,
*note line-interface::, *note line-spanner-interface::, *note
side-position-interface:: and *note spanner-interface::.


File: lilypond-internals.info,  Node: Fingering,  Next: FingeringColumn,  Prev: Episema,  Up: All layout objects

3.1.42 Fingering
----------------

Fingering objects are created by: *note Fingering_engraver:: and *note
New_fingering_engraver::.

   Standard settings:

     ‘add-stem-support’ (boolean):
          ‘only-if-beamed’

          If set, the ‘Stem’ object is included in this script’s
          support.

     ‘avoid-slur’ (symbol):
          ‘'around’

          Method of handling slur collisions.  Choices are ‘inside’,
          ‘outside’, ‘around’, and ‘ignore’.  ‘inside’ adjusts the slur
          if needed to keep the grob inside the slur.  ‘outside’ moves
          the grob vertically to the outside of the slur.  ‘around’
          moves the grob vertically to the outside of the slur only if
          there is a collision.  ‘ignore’ does not move either.  In
          grobs whose notational significance depends on vertical
          position (such as accidentals, clefs, etc.), ‘outside’ and
          ‘around’ behave like ‘ignore’.

     ‘direction’ (direction):
          ‘ly:script-interface::calc-direction’

          If ‘side-axis’ is ‘0’ (or ‘X’), then this property determines
          whether the object is placed ‘LEFT’, ‘CENTER’ or ‘RIGHT’ with
          respect to the other object.  Otherwise, it determines whether
          the object is placed ‘UP’, ‘CENTER’ or ‘DOWN’.  Numerical
          values may also be used: ‘UP’=‘1’, ‘DOWN’=‘-1’, ‘LEFT’=‘-1’,
          ‘RIGHT’=‘1’, ‘CENTER’=‘0’.

     ‘font-encoding’ (symbol):
          ‘'fetaText’

          The font encoding is the broadest category for selecting a
          font.  Currently, only lilypond’s system fonts (Emmentaler)
          are using this property.  Available values are ‘fetaMusic’
          (Emmentaler), ‘fetaBraces’, ‘fetaText’ (Emmentaler).

     ‘font-size’ (number):
          ‘-5’

          The font size, compared to the ‘normal’ size.  ‘0’ is
          style-sheet’s normal size, ‘-1’ is smaller, ‘+1’ is bigger.
          Each step of 1 is approximately 12% larger; 6 steps are
          exactly a factor 2 larger.  If the context property ‘fontSize’
          is set, its value is added to this before the glyph is
          printed.  Fractional values are allowed.

     ‘padding’ (dimension, in staff space):
          ‘0.5’

          Add this much extra space between objects that are next to
          each other.

     ‘parent-alignment-X’ (number):
          ‘0’

          Specify on which point of the parent the object is aligned.
          The value ‘-1’ means aligned on parent’s left edge,
          ‘0’ on center, and ‘1’ right edge, in X direction.  Other
          numerical values may also be specified - the unit is half the
          parent’s width.  If unset, the value from ‘self-alignment-X’
          property will be used.

     ‘parent-alignment-Y’ (number):
          ‘0’

          Like ‘parent-alignment-X’ but for the Y axis.

     ‘script-priority’ (number):
          ‘100’

          A key for determining the order of scripts in a stack, by
          being added to the position of the script in the user input,
          the sum being the overall priority.  Smaller means closer to
          the head.

     ‘self-alignment-X’ (number):
          ‘0’

          Specify alignment of an object.  The value ‘-1’ means left
          aligned, ‘0’ centered, and ‘1’ right-aligned in X direction.
          Other numerical values may also be specified - the unit is
          half the object width.

     ‘self-alignment-Y’ (number):
          ‘0’

          Like ‘self-alignment-X’ but for the Y axis.

     ‘slur-padding’ (number):
          ‘0.2’

          Extra distance between slur and script.

     ‘staff-padding’ (dimension, in staff space):
          ‘0.5’

          Maintain this much space between reference points and the
          staff.  Its effect is to align objects of differing sizes
          (like the dynamics p and f) on their baselines.

     ‘stencil’ (stencil):
          ‘ly:text-interface::print’

          The symbol to print.

     ‘text’ (markup):
          ‘fingering::calc-text’

          Text markup.  See *note (lilypond-notation)Formatting text::.

     ‘Y-extent’ (pair of numbers):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::stencil-height> >’

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

   This object supports the following interface(s): *note
finger-interface::, *note font-interface::, *note grob-interface::,
*note item-interface::, *note outside-staff-interface::, *note
self-alignment-interface::, *note side-position-interface::, *note
text-interface:: and *note text-script-interface::.


File: lilypond-internals.info,  Node: FingeringColumn,  Next: Flag,  Prev: Fingering,  Up: All layout objects

3.1.43 FingeringColumn
----------------------

FingeringColumn objects are created by: *note
Fingering_column_engraver::.

   Standard settings:

     ‘padding’ (dimension, in staff space):
          ‘0.2’

          Add this much extra space between objects that are next to
          each other.

     ‘snap-radius’ (number):
          ‘0.3’

          The maximum distance between two objects that will cause them
          to snap to alignment along an axis.

   This object supports the following interface(s): *note
fingering-column-interface::, *note grob-interface:: and *note
item-interface::.


File: lilypond-internals.info,  Node: Flag,  Next: FootnoteItem,  Prev: FingeringColumn,  Up: All layout objects

3.1.44 Flag
-----------

Flag objects are created by: *note Stem_engraver::.

   Standard settings:

     ‘color’ (color):
          ‘#<procedure #f (grob)>’

          The color of this grob.

     ‘glyph-name’ (string):
          ‘ly:flag::glyph-name’

          The glyph name within the font.

          In the context of (span) bar lines, GLYPH-NAME represents a
          processed form of ‘glyph’, where decisions about line breaking
          etc.  are already taken.

     ‘stencil’ (stencil):
          ‘ly:flag::print’

          The symbol to print.

     ‘transparent’ (boolean):
          ‘#<procedure #f (grob)>’

          This makes the grob invisible.

     ‘vertical-skylines’ (pair of skylines):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::vertical-skylines-from-stencil> >’

          Two skylines, one above and one below this grob.

     ‘X-extent’ (pair of numbers):
          ‘ly:flag::width’

          Extent (size) in the X direction, measured in staff-space
          units, relative to object’s reference point.

     ‘X-offset’ (number):
          ‘ly:flag::calc-x-offset’

          The horizontal amount that this object is moved relative to
          its X-parent.

     ‘Y-extent’ (pair of numbers):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::stencil-height> >’

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

     ‘Y-offset’ (number):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:flag::calc-y-offset> #<primitive-procedure
          ly:flag::pure-calc-y-offset> >’

          The vertical amount that this object is moved relative to its
          Y-parent.

   This object supports the following interface(s): *note
flag-interface::, *note font-interface::, *note grob-interface:: and
*note item-interface::.


File: lilypond-internals.info,  Node: FootnoteItem,  Next: FootnoteSpanner,  Prev: Flag,  Up: All layout objects

3.1.45 FootnoteItem
-------------------

FootnoteItem objects are created by: *note Footnote_engraver::.

   Standard settings:

     ‘annotation-balloon’ (boolean)
          Print the balloon around an annotation.

     ‘annotation-line’ (boolean):
          ‘#t’

          Print the line from an annotation to the grob that it
          annotates.

     ‘automatically-numbered’ (boolean):
          ‘#<procedure #f (grob)>’

          Should a footnote be automatically numbered?

     ‘break-visibility’ (vector):
          ‘#<procedure #f (grob)>’

          A vector of 3 booleans,
          ‘#(END-OF-LINE UNBROKEN BEGIN-OF-LINE)’.  ‘#t’ means visible,
          ‘#f’ means killed.

     ‘footnote’ (boolean):
          ‘#t’

          Should this be a footnote or in-note?

     ‘footnote-text’ (markup):
          ‘#<procedure #f (grob)>’

          A footnote for the grob.

     ‘stencil’ (stencil):
          ‘ly:balloon-interface::print’

          The symbol to print.

     ‘text’ (markup):
          ‘#<procedure #f (grob)>’

          Text markup.  See *note (lilypond-notation)Formatting text::.

     ‘X-extent’ (pair of numbers)
          Extent (size) in the X direction, measured in staff-space
          units, relative to object’s reference point.

     ‘X-offset’ (number):
          ‘#<procedure #f (grob)>’

          The horizontal amount that this object is moved relative to
          its X-parent.

     ‘Y-extent’ (pair of numbers)
          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

     ‘Y-offset’ (number):
          ‘#<procedure #f (grob)>’

          The vertical amount that this object is moved relative to its
          Y-parent.

   This object supports the following interface(s): *note
balloon-interface::, *note font-interface::, *note footnote-interface::,
*note grob-interface::, *note item-interface:: and *note
text-interface::.


File: lilypond-internals.info,  Node: FootnoteSpanner,  Next: FretBoard,  Prev: FootnoteItem,  Up: All layout objects

3.1.46 FootnoteSpanner
----------------------

FootnoteSpanner objects are created by: *note Footnote_engraver::.

   Standard settings:

     ‘annotation-balloon’ (boolean)
          Print the balloon around an annotation.

     ‘annotation-line’ (boolean):
          ‘#t’

          Print the line from an annotation to the grob that it
          annotates.

     ‘automatically-numbered’ (boolean):
          ‘#<procedure #f (grob)>’

          Should a footnote be automatically numbered?

     ‘footnote’ (boolean):
          ‘#t’

          Should this be a footnote or in-note?

     ‘footnote-text’ (markup):
          ‘#<procedure #f (grob)>’

          A footnote for the grob.

     ‘stencil’ (stencil):
          ‘ly:balloon-interface::print-spanner’

          The symbol to print.

     ‘text’ (markup):
          ‘#<procedure #f (grob)>’

          Text markup.  See *note (lilypond-notation)Formatting text::.

     ‘X-extent’ (pair of numbers)
          Extent (size) in the X direction, measured in staff-space
          units, relative to object’s reference point.

     ‘X-offset’ (number):
          ‘#<procedure #f (grob)>’

          The horizontal amount that this object is moved relative to
          its X-parent.

     ‘Y-extent’ (pair of numbers)
          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

     ‘Y-offset’ (number):
          ‘#<procedure #f (grob)>’

          The vertical amount that this object is moved relative to its
          Y-parent.

   This object supports the following interface(s): *note
balloon-interface::, *note font-interface::, *note footnote-interface::,
*note footnote-spanner-interface::, *note grob-interface::, *note
spanner-interface:: and *note text-interface::.


File: lilypond-internals.info,  Node: FretBoard,  Next: Glissando,  Prev: FootnoteSpanner,  Up: All layout objects

3.1.47 FretBoard
----------------

FretBoard objects are created by: *note Fretboard_engraver::.

   Standard settings:

     ‘after-line-breaking’ (boolean):
          ‘ly:chord-name::after-line-breaking’

          Dummy property, used to trigger callback for
          ‘after-line-breaking’.

     ‘extra-spacing-height’ (pair of numbers):
          '(0.2 . -0.2)

          In the horizontal spacing problem, we increase the height of
          each item by this amount (by adding the ‘car’ to the bottom of
          the item and adding the ‘cdr’ to the top of the item).  In
          order to make a grob infinitely high (to prevent the
          horizontal spacing problem from placing any other grobs above
          or below this grob), set this to ‘(-inf.0 . +inf.0)’.

     ‘extra-spacing-width’ (pair of numbers):
          '(-0.5 . 0.5)

          In the horizontal spacing problem, we pad each item by this
          amount (by adding the ‘car’ on the left side of the item and
          adding the ‘cdr’ on the right side of the item).  In order to
          make a grob take up no horizontal space at all, set this to
          ‘(+inf.0 . -inf.0)’.

     ‘fret-diagram-details’ (list):
          '((finger-code . below-string))

          An alist of detailed grob properties for fret diagrams.  Each
          alist entry consists of a ‘(PROPERTY . VALUE)’ pair.  The
          properties which can be included in ‘fret-diagram-details’
          include the following:

             • ‘barre-type’ – Type of barre indication used.  Choices
               include ‘curved’, ‘straight’, and ‘none’.  Default
               ‘curved’.
             • ‘capo-thickness’ – Thickness of capo indicator, in
               multiples of fret-space.  Default value 0.5.
             • ‘dot-color’ – Color of dots.  Options include ‘black’ and
               ‘white’.  Default ‘black’.
             • ‘dot-label-font-mag’ – Magnification for font used to
               label fret dots.  Default value 1.
             • ‘dot-position’ – Location of dot in fret space.  Default
               0.6 for dots without labels, 0.95-‘dot-radius’ for dots
               with labels.
             • ‘dot-radius’ – Radius of dots, in terms of fret spaces.
               Default value 0.425 for labeled dots, 0.25 for unlabeled
               dots.
             • ‘finger-code’ – Code for the type of fingering indication
               used.  Options include ‘none’, ‘in-dot’, and
               ‘below-string’.  Default ‘none’ for markup fret diagrams,
               ‘below-string’ for ‘FretBoards’ fret diagrams.
             • ‘fret-count’ – The number of frets.  Default 4.
             • ‘fret-distance’ – Multiplier to adjust the distance
               between frets.  Default 1.0.
             • ‘fret-label-custom-format’ – The format string to be used
               label the lowest fret number, when ‘number-type’ equals
               to ‘custom’.  Default "~a".
             • ‘fret-label-font-mag’ – The magnification of the font
               used to label the lowest fret number.  Default 0.5.
             • ‘fret-label-vertical-offset’ – The offset of the fret
               label from the center of the fret in direction parallel
               to strings.  Default 0.
             • ‘fret-label-horizontal-offset’ – The offset of the fret
               label from the center of the fret in direction orthogonal
               to strings.  Default 0.
             • ‘paren-padding’ – The padding for the parenthesis.
               Default 0.05.
             • ‘label-dir’ – Side to which the fret label is attached.
               ‘-1’, ‘LEFT’, or ‘DOWN’ for left or down; ‘1’, ‘RIGHT’,
               or ‘UP’ for right or up.  Default ‘RIGHT’.
             • ‘mute-string’ – Character string to be used to indicate
               muted string.  Default ‘"x"’.
             • ‘number-type’ – Type of numbers to use in fret label.
               Choices include ‘roman-lower’, ‘roman-upper’, ‘arabic’
               and ‘custom’.  In the later case, the format string is
               supplied by the ‘fret-label-custom-format’ property.
               Default ‘roman-lower’.
             • ‘open-string’ – Character string to be used to indicate
               open string.  Default ‘"o"’.
             • ‘orientation’ – Orientation of fret-diagram.  Options
               include ‘normal’, ‘landscape’, and ‘opposing-landscape’.
               Default ‘normal’.
             • ‘string-count’ – The number of strings.  Default 6.
             • ‘string-distance’ – Multiplier to adjust the distance
               between strings.  Default 1.0.
             • ‘string-label-font-mag’ – The magnification of the font
               used to label fingerings at the string, rather than in
               the dot.  Default value 0.6 for ‘normal’ orientation, 0.5
               for ‘landscape’ and ‘opposing-landscape’.
             • ‘string-thickness-factor’ – Factor for changing thickness
               of each string in the fret diagram.  Thickness of string
               K is given by ‘thickness’ *
               (1+‘string-thickness-factor’) ^ (K-1).  Default 0.
             • ‘top-fret-thickness’ – The thickness of the top fret
               line, as a multiple of the standard thickness.  Default
               value 3.
             • ‘xo-font-magnification’ – Magnification used for mute and
               open string indicators.  Default value 0.5.
             • ‘xo-padding’ – Padding for open and mute indicators from
               top fret.  Default value 0.25.

     ‘stencil’ (stencil):
          ‘fret-board::calc-stencil’

          The symbol to print.

     ‘Y-extent’ (pair of numbers):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::stencil-height> >’

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

   This object supports the following interface(s): *note
chord-name-interface::, *note font-interface::, *note
fret-diagram-interface::, *note grob-interface::, *note
item-interface::, *note outside-staff-interface:: and *note
rhythmic-grob-interface::.


File: lilypond-internals.info,  Node: Glissando,  Next: GraceSpacing,  Prev: FretBoard,  Up: All layout objects

3.1.48 Glissando
----------------

Glissando objects are created by: *note Glissando_engraver::.

   Standard settings:

     ‘after-line-breaking’ (boolean):
          ‘ly:spanner::kill-zero-spanned-time’

          Dummy property, used to trigger callback for
          ‘after-line-breaking’.

     ‘bound-details’ (list):
          '((right (attach-dir . -1)
                   (end-on-accidental . #t)
                   (padding . 0.5))
            (left (attach-dir . 1)
                  (padding . 0.5)
                  (start-at-dot . #t)))

          An alist of properties for determining attachments of spanners
          to edges.

     ‘gap’ (dimension, in staff space):
          ‘0.5’

          Size of a gap in a variable symbol.

     ‘left-bound-info’ (list):
          ‘ly:line-spanner::calc-left-bound-info’

          An alist of properties for determining attachments of spanners
          to edges.

     ‘normalized-endpoints’ (pair):
          ‘ly:spanner::calc-normalized-endpoints’

          Represents left and right placement over the total spanner,
          where the width of the spanner is normalized between 0 and 1.

     ‘right-bound-info’ (list):
          ‘ly:line-spanner::calc-right-bound-info’

          An alist of properties for determining attachments of spanners
          to edges.

     ‘simple-Y’ (boolean):
          ‘#t’

          Should the Y placement of a spanner disregard changes in
          system heights?

     ‘stencil’ (stencil):
          ‘ly:line-spanner::print’

          The symbol to print.

     ‘style’ (symbol):
          ‘'line’

          This setting determines in what style a grob is typeset.
          Valid choices depend on the ‘stencil’ callback reading this
          property.

     ‘vertical-skylines’ (pair of skylines):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::vertical-skylines-from-stencil> #<primitive-procedure
          ly:grob::pure-simple-vertical-skylines-from-extents> >’

          Two skylines, one above and one below this grob.

     ‘X-extent’ (pair of numbers)
          Extent (size) in the X direction, measured in staff-space
          units, relative to object’s reference point.

     ‘Y-extent’ (pair of numbers)
          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

     ‘zigzag-width’ (dimension, in staff space):
          ‘0.75’

          The width of one zigzag squiggle.  This number is adjusted
          slightly so that the glissando line can be constructed from a
          whole number of squiggles.

   This object supports the following interface(s): *note
glissando-interface::, *note grob-interface::, *note line-interface::,
*note line-spanner-interface::, *note spanner-interface:: and *note
unbreakable-spanner-interface::.


File: lilypond-internals.info,  Node: GraceSpacing,  Next: GridLine,  Prev: Glissando,  Up: All layout objects

3.1.49 GraceSpacing
-------------------

GraceSpacing objects are created by: *note Grace_spacing_engraver::.

   Standard settings:

     ‘common-shortest-duration’ (moment):
          ‘grace-spacing::calc-shortest-duration’

          The most common shortest note length.  This is used in
          spacing.  Enlarging this sets the score tighter.

     ‘shortest-duration-space’ (number):
          ‘1.6’

          Start with this multiple of ‘spacing-increment’ space for the
          shortest duration.  See also *note
          (lilypond-internals)spacing-spanner-interface::.

     ‘spacing-increment’ (dimension, in staff space):
          ‘0.8’

          The unit of length for note-spacing.  Typically, the width of
          a note head.  See also *note
          (lilypond-internals)spacing-spanner-interface::.

   This object supports the following interface(s): *note
grace-spacing-interface::, *note grob-interface::, *note
spacing-options-interface:: and *note spanner-interface::.


File: lilypond-internals.info,  Node: GridLine,  Next: GridPoint,  Prev: GraceSpacing,  Up: All layout objects

3.1.50 GridLine
---------------

GridLine objects are created by: *note Grid_line_span_engraver::.

   Standard settings:

     ‘layer’ (integer):
          ‘0’

          An integer which determines the order of printing objects.
          Objects with the lowest value of layer are drawn first, then
          objects with progressively higher values are drawn, so objects
          with higher values overwrite objects with lower values.  By
          default most objects are assigned a layer value of 1.

     ‘parent-alignment-X’ (number):
          ‘0’

          Specify on which point of the parent the object is aligned.
          The value ‘-1’ means aligned on parent’s left edge,
          ‘0’ on center, and ‘1’ right edge, in X direction.  Other
          numerical values may also be specified - the unit is half the
          parent’s width.  If unset, the value from ‘self-alignment-X’
          property will be used.

     ‘self-alignment-X’ (number):
          ‘0’

          Specify alignment of an object.  The value ‘-1’ means left
          aligned, ‘0’ centered, and ‘1’ right-aligned in X direction.
          Other numerical values may also be specified - the unit is
          half the object width.

     ‘stencil’ (stencil):
          ‘ly:grid-line-interface::print’

          The symbol to print.

     ‘X-extent’ (pair of numbers):
          ‘ly:grid-line-interface::width’

          Extent (size) in the X direction, measured in staff-space
          units, relative to object’s reference point.

     ‘X-offset’ (number):
          ‘ly:self-alignment-interface::aligned-on-x-parent’

          The horizontal amount that this object is moved relative to
          its X-parent.

   This object supports the following interface(s): *note
grid-line-interface::, *note grob-interface::, *note item-interface::
and *note self-alignment-interface::.


File: lilypond-internals.info,  Node: GridPoint,  Next: Hairpin,  Prev: GridLine,  Up: All layout objects

3.1.51 GridPoint
----------------

GridPoint objects are created by: *note Grid_point_engraver::.

   Standard settings:

     ‘X-extent’ (pair of numbers):
          '(0 . 0)

          Extent (size) in the X direction, measured in staff-space
          units, relative to object’s reference point.

     ‘Y-extent’ (pair of numbers):
          '(0 . 0)

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

   This object supports the following interface(s): *note
grid-point-interface::, *note grob-interface:: and *note
item-interface::.


File: lilypond-internals.info,  Node: Hairpin,  Next: HorizontalBracket,  Prev: GridPoint,  Up: All layout objects

3.1.52 Hairpin
--------------

Hairpin objects are created by: *note Dynamic_engraver::.

   Standard settings:

     ‘after-line-breaking’ (boolean):
          ‘ly:spanner::kill-zero-spanned-time’

          Dummy property, used to trigger callback for
          ‘after-line-breaking’.

     ‘bound-padding’ (number):
          ‘1.0’

          The amount of padding to insert around spanner bounds.

     ‘broken-bound-padding’ (number):
          ‘ly:hairpin::broken-bound-padding’

          The amount of padding to insert when a spanner is broken at a
          line break.

     ‘circled-tip’ (boolean)
          Put a circle at start/end of hairpins (al/del niente).

     ‘grow-direction’ (direction):
          ‘hairpin::calc-grow-direction’

          Crescendo or decrescendo?

     ‘height’ (dimension, in staff space):
          ‘0.6666’

          Height of an object in ‘staff-space’ units.

     ‘minimum-length’ (dimension, in staff space):
          ‘2.0’

          Try to make a spanner at least this long, normally in the
          horizontal direction.  This requires an appropriate callback
          for the ‘springs-and-rods’ property.  If added to a ‘Tie’,
          this sets the minimum distance between noteheads.

     ‘self-alignment-Y’ (number):
          ‘0’

          Like ‘self-alignment-X’ but for the Y axis.

     ‘springs-and-rods’ (boolean):
          ‘ly:spanner::set-spacing-rods’

          Dummy variable for triggering spacing routines.

     ‘stencil’ (stencil):
          ‘ly:hairpin::print’

          The symbol to print.

     ‘thickness’ (number):
          ‘1.0’

          For grobs made up of lines, this is the thickness of the line.
          For slurs and ties, this is the distance between the two arcs
          of the curve’s outline at its thickest point, not counting the
          diameter of the virtual “pen” that draws the arcs.  This
          property is expressed as a multiple of the current staff-line
          thickness (i.e.  the visual output is influenced by changes to
          ‘STAFF.StaffSymbol.thickness’).

     ‘to-barline’ (boolean):
          ‘#t’

          If true, the spanner will stop at the bar line just before it
          would otherwise stop.

     ‘vertical-skylines’ (pair of skylines):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::vertical-skylines-from-stencil> #<primitive-procedure
          ly:grob::pure-simple-vertical-skylines-from-extents> >’

          Two skylines, one above and one below this grob.

     ‘Y-extent’ (pair of numbers):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::stencil-height> #<primitive-procedure
          ly:hairpin::pure-height> >’

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

     ‘Y-offset’ (number):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:self-alignment-interface::y-aligned-on-self>
          #<primitive-procedure
          ly:self-alignment-interface::pure-y-aligned-on-self> >’

          The vertical amount that this object is moved relative to its
          Y-parent.

   This object supports the following interface(s): *note
dynamic-interface::, *note grob-interface::, *note hairpin-interface::,
*note line-interface::, *note outside-staff-interface::, *note
self-alignment-interface:: and *note spanner-interface::.


File: lilypond-internals.info,  Node: HorizontalBracket,  Next: HorizontalBracketText,  Prev: Hairpin,  Up: All layout objects

3.1.53 HorizontalBracket
------------------------

HorizontalBracket objects are created by: *note
Horizontal_bracket_engraver::.

   Standard settings:

     ‘bracket-flare’ (pair of numbers):
          '(0.5 . 0.5)

          A pair of numbers specifying how much edges of brackets should
          slant outward.  Value ‘0.0’ means straight edges.

     ‘connect-to-neighbor’ (pair):
          ‘ly:tuplet-bracket::calc-connect-to-neighbors’

          Pair of booleans, indicating whether this grob looks as a
          continued break.

     ‘direction’ (direction):
          ‘-1’

          If ‘side-axis’ is ‘0’ (or ‘X’), then this property determines
          whether the object is placed ‘LEFT’, ‘CENTER’ or ‘RIGHT’ with
          respect to the other object.  Otherwise, it determines whether
          the object is placed ‘UP’, ‘CENTER’ or ‘DOWN’.  Numerical
          values may also be used: ‘UP’=‘1’, ‘DOWN’=‘-1’, ‘LEFT’=‘-1’,
          ‘RIGHT’=‘1’, ‘CENTER’=‘0’.

     ‘padding’ (dimension, in staff space):
          ‘0.2’

          Add this much extra space between objects that are next to
          each other.

     ‘side-axis’ (number):
          ‘1’

          If the value is ‘X’ (or equivalently ‘0’), the object is
          placed horizontally next to the other object.  If the value is
          ‘Y’ or ‘1’, it is placed vertically.

     ‘staff-padding’ (dimension, in staff space):
          ‘0.2’

          Maintain this much space between reference points and the
          staff.  Its effect is to align objects of differing sizes
          (like the dynamics p and f) on their baselines.

     ‘stencil’ (stencil):
          ‘ly:horizontal-bracket::print’

          The symbol to print.

     ‘thickness’ (number):
          ‘1.0’

          For grobs made up of lines, this is the thickness of the line.
          For slurs and ties, this is the distance between the two arcs
          of the curve’s outline at its thickest point, not counting the
          diameter of the virtual “pen” that draws the arcs.  This
          property is expressed as a multiple of the current staff-line
          thickness (i.e.  the visual output is influenced by changes to
          ‘STAFF.StaffSymbol.thickness’).

     ‘Y-offset’ (number):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:side-position-interface::y-aligned-side>
          #<primitive-procedure
          ly:side-position-interface::pure-y-aligned-side> >’

          The vertical amount that this object is moved relative to its
          Y-parent.

   This object supports the following interface(s): *note
grob-interface::, *note horizontal-bracket-interface::, *note
line-interface::, *note outside-staff-interface::, *note
side-position-interface:: and *note spanner-interface::.


File: lilypond-internals.info,  Node: HorizontalBracketText,  Next: InstrumentName,  Prev: HorizontalBracket,  Up: All layout objects

3.1.54 HorizontalBracketText
----------------------------

HorizontalBracketText objects are created by: *note
Horizontal_bracket_engraver::.

   Standard settings:

     ‘direction’ (direction):
          ‘ly:horizontal-bracket-text::calc-direction’

          If ‘side-axis’ is ‘0’ (or ‘X’), then this property determines
          whether the object is placed ‘LEFT’, ‘CENTER’ or ‘RIGHT’ with
          respect to the other object.  Otherwise, it determines whether
          the object is placed ‘UP’, ‘CENTER’ or ‘DOWN’.  Numerical
          values may also be used: ‘UP’=‘1’, ‘DOWN’=‘-1’, ‘LEFT’=‘-1’,
          ‘RIGHT’=‘1’, ‘CENTER’=‘0’.

     ‘font-size’ (number):
          ‘-1’

          The font size, compared to the ‘normal’ size.  ‘0’ is
          style-sheet’s normal size, ‘-1’ is smaller, ‘+1’ is bigger.
          Each step of 1 is approximately 12% larger; 6 steps are
          exactly a factor 2 larger.  If the context property ‘fontSize’
          is set, its value is added to this before the glyph is
          printed.  Fractional values are allowed.

     ‘padding’ (dimension, in staff space):
          ‘0.5’

          Add this much extra space between objects that are next to
          each other.

     ‘parent-alignment-X’ (number):
          ‘0’

          Specify on which point of the parent the object is aligned.
          The value ‘-1’ means aligned on parent’s left edge,
          ‘0’ on center, and ‘1’ right edge, in X direction.  Other
          numerical values may also be specified - the unit is half the
          parent’s width.  If unset, the value from ‘self-alignment-X’
          property will be used.

     ‘self-alignment-X’ (number):
          ‘0’

          Specify alignment of an object.  The value ‘-1’ means left
          aligned, ‘0’ centered, and ‘1’ right-aligned in X direction.
          Other numerical values may also be specified - the unit is
          half the object width.

     ‘side-axis’ (number):
          ‘1’

          If the value is ‘X’ (or equivalently ‘0’), the object is
          placed horizontally next to the other object.  If the value is
          ‘Y’ or ‘1’, it is placed vertically.

     ‘stencil’ (stencil):
          ‘ly:horizontal-bracket-text::print’

          The symbol to print.

     ‘X-offset’ (number):
          ‘ly:self-alignment-interface::aligned-on-x-parent’

          The horizontal amount that this object is moved relative to
          its X-parent.

     ‘Y-offset’ (number):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:side-position-interface::y-aligned-side>
          #<primitive-procedure
          ly:side-position-interface::pure-y-aligned-side> >’

          The vertical amount that this object is moved relative to its
          Y-parent.

   This object supports the following interface(s): *note
font-interface::, *note grob-interface::, *note
horizontal-bracket-text-interface::, *note outside-staff-interface::,
*note self-alignment-interface::, *note side-position-interface::, *note
spanner-interface:: and *note text-interface::.


File: lilypond-internals.info,  Node: InstrumentName,  Next: InstrumentSwitch,  Prev: HorizontalBracketText,  Up: All layout objects

3.1.55 InstrumentName
---------------------

InstrumentName objects are created by: *note Instrument_name_engraver::.

   Standard settings:

     ‘direction’ (direction):
          ‘-1’

          If ‘side-axis’ is ‘0’ (or ‘X’), then this property determines
          whether the object is placed ‘LEFT’, ‘CENTER’ or ‘RIGHT’ with
          respect to the other object.  Otherwise, it determines whether
          the object is placed ‘UP’, ‘CENTER’ or ‘DOWN’.  Numerical
          values may also be used: ‘UP’=‘1’, ‘DOWN’=‘-1’, ‘LEFT’=‘-1’,
          ‘RIGHT’=‘1’, ‘CENTER’=‘0’.

     ‘padding’ (dimension, in staff space):
          ‘0.3’

          Add this much extra space between objects that are next to
          each other.

     ‘self-alignment-X’ (number):
          ‘0’

          Specify alignment of an object.  The value ‘-1’ means left
          aligned, ‘0’ centered, and ‘1’ right-aligned in X direction.
          Other numerical values may also be specified - the unit is
          half the object width.

     ‘self-alignment-Y’ (number):
          ‘0’

          Like ‘self-alignment-X’ but for the Y axis.

     ‘stencil’ (stencil):
          ‘system-start-text::print’

          The symbol to print.

     ‘X-offset’ (number):
          ‘system-start-text::calc-x-offset’

          The horizontal amount that this object is moved relative to
          its X-parent.

     ‘Y-offset’ (number):
          ‘system-start-text::calc-y-offset’

          The vertical amount that this object is moved relative to its
          Y-parent.

   This object supports the following interface(s): *note
font-interface::, *note grob-interface::, *note
self-alignment-interface::, *note side-position-interface::, *note
spanner-interface::, *note system-start-text-interface:: and *note
text-interface::.


File: lilypond-internals.info,  Node: InstrumentSwitch,  Next: KeyCancellation,  Prev: InstrumentName,  Up: All layout objects

3.1.56 InstrumentSwitch
-----------------------

InstrumentSwitch objects are created by: *note
Instrument_switch_engraver::.

   Standard settings:

     ‘direction’ (direction):
          ‘1’

          If ‘side-axis’ is ‘0’ (or ‘X’), then this property determines
          whether the object is placed ‘LEFT’, ‘CENTER’ or ‘RIGHT’ with
          respect to the other object.  Otherwise, it determines whether
          the object is placed ‘UP’, ‘CENTER’ or ‘DOWN’.  Numerical
          values may also be used: ‘UP’=‘1’, ‘DOWN’=‘-1’, ‘LEFT’=‘-1’,
          ‘RIGHT’=‘1’, ‘CENTER’=‘0’.

     ‘extra-spacing-width’ (pair of numbers):
          '(+inf.0 . -inf.0)

          In the horizontal spacing problem, we pad each item by this
          amount (by adding the ‘car’ on the left side of the item and
          adding the ‘cdr’ on the right side of the item).  In order to
          make a grob take up no horizontal space at all, set this to
          ‘(+inf.0 . -inf.0)’.

     ‘outside-staff-priority’ (number):
          ‘500’

          If set, the grob is positioned outside the staff in such a way
          as to avoid all collisions.  In case of a potential collision,
          the grob with the smaller ‘outside-staff-priority’ is closer
          to the staff.

     ‘padding’ (dimension, in staff space):
          ‘0.5’

          Add this much extra space between objects that are next to
          each other.

     ‘parent-alignment-X’ (number)
          Specify on which point of the parent the object is aligned.
          The value ‘-1’ means aligned on parent’s left edge,
          ‘0’ on center, and ‘1’ right edge, in X direction.  Other
          numerical values may also be specified - the unit is half the
          parent’s width.  If unset, the value from ‘self-alignment-X’
          property will be used.

     ‘self-alignment-X’ (number):
          ‘-1’

          Specify alignment of an object.  The value ‘-1’ means left
          aligned, ‘0’ centered, and ‘1’ right-aligned in X direction.
          Other numerical values may also be specified - the unit is
          half the object width.

     ‘side-axis’ (number):
          ‘1’

          If the value is ‘X’ (or equivalently ‘0’), the object is
          placed horizontally next to the other object.  If the value is
          ‘Y’ or ‘1’, it is placed vertically.

     ‘staff-padding’ (dimension, in staff space):
          ‘0.5’

          Maintain this much space between reference points and the
          staff.  Its effect is to align objects of differing sizes
          (like the dynamics p and f) on their baselines.

     ‘stencil’ (stencil):
          ‘ly:text-interface::print’

          The symbol to print.

     ‘X-offset’ (number):
          ‘ly:self-alignment-interface::aligned-on-x-parent’

          The horizontal amount that this object is moved relative to
          its X-parent.

     ‘Y-extent’ (pair of numbers):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::stencil-height> >’

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

     ‘Y-offset’ (number):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:side-position-interface::y-aligned-side>
          #<primitive-procedure
          ly:side-position-interface::pure-y-aligned-side> >’

          The vertical amount that this object is moved relative to its
          Y-parent.

   This object supports the following interface(s): *note
font-interface::, *note grob-interface::, *note item-interface::, *note
outside-staff-interface::, *note self-alignment-interface::, *note
side-position-interface:: and *note text-interface::.


File: lilypond-internals.info,  Node: KeyCancellation,  Next: KeySignature,  Prev: InstrumentSwitch,  Up: All layout objects

3.1.57 KeyCancellation
----------------------

KeyCancellation objects are created by: *note Key_engraver::.

   Standard settings:

     ‘break-align-symbol’ (symbol):
          ‘'key-cancellation’

          This key is used for aligning, ordering, and spacing breakable
          items.  See *note
          (lilypond-internals)break-alignment-interface::.

     ‘break-visibility’ (vector):
          #(#t #t #f)

          A vector of 3 booleans,
          ‘#(END-OF-LINE UNBROKEN BEGIN-OF-LINE)’.  ‘#t’ means visible,
          ‘#f’ means killed.

     ‘extra-spacing-height’ (pair of numbers):
          ‘pure-from-neighbor-interface::extra-spacing-height-including-staff’

          In the horizontal spacing problem, we increase the height of
          each item by this amount (by adding the ‘car’ to the bottom of
          the item and adding the ‘cdr’ to the top of the item).  In
          order to make a grob infinitely high (to prevent the
          horizontal spacing problem from placing any other grobs above
          or below this grob), set this to ‘(-inf.0 . +inf.0)’.

     ‘extra-spacing-width’ (pair of numbers):
          '(0.0 . 1.0)

          In the horizontal spacing problem, we pad each item by this
          amount (by adding the ‘car’ on the left side of the item and
          adding the ‘cdr’ on the right side of the item).  In order to
          make a grob take up no horizontal space at all, set this to
          ‘(+inf.0 . -inf.0)’.

     ‘flat-positions’ (list):
          '(2 3 4 2 1 2 1)

          Flats in key signatures are placed within the specified ranges
          of staff-positions.  The general form is a list of pairs, with
          one pair for each type of clef, in order of the staff-position
          at which each clef places C: ‘(alto treble tenor soprano
          baritone mezzosoprano bass)’.  If the list contains a single
          element it applies for all clefs.  A single number in place of
          a pair sets accidentals within the octave ending at that
          staff-position.

     ‘glyph-name-alist’ (list):
          '((0 . "accidentals.natural"))

          An alist of key-string pairs.

     ‘non-musical’ (boolean):
          ‘#t’

          True if the grob belongs to a ‘NonMusicalPaperColumn’.

     ‘sharp-positions’ (list):
          '(4 5 4 2 3 2 3)

          Sharps in key signatures are placed within the specified
          ranges of staff-positions.  The general form is a list of
          pairs, with one pair for each type of clef, in order of the
          staff-position at which each clef places C: ‘(alto treble
          tenor soprano baritone mezzosoprano bass)’.  If the list
          contains a single element it applies for all clefs.  A single
          number in place of a pair sets accidentals within the octave
          ending at that staff-position.

     ‘space-alist’ (list):
          '((time-signature extra-space . 1.25)
            (staff-bar extra-space . 0.6)
            (key-signature extra-space . 0.5)
            (cue-clef extra-space . 0.5)
            (right-edge extra-space . 0.5)
            (first-note fixed-space . 2.5)
            (custos extra-space . 1.0))

          An alist that specifies distances from this grob to other
          breakable items, using the format:

               '((BREAK-ALIGN-SYMBOL . (SPACING-STYLE . SPACE))
                 (BREAK-ALIGN-SYMBOL . (SPACING-STYLE . SPACE))
                 ...)

          Standard choices for ‘BREAK-ALIGN-SYMBOL’ are listed in *note
          (lilypond-internals)break-alignment-interface::.
          Additionally, three special break-align symbols available to
          ‘space-alist’ are:

               ‘first-note’
                    used when the grob is just left of the first note on
                    a line

               ‘next-note’
                    used when the grob is just left of any other note;
                    if not set, the value of ‘first-note’ gets used

               ‘right-edge’
                    used when the grob is the last item on the line
                    (only compatible with the ‘extra-space’ spacing
                    style)

          Choices for ‘SPACING-STYLE’ are:

               ‘extra-space’
                    Put this much space between the two grobs.  The
                    space is stretchable when paired with ‘first-note’
                    or ‘next-note’; otherwise it is fixed.

               ‘minimum-space’
                    Put at least this much space between the left sides
                    of both grobs, without allowing them to collide.
                    The space is stretchable when paired with
                    ‘first-note’ or ‘next-note’; otherwise it is fixed.
                    Not compatible with ‘right-edge’.

               ‘fixed-space’
                    Only compatible with ‘first-note’ and ‘next-note’.
                    Put this much fixed space between the grob and the
                    note.

               ‘minimum-fixed-space’
                    Only compatible with ‘first-note’ and ‘next-note’.
                    Put at least this much fixed space between the left
                    side of the grob and the left side of the note,
                    without allowing them to collide.

               ‘semi-fixed-space’
                    Only compatible with ‘first-note’ and ‘next-note’.
                    Put this much space between the grob and the note,
                    such that half of the space is fixed and half is
                    stretchable.

          Rules for this spacing are much more complicated than this.
          See [Wanske] page 126–134, [Ross] page 143–147.

     ‘stencil’ (stencil):
          ‘ly:key-signature-interface::print’

          The symbol to print.

     ‘vertical-skylines’ (pair of skylines):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::vertical-skylines-from-stencil> >’

          Two skylines, one above and one below this grob.

     ‘Y-extent’ (pair of numbers):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::stencil-height> >’

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

     ‘Y-offset’ (number):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:staff-symbol-referencer::callback> >’

          The vertical amount that this object is moved relative to its
          Y-parent.

   This object supports the following interface(s): *note
break-aligned-interface::, *note font-interface::, *note
grob-interface::, *note item-interface::, *note
key-cancellation-interface::, *note key-signature-interface::, *note
pure-from-neighbor-interface:: and *note
staff-symbol-referencer-interface::.


File: lilypond-internals.info,  Node: KeySignature,  Next: KievanLigature,  Prev: KeyCancellation,  Up: All layout objects

3.1.58 KeySignature
-------------------

KeySignature objects are created by: *note Key_engraver::.

   Standard settings:

     ‘avoid-slur’ (symbol):
          ‘'inside’

          Method of handling slur collisions.  Choices are ‘inside’,
          ‘outside’, ‘around’, and ‘ignore’.  ‘inside’ adjusts the slur
          if needed to keep the grob inside the slur.  ‘outside’ moves
          the grob vertically to the outside of the slur.  ‘around’
          moves the grob vertically to the outside of the slur only if
          there is a collision.  ‘ignore’ does not move either.  In
          grobs whose notational significance depends on vertical
          position (such as accidentals, clefs, etc.), ‘outside’ and
          ‘around’ behave like ‘ignore’.

     ‘break-align-anchor’ (number):
          ‘ly:break-aligned-interface::calc-extent-aligned-anchor’

          Grobs aligned to this breakable item will have their X-offsets
          shifted by this number.  In bar lines, for example, this is
          used to position grobs relative to the (visual) center of the
          bar line.

     ‘break-align-anchor-alignment’ (number):
          ‘1’

          Read by
          ‘ly:break-aligned-interface::calc-extent-aligned-anchor’ for
          aligning an anchor to a grob’s extent.

     ‘break-align-symbol’ (symbol):
          ‘'key-signature’

          This key is used for aligning, ordering, and spacing breakable
          items.  See *note
          (lilypond-internals)break-alignment-interface::.

     ‘break-visibility’ (vector):
          #(#f #f #t)

          A vector of 3 booleans,
          ‘#(END-OF-LINE UNBROKEN BEGIN-OF-LINE)’.  ‘#t’ means visible,
          ‘#f’ means killed.

     ‘extra-spacing-height’ (pair of numbers):
          ‘pure-from-neighbor-interface::extra-spacing-height-including-staff’

          In the horizontal spacing problem, we increase the height of
          each item by this amount (by adding the ‘car’ to the bottom of
          the item and adding the ‘cdr’ to the top of the item).  In
          order to make a grob infinitely high (to prevent the
          horizontal spacing problem from placing any other grobs above
          or below this grob), set this to ‘(-inf.0 . +inf.0)’.

     ‘extra-spacing-width’ (pair of numbers):
          '(0.0 . 1.0)

          In the horizontal spacing problem, we pad each item by this
          amount (by adding the ‘car’ on the left side of the item and
          adding the ‘cdr’ on the right side of the item).  In order to
          make a grob take up no horizontal space at all, set this to
          ‘(+inf.0 . -inf.0)’.

     ‘flat-positions’ (list):
          '(2 3 4 2 1 2 1)

          Flats in key signatures are placed within the specified ranges
          of staff-positions.  The general form is a list of pairs, with
          one pair for each type of clef, in order of the staff-position
          at which each clef places C: ‘(alto treble tenor soprano
          baritone mezzosoprano bass)’.  If the list contains a single
          element it applies for all clefs.  A single number in place of
          a pair sets accidentals within the octave ending at that
          staff-position.

     ‘glyph-name-alist’ (list):
          '((0 . "accidentals.natural")
            (-1/2 . "accidentals.flat")
            (1/2 . "accidentals.sharp")
            (1 . "accidentals.doublesharp")
            (-1 . "accidentals.flatflat")
            (3/4
             .
             "accidentals.sharp.slashslash.stemstemstem")
            (1/4 . "accidentals.sharp.slashslash.stem")
            (-1/4 . "accidentals.mirroredflat")
            (-3/4 . "accidentals.mirroredflat.flat"))

          An alist of key-string pairs.

     ‘non-musical’ (boolean):
          ‘#t’

          True if the grob belongs to a ‘NonMusicalPaperColumn’.

     ‘sharp-positions’ (list):
          '(4 5 4 2 3 2 3)

          Sharps in key signatures are placed within the specified
          ranges of staff-positions.  The general form is a list of
          pairs, with one pair for each type of clef, in order of the
          staff-position at which each clef places C: ‘(alto treble
          tenor soprano baritone mezzosoprano bass)’.  If the list
          contains a single element it applies for all clefs.  A single
          number in place of a pair sets accidentals within the octave
          ending at that staff-position.

     ‘space-alist’ (list):
          '((time-signature extra-space . 1.15)
            (staff-bar extra-space . 1.1)
            (cue-clef extra-space . 0.5)
            (right-edge extra-space . 0.5)
            (first-note fixed-space . 2.5))

          An alist that specifies distances from this grob to other
          breakable items, using the format:

               '((BREAK-ALIGN-SYMBOL . (SPACING-STYLE . SPACE))
                 (BREAK-ALIGN-SYMBOL . (SPACING-STYLE . SPACE))
                 ...)

          Standard choices for ‘BREAK-ALIGN-SYMBOL’ are listed in *note
          (lilypond-internals)break-alignment-interface::.
          Additionally, three special break-align symbols available to
          ‘space-alist’ are:

               ‘first-note’
                    used when the grob is just left of the first note on
                    a line

               ‘next-note’
                    used when the grob is just left of any other note;
                    if not set, the value of ‘first-note’ gets used

               ‘right-edge’
                    used when the grob is the last item on the line
                    (only compatible with the ‘extra-space’ spacing
                    style)

          Choices for ‘SPACING-STYLE’ are:

               ‘extra-space’
                    Put this much space between the two grobs.  The
                    space is stretchable when paired with ‘first-note’
                    or ‘next-note’; otherwise it is fixed.

               ‘minimum-space’
                    Put at least this much space between the left sides
                    of both grobs, without allowing them to collide.
                    The space is stretchable when paired with
                    ‘first-note’ or ‘next-note’; otherwise it is fixed.
                    Not compatible with ‘right-edge’.

               ‘fixed-space’
                    Only compatible with ‘first-note’ and ‘next-note’.
                    Put this much fixed space between the grob and the
                    note.

               ‘minimum-fixed-space’
                    Only compatible with ‘first-note’ and ‘next-note’.
                    Put at least this much fixed space between the left
                    side of the grob and the left side of the note,
                    without allowing them to collide.

               ‘semi-fixed-space’
                    Only compatible with ‘first-note’ and ‘next-note’.
                    Put this much space between the grob and the note,
                    such that half of the space is fixed and half is
                    stretchable.

          Rules for this spacing are much more complicated than this.
          See [Wanske] page 126–134, [Ross] page 143–147.

     ‘stencil’ (stencil):
          ‘ly:key-signature-interface::print’

          The symbol to print.

     ‘vertical-skylines’ (pair of skylines):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::vertical-skylines-from-stencil> >’

          Two skylines, one above and one below this grob.

     ‘Y-extent’ (pair of numbers):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::stencil-height> >’

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

     ‘Y-offset’ (number):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:staff-symbol-referencer::callback> >’

          The vertical amount that this object is moved relative to its
          Y-parent.

   This object supports the following interface(s): *note
break-aligned-interface::, *note font-interface::, *note
grob-interface::, *note item-interface::, *note
key-signature-interface::, *note pure-from-neighbor-interface:: and
*note staff-symbol-referencer-interface::.


File: lilypond-internals.info,  Node: KievanLigature,  Next: LaissezVibrerTie,  Prev: KeySignature,  Up: All layout objects

3.1.59 KievanLigature
---------------------

KievanLigature objects are created by: *note Kievan_ligature_engraver::.

   Standard settings:

     ‘padding’ (dimension, in staff space):
          ‘0.5’

          Add this much extra space between objects that are next to
          each other.

     ‘springs-and-rods’ (boolean):
          ‘ly:spanner::set-spacing-rods’

          Dummy variable for triggering spacing routines.

     ‘stencil’ (stencil):
          ‘ly:kievan-ligature::print’

          The symbol to print.

   This object supports the following interface(s): *note
font-interface::, *note grob-interface::, *note
kievan-ligature-interface:: and *note spanner-interface::.


File: lilypond-internals.info,  Node: LaissezVibrerTie,  Next: LaissezVibrerTieColumn,  Prev: KievanLigature,  Up: All layout objects

3.1.60 LaissezVibrerTie
-----------------------

LaissezVibrerTie objects are created by: *note
Laissez_vibrer_engraver::.

   Standard settings:

     ‘control-points’ (list of number pairs):
          ‘ly:semi-tie::calc-control-points’

          List of offsets (number pairs) that form control points for
          the tie, slur, or bracket shape.  For Béziers, this should
          list the control points of a third-order Bézier curve.

     ‘details’ (list):
          '((ratio . 0.333) (height-limit . 1.0))

          Alist of parameters for detailed grob behavior.  More
          information on the allowed parameters for a grob can be found
          by looking at the top of the Internals Reference page for each
          interface having a ‘details’ property.

     ‘direction’ (direction):
          ‘ly:tie::calc-direction’

          If ‘side-axis’ is ‘0’ (or ‘X’), then this property determines
          whether the object is placed ‘LEFT’, ‘CENTER’ or ‘RIGHT’ with
          respect to the other object.  Otherwise, it determines whether
          the object is placed ‘UP’, ‘CENTER’ or ‘DOWN’.  Numerical
          values may also be used: ‘UP’=‘1’, ‘DOWN’=‘-1’, ‘LEFT’=‘-1’,
          ‘RIGHT’=‘1’, ‘CENTER’=‘0’.

     ‘extra-spacing-height’ (pair of numbers):
          '(-0.5 . 0.5)

          In the horizontal spacing problem, we increase the height of
          each item by this amount (by adding the ‘car’ to the bottom of
          the item and adding the ‘cdr’ to the top of the item).  In
          order to make a grob infinitely high (to prevent the
          horizontal spacing problem from placing any other grobs above
          or below this grob), set this to ‘(-inf.0 . +inf.0)’.

     ‘head-direction’ (direction):
          ‘-1’

          Are the note heads left or right in a semitie?

     ‘stencil’ (stencil):
          ‘laissez-vibrer::print’

          The symbol to print.

     ‘thickness’ (number):
          ‘1.0’

          For grobs made up of lines, this is the thickness of the line.
          For slurs and ties, this is the distance between the two arcs
          of the curve’s outline at its thickest point, not counting the
          diameter of the virtual “pen” that draws the arcs.  This
          property is expressed as a multiple of the current staff-line
          thickness (i.e.  the visual output is influenced by changes to
          ‘STAFF.StaffSymbol.thickness’).

     ‘vertical-skylines’ (pair of skylines):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::vertical-skylines-from-stencil> >’

          Two skylines, one above and one below this grob.

     ‘Y-extent’ (pair of numbers):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::stencil-height> >’

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

   This object supports the following interface(s): *note
grob-interface::, *note item-interface:: and *note semi-tie-interface::.


File: lilypond-internals.info,  Node: LaissezVibrerTieColumn,  Next: LedgerLineSpanner,  Prev: LaissezVibrerTie,  Up: All layout objects

3.1.61 LaissezVibrerTieColumn
-----------------------------

LaissezVibrerTieColumn objects are created by: *note
Laissez_vibrer_engraver::.

   Standard settings:

     ‘head-direction’ (direction):
          ‘ly:semi-tie-column::calc-head-direction’

          Are the note heads left or right in a semitie?

     ‘X-extent’ (pair of numbers)
          Extent (size) in the X direction, measured in staff-space
          units, relative to object’s reference point.

     ‘Y-extent’ (pair of numbers)
          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

   This object supports the following interface(s): *note
grob-interface::, *note item-interface:: and *note
semi-tie-column-interface::.


File: lilypond-internals.info,  Node: LedgerLineSpanner,  Next: LeftEdge,  Prev: LaissezVibrerTieColumn,  Up: All layout objects

3.1.62 LedgerLineSpanner
------------------------

LedgerLineSpanner objects are created by: *note Ledger_line_engraver::.

   Standard settings:

     ‘layer’ (integer):
          ‘0’

          An integer which determines the order of printing objects.
          Objects with the lowest value of layer are drawn first, then
          objects with progressively higher values are drawn, so objects
          with higher values overwrite objects with lower values.  By
          default most objects are assigned a layer value of 1.

     ‘length-fraction’ (number):
          ‘0.25’

          Multiplier for lengths.  Used for determining ledger lines and
          stem lengths.

     ‘minimum-length-fraction’ (number):
          ‘0.25’

          Minimum length of ledger line as fraction of note head size.

     ‘springs-and-rods’ (boolean):
          ‘ly:ledger-line-spanner::set-spacing-rods’

          Dummy variable for triggering spacing routines.

     ‘stencil’ (stencil):
          ‘ly:ledger-line-spanner::print’

          The symbol to print.

     ‘vertical-skylines’ (pair of skylines):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::vertical-skylines-from-stencil> #<primitive-procedure
          ly:grob::pure-simple-vertical-skylines-from-extents> >’

          Two skylines, one above and one below this grob.

     ‘X-extent’ (pair of numbers)
          Extent (size) in the X direction, measured in staff-space
          units, relative to object’s reference point.

     ‘Y-extent’ (pair of numbers)
          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

   This object supports the following interface(s): *note
grob-interface::, *note ledger-line-spanner-interface:: and *note
spanner-interface::.


File: lilypond-internals.info,  Node: LeftEdge,  Next: LigatureBracket,  Prev: LedgerLineSpanner,  Up: All layout objects

3.1.63 LeftEdge
---------------

LeftEdge objects are created by: *note Break_align_engraver::.

   Standard settings:

     ‘break-align-anchor’ (number):
          ‘ly:break-aligned-interface::calc-extent-aligned-anchor’

          Grobs aligned to this breakable item will have their X-offsets
          shifted by this number.  In bar lines, for example, this is
          used to position grobs relative to the (visual) center of the
          bar line.

     ‘break-align-symbol’ (symbol):
          ‘'left-edge’

          This key is used for aligning, ordering, and spacing breakable
          items.  See *note
          (lilypond-internals)break-alignment-interface::.

     ‘break-visibility’ (vector):
          #(#f #f #t)

          A vector of 3 booleans,
          ‘#(END-OF-LINE UNBROKEN BEGIN-OF-LINE)’.  ‘#t’ means visible,
          ‘#f’ means killed.

     ‘non-musical’ (boolean):
          ‘#t’

          True if the grob belongs to a ‘NonMusicalPaperColumn’.

     ‘space-alist’ (list):
          '((ambitus extra-space . 2.0)
            (breathing-sign minimum-space . 0.0)
            (cue-end-clef extra-space . 0.8)
            (clef extra-space . 0.8)
            (cue-clef extra-space . 0.8)
            (staff-bar extra-space . 0.0)
            (key-cancellation extra-space . 0.0)
            (key-signature extra-space . 0.8)
            (time-signature extra-space . 1.0)
            (custos extra-space . 0.0)
            (first-note fixed-space . 2.0)
            (right-edge extra-space . 0.0))

          An alist that specifies distances from this grob to other
          breakable items, using the format:

               '((BREAK-ALIGN-SYMBOL . (SPACING-STYLE . SPACE))
                 (BREAK-ALIGN-SYMBOL . (SPACING-STYLE . SPACE))
                 ...)

          Standard choices for ‘BREAK-ALIGN-SYMBOL’ are listed in *note
          (lilypond-internals)break-alignment-interface::.
          Additionally, three special break-align symbols available to
          ‘space-alist’ are:

               ‘first-note’
                    used when the grob is just left of the first note on
                    a line

               ‘next-note’
                    used when the grob is just left of any other note;
                    if not set, the value of ‘first-note’ gets used

               ‘right-edge’
                    used when the grob is the last item on the line
                    (only compatible with the ‘extra-space’ spacing
                    style)

          Choices for ‘SPACING-STYLE’ are:

               ‘extra-space’
                    Put this much space between the two grobs.  The
                    space is stretchable when paired with ‘first-note’
                    or ‘next-note’; otherwise it is fixed.

               ‘minimum-space’
                    Put at least this much space between the left sides
                    of both grobs, without allowing them to collide.
                    The space is stretchable when paired with
                    ‘first-note’ or ‘next-note’; otherwise it is fixed.
                    Not compatible with ‘right-edge’.

               ‘fixed-space’
                    Only compatible with ‘first-note’ and ‘next-note’.
                    Put this much fixed space between the grob and the
                    note.

               ‘minimum-fixed-space’
                    Only compatible with ‘first-note’ and ‘next-note’.
                    Put at least this much fixed space between the left
                    side of the grob and the left side of the note,
                    without allowing them to collide.

               ‘semi-fixed-space’
                    Only compatible with ‘first-note’ and ‘next-note’.
                    Put this much space between the grob and the note,
                    such that half of the space is fixed and half is
                    stretchable.

          Rules for this spacing are much more complicated than this.
          See [Wanske] page 126–134, [Ross] page 143–147.

     ‘X-extent’ (pair of numbers):
          '(0 . 0)

          Extent (size) in the X direction, measured in staff-space
          units, relative to object’s reference point.

     ‘Y-extent’ (pair of numbers):
          '(0 . 0)

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

   This object supports the following interface(s): *note
break-aligned-interface::, *note grob-interface:: and *note
item-interface::.


File: lilypond-internals.info,  Node: LigatureBracket,  Next: LyricExtender,  Prev: LeftEdge,  Up: All layout objects

3.1.64 LigatureBracket
----------------------

LigatureBracket objects are created by: *note
Ligature_bracket_engraver::.

   Standard settings:

     ‘bracket-visibility’ (boolean or symbol):
          ‘#t’

          This controls the visibility of the tuplet bracket.  Setting
          it to false prevents printing of the bracket.  Setting the
          property to ‘if-no-beam’ makes it print only if there is no
          beam associated with this tuplet bracket.

     ‘connect-to-neighbor’ (pair):
          ‘ly:tuplet-bracket::calc-connect-to-neighbors’

          Pair of booleans, indicating whether this grob looks as a
          continued break.

     ‘direction’ (direction):
          ‘1’

          If ‘side-axis’ is ‘0’ (or ‘X’), then this property determines
          whether the object is placed ‘LEFT’, ‘CENTER’ or ‘RIGHT’ with
          respect to the other object.  Otherwise, it determines whether
          the object is placed ‘UP’, ‘CENTER’ or ‘DOWN’.  Numerical
          values may also be used: ‘UP’=‘1’, ‘DOWN’=‘-1’, ‘LEFT’=‘-1’,
          ‘RIGHT’=‘1’, ‘CENTER’=‘0’.

     ‘edge-height’ (pair):
          '(0.7 . 0.7)

          A pair of numbers specifying the heights of the vertical
          edges: ‘(LEFT-HEIGHT . RIGHT-HEIGHT)’.

     ‘padding’ (dimension, in staff space):
          ‘2.0’

          Add this much extra space between objects that are next to
          each other.

     ‘positions’ (pair of numbers):
          ‘ly:tuplet-bracket::calc-positions’

          Pair of staff coordinates ‘(LEFT . RIGHT)’, where both LEFT
          and RIGHT are in ‘staff-space’ units of the current staff.
          For slurs, this value selects which slur candidate to use; if
          extreme positions are requested, the closest one is taken.

     ‘shorten-pair’ (pair of numbers):
          '(-0.2 . -0.2)

          The lengths to shorten on both sides a hairpin or text-spanner
          such as a pedal bracket.  Positive values shorten the hairpin
          or text-spanner, while negative values lengthen it.

     ‘staff-padding’ (dimension, in staff space):
          ‘0.25’

          Maintain this much space between reference points and the
          staff.  Its effect is to align objects of differing sizes
          (like the dynamics p and f) on their baselines.

     ‘stencil’ (stencil):
          ‘ly:tuplet-bracket::print’

          The symbol to print.

     ‘thickness’ (number):
          ‘1.6’

          For grobs made up of lines, this is the thickness of the line.
          For slurs and ties, this is the distance between the two arcs
          of the curve’s outline at its thickest point, not counting the
          diameter of the virtual “pen” that draws the arcs.  This
          property is expressed as a multiple of the current staff-line
          thickness (i.e.  the visual output is influenced by changes to
          ‘STAFF.StaffSymbol.thickness’).

     ‘X-positions’ (pair of numbers):
          ‘ly:tuplet-bracket::calc-x-positions’

          Pair of X staff coordinates of a spanner in the form ‘(LEFT .
          RIGHT)’, where both LEFT and RIGHT are in ‘staff-space’ units
          of the current staff.

   This object supports the following interface(s): *note
grob-interface::, *note line-interface::, *note spanner-interface:: and
*note tuplet-bracket-interface::.


File: lilypond-internals.info,  Node: LyricExtender,  Next: LyricHyphen,  Prev: LigatureBracket,  Up: All layout objects

3.1.65 LyricExtender
--------------------

LyricExtender objects are created by: *note Extender_engraver::.

   Standard settings:

     ‘minimum-length’ (dimension, in staff space):
          ‘1.5’

          Try to make a spanner at least this long, normally in the
          horizontal direction.  This requires an appropriate callback
          for the ‘springs-and-rods’ property.  If added to a ‘Tie’,
          this sets the minimum distance between noteheads.

     ‘stencil’ (stencil):
          ‘ly:lyric-extender::print’

          The symbol to print.

     ‘thickness’ (number):
          ‘0.8’

          For grobs made up of lines, this is the thickness of the line.
          For slurs and ties, this is the distance between the two arcs
          of the curve’s outline at its thickest point, not counting the
          diameter of the virtual “pen” that draws the arcs.  This
          property is expressed as a multiple of the current staff-line
          thickness (i.e.  the visual output is influenced by changes to
          ‘STAFF.StaffSymbol.thickness’).

     ‘Y-extent’ (pair of numbers):
          '(0 . 0)

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

   This object supports the following interface(s): *note
grob-interface::, *note lyric-extender-interface::, *note
lyric-interface:: and *note spanner-interface::.


File: lilypond-internals.info,  Node: LyricHyphen,  Next: LyricSpace,  Prev: LyricExtender,  Up: All layout objects

3.1.66 LyricHyphen
------------------

LyricHyphen objects are created by: *note Hyphen_engraver::.

   Standard settings:

     ‘after-line-breaking’ (boolean):
          ‘ly:spanner::kill-zero-spanned-time’

          Dummy property, used to trigger callback for
          ‘after-line-breaking’.

     ‘dash-period’ (number):
          ‘10.0’

          The length of one dash together with whitespace.  If negative,
          no line is drawn at all.

     ‘height’ (dimension, in staff space):
          ‘0.42’

          Height of an object in ‘staff-space’ units.

     ‘length’ (dimension, in staff space):
          ‘0.66’

          User override for the stem length of unbeamed stems.

     ‘minimum-distance’ (dimension, in staff space):
          ‘0.1’

          Minimum distance between rest and notes or beam.

     ‘minimum-length’ (dimension, in staff space):
          ‘0.3’

          Try to make a spanner at least this long, normally in the
          horizontal direction.  This requires an appropriate callback
          for the ‘springs-and-rods’ property.  If added to a ‘Tie’,
          this sets the minimum distance between noteheads.

     ‘padding’ (dimension, in staff space):
          ‘0.07’

          Add this much extra space between objects that are next to
          each other.

     ‘springs-and-rods’ (boolean):
          ‘ly:lyric-hyphen::set-spacing-rods’

          Dummy variable for triggering spacing routines.

     ‘stencil’ (stencil):
          ‘ly:lyric-hyphen::print’

          The symbol to print.

     ‘thickness’ (number):
          ‘1.3’

          For grobs made up of lines, this is the thickness of the line.
          For slurs and ties, this is the distance between the two arcs
          of the curve’s outline at its thickest point, not counting the
          diameter of the virtual “pen” that draws the arcs.  This
          property is expressed as a multiple of the current staff-line
          thickness (i.e.  the visual output is influenced by changes to
          ‘STAFF.StaffSymbol.thickness’).

     ‘vertical-skylines’ (pair of skylines):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::vertical-skylines-from-stencil> #<primitive-procedure
          ly:grob::pure-simple-vertical-skylines-from-extents> >’

          Two skylines, one above and one below this grob.

     ‘Y-extent’ (pair of numbers):
          '(0 . 0)

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

   This object supports the following interface(s): *note
font-interface::, *note grob-interface::, *note
lyric-hyphen-interface::, *note lyric-interface:: and *note
spanner-interface::.


File: lilypond-internals.info,  Node: LyricSpace,  Next: LyricText,  Prev: LyricHyphen,  Up: All layout objects

3.1.67 LyricSpace
-----------------

LyricSpace objects are created by: *note Hyphen_engraver::.

   Standard settings:

     ‘minimum-distance’ (dimension, in staff space):
          ‘0.45’

          Minimum distance between rest and notes or beam.

     ‘padding’ (dimension, in staff space):
          ‘0.0’

          Add this much extra space between objects that are next to
          each other.

     ‘springs-and-rods’ (boolean):
          ‘ly:lyric-hyphen::set-spacing-rods’

          Dummy variable for triggering spacing routines.

     ‘X-extent’ (pair of numbers)
          Extent (size) in the X direction, measured in staff-space
          units, relative to object’s reference point.

     ‘Y-extent’ (pair of numbers)
          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

   This object supports the following interface(s): *note
grob-interface::, *note lyric-hyphen-interface:: and *note
spanner-interface::.


File: lilypond-internals.info,  Node: LyricText,  Next: MeasureCounter,  Prev: LyricSpace,  Up: All layout objects

3.1.68 LyricText
----------------

LyricText objects are created by: *note Lyric_engraver::.

   Standard settings:

     ‘extra-spacing-height’ (pair of numbers):
          '(0.2 . -0.2)

          In the horizontal spacing problem, we increase the height of
          each item by this amount (by adding the ‘car’ to the bottom of
          the item and adding the ‘cdr’ to the top of the item).  In
          order to make a grob infinitely high (to prevent the
          horizontal spacing problem from placing any other grobs above
          or below this grob), set this to ‘(-inf.0 . +inf.0)’.

     ‘extra-spacing-width’ (pair of numbers):
          '(0.0 . 0.0)

          In the horizontal spacing problem, we pad each item by this
          amount (by adding the ‘car’ on the left side of the item and
          adding the ‘cdr’ on the right side of the item).  In order to
          make a grob take up no horizontal space at all, set this to
          ‘(+inf.0 . -inf.0)’.

     ‘font-series’ (symbol):
          ‘'medium’

          Select the series of a font.  Choices include ‘medium’,
          ‘bold’, ‘bold-narrow’, etc.

     ‘font-size’ (number):
          ‘1.0’

          The font size, compared to the ‘normal’ size.  ‘0’ is
          style-sheet’s normal size, ‘-1’ is smaller, ‘+1’ is bigger.
          Each step of 1 is approximately 12% larger; 6 steps are
          exactly a factor 2 larger.  If the context property ‘fontSize’
          is set, its value is added to this before the glyph is
          printed.  Fractional values are allowed.

     ‘parent-alignment-X’ (number):
          ‘'()’

          Specify on which point of the parent the object is aligned.
          The value ‘-1’ means aligned on parent’s left edge,
          ‘0’ on center, and ‘1’ right edge, in X direction.  Other
          numerical values may also be specified - the unit is half the
          parent’s width.  If unset, the value from ‘self-alignment-X’
          property will be used.

     ‘self-alignment-X’ (number):
          ‘0’

          Specify alignment of an object.  The value ‘-1’ means left
          aligned, ‘0’ centered, and ‘1’ right-aligned in X direction.
          Other numerical values may also be specified - the unit is
          half the object width.

     ‘skyline-horizontal-padding’ (number):
          ‘0.1’

          For determining the vertical distance between two staves, it
          is possible to have a configuration which would result in a
          tight interleaving of grobs from the top staff and the bottom
          staff.  The larger this parameter is, the farther apart the
          staves are placed in such a configuration.

     ‘stencil’ (stencil):
          ‘lyric-text::print’

          The symbol to print.

     ‘text’ (markup):
          ‘#<procedure #f (grob)>’

          Text markup.  See *note (lilypond-notation)Formatting text::.

     ‘vertical-skylines’ (pair of skylines):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::vertical-skylines-from-stencil> >’

          Two skylines, one above and one below this grob.

     ‘word-space’ (dimension, in staff space):
          ‘0.6’

          Space to insert between words in texts.

     ‘X-align-on-main-noteheads’ (boolean):
          ‘#t’

          If true, this grob will ignore suspended noteheads when
          aligning itself on NoteColumn.

     ‘X-offset’ (number):
          ‘ly:self-alignment-interface::aligned-on-x-parent’

          The horizontal amount that this object is moved relative to
          its X-parent.

     ‘Y-extent’ (pair of numbers):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::stencil-height> >’

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

   This object supports the following interface(s): *note
font-interface::, *note grob-interface::, *note item-interface::, *note
lyric-syllable-interface::, *note rhythmic-grob-interface::, *note
self-alignment-interface:: and *note text-interface::.


File: lilypond-internals.info,  Node: MeasureCounter,  Next: MeasureGrouping,  Prev: LyricText,  Up: All layout objects

3.1.69 MeasureCounter
---------------------

MeasureCounter objects are created by: *note Measure_counter_engraver::.

   Standard settings:

     ‘count-from’ (integer):
          ‘1’

          The first measure in a measure count receives this number.
          The following measures are numbered in increments from this
          initial value.

     ‘direction’ (direction):
          ‘1’

          If ‘side-axis’ is ‘0’ (or ‘X’), then this property determines
          whether the object is placed ‘LEFT’, ‘CENTER’ or ‘RIGHT’ with
          respect to the other object.  Otherwise, it determines whether
          the object is placed ‘UP’, ‘CENTER’ or ‘DOWN’.  Numerical
          values may also be used: ‘UP’=‘1’, ‘DOWN’=‘-1’, ‘LEFT’=‘-1’,
          ‘RIGHT’=‘1’, ‘CENTER’=‘0’.

     ‘font-encoding’ (symbol):
          ‘'fetaText’

          The font encoding is the broadest category for selecting a
          font.  Currently, only lilypond’s system fonts (Emmentaler)
          are using this property.  Available values are ‘fetaMusic’
          (Emmentaler), ‘fetaBraces’, ‘fetaText’ (Emmentaler).

     ‘font-size’ (number):
          ‘-2’

          The font size, compared to the ‘normal’ size.  ‘0’ is
          style-sheet’s normal size, ‘-1’ is smaller, ‘+1’ is bigger.
          Each step of 1 is approximately 12% larger; 6 steps are
          exactly a factor 2 larger.  If the context property ‘fontSize’
          is set, its value is added to this before the glyph is
          printed.  Fractional values are allowed.

     ‘outside-staff-horizontal-padding’ (number):
          ‘0.5’

          By default, an outside-staff-object can be placed so that is
          it very close to another grob horizontally.  If this property
          is set, the outside-staff-object is raised so that it is not
          so close to its neighbor.

     ‘outside-staff-priority’ (number):
          ‘750’

          If set, the grob is positioned outside the staff in such a way
          as to avoid all collisions.  In case of a potential collision,
          the grob with the smaller ‘outside-staff-priority’ is closer
          to the staff.

     ‘self-alignment-X’ (number):
          ‘0’

          Specify alignment of an object.  The value ‘-1’ means left
          aligned, ‘0’ centered, and ‘1’ right-aligned in X direction.
          Other numerical values may also be specified - the unit is
          half the object width.

     ‘side-axis’ (number):
          ‘1’

          If the value is ‘X’ (or equivalently ‘0’), the object is
          placed horizontally next to the other object.  If the value is
          ‘Y’ or ‘1’, it is placed vertically.

     ‘spacing-pair’ (pair):
          '(break-alignment . break-alignment)

          A pair of alignment symbols which set an object’s spacing
          relative to its left and right ‘BreakAlignment’s.

          For example, a ‘MultiMeasureRest’ will ignore prefatory items
          at its bounds (i.e., clefs, key signatures and time
          signatures) using the following override:

               \override MultiMeasureRest
                 #'spacing-pair = #'(staff-bar . staff-bar)

     ‘staff-padding’ (dimension, in staff space):
          ‘0.5’

          Maintain this much space between reference points and the
          staff.  Its effect is to align objects of differing sizes
          (like the dynamics p and f) on their baselines.

     ‘stencil’ (stencil):
          ‘measure-counter-stencil’

          The symbol to print.

     ‘Y-offset’ (number):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:side-position-interface::y-aligned-side>
          #<primitive-procedure
          ly:side-position-interface::pure-y-aligned-side> >’

          The vertical amount that this object is moved relative to its
          Y-parent.

   This object supports the following interface(s): *note
font-interface::, *note grob-interface::, *note
measure-counter-interface::, *note outside-staff-interface::, *note
self-alignment-interface::, *note side-position-interface::, *note
spanner-interface:: and *note text-interface::.


File: lilypond-internals.info,  Node: MeasureGrouping,  Next: MelodyItem,  Prev: MeasureCounter,  Up: All layout objects

3.1.70 MeasureGrouping
----------------------

MeasureGrouping objects are created by: *note
Measure_grouping_engraver::.

   Standard settings:

     ‘direction’ (direction):
          ‘1’

          If ‘side-axis’ is ‘0’ (or ‘X’), then this property determines
          whether the object is placed ‘LEFT’, ‘CENTER’ or ‘RIGHT’ with
          respect to the other object.  Otherwise, it determines whether
          the object is placed ‘UP’, ‘CENTER’ or ‘DOWN’.  Numerical
          values may also be used: ‘UP’=‘1’, ‘DOWN’=‘-1’, ‘LEFT’=‘-1’,
          ‘RIGHT’=‘1’, ‘CENTER’=‘0’.

     ‘height’ (dimension, in staff space):
          ‘2.0’

          Height of an object in ‘staff-space’ units.

     ‘padding’ (dimension, in staff space):
          ‘2’

          Add this much extra space between objects that are next to
          each other.

     ‘side-axis’ (number):
          ‘1’

          If the value is ‘X’ (or equivalently ‘0’), the object is
          placed horizontally next to the other object.  If the value is
          ‘Y’ or ‘1’, it is placed vertically.

     ‘staff-padding’ (dimension, in staff space):
          ‘3’

          Maintain this much space between reference points and the
          staff.  Its effect is to align objects of differing sizes
          (like the dynamics p and f) on their baselines.

     ‘stencil’ (stencil):
          ‘ly:measure-grouping::print’

          The symbol to print.

     ‘thickness’ (number):
          ‘1’

          For grobs made up of lines, this is the thickness of the line.
          For slurs and ties, this is the distance between the two arcs
          of the curve’s outline at its thickest point, not counting the
          diameter of the virtual “pen” that draws the arcs.  This
          property is expressed as a multiple of the current staff-line
          thickness (i.e.  the visual output is influenced by changes to
          ‘STAFF.StaffSymbol.thickness’).

     ‘Y-offset’ (number):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:side-position-interface::y-aligned-side>
          #<primitive-procedure
          ly:side-position-interface::pure-y-aligned-side> >’

          The vertical amount that this object is moved relative to its
          Y-parent.

   This object supports the following interface(s): *note
grob-interface::, *note measure-grouping-interface::, *note
outside-staff-interface::, *note side-position-interface:: and *note
spanner-interface::.


File: lilypond-internals.info,  Node: MelodyItem,  Next: MensuralLigature,  Prev: MeasureGrouping,  Up: All layout objects

3.1.71 MelodyItem
-----------------

MelodyItem objects are created by: *note Melody_engraver::.

   Standard settings:

     ‘neutral-direction’ (direction):
          ‘-1’

          Which direction to take in the center of the staff.

   This object supports the following interface(s): *note
grob-interface::, *note item-interface:: and *note
melody-spanner-interface::.


File: lilypond-internals.info,  Node: MensuralLigature,  Next: MetronomeMark,  Prev: MelodyItem,  Up: All layout objects

3.1.72 MensuralLigature
-----------------------

MensuralLigature objects are created by: *note
Mensural_ligature_engraver::.

   Standard settings:

     ‘springs-and-rods’ (boolean):
          ‘ly:spanner::set-spacing-rods’

          Dummy variable for triggering spacing routines.

     ‘stencil’ (stencil):
          ‘ly:mensural-ligature::print’

          The symbol to print.

     ‘thickness’ (number):
          ‘1.3’

          For grobs made up of lines, this is the thickness of the line.
          For slurs and ties, this is the distance between the two arcs
          of the curve’s outline at its thickest point, not counting the
          diameter of the virtual “pen” that draws the arcs.  This
          property is expressed as a multiple of the current staff-line
          thickness (i.e.  the visual output is influenced by changes to
          ‘STAFF.StaffSymbol.thickness’).

   This object supports the following interface(s): *note
font-interface::, *note grob-interface::, *note
mensural-ligature-interface:: and *note spanner-interface::.


File: lilypond-internals.info,  Node: MetronomeMark,  Next: MultiMeasureRest,  Prev: MensuralLigature,  Up: All layout objects

3.1.73 MetronomeMark
--------------------

MetronomeMark objects are created by: *note Metronome_mark_engraver::.

   Standard settings:

     ‘after-line-breaking’ (boolean):
          ‘ly:side-position-interface::move-to-extremal-staff’

          Dummy property, used to trigger callback for
          ‘after-line-breaking’.

     ‘break-align-symbols’ (list):
          '(time-signature)

          A list of _break-align symbols_ that determines which
          breakable items to align this to.  If the grob selected by the
          first symbol in the list is invisible due to
          ‘break-visibility’, we will align to the next grob (and so
          on).  Choices are listed in *note
          (lilypond-internals)break-alignment-interface::.

     ‘break-visibility’ (vector):
          #(#f #t #t)

          A vector of 3 booleans,
          ‘#(END-OF-LINE UNBROKEN BEGIN-OF-LINE)’.  ‘#t’ means visible,
          ‘#f’ means killed.

     ‘direction’ (direction):
          ‘1’

          If ‘side-axis’ is ‘0’ (or ‘X’), then this property determines
          whether the object is placed ‘LEFT’, ‘CENTER’ or ‘RIGHT’ with
          respect to the other object.  Otherwise, it determines whether
          the object is placed ‘UP’, ‘CENTER’ or ‘DOWN’.  Numerical
          values may also be used: ‘UP’=‘1’, ‘DOWN’=‘-1’, ‘LEFT’=‘-1’,
          ‘RIGHT’=‘1’, ‘CENTER’=‘0’.

     ‘extra-spacing-width’ (pair of numbers):
          '(+inf.0 . -inf.0)

          In the horizontal spacing problem, we pad each item by this
          amount (by adding the ‘car’ on the left side of the item and
          adding the ‘cdr’ on the right side of the item).  In order to
          make a grob take up no horizontal space at all, set this to
          ‘(+inf.0 . -inf.0)’.

     ‘flag-style’ (symbol):
          ‘'default’

          The style of the flag to be used with ‘MetronomeMark’.
          Available are ‘'modern-straight-flag’, ‘'old-straight-flag’,
          ‘flat-flag’, ‘mensural’ and ‘'default’

     ‘non-break-align-symbols’ (list):
          '(paper-column-interface)

          A list of symbols that determine which NON-break-aligned
          interfaces to align this to.

     ‘outside-staff-horizontal-padding’ (number):
          ‘0.2’

          By default, an outside-staff-object can be placed so that is
          it very close to another grob horizontally.  If this property
          is set, the outside-staff-object is raised so that it is not
          so close to its neighbor.

     ‘outside-staff-priority’ (number):
          ‘1000’

          If set, the grob is positioned outside the staff in such a way
          as to avoid all collisions.  In case of a potential collision,
          the grob with the smaller ‘outside-staff-priority’ is closer
          to the staff.

     ‘padding’ (dimension, in staff space):
          ‘0.8’

          Add this much extra space between objects that are next to
          each other.

     ‘self-alignment-X’ (number):
          ‘-1’

          Specify alignment of an object.  The value ‘-1’ means left
          aligned, ‘0’ centered, and ‘1’ right-aligned in X direction.
          Other numerical values may also be specified - the unit is
          half the object width.

     ‘side-axis’ (number):
          ‘1’

          If the value is ‘X’ (or equivalently ‘0’), the object is
          placed horizontally next to the other object.  If the value is
          ‘Y’ or ‘1’, it is placed vertically.

     ‘stencil’ (stencil):
          ‘ly:text-interface::print’

          The symbol to print.

     ‘vertical-skylines’ (pair of skylines):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::vertical-skylines-from-stencil> >’

          Two skylines, one above and one below this grob.

     ‘X-offset’ (number):
          ‘self-alignment-interface::self-aligned-on-breakable’

          The horizontal amount that this object is moved relative to
          its X-parent.

     ‘Y-extent’ (pair of numbers):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::stencil-height> >’

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

     ‘Y-offset’ (number):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:side-position-interface::y-aligned-side>
          #<primitive-procedure
          ly:side-position-interface::pure-y-aligned-side> >’

          The vertical amount that this object is moved relative to its
          Y-parent.

   This object supports the following interface(s): *note
break-alignable-interface::, *note font-interface::, *note
grob-interface::, *note item-interface::, *note
metronome-mark-interface::, *note outside-staff-interface::, *note
self-alignment-interface::, *note side-position-interface:: and *note
text-interface::.


File: lilypond-internals.info,  Node: MultiMeasureRest,  Next: MultiMeasureRestNumber,  Prev: MetronomeMark,  Up: All layout objects

3.1.74 MultiMeasureRest
-----------------------

MultiMeasureRest objects are created by: *note
Multi_measure_rest_engraver::.

   Standard settings:

     ‘bound-padding’ (number):
          ‘0.5’

          The amount of padding to insert around spanner bounds.

     ‘expand-limit’ (integer):
          ‘10’

          Maximum number of measures expanded in church rests.

     ‘hair-thickness’ (number):
          ‘2.0’

          Thickness of the thin line in a bar line, expressed as a
          multiple of the default staff-line thickness (i.e.  the visual
          output is _not_ influenced by changes to
          ‘STAFF.StaffSymbol.thickness’).

     ‘max-symbol-separation’ (number):
          ‘8.0’

          The maximum distance between symbols making up a church rest.

     ‘round-up-exceptions’ (list):
          ‘'()’

          A list of pairs where car is the numerator and cdr the
          denominator of a moment.  Each pair in this list means that
          the multi-measure rests of the corresponding length will be
          rounded up to the longer rest.  See ROUND-UP-TO-LONGER-REST.

     ‘spacing-pair’ (pair):
          '(break-alignment . break-alignment)

          A pair of alignment symbols which set an object’s spacing
          relative to its left and right ‘BreakAlignment’s.

          For example, a ‘MultiMeasureRest’ will ignore prefatory items
          at its bounds (i.e., clefs, key signatures and time
          signatures) using the following override:

               \override MultiMeasureRest
                 #'spacing-pair = #'(staff-bar . staff-bar)

     ‘springs-and-rods’ (boolean):
          ‘ly:multi-measure-rest::set-spacing-rods’

          Dummy variable for triggering spacing routines.

     ‘stencil’ (stencil):
          ‘ly:multi-measure-rest::print’

          The symbol to print.

     ‘thick-thickness’ (number):
          ‘6.6’

          Thickness of the thick line in a bar line, expressed as a
          multiple of the default staff-line thickness (i.e.  the visual
          output is _not_ influenced by changes to
          ‘STAFF.StaffSymbol.thickness’).

     ‘usable-duration-logs’ (list):
          '(-3 -2 -1 0)

          List of ‘duration-log’s that can be used in typesetting the
          grob.

     ‘voiced-position’ (number):
          ‘4’

          The staff-position of a voiced ‘Rest’, negative if the rest
          has ‘direction’ ‘DOWN’.

     ‘Y-extent’ (pair of numbers):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:multi-measure-rest::height> >’

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

     ‘Y-offset’ (number):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:staff-symbol-referencer::callback> >’

          The vertical amount that this object is moved relative to its
          Y-parent.

   This object supports the following interface(s): *note
font-interface::, *note grob-interface::, *note
multi-measure-interface::, *note multi-measure-rest-interface::, *note
outside-staff-interface::, *note rest-interface::, *note
spanner-interface:: and *note staff-symbol-referencer-interface::.


File: lilypond-internals.info,  Node: MultiMeasureRestNumber,  Next: MultiMeasureRestText,  Prev: MultiMeasureRest,  Up: All layout objects

3.1.75 MultiMeasureRestNumber
-----------------------------

MultiMeasureRestNumber objects are created by: *note
Multi_measure_rest_engraver::.

   Standard settings:

     ‘bound-padding’ (number):
          ‘1.0’

          The amount of padding to insert around spanner bounds.

     ‘direction’ (direction):
          ‘1’

          If ‘side-axis’ is ‘0’ (or ‘X’), then this property determines
          whether the object is placed ‘LEFT’, ‘CENTER’ or ‘RIGHT’ with
          respect to the other object.  Otherwise, it determines whether
          the object is placed ‘UP’, ‘CENTER’ or ‘DOWN’.  Numerical
          values may also be used: ‘UP’=‘1’, ‘DOWN’=‘-1’, ‘LEFT’=‘-1’,
          ‘RIGHT’=‘1’, ‘CENTER’=‘0’.

     ‘font-encoding’ (symbol):
          ‘'fetaText’

          The font encoding is the broadest category for selecting a
          font.  Currently, only lilypond’s system fonts (Emmentaler)
          are using this property.  Available values are ‘fetaMusic’
          (Emmentaler), ‘fetaBraces’, ‘fetaText’ (Emmentaler).

     ‘padding’ (dimension, in staff space):
          ‘0.4’

          Add this much extra space between objects that are next to
          each other.

     ‘parent-alignment-X’ (number):
          ‘0’

          Specify on which point of the parent the object is aligned.
          The value ‘-1’ means aligned on parent’s left edge,
          ‘0’ on center, and ‘1’ right edge, in X direction.  Other
          numerical values may also be specified - the unit is half the
          parent’s width.  If unset, the value from ‘self-alignment-X’
          property will be used.

     ‘self-alignment-X’ (number):
          ‘0’

          Specify alignment of an object.  The value ‘-1’ means left
          aligned, ‘0’ centered, and ‘1’ right-aligned in X direction.
          Other numerical values may also be specified - the unit is
          half the object width.

     ‘side-axis’ (number):
          ‘1’

          If the value is ‘X’ (or equivalently ‘0’), the object is
          placed horizontally next to the other object.  If the value is
          ‘Y’ or ‘1’, it is placed vertically.

     ‘springs-and-rods’ (boolean):
          ‘ly:multi-measure-rest::set-text-rods’

          Dummy variable for triggering spacing routines.

     ‘staff-padding’ (dimension, in staff space):
          ‘0.4’

          Maintain this much space between reference points and the
          staff.  Its effect is to align objects of differing sizes
          (like the dynamics p and f) on their baselines.

     ‘stencil’ (stencil):
          ‘ly:text-interface::print’

          The symbol to print.

     ‘vertical-skylines’ (pair of skylines):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::vertical-skylines-from-stencil> #<primitive-procedure
          ly:grob::pure-simple-vertical-skylines-from-extents> >’

          Two skylines, one above and one below this grob.

     ‘X-offset’ (number):
          ‘ly:self-alignment-interface::aligned-on-x-parent’

          The horizontal amount that this object is moved relative to
          its X-parent.

     ‘Y-extent’ (pair of numbers):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::stencil-height> >’

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

     ‘Y-offset’ (number):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:side-position-interface::y-aligned-side>
          #<primitive-procedure
          ly:side-position-interface::pure-y-aligned-side> >’

          The vertical amount that this object is moved relative to its
          Y-parent.

   This object supports the following interface(s): *note
font-interface::, *note grob-interface::, *note
multi-measure-interface::, *note outside-staff-interface::, *note
self-alignment-interface::, *note side-position-interface::, *note
spanner-interface:: and *note text-interface::.


File: lilypond-internals.info,  Node: MultiMeasureRestText,  Next: NonMusicalPaperColumn,  Prev: MultiMeasureRestNumber,  Up: All layout objects

3.1.76 MultiMeasureRestText
---------------------------

MultiMeasureRestText objects are created by: *note
Multi_measure_rest_engraver::.

   Standard settings:

     ‘direction’ (direction):
          ‘1’

          If ‘side-axis’ is ‘0’ (or ‘X’), then this property determines
          whether the object is placed ‘LEFT’, ‘CENTER’ or ‘RIGHT’ with
          respect to the other object.  Otherwise, it determines whether
          the object is placed ‘UP’, ‘CENTER’ or ‘DOWN’.  Numerical
          values may also be used: ‘UP’=‘1’, ‘DOWN’=‘-1’, ‘LEFT’=‘-1’,
          ‘RIGHT’=‘1’, ‘CENTER’=‘0’.

     ‘outside-staff-priority’ (number):
          ‘450’

          If set, the grob is positioned outside the staff in such a way
          as to avoid all collisions.  In case of a potential collision,
          the grob with the smaller ‘outside-staff-priority’ is closer
          to the staff.

     ‘padding’ (dimension, in staff space):
          ‘0.2’

          Add this much extra space between objects that are next to
          each other.

     ‘parent-alignment-X’ (number):
          ‘0’

          Specify on which point of the parent the object is aligned.
          The value ‘-1’ means aligned on parent’s left edge,
          ‘0’ on center, and ‘1’ right edge, in X direction.  Other
          numerical values may also be specified - the unit is half the
          parent’s width.  If unset, the value from ‘self-alignment-X’
          property will be used.

     ‘self-alignment-X’ (number):
          ‘0’

          Specify alignment of an object.  The value ‘-1’ means left
          aligned, ‘0’ centered, and ‘1’ right-aligned in X direction.
          Other numerical values may also be specified - the unit is
          half the object width.

     ‘skyline-horizontal-padding’ (number):
          ‘0.2’

          For determining the vertical distance between two staves, it
          is possible to have a configuration which would result in a
          tight interleaving of grobs from the top staff and the bottom
          staff.  The larger this parameter is, the farther apart the
          staves are placed in such a configuration.

     ‘staff-padding’ (dimension, in staff space):
          ‘0.25’

          Maintain this much space between reference points and the
          staff.  Its effect is to align objects of differing sizes
          (like the dynamics p and f) on their baselines.

     ‘stencil’ (stencil):
          ‘ly:text-interface::print’

          The symbol to print.

     ‘vertical-skylines’ (pair of skylines):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::vertical-skylines-from-stencil> #<primitive-procedure
          ly:grob::pure-simple-vertical-skylines-from-extents> >’

          Two skylines, one above and one below this grob.

     ‘X-offset’ (number):
          ‘ly:self-alignment-interface::aligned-on-x-parent’

          The horizontal amount that this object is moved relative to
          its X-parent.

     ‘Y-extent’ (pair of numbers):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::stencil-height> >’

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

     ‘Y-offset’ (number):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:side-position-interface::y-aligned-side>
          #<primitive-procedure
          ly:side-position-interface::pure-y-aligned-side> >’

          The vertical amount that this object is moved relative to its
          Y-parent.

   This object supports the following interface(s): *note
font-interface::, *note grob-interface::, *note
multi-measure-interface::, *note outside-staff-interface::, *note
self-alignment-interface::, *note side-position-interface::, *note
spanner-interface:: and *note text-interface::.


File: lilypond-internals.info,  Node: NonMusicalPaperColumn,  Next: NoteCollision,  Prev: MultiMeasureRestText,  Up: All layout objects

3.1.77 NonMusicalPaperColumn
----------------------------

NonMusicalPaperColumn objects are created by: *note
Paper_column_engraver::.

   Standard settings:

     ‘allow-loose-spacing’ (boolean):
          ‘#t’

          If set, column can be detached from main spacing.

     ‘axes’ (list):
          '(0)

          List of axis numbers.  In the case of alignment grobs, this
          should contain only one number.

     ‘before-line-breaking’ (boolean):
          ‘ly:paper-column::before-line-breaking’

          Dummy property, used to trigger a callback function.

     ‘font-size’ (number):
          ‘-7.5’

          The font size, compared to the ‘normal’ size.  ‘0’ is
          style-sheet’s normal size, ‘-1’ is smaller, ‘+1’ is bigger.
          Each step of 1 is approximately 12% larger; 6 steps are
          exactly a factor 2 larger.  If the context property ‘fontSize’
          is set, its value is added to this before the glyph is
          printed.  Fractional values are allowed.

     ‘full-measure-extra-space’ (number):
          ‘1.0’

          Extra space that is allocated at the beginning of a measure
          with only one note.  This property is read from the
          NonMusicalPaperColumn that begins the measure.

     ‘horizontal-skylines’ (pair of skylines):
          ‘ly:separation-item::calc-skylines’

          Two skylines, one to the left and one to the right of this
          grob.

     ‘keep-inside-line’ (boolean):
          ‘#t’

          If set, this column cannot have objects sticking into the
          margin.

     ‘layer’ (integer):
          ‘1000’

          An integer which determines the order of printing objects.
          Objects with the lowest value of layer are drawn first, then
          objects with progressively higher values are drawn, so objects
          with higher values overwrite objects with lower values.  By
          default most objects are assigned a layer value of 1.

     ‘line-break-permission’ (symbol):
          ‘'allow’

          Instructs the line breaker on whether to put a line break at
          this column.  Can be ‘force’ or ‘allow’.

     ‘non-musical’ (boolean):
          ‘#t’

          True if the grob belongs to a ‘NonMusicalPaperColumn’.

     ‘page-break-permission’ (symbol):
          ‘'allow’

          Instructs the page breaker on whether to put a page break at
          this column.  Can be ‘force’ or ‘allow’.

     ‘X-extent’ (pair of numbers):
          ‘ly:axis-group-interface::width’

          Extent (size) in the X direction, measured in staff-space
          units, relative to object’s reference point.

   This object supports the following interface(s): *note
axis-group-interface::, *note font-interface::, *note grob-interface::,
*note item-interface::, *note paper-column-interface::, *note
separation-item-interface:: and *note spaceable-grob-interface::.


File: lilypond-internals.info,  Node: NoteCollision,  Next: NoteColumn,  Prev: NonMusicalPaperColumn,  Up: All layout objects

3.1.78 NoteCollision
--------------------

NoteCollision objects are created by: *note Collision_engraver::.

   Standard settings:

     ‘axes’ (list):
          '(0 1)

          List of axis numbers.  In the case of alignment grobs, this
          should contain only one number.

     ‘note-collision-threshold’ (dimension, in staff space):
          ‘1’

          Simultaneous notes that are this close or closer in units of
          ‘staff-space’ will be identified as vertically colliding.
          Used by ‘Stem’ grobs for notes in the same voice, and
          ‘NoteCollision’ grobs for notes in different voices.  Default
          value 1.

     ‘prefer-dotted-right’ (boolean):
          ‘#t’

          For note collisions, prefer to shift dotted up-note to the
          right, rather than shifting just the dot.

     ‘X-extent’ (pair of numbers):
          ‘ly:axis-group-interface::width’

          Extent (size) in the X direction, measured in staff-space
          units, relative to object’s reference point.

     ‘Y-extent’ (pair of numbers):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:axis-group-interface::height> #<primitive-procedure
          ly:axis-group-interface::pure-height> >’

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

   This object supports the following interface(s): *note
axis-group-interface::, *note grob-interface::, *note item-interface::
and *note note-collision-interface::.


File: lilypond-internals.info,  Node: NoteColumn,  Next: NoteHead,  Prev: NoteCollision,  Up: All layout objects

3.1.79 NoteColumn
-----------------

NoteColumn objects are created by: *note Rhythmic_column_engraver::.

   Standard settings:

     ‘axes’ (list):
          '(0 1)

          List of axis numbers.  In the case of alignment grobs, this
          should contain only one number.

     ‘horizontal-skylines’ (pair of skylines):
          ‘ly:separation-item::calc-skylines’

          Two skylines, one to the left and one to the right of this
          grob.

     ‘skyline-vertical-padding’ (number):
          ‘0.15’

          The amount by which the left and right skylines of a column
          are padded vertically, beyond the ‘Y-extent’s and
          ‘extra-spacing-height’s of the constituent grobs in the
          column.  Increase this to prevent interleaving of grobs from
          adjacent columns.

     ‘X-extent’ (pair of numbers):
          ‘ly:axis-group-interface::width’

          Extent (size) in the X direction, measured in staff-space
          units, relative to object’s reference point.

     ‘Y-extent’ (pair of numbers):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:axis-group-interface::height> #<primitive-procedure
          ly:axis-group-interface::pure-height> >’

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

   This object supports the following interface(s): *note
axis-group-interface::, *note grob-interface::, *note item-interface::,
*note note-column-interface:: and *note separation-item-interface::.


File: lilypond-internals.info,  Node: NoteHead,  Next: NoteName,  Prev: NoteColumn,  Up: All layout objects

3.1.80 NoteHead
---------------

NoteHead objects are created by: *note Completion_heads_engraver::,
*note Drum_notes_engraver:: and *note Note_heads_engraver::.

   Standard settings:

     ‘duration-log’ (integer):
          ‘note-head::calc-duration-log’

          The 2-log of the note head duration, i.e., ‘0’ = whole note,
          ‘1’ = half note, etc.

     ‘extra-spacing-height’ (pair of numbers):
          ‘ly:note-head::include-ledger-line-height’

          In the horizontal spacing problem, we increase the height of
          each item by this amount (by adding the ‘car’ to the bottom of
          the item and adding the ‘cdr’ to the top of the item).  In
          order to make a grob infinitely high (to prevent the
          horizontal spacing problem from placing any other grobs above
          or below this grob), set this to ‘(-inf.0 . +inf.0)’.

     ‘glyph-name’ (string):
          ‘note-head::calc-glyph-name’

          The glyph name within the font.

          In the context of (span) bar lines, GLYPH-NAME represents a
          processed form of ‘glyph’, where decisions about line breaking
          etc.  are already taken.

     ‘parenthesis-friends’ (list):
          '(accidental-grob dot)

          A list of Grob types, as symbols.  When parentheses enclose a
          Grob that has ’parenthesis-friends, the parentheses widen to
          include any child Grobs with type among ’parenthesis-friends.

     ‘stem-attachment’ (pair of numbers):
          ‘ly:note-head::calc-stem-attachment’

          An ‘(X . Y)’ pair where the stem attaches to the notehead.

     ‘stencil’ (stencil):
          ‘ly:note-head::print’

          The symbol to print.

     ‘X-offset’ (number):
          ‘ly:note-head::stem-x-shift’

          The horizontal amount that this object is moved relative to
          its X-parent.

     ‘Y-extent’ (pair of numbers):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::stencil-height> >’

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

     ‘Y-offset’ (number):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:staff-symbol-referencer::callback> >’

          The vertical amount that this object is moved relative to its
          Y-parent.

   This object supports the following interface(s): *note
font-interface::, *note gregorian-ligature-interface::, *note
grob-interface::, *note item-interface::, *note ledgered-interface::,
*note ligature-head-interface::, *note mensural-ligature-interface::,
*note note-head-interface::, *note rhythmic-grob-interface::, *note
rhythmic-head-interface::, *note staff-symbol-referencer-interface:: and
*note vaticana-ligature-interface::.


File: lilypond-internals.info,  Node: NoteName,  Next: NoteSpacing,  Prev: NoteHead,  Up: All layout objects

3.1.81 NoteName
---------------

NoteName objects are created by: *note Note_name_engraver::.

   Standard settings:

     ‘stencil’ (stencil):
          ‘ly:text-interface::print’

          The symbol to print.

     ‘Y-extent’ (pair of numbers):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::stencil-height> >’

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

   This object supports the following interface(s): *note
font-interface::, *note grob-interface::, *note item-interface::, *note
note-name-interface:: and *note text-interface::.


File: lilypond-internals.info,  Node: NoteSpacing,  Next: OttavaBracket,  Prev: NoteName,  Up: All layout objects

3.1.82 NoteSpacing
------------------

NoteSpacing objects are created by: *note Note_spacing_engraver::.

   Standard settings:

     ‘knee-spacing-correction’ (number):
          ‘1.0’

          Factor for the optical correction amount for kneed beams.  Set
          between ‘0’ for no correction and ‘1’ for full correction.

     ‘same-direction-correction’ (number):
          ‘0.25’

          Optical correction amount for stems that are placed in tight
          configurations.  This amount is used for stems with the same
          direction to compensate for note head to stem distance.

     ‘space-to-barline’ (boolean):
          ‘#t’

          If set, the distance between a note and the following
          non-musical column will be measured to the bar line instead of
          to the beginning of the non-musical column.  If there is a
          clef change followed by a bar line, for example, this means
          that we will try to space the non-musical column as though the
          clef is not there.

     ‘stem-spacing-correction’ (number):
          ‘0.5’

          Optical correction amount for stems that are placed in tight
          configurations.  For opposite directions, this amount is the
          correction for two normal sized stems that overlap completely.

   This object supports the following interface(s): *note
grob-interface::, *note item-interface::, *note note-spacing-interface::
and *note spacing-interface::.


File: lilypond-internals.info,  Node: OttavaBracket,  Next: PaperColumn,  Prev: NoteSpacing,  Up: All layout objects

3.1.83 OttavaBracket
--------------------

OttavaBracket objects are created by: *note Ottava_spanner_engraver::.

   Standard settings:

     ‘dash-fraction’ (number):
          ‘0.3’

          Size of the dashes, relative to ‘dash-period’.  Should be
          between ‘0.1’ and ‘1.0’ (continuous line).  If set to ‘0.0’, a
          dotted line is produced

     ‘direction’ (direction):
          ‘1’

          If ‘side-axis’ is ‘0’ (or ‘X’), then this property determines
          whether the object is placed ‘LEFT’, ‘CENTER’ or ‘RIGHT’ with
          respect to the other object.  Otherwise, it determines whether
          the object is placed ‘UP’, ‘CENTER’ or ‘DOWN’.  Numerical
          values may also be used: ‘UP’=‘1’, ‘DOWN’=‘-1’, ‘LEFT’=‘-1’,
          ‘RIGHT’=‘1’, ‘CENTER’=‘0’.

     ‘edge-height’ (pair):
          '(0 . 0.8)

          A pair of numbers specifying the heights of the vertical
          edges: ‘(LEFT-HEIGHT . RIGHT-HEIGHT)’.

     ‘font-shape’ (symbol):
          ‘'italic’

          Select the shape of a font.  Choices include ‘upright’,
          ‘italic’, ‘caps’.

     ‘minimum-length’ (dimension, in staff space):
          ‘0.3’

          Try to make a spanner at least this long, normally in the
          horizontal direction.  This requires an appropriate callback
          for the ‘springs-and-rods’ property.  If added to a ‘Tie’,
          this sets the minimum distance between noteheads.

     ‘outside-staff-priority’ (number):
          ‘400’

          If set, the grob is positioned outside the staff in such a way
          as to avoid all collisions.  In case of a potential collision,
          the grob with the smaller ‘outside-staff-priority’ is closer
          to the staff.

     ‘padding’ (dimension, in staff space):
          ‘0.5’

          Add this much extra space between objects that are next to
          each other.

     ‘shorten-pair’ (pair of numbers):
          '(-0.8 . -0.6)

          The lengths to shorten on both sides a hairpin or text-spanner
          such as a pedal bracket.  Positive values shorten the hairpin
          or text-spanner, while negative values lengthen it.

     ‘staff-padding’ (dimension, in staff space):
          ‘2.0’

          Maintain this much space between reference points and the
          staff.  Its effect is to align objects of differing sizes
          (like the dynamics p and f) on their baselines.

     ‘stencil’ (stencil):
          ‘ly:ottava-bracket::print’

          The symbol to print.

     ‘style’ (symbol):
          ‘'dashed-line’

          This setting determines in what style a grob is typeset.
          Valid choices depend on the ‘stencil’ callback reading this
          property.

     ‘vertical-skylines’ (pair of skylines):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::vertical-skylines-from-stencil> #<primitive-procedure
          ly:grob::pure-simple-vertical-skylines-from-extents> >’

          Two skylines, one above and one below this grob.

     ‘Y-offset’ (number):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:side-position-interface::y-aligned-side>
          #<primitive-procedure
          ly:side-position-interface::pure-y-aligned-side> >’

          The vertical amount that this object is moved relative to its
          Y-parent.

   This object supports the following interface(s): *note
font-interface::, *note grob-interface::, *note
horizontal-bracket-interface::, *note line-interface::, *note
ottava-bracket-interface::, *note outside-staff-interface::, *note
side-position-interface::, *note spanner-interface:: and *note
text-interface::.


File: lilypond-internals.info,  Node: PaperColumn,  Next: ParenthesesItem,  Prev: OttavaBracket,  Up: All layout objects

3.1.84 PaperColumn
------------------

PaperColumn objects are created by: *note Paper_column_engraver::.

   Standard settings:

     ‘allow-loose-spacing’ (boolean):
          ‘#t’

          If set, column can be detached from main spacing.

     ‘axes’ (list):
          '(0)

          List of axis numbers.  In the case of alignment grobs, this
          should contain only one number.

     ‘before-line-breaking’ (boolean):
          ‘ly:paper-column::before-line-breaking’

          Dummy property, used to trigger a callback function.

     ‘font-size’ (number):
          ‘-7.5’

          The font size, compared to the ‘normal’ size.  ‘0’ is
          style-sheet’s normal size, ‘-1’ is smaller, ‘+1’ is bigger.
          Each step of 1 is approximately 12% larger; 6 steps are
          exactly a factor 2 larger.  If the context property ‘fontSize’
          is set, its value is added to this before the glyph is
          printed.  Fractional values are allowed.

     ‘horizontal-skylines’ (pair of skylines):
          ‘ly:separation-item::calc-skylines’

          Two skylines, one to the left and one to the right of this
          grob.

     ‘keep-inside-line’ (boolean):
          ‘#t’

          If set, this column cannot have objects sticking into the
          margin.

     ‘layer’ (integer):
          ‘1000’

          An integer which determines the order of printing objects.
          Objects with the lowest value of layer are drawn first, then
          objects with progressively higher values are drawn, so objects
          with higher values overwrite objects with lower values.  By
          default most objects are assigned a layer value of 1.

     ‘skyline-vertical-padding’ (number):
          ‘0.08’

          The amount by which the left and right skylines of a column
          are padded vertically, beyond the ‘Y-extent’s and
          ‘extra-spacing-height’s of the constituent grobs in the
          column.  Increase this to prevent interleaving of grobs from
          adjacent columns.

     ‘X-extent’ (pair of numbers):
          ‘ly:axis-group-interface::width’

          Extent (size) in the X direction, measured in staff-space
          units, relative to object’s reference point.

   This object supports the following interface(s): *note
axis-group-interface::, *note font-interface::, *note grob-interface::,
*note item-interface::, *note paper-column-interface::, *note
separation-item-interface:: and *note spaceable-grob-interface::.


File: lilypond-internals.info,  Node: ParenthesesItem,  Next: PercentRepeat,  Prev: PaperColumn,  Up: All layout objects

3.1.85 ParenthesesItem
----------------------

ParenthesesItem objects are created by: *note Parenthesis_engraver::.

   Standard settings:

     ‘font-size’ (number):
          ‘-6’

          The font size, compared to the ‘normal’ size.  ‘0’ is
          style-sheet’s normal size, ‘-1’ is smaller, ‘+1’ is bigger.
          Each step of 1 is approximately 12% larger; 6 steps are
          exactly a factor 2 larger.  If the context property ‘fontSize’
          is set, its value is added to this before the glyph is
          printed.  Fractional values are allowed.

     ‘padding’ (dimension, in staff space):
          ‘0.2’

          Add this much extra space between objects that are next to
          each other.

     ‘stencil’ (stencil):
          ‘parentheses-item::print’

          The symbol to print.

     ‘stencils’ (list):
          ‘parentheses-item::calc-parenthesis-stencils’

          Multiple stencils, used as intermediate value.

     ‘X-extent’ (pair of numbers):
          '(0 . 0)

          Extent (size) in the X direction, measured in staff-space
          units, relative to object’s reference point.

     ‘Y-extent’ (pair of numbers):
          ‘parentheses-item::y-extent’

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

   This object supports the following interface(s): *note
font-interface::, *note grob-interface::, *note item-interface:: and
*note parentheses-interface::.


File: lilypond-internals.info,  Node: PercentRepeat,  Next: PercentRepeatCounter,  Prev: ParenthesesItem,  Up: All layout objects

3.1.86 PercentRepeat
--------------------

PercentRepeat objects are created by: *note Percent_repeat_engraver::.

   Standard settings:

     ‘dot-negative-kern’ (number):
          ‘0.75’

          The space to remove between a dot and a slash in percent
          repeat glyphs.  Larger values bring the two elements closer
          together.

     ‘font-encoding’ (symbol):
          ‘'fetaMusic’

          The font encoding is the broadest category for selecting a
          font.  Currently, only lilypond’s system fonts (Emmentaler)
          are using this property.  Available values are ‘fetaMusic’
          (Emmentaler), ‘fetaBraces’, ‘fetaText’ (Emmentaler).

     ‘slope’ (number):
          ‘1.0’

          The slope of this object.

     ‘spacing-pair’ (pair):
          '(break-alignment . staff-bar)

          A pair of alignment symbols which set an object’s spacing
          relative to its left and right ‘BreakAlignment’s.

          For example, a ‘MultiMeasureRest’ will ignore prefatory items
          at its bounds (i.e., clefs, key signatures and time
          signatures) using the following override:

               \override MultiMeasureRest
                 #'spacing-pair = #'(staff-bar . staff-bar)

     ‘springs-and-rods’ (boolean):
          ‘ly:multi-measure-rest::set-spacing-rods’

          Dummy variable for triggering spacing routines.

     ‘stencil’ (stencil):
          ‘ly:multi-measure-rest::percent’

          The symbol to print.

     ‘thickness’ (number):
          ‘0.48’

          For grobs made up of lines, this is the thickness of the line.
          For slurs and ties, this is the distance between the two arcs
          of the curve’s outline at its thickest point, not counting the
          diameter of the virtual “pen” that draws the arcs.  This
          property is expressed as a multiple of the current staff-line
          thickness (i.e.  the visual output is influenced by changes to
          ‘STAFF.StaffSymbol.thickness’).

   This object supports the following interface(s): *note
font-interface::, *note grob-interface::, *note
multi-measure-rest-interface::, *note percent-repeat-interface:: and
*note spanner-interface::.


File: lilypond-internals.info,  Node: PercentRepeatCounter,  Next: PhrasingSlur,  Prev: PercentRepeat,  Up: All layout objects

3.1.87 PercentRepeatCounter
---------------------------

PercentRepeatCounter objects are created by: *note
Percent_repeat_engraver::.

   Standard settings:

     ‘direction’ (direction):
          ‘1’

          If ‘side-axis’ is ‘0’ (or ‘X’), then this property determines
          whether the object is placed ‘LEFT’, ‘CENTER’ or ‘RIGHT’ with
          respect to the other object.  Otherwise, it determines whether
          the object is placed ‘UP’, ‘CENTER’ or ‘DOWN’.  Numerical
          values may also be used: ‘UP’=‘1’, ‘DOWN’=‘-1’, ‘LEFT’=‘-1’,
          ‘RIGHT’=‘1’, ‘CENTER’=‘0’.

     ‘font-encoding’ (symbol):
          ‘'fetaText’

          The font encoding is the broadest category for selecting a
          font.  Currently, only lilypond’s system fonts (Emmentaler)
          are using this property.  Available values are ‘fetaMusic’
          (Emmentaler), ‘fetaBraces’, ‘fetaText’ (Emmentaler).

     ‘font-size’ (number):
          ‘-2’

          The font size, compared to the ‘normal’ size.  ‘0’ is
          style-sheet’s normal size, ‘-1’ is smaller, ‘+1’ is bigger.
          Each step of 1 is approximately 12% larger; 6 steps are
          exactly a factor 2 larger.  If the context property ‘fontSize’
          is set, its value is added to this before the glyph is
          printed.  Fractional values are allowed.

     ‘padding’ (dimension, in staff space):
          ‘0.2’

          Add this much extra space between objects that are next to
          each other.

     ‘parent-alignment-X’ (number):
          ‘0’

          Specify on which point of the parent the object is aligned.
          The value ‘-1’ means aligned on parent’s left edge,
          ‘0’ on center, and ‘1’ right edge, in X direction.  Other
          numerical values may also be specified - the unit is half the
          parent’s width.  If unset, the value from ‘self-alignment-X’
          property will be used.

     ‘self-alignment-X’ (number):
          ‘0’

          Specify alignment of an object.  The value ‘-1’ means left
          aligned, ‘0’ centered, and ‘1’ right-aligned in X direction.
          Other numerical values may also be specified - the unit is
          half the object width.

     ‘staff-padding’ (dimension, in staff space):
          ‘0.25’

          Maintain this much space between reference points and the
          staff.  Its effect is to align objects of differing sizes
          (like the dynamics p and f) on their baselines.

     ‘stencil’ (stencil):
          ‘ly:text-interface::print’

          The symbol to print.

     ‘X-offset’ (number):
          ‘ly:self-alignment-interface::aligned-on-x-parent’

          The horizontal amount that this object is moved relative to
          its X-parent.

     ‘Y-extent’ (pair of numbers):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::stencil-height> >’

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

     ‘Y-offset’ (number):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:side-position-interface::y-aligned-side>
          #<primitive-procedure
          ly:side-position-interface::pure-y-aligned-side> >’

          The vertical amount that this object is moved relative to its
          Y-parent.

   This object supports the following interface(s): *note
font-interface::, *note grob-interface::, *note
outside-staff-interface::, *note percent-repeat-interface::, *note
self-alignment-interface::, *note side-position-interface::, *note
spanner-interface:: and *note text-interface::.


File: lilypond-internals.info,  Node: PhrasingSlur,  Next: PianoPedalBracket,  Prev: PercentRepeatCounter,  Up: All layout objects

3.1.88 PhrasingSlur
-------------------

PhrasingSlur objects are created by: *note Phrasing_slur_engraver::.

   Standard settings:

     ‘control-points’ (list of number pairs):
          ‘ly:slur::calc-control-points’

          List of offsets (number pairs) that form control points for
          the tie, slur, or bracket shape.  For Béziers, this should
          list the control points of a third-order Bézier curve.

     ‘details’ (list):
          '((region-size . 4)
            (head-encompass-penalty . 1000.0)
            (stem-encompass-penalty . 30.0)
            (edge-attraction-factor . 4)
            (same-slope-penalty . 20)
            (steeper-slope-factor . 50)
            (non-horizontal-penalty . 15)
            (max-slope . 1.1)
            (max-slope-factor . 10)
            (free-head-distance . 0.3)
            (free-slur-distance . 0.8)
            (gap-to-staffline-inside . 0.2)
            (gap-to-staffline-outside . 0.1)
            (extra-object-collision-penalty . 50)
            (accidental-collision . 3)
            (extra-encompass-free-distance . 0.3)
            (extra-encompass-collision-distance . 0.8)
            (head-slur-distance-max-ratio . 3)
            (head-slur-distance-factor . 10)
            (absolute-closeness-measure . 0.3)
            (edge-slope-exponent . 1.7)
            (close-to-edge-length . 2.5)
            (encompass-object-range-overshoot . 0.5)
            (slur-tie-extrema-min-distance . 0.2)
            (slur-tie-extrema-min-distance-penalty . 2))

          Alist of parameters for detailed grob behavior.  More
          information on the allowed parameters for a grob can be found
          by looking at the top of the Internals Reference page for each
          interface having a ‘details’ property.

     ‘direction’ (direction):
          ‘ly:slur::calc-direction’

          If ‘side-axis’ is ‘0’ (or ‘X’), then this property determines
          whether the object is placed ‘LEFT’, ‘CENTER’ or ‘RIGHT’ with
          respect to the other object.  Otherwise, it determines whether
          the object is placed ‘UP’, ‘CENTER’ or ‘DOWN’.  Numerical
          values may also be used: ‘UP’=‘1’, ‘DOWN’=‘-1’, ‘LEFT’=‘-1’,
          ‘RIGHT’=‘1’, ‘CENTER’=‘0’.

     ‘height-limit’ (dimension, in staff space):
          ‘2.0’

          Maximum slur height: The longer the slur, the closer it is to
          this height.

     ‘minimum-length’ (dimension, in staff space):
          ‘1.5’

          Try to make a spanner at least this long, normally in the
          horizontal direction.  This requires an appropriate callback
          for the ‘springs-and-rods’ property.  If added to a ‘Tie’,
          this sets the minimum distance between noteheads.

     ‘ratio’ (number):
          ‘0.333’

          Parameter for slur shape.  The higher this number, the quicker
          the slur attains its ‘height-limit’.

     ‘springs-and-rods’ (boolean):
          ‘ly:spanner::set-spacing-rods’

          Dummy variable for triggering spacing routines.

     ‘stencil’ (stencil):
          ‘ly:slur::print’

          The symbol to print.

     ‘thickness’ (number):
          ‘1.1’

          For grobs made up of lines, this is the thickness of the line.
          For slurs and ties, this is the distance between the two arcs
          of the curve’s outline at its thickest point, not counting the
          diameter of the virtual “pen” that draws the arcs.  This
          property is expressed as a multiple of the current staff-line
          thickness (i.e.  the visual output is influenced by changes to
          ‘STAFF.StaffSymbol.thickness’).

     ‘vertical-skylines’ (pair of skylines):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:slur::vertical-skylines> #<primitive-procedure
          ly:grob::pure-simple-vertical-skylines-from-extents> >’

          Two skylines, one above and one below this grob.

     ‘Y-extent’ (pair of numbers):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:slur::height> #<primitive-procedure ly:slur::pure-height>
          >’

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

   This object supports the following interface(s): *note
grob-interface::, *note outside-staff-interface::, *note
slur-interface:: and *note spanner-interface::.


File: lilypond-internals.info,  Node: PianoPedalBracket,  Next: RehearsalMark,  Prev: PhrasingSlur,  Up: All layout objects

3.1.89 PianoPedalBracket
------------------------

PianoPedalBracket objects are created by: *note Piano_pedal_engraver::.

   Standard settings:

     ‘bound-padding’ (number):
          ‘1.0’

          The amount of padding to insert around spanner bounds.

     ‘bracket-flare’ (pair of numbers):
          '(0.5 . 0.5)

          A pair of numbers specifying how much edges of brackets should
          slant outward.  Value ‘0.0’ means straight edges.

     ‘direction’ (direction):
          ‘-1’

          If ‘side-axis’ is ‘0’ (or ‘X’), then this property determines
          whether the object is placed ‘LEFT’, ‘CENTER’ or ‘RIGHT’ with
          respect to the other object.  Otherwise, it determines whether
          the object is placed ‘UP’, ‘CENTER’ or ‘DOWN’.  Numerical
          values may also be used: ‘UP’=‘1’, ‘DOWN’=‘-1’, ‘LEFT’=‘-1’,
          ‘RIGHT’=‘1’, ‘CENTER’=‘0’.

     ‘edge-height’ (pair):
          '(1.0 . 1.0)

          A pair of numbers specifying the heights of the vertical
          edges: ‘(LEFT-HEIGHT . RIGHT-HEIGHT)’.

     ‘shorten-pair’ (pair of numbers):
          '(0.0 . 0.0)

          The lengths to shorten on both sides a hairpin or text-spanner
          such as a pedal bracket.  Positive values shorten the hairpin
          or text-spanner, while negative values lengthen it.

     ‘stencil’ (stencil):
          ‘ly:piano-pedal-bracket::print’

          The symbol to print.

     ‘style’ (symbol):
          ‘'line’

          This setting determines in what style a grob is typeset.
          Valid choices depend on the ‘stencil’ callback reading this
          property.

     ‘thickness’ (number):
          ‘1.0’

          For grobs made up of lines, this is the thickness of the line.
          For slurs and ties, this is the distance between the two arcs
          of the curve’s outline at its thickest point, not counting the
          diameter of the virtual “pen” that draws the arcs.  This
          property is expressed as a multiple of the current staff-line
          thickness (i.e.  the visual output is influenced by changes to
          ‘STAFF.StaffSymbol.thickness’).

     ‘vertical-skylines’ (pair of skylines):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::vertical-skylines-from-stencil> #<primitive-procedure
          ly:grob::pure-simple-vertical-skylines-from-extents> >’

          Two skylines, one above and one below this grob.

   This object supports the following interface(s): *note
grob-interface::, *note line-interface::, *note
piano-pedal-bracket-interface::, *note piano-pedal-interface:: and *note
spanner-interface::.


File: lilypond-internals.info,  Node: RehearsalMark,  Next: RepeatSlash,  Prev: PianoPedalBracket,  Up: All layout objects

3.1.90 RehearsalMark
--------------------

RehearsalMark objects are created by: *note Mark_engraver::.

   Standard settings:

     ‘after-line-breaking’ (boolean):
          ‘ly:side-position-interface::move-to-extremal-staff’

          Dummy property, used to trigger callback for
          ‘after-line-breaking’.

     ‘baseline-skip’ (dimension, in staff space):
          ‘2’

          Distance between base lines of multiple lines of text.

     ‘break-align-symbols’ (list):
          '(staff-bar key-signature clef)

          A list of _break-align symbols_ that determines which
          breakable items to align this to.  If the grob selected by the
          first symbol in the list is invisible due to
          ‘break-visibility’, we will align to the next grob (and so
          on).  Choices are listed in *note
          (lilypond-internals)break-alignment-interface::.

     ‘break-visibility’ (vector):
          #(#f #t #t)

          A vector of 3 booleans,
          ‘#(END-OF-LINE UNBROKEN BEGIN-OF-LINE)’.  ‘#t’ means visible,
          ‘#f’ means killed.

     ‘direction’ (direction):
          ‘1’

          If ‘side-axis’ is ‘0’ (or ‘X’), then this property determines
          whether the object is placed ‘LEFT’, ‘CENTER’ or ‘RIGHT’ with
          respect to the other object.  Otherwise, it determines whether
          the object is placed ‘UP’, ‘CENTER’ or ‘DOWN’.  Numerical
          values may also be used: ‘UP’=‘1’, ‘DOWN’=‘-1’, ‘LEFT’=‘-1’,
          ‘RIGHT’=‘1’, ‘CENTER’=‘0’.

     ‘extra-spacing-width’ (pair of numbers):
          '(+inf.0 . -inf.0)

          In the horizontal spacing problem, we pad each item by this
          amount (by adding the ‘car’ on the left side of the item and
          adding the ‘cdr’ on the right side of the item).  In order to
          make a grob take up no horizontal space at all, set this to
          ‘(+inf.0 . -inf.0)’.

     ‘font-size’ (number):
          ‘2’

          The font size, compared to the ‘normal’ size.  ‘0’ is
          style-sheet’s normal size, ‘-1’ is smaller, ‘+1’ is bigger.
          Each step of 1 is approximately 12% larger; 6 steps are
          exactly a factor 2 larger.  If the context property ‘fontSize’
          is set, its value is added to this before the glyph is
          printed.  Fractional values are allowed.

     ‘non-musical’ (boolean):
          ‘#t’

          True if the grob belongs to a ‘NonMusicalPaperColumn’.

     ‘outside-staff-horizontal-padding’ (number):
          ‘0.2’

          By default, an outside-staff-object can be placed so that is
          it very close to another grob horizontally.  If this property
          is set, the outside-staff-object is raised so that it is not
          so close to its neighbor.

     ‘outside-staff-priority’ (number):
          ‘1500’

          If set, the grob is positioned outside the staff in such a way
          as to avoid all collisions.  In case of a potential collision,
          the grob with the smaller ‘outside-staff-priority’ is closer
          to the staff.

     ‘padding’ (dimension, in staff space):
          ‘0.8’

          Add this much extra space between objects that are next to
          each other.

     ‘self-alignment-X’ (number):
          ‘0’

          Specify alignment of an object.  The value ‘-1’ means left
          aligned, ‘0’ centered, and ‘1’ right-aligned in X direction.
          Other numerical values may also be specified - the unit is
          half the object width.

     ‘stencil’ (stencil):
          ‘ly:text-interface::print’

          The symbol to print.

     ‘vertical-skylines’ (pair of skylines):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::vertical-skylines-from-stencil> >’

          Two skylines, one above and one below this grob.

     ‘X-offset’ (number):
          ‘self-alignment-interface::self-aligned-on-breakable’

          The horizontal amount that this object is moved relative to
          its X-parent.

     ‘Y-extent’ (pair of numbers):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::stencil-height> >’

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

     ‘Y-offset’ (number):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:side-position-interface::y-aligned-side>
          #<primitive-procedure
          ly:side-position-interface::pure-y-aligned-side> >’

          The vertical amount that this object is moved relative to its
          Y-parent.

   This object supports the following interface(s): *note
break-alignable-interface::, *note font-interface::, *note
grob-interface::, *note item-interface::, *note mark-interface::, *note
outside-staff-interface::, *note self-alignment-interface::, *note
side-position-interface:: and *note text-interface::.


File: lilypond-internals.info,  Node: RepeatSlash,  Next: RepeatTie,  Prev: RehearsalMark,  Up: All layout objects

3.1.91 RepeatSlash
------------------

RepeatSlash objects are created by: *note Slash_repeat_engraver::.

   Standard settings:

     ‘slash-negative-kern’ (number):
          ‘0.85’

          The space to remove between slashes in percent repeat glyphs.
          Larger values bring the two elements closer together.

     ‘slope’ (number):
          ‘1.7’

          The slope of this object.

     ‘stencil’ (stencil):
          ‘ly:percent-repeat-item-interface::beat-slash’

          The symbol to print.

     ‘thickness’ (number):
          ‘0.48’

          For grobs made up of lines, this is the thickness of the line.
          For slurs and ties, this is the distance between the two arcs
          of the curve’s outline at its thickest point, not counting the
          diameter of the virtual “pen” that draws the arcs.  This
          property is expressed as a multiple of the current staff-line
          thickness (i.e.  the visual output is influenced by changes to
          ‘STAFF.StaffSymbol.thickness’).

     ‘Y-extent’ (pair of numbers):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::stencil-height> >’

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

   This object supports the following interface(s): *note
grob-interface::, *note item-interface::, *note
percent-repeat-interface::, *note percent-repeat-item-interface:: and
*note rhythmic-grob-interface::.


File: lilypond-internals.info,  Node: RepeatTie,  Next: RepeatTieColumn,  Prev: RepeatSlash,  Up: All layout objects

3.1.92 RepeatTie
----------------

RepeatTie objects are created by: *note Repeat_tie_engraver::.

   Standard settings:

     ‘control-points’ (list of number pairs):
          ‘ly:semi-tie::calc-control-points’

          List of offsets (number pairs) that form control points for
          the tie, slur, or bracket shape.  For Béziers, this should
          list the control points of a third-order Bézier curve.

     ‘details’ (list):
          '((ratio . 0.333) (height-limit . 1.0))

          Alist of parameters for detailed grob behavior.  More
          information on the allowed parameters for a grob can be found
          by looking at the top of the Internals Reference page for each
          interface having a ‘details’ property.

     ‘direction’ (direction):
          ‘ly:tie::calc-direction’

          If ‘side-axis’ is ‘0’ (or ‘X’), then this property determines
          whether the object is placed ‘LEFT’, ‘CENTER’ or ‘RIGHT’ with
          respect to the other object.  Otherwise, it determines whether
          the object is placed ‘UP’, ‘CENTER’ or ‘DOWN’.  Numerical
          values may also be used: ‘UP’=‘1’, ‘DOWN’=‘-1’, ‘LEFT’=‘-1’,
          ‘RIGHT’=‘1’, ‘CENTER’=‘0’.

     ‘extra-spacing-height’ (pair of numbers):
          '(-0.5 . 0.5)

          In the horizontal spacing problem, we increase the height of
          each item by this amount (by adding the ‘car’ to the bottom of
          the item and adding the ‘cdr’ to the top of the item).  In
          order to make a grob infinitely high (to prevent the
          horizontal spacing problem from placing any other grobs above
          or below this grob), set this to ‘(-inf.0 . +inf.0)’.

     ‘head-direction’ (direction):
          ‘1’

          Are the note heads left or right in a semitie?

     ‘stencil’ (stencil):
          ‘ly:tie::print’

          The symbol to print.

     ‘thickness’ (number):
          ‘1.0’

          For grobs made up of lines, this is the thickness of the line.
          For slurs and ties, this is the distance between the two arcs
          of the curve’s outline at its thickest point, not counting the
          diameter of the virtual “pen” that draws the arcs.  This
          property is expressed as a multiple of the current staff-line
          thickness (i.e.  the visual output is influenced by changes to
          ‘STAFF.StaffSymbol.thickness’).

     ‘vertical-skylines’ (pair of skylines):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::vertical-skylines-from-stencil> >’

          Two skylines, one above and one below this grob.

     ‘Y-extent’ (pair of numbers):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::stencil-height> >’

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

   This object supports the following interface(s): *note
grob-interface::, *note item-interface:: and *note semi-tie-interface::.


File: lilypond-internals.info,  Node: RepeatTieColumn,  Next: Rest,  Prev: RepeatTie,  Up: All layout objects

3.1.93 RepeatTieColumn
----------------------

RepeatTieColumn objects are created by: *note Repeat_tie_engraver::.

   Standard settings:

     ‘head-direction’ (direction):
          ‘ly:semi-tie-column::calc-head-direction’

          Are the note heads left or right in a semitie?

     ‘X-extent’ (pair of numbers)
          Extent (size) in the X direction, measured in staff-space
          units, relative to object’s reference point.

     ‘Y-extent’ (pair of numbers)
          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

   This object supports the following interface(s): *note
grob-interface::, *note item-interface:: and *note
semi-tie-column-interface::.


File: lilypond-internals.info,  Node: Rest,  Next: RestCollision,  Prev: RepeatTieColumn,  Up: All layout objects

3.1.94 Rest
-----------

Rest objects are created by: *note Completion_rest_engraver:: and *note
Rest_engraver::.

   Standard settings:

     ‘duration-log’ (integer):
          ‘stem::calc-duration-log’

          The 2-log of the note head duration, i.e., ‘0’ = whole note,
          ‘1’ = half note, etc.

     ‘minimum-distance’ (dimension, in staff space):
          ‘0.25’

          Minimum distance between rest and notes or beam.

     ‘parenthesis-friends’ (list):
          '(dot)

          A list of Grob types, as symbols.  When parentheses enclose a
          Grob that has ’parenthesis-friends, the parentheses widen to
          include any child Grobs with type among ’parenthesis-friends.

     ‘stencil’ (stencil):
          ‘ly:rest::print’

          The symbol to print.

     ‘vertical-skylines’ (pair of skylines):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::vertical-skylines-from-stencil> #<primitive-procedure
          ly:grob::pure-simple-vertical-skylines-from-extents> >’

          Two skylines, one above and one below this grob.

     ‘voiced-position’ (number):
          ‘4’

          The staff-position of a voiced ‘Rest’, negative if the rest
          has ‘direction’ ‘DOWN’.

     ‘X-extent’ (pair of numbers):
          ‘ly:rest::width’

          Extent (size) in the X direction, measured in staff-space
          units, relative to object’s reference point.

     ‘Y-extent’ (pair of numbers):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:rest::height> #<primitive-procedure ly:rest::pure-height>
          >’

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

     ‘Y-offset’ (number):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:rest::y-offset-callback> >’

          The vertical amount that this object is moved relative to its
          Y-parent.

   This object supports the following interface(s): *note
font-interface::, *note grob-interface::, *note item-interface::, *note
rest-interface::, *note rhythmic-grob-interface::, *note
rhythmic-head-interface:: and *note staff-symbol-referencer-interface::.


File: lilypond-internals.info,  Node: RestCollision,  Next: Script,  Prev: Rest,  Up: All layout objects

3.1.95 RestCollision
--------------------

RestCollision objects are created by: *note Rest_collision_engraver::.

   Standard settings:

     ‘minimum-distance’ (dimension, in staff space):
          ‘0.75’

          Minimum distance between rest and notes or beam.

   This object supports the following interface(s): *note
grob-interface::, *note item-interface:: and *note
rest-collision-interface::.


File: lilypond-internals.info,  Node: Script,  Next: ScriptColumn,  Prev: RestCollision,  Up: All layout objects

3.1.96 Script
-------------

Script objects are created by: *note Drum_notes_engraver::, *note
New_fingering_engraver:: and *note Script_engraver::.

   Standard settings:

     ‘add-stem-support’ (boolean):
          ‘#t’

          If set, the ‘Stem’ object is included in this script’s
          support.

     ‘direction’ (direction):
          ‘ly:script-interface::calc-direction’

          If ‘side-axis’ is ‘0’ (or ‘X’), then this property determines
          whether the object is placed ‘LEFT’, ‘CENTER’ or ‘RIGHT’ with
          respect to the other object.  Otherwise, it determines whether
          the object is placed ‘UP’, ‘CENTER’ or ‘DOWN’.  Numerical
          values may also be used: ‘UP’=‘1’, ‘DOWN’=‘-1’, ‘LEFT’=‘-1’,
          ‘RIGHT’=‘1’, ‘CENTER’=‘0’.

     ‘font-encoding’ (symbol):
          ‘'fetaMusic’

          The font encoding is the broadest category for selecting a
          font.  Currently, only lilypond’s system fonts (Emmentaler)
          are using this property.  Available values are ‘fetaMusic’
          (Emmentaler), ‘fetaBraces’, ‘fetaText’ (Emmentaler).

     ‘horizon-padding’ (number):
          ‘0.1’

          The amount to pad the axis along which a ‘Skyline’ is built
          for the ‘side-position-interface’.

     ‘self-alignment-X’ (number):
          ‘0’

          Specify alignment of an object.  The value ‘-1’ means left
          aligned, ‘0’ centered, and ‘1’ right-aligned in X direction.
          Other numerical values may also be specified - the unit is
          half the object width.

     ‘side-axis’ (number):
          ‘1’

          If the value is ‘X’ (or equivalently ‘0’), the object is
          placed horizontally next to the other object.  If the value is
          ‘Y’ or ‘1’, it is placed vertically.

     ‘slur-padding’ (number):
          ‘0.2’

          Extra distance between slur and script.

     ‘staff-padding’ (dimension, in staff space):
          ‘0.25’

          Maintain this much space between reference points and the
          staff.  Its effect is to align objects of differing sizes
          (like the dynamics p and f) on their baselines.

     ‘stencil’ (stencil):
          ‘ly:script-interface::print’

          The symbol to print.

     ‘vertical-skylines’ (pair of skylines):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::vertical-skylines-from-stencil> >’

          Two skylines, one above and one below this grob.

     ‘X-offset’ (number):
          ‘script-interface::calc-x-offset’

          The horizontal amount that this object is moved relative to
          its X-parent.

     ‘Y-extent’ (pair of numbers):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::stencil-height> >’

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

     ‘Y-offset’ (number):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:side-position-interface::y-aligned-side>
          #<primitive-procedure
          ly:side-position-interface::pure-y-aligned-side> >’

          The vertical amount that this object is moved relative to its
          Y-parent.

   This object supports the following interface(s): *note
font-interface::, *note grob-interface::, *note item-interface::, *note
outside-staff-interface::, *note script-interface::, *note
self-alignment-interface:: and *note side-position-interface::.


File: lilypond-internals.info,  Node: ScriptColumn,  Next: ScriptRow,  Prev: Script,  Up: All layout objects

3.1.97 ScriptColumn
-------------------

ScriptColumn objects are created by: *note Script_column_engraver::.

   Standard settings:

     ‘before-line-breaking’ (boolean):
          ‘ly:script-column::before-line-breaking’

          Dummy property, used to trigger a callback function.

   This object supports the following interface(s): *note
grob-interface::, *note item-interface:: and *note
script-column-interface::.


File: lilypond-internals.info,  Node: ScriptRow,  Next: Slur,  Prev: ScriptColumn,  Up: All layout objects

3.1.98 ScriptRow
----------------

ScriptRow objects are created by: *note Script_row_engraver::.

   Standard settings:

     ‘before-line-breaking’ (boolean):
          ‘ly:script-column::row-before-line-breaking’

          Dummy property, used to trigger a callback function.

   This object supports the following interface(s): *note
grob-interface::, *note item-interface:: and *note
script-column-interface::.


File: lilypond-internals.info,  Node: Slur,  Next: SostenutoPedal,  Prev: ScriptRow,  Up: All layout objects

3.1.99 Slur
-----------

Slur objects are created by: *note Slur_engraver::.

   Standard settings:

     ‘avoid-slur’ (symbol):
          ‘'inside’

          Method of handling slur collisions.  Choices are ‘inside’,
          ‘outside’, ‘around’, and ‘ignore’.  ‘inside’ adjusts the slur
          if needed to keep the grob inside the slur.  ‘outside’ moves
          the grob vertically to the outside of the slur.  ‘around’
          moves the grob vertically to the outside of the slur only if
          there is a collision.  ‘ignore’ does not move either.  In
          grobs whose notational significance depends on vertical
          position (such as accidentals, clefs, etc.), ‘outside’ and
          ‘around’ behave like ‘ignore’.

     ‘control-points’ (list of number pairs):
          ‘ly:slur::calc-control-points’

          List of offsets (number pairs) that form control points for
          the tie, slur, or bracket shape.  For Béziers, this should
          list the control points of a third-order Bézier curve.

     ‘details’ (list):
          '((region-size . 4)
            (head-encompass-penalty . 1000.0)
            (stem-encompass-penalty . 30.0)
            (edge-attraction-factor . 4)
            (same-slope-penalty . 20)
            (steeper-slope-factor . 50)
            (non-horizontal-penalty . 15)
            (max-slope . 1.1)
            (max-slope-factor . 10)
            (free-head-distance . 0.3)
            (free-slur-distance . 0.8)
            (gap-to-staffline-inside . 0.2)
            (gap-to-staffline-outside . 0.1)
            (extra-object-collision-penalty . 50)
            (accidental-collision . 3)
            (extra-encompass-free-distance . 0.3)
            (extra-encompass-collision-distance . 0.8)
            (head-slur-distance-max-ratio . 3)
            (head-slur-distance-factor . 10)
            (absolute-closeness-measure . 0.3)
            (edge-slope-exponent . 1.7)
            (close-to-edge-length . 2.5)
            (encompass-object-range-overshoot . 0.5)
            (slur-tie-extrema-min-distance . 0.2)
            (slur-tie-extrema-min-distance-penalty . 2))

          Alist of parameters for detailed grob behavior.  More
          information on the allowed parameters for a grob can be found
          by looking at the top of the Internals Reference page for each
          interface having a ‘details’ property.

     ‘direction’ (direction):
          ‘ly:slur::calc-direction’

          If ‘side-axis’ is ‘0’ (or ‘X’), then this property determines
          whether the object is placed ‘LEFT’, ‘CENTER’ or ‘RIGHT’ with
          respect to the other object.  Otherwise, it determines whether
          the object is placed ‘UP’, ‘CENTER’ or ‘DOWN’.  Numerical
          values may also be used: ‘UP’=‘1’, ‘DOWN’=‘-1’, ‘LEFT’=‘-1’,
          ‘RIGHT’=‘1’, ‘CENTER’=‘0’.

     ‘height-limit’ (dimension, in staff space):
          ‘2.0’

          Maximum slur height: The longer the slur, the closer it is to
          this height.

     ‘line-thickness’ (number):
          ‘0.8’

          For slurs and ties, this is the diameter of the virtual “pen”
          that draws the two arcs of the curve’s outline, which
          intersect at the endpoints.  This property is expressed as a
          multiple of the current staff-line thickness (i.e.  the visual
          output is influenced by changes to
          ‘STAFF.StaffSymbol.thickness’).

     ‘minimum-length’ (dimension, in staff space):
          ‘1.5’

          Try to make a spanner at least this long, normally in the
          horizontal direction.  This requires an appropriate callback
          for the ‘springs-and-rods’ property.  If added to a ‘Tie’,
          this sets the minimum distance between noteheads.

     ‘ratio’ (number):
          ‘0.25’

          Parameter for slur shape.  The higher this number, the quicker
          the slur attains its ‘height-limit’.

     ‘springs-and-rods’ (boolean):
          ‘ly:spanner::set-spacing-rods’

          Dummy variable for triggering spacing routines.

     ‘stencil’ (stencil):
          ‘ly:slur::print’

          The symbol to print.

     ‘thickness’ (number):
          ‘1.2’

          For grobs made up of lines, this is the thickness of the line.
          For slurs and ties, this is the distance between the two arcs
          of the curve’s outline at its thickest point, not counting the
          diameter of the virtual “pen” that draws the arcs.  This
          property is expressed as a multiple of the current staff-line
          thickness (i.e.  the visual output is influenced by changes to
          ‘STAFF.StaffSymbol.thickness’).

     ‘vertical-skylines’ (pair of skylines):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:slur::vertical-skylines> #<primitive-procedure
          ly:grob::pure-simple-vertical-skylines-from-extents> >’

          Two skylines, one above and one below this grob.

     ‘Y-extent’ (pair of numbers):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:slur::height> #<primitive-procedure ly:slur::pure-height>
          >’

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

   This object supports the following interface(s): *note
grob-interface::, *note outside-staff-interface::, *note
slur-interface:: and *note spanner-interface::.


File: lilypond-internals.info,  Node: SostenutoPedal,  Next: SostenutoPedalLineSpanner,  Prev: Slur,  Up: All layout objects

3.1.100 SostenutoPedal
----------------------

SostenutoPedal objects are created by: *note Piano_pedal_engraver::.

   Standard settings:

     ‘direction’ (direction):
          ‘1’

          If ‘side-axis’ is ‘0’ (or ‘X’), then this property determines
          whether the object is placed ‘LEFT’, ‘CENTER’ or ‘RIGHT’ with
          respect to the other object.  Otherwise, it determines whether
          the object is placed ‘UP’, ‘CENTER’ or ‘DOWN’.  Numerical
          values may also be used: ‘UP’=‘1’, ‘DOWN’=‘-1’, ‘LEFT’=‘-1’,
          ‘RIGHT’=‘1’, ‘CENTER’=‘0’.

     ‘extra-spacing-width’ (pair of numbers):
          '(+inf.0 . -inf.0)

          In the horizontal spacing problem, we pad each item by this
          amount (by adding the ‘car’ on the left side of the item and
          adding the ‘cdr’ on the right side of the item).  In order to
          make a grob take up no horizontal space at all, set this to
          ‘(+inf.0 . -inf.0)’.

     ‘font-shape’ (symbol):
          ‘'italic’

          Select the shape of a font.  Choices include ‘upright’,
          ‘italic’, ‘caps’.

     ‘padding’ (dimension, in staff space):
          ‘0.0’

          Add this much extra space between objects that are next to
          each other.

     ‘parent-alignment-X’ (number)
          Specify on which point of the parent the object is aligned.
          The value ‘-1’ means aligned on parent’s left edge,
          ‘0’ on center, and ‘1’ right edge, in X direction.  Other
          numerical values may also be specified - the unit is half the
          parent’s width.  If unset, the value from ‘self-alignment-X’
          property will be used.

     ‘self-alignment-X’ (number):
          ‘0’

          Specify alignment of an object.  The value ‘-1’ means left
          aligned, ‘0’ centered, and ‘1’ right-aligned in X direction.
          Other numerical values may also be specified - the unit is
          half the object width.

     ‘stencil’ (stencil):
          ‘ly:text-interface::print’

          The symbol to print.

     ‘vertical-skylines’ (pair of skylines):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::vertical-skylines-from-stencil> >’

          Two skylines, one above and one below this grob.

     ‘X-offset’ (number):
          ‘ly:self-alignment-interface::aligned-on-x-parent’

          The horizontal amount that this object is moved relative to
          its X-parent.

     ‘Y-extent’ (pair of numbers):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::stencil-height> >’

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

   This object supports the following interface(s): *note
font-interface::, *note grob-interface::, *note item-interface::, *note
piano-pedal-script-interface::, *note self-alignment-interface:: and
*note text-interface::.


File: lilypond-internals.info,  Node: SostenutoPedalLineSpanner,  Next: SpacingSpanner,  Prev: SostenutoPedal,  Up: All layout objects

3.1.101 SostenutoPedalLineSpanner
---------------------------------

SostenutoPedalLineSpanner objects are created by: *note
Piano_pedal_align_engraver::.

   Standard settings:

     ‘axes’ (list):
          '(1)

          List of axis numbers.  In the case of alignment grobs, this
          should contain only one number.

     ‘direction’ (direction):
          ‘-1’

          If ‘side-axis’ is ‘0’ (or ‘X’), then this property determines
          whether the object is placed ‘LEFT’, ‘CENTER’ or ‘RIGHT’ with
          respect to the other object.  Otherwise, it determines whether
          the object is placed ‘UP’, ‘CENTER’ or ‘DOWN’.  Numerical
          values may also be used: ‘UP’=‘1’, ‘DOWN’=‘-1’, ‘LEFT’=‘-1’,
          ‘RIGHT’=‘1’, ‘CENTER’=‘0’.

     ‘minimum-space’ (dimension, in staff space):
          ‘1.0’

          Minimum distance that the victim should move (after padding).

     ‘outside-staff-priority’ (number):
          ‘1000’

          If set, the grob is positioned outside the staff in such a way
          as to avoid all collisions.  In case of a potential collision,
          the grob with the smaller ‘outside-staff-priority’ is closer
          to the staff.

     ‘padding’ (dimension, in staff space):
          ‘1.2’

          Add this much extra space between objects that are next to
          each other.

     ‘side-axis’ (number):
          ‘1’

          If the value is ‘X’ (or equivalently ‘0’), the object is
          placed horizontally next to the other object.  If the value is
          ‘Y’ or ‘1’, it is placed vertically.

     ‘staff-padding’ (dimension, in staff space):
          ‘1.0’

          Maintain this much space between reference points and the
          staff.  Its effect is to align objects of differing sizes
          (like the dynamics p and f) on their baselines.

     ‘vertical-skylines’ (pair of skylines):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::vertical-skylines-from-element-stencils>
          #<primitive-procedure
          ly:grob::pure-vertical-skylines-from-element-stencils> >’

          Two skylines, one above and one below this grob.

     ‘X-extent’ (pair of numbers):
          ‘ly:axis-group-interface::width’

          Extent (size) in the X direction, measured in staff-space
          units, relative to object’s reference point.

     ‘Y-extent’ (pair of numbers):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:axis-group-interface::height> #<primitive-procedure
          ly:axis-group-interface::pure-height> >’

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

     ‘Y-offset’ (number):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:side-position-interface::y-aligned-side>
          #<primitive-procedure
          ly:side-position-interface::pure-y-aligned-side> >’

          The vertical amount that this object is moved relative to its
          Y-parent.

   This object supports the following interface(s): *note
axis-group-interface::, *note grob-interface::, *note
outside-staff-interface::, *note piano-pedal-interface::, *note
side-position-interface:: and *note spanner-interface::.


File: lilypond-internals.info,  Node: SpacingSpanner,  Next: SpanBar,  Prev: SostenutoPedalLineSpanner,  Up: All layout objects

3.1.102 SpacingSpanner
----------------------

SpacingSpanner objects are created by: *note Spacing_engraver::.

   Standard settings:

     ‘average-spacing-wishes’ (boolean):
          ‘#t’

          If set, the spacing wishes are averaged over staves.

     ‘base-shortest-duration’ (moment):
          ‘#<Mom 3/16>’

          Spacing is based on the shortest notes in a piece.  Normally,
          pieces are spaced as if notes at least as short as this are
          present.

     ‘common-shortest-duration’ (moment):
          ‘ly:spacing-spanner::calc-common-shortest-duration’

          The most common shortest note length.  This is used in
          spacing.  Enlarging this sets the score tighter.

     ‘shortest-duration-space’ (number):
          ‘2.0’

          Start with this multiple of ‘spacing-increment’ space for the
          shortest duration.  See also *note
          (lilypond-internals)spacing-spanner-interface::.

     ‘spacing-increment’ (dimension, in staff space):
          ‘1.2’

          The unit of length for note-spacing.  Typically, the width of
          a note head.  See also *note
          (lilypond-internals)spacing-spanner-interface::.

     ‘springs-and-rods’ (boolean):
          ‘ly:spacing-spanner::set-springs’

          Dummy variable for triggering spacing routines.

   This object supports the following interface(s): *note
grob-interface::, *note spacing-options-interface::, *note
spacing-spanner-interface:: and *note spanner-interface::.


File: lilypond-internals.info,  Node: SpanBar,  Next: SpanBarStub,  Prev: SpacingSpanner,  Up: All layout objects

3.1.103 SpanBar
---------------

SpanBar objects are created by: *note Span_bar_engraver::.

   Standard settings:

     ‘allow-span-bar’ (boolean):
          ‘#t’

          If false, no inter-staff bar line will be created below this
          bar line.

     ‘bar-extent’ (pair of numbers):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:axis-group-interface::height> #<primitive-procedure
          ly:axis-group-interface::pure-height> >’

          The Y-extent of the actual bar line.  This may differ from
          ‘Y-extent’ because it does not include the dots in a repeat
          bar line.

     ‘before-line-breaking’ (boolean):
          ‘ly:span-bar::before-line-breaking’

          Dummy property, used to trigger a callback function.

     ‘break-align-symbol’ (symbol):
          ‘'staff-bar’

          This key is used for aligning, ordering, and spacing breakable
          items.  See *note
          (lilypond-internals)break-alignment-interface::.

     ‘glyph-name’ (string):
          ‘ly:span-bar::calc-glyph-name’

          The glyph name within the font.

          In the context of (span) bar lines, GLYPH-NAME represents a
          processed form of ‘glyph’, where decisions about line breaking
          etc.  are already taken.

     ‘layer’ (integer):
          ‘0’

          An integer which determines the order of printing objects.
          Objects with the lowest value of layer are drawn first, then
          objects with progressively higher values are drawn, so objects
          with higher values overwrite objects with lower values.  By
          default most objects are assigned a layer value of 1.

     ‘non-musical’ (boolean):
          ‘#t’

          True if the grob belongs to a ‘NonMusicalPaperColumn’.

     ‘stencil’ (stencil):
          ‘ly:span-bar::print’

          The symbol to print.

     ‘X-extent’ (pair of numbers):
          ‘ly:span-bar::width’

          Extent (size) in the X direction, measured in staff-space
          units, relative to object’s reference point.

     ‘Y-extent’ (pair of numbers):
          '(+inf.0 . -inf.0)

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

   This object supports the following interface(s): *note
bar-line-interface::, *note font-interface::, *note grob-interface::,
*note item-interface:: and *note span-bar-interface::.


File: lilypond-internals.info,  Node: SpanBarStub,  Next: StaffGrouper,  Prev: SpanBar,  Up: All layout objects

3.1.104 SpanBarStub
-------------------

SpanBarStub objects are created by: *note Span_bar_stub_engraver::.

   Standard settings:

     ‘extra-spacing-height’ (pair of numbers):
          ‘pure-from-neighbor-interface::extra-spacing-height’

          In the horizontal spacing problem, we increase the height of
          each item by this amount (by adding the ‘car’ to the bottom of
          the item and adding the ‘cdr’ to the top of the item).  In
          order to make a grob infinitely high (to prevent the
          horizontal spacing problem from placing any other grobs above
          or below this grob), set this to ‘(-inf.0 . +inf.0)’.

     ‘X-extent’ (pair of numbers):
          ‘#<procedure #f (grob)>’

          Extent (size) in the X direction, measured in staff-space
          units, relative to object’s reference point.

     ‘Y-extent’ (pair of numbers):
          ‘#<unpure-pure-container #f #<procedure
          pure-from-neighbor-interface::pure-height (grob beg end)> >’

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

   This object supports the following interface(s): *note
grob-interface::, *note item-interface:: and *note
pure-from-neighbor-interface::.


File: lilypond-internals.info,  Node: StaffGrouper,  Next: StaffSpacing,  Prev: SpanBarStub,  Up: All layout objects

3.1.105 StaffGrouper
--------------------

StaffGrouper objects are not created by any engraver.

   Standard settings:

     ‘staff-staff-spacing’ (list):
          '((basic-distance . 9)
            (minimum-distance . 7)
            (padding . 1)
            (stretchability . 5))

          When applied to a staff-group’s ‘StaffGrouper’ grob, this
          spacing alist controls the distance between consecutive staves
          within the staff-group.  When applied to a staff’s
          ‘VerticalAxisGroup’ grob, it controls the distance between the
          staff and the nearest staff below it in the same system,
          replacing any settings inherited from the ‘StaffGrouper’ grob
          of the containing staff-group, if there is one.  This property
          remains in effect even when non-staff lines appear between
          staves.  The alist can contain the following keys:

             • ‘basic-distance’ – the vertical distance, measured in
               staff-spaces, between the reference points of the two
               items when no collisions would result, and no stretching
               or compressing is in effect.

             • ‘minimum-distance’ – the smallest allowable vertical
               distance, measured in staff-spaces, between the reference
               points of the two items, when compressing is in effect.

             • ‘padding’ – the minimum required amount of unobstructed
               vertical whitespace between the bounding boxes (or
               skylines) of the two items, measured in staff-spaces.

             • ‘stretchability’ – a unitless measure of the dimension’s
               relative propensity to stretch.  If zero, the distance
               will not stretch (unless collisions would result).

     ‘staffgroup-staff-spacing’ (list):
          '((basic-distance . 10.5)
            (minimum-distance . 8)
            (padding . 1)
            (stretchability . 9))

          The spacing alist controlling the distance between the last
          staff of the current staff-group and the staff just below it
          in the same system, even if one or more non-staff lines exist
          between the two staves.  If the ‘staff-staff-spacing’ property
          of the staff’s ‘VerticalAxisGroup’ grob is set, that is used
          instead.  See ‘staff-staff-spacing’ for a description of the
          alist structure.

   This object supports the following interface(s): *note
grob-interface::, *note spanner-interface:: and *note
staff-grouper-interface::.


File: lilypond-internals.info,  Node: StaffSpacing,  Next: StaffSymbol,  Prev: StaffGrouper,  Up: All layout objects

3.1.106 StaffSpacing
--------------------

StaffSpacing objects are created by: *note
Separating_line_group_engraver::.

   Standard settings:

     ‘non-musical’ (boolean):
          ‘#t’

          True if the grob belongs to a ‘NonMusicalPaperColumn’.

     ‘stem-spacing-correction’ (number):
          ‘0.4’

          Optical correction amount for stems that are placed in tight
          configurations.  For opposite directions, this amount is the
          correction for two normal sized stems that overlap completely.

   This object supports the following interface(s): *note
grob-interface::, *note item-interface::, *note spacing-interface:: and
*note staff-spacing-interface::.


File: lilypond-internals.info,  Node: StaffSymbol,  Next: StanzaNumber,  Prev: StaffSpacing,  Up: All layout objects

3.1.107 StaffSymbol
-------------------

StaffSymbol objects are created by: *note Staff_symbol_engraver:: and
*note Tab_staff_symbol_engraver::.

   Standard settings:

     ‘break-align-symbols’ (list):
          '(staff-bar break-alignment)

          A list of _break-align symbols_ that determines which
          breakable items to align this to.  If the grob selected by the
          first symbol in the list is invisible due to
          ‘break-visibility’, we will align to the next grob (and so
          on).  Choices are listed in *note
          (lilypond-internals)break-alignment-interface::.

     ‘layer’ (integer):
          ‘0’

          An integer which determines the order of printing objects.
          Objects with the lowest value of layer are drawn first, then
          objects with progressively higher values are drawn, so objects
          with higher values overwrite objects with lower values.  By
          default most objects are assigned a layer value of 1.

     ‘ledger-line-thickness’ (pair of numbers):
          '(1.0 . 0.1)

          The thickness of ledger lines.  It is the sum of 2 numbers:
          The first is the factor for line thickness, and the second for
          staff space.  Both contributions are added.

     ‘line-count’ (integer):
          ‘5’

          The number of staff lines.

     ‘stencil’ (stencil):
          ‘ly:staff-symbol::print’

          The symbol to print.

     ‘Y-extent’ (pair of numbers):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:staff-symbol::height> >’

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

   This object supports the following interface(s): *note
grob-interface::, *note spanner-interface:: and *note
staff-symbol-interface::.


File: lilypond-internals.info,  Node: StanzaNumber,  Next: Stem,  Prev: StaffSymbol,  Up: All layout objects

3.1.108 StanzaNumber
--------------------

StanzaNumber objects are created by: *note Stanza_number_engraver::.

   Standard settings:

     ‘direction’ (direction):
          ‘-1’

          If ‘side-axis’ is ‘0’ (or ‘X’), then this property determines
          whether the object is placed ‘LEFT’, ‘CENTER’ or ‘RIGHT’ with
          respect to the other object.  Otherwise, it determines whether
          the object is placed ‘UP’, ‘CENTER’ or ‘DOWN’.  Numerical
          values may also be used: ‘UP’=‘1’, ‘DOWN’=‘-1’, ‘LEFT’=‘-1’,
          ‘RIGHT’=‘1’, ‘CENTER’=‘0’.

     ‘font-series’ (symbol):
          ‘'bold’

          Select the series of a font.  Choices include ‘medium’,
          ‘bold’, ‘bold-narrow’, etc.

     ‘padding’ (dimension, in staff space):
          ‘1.0’

          Add this much extra space between objects that are next to
          each other.

     ‘side-axis’ (number):
          ‘0’

          If the value is ‘X’ (or equivalently ‘0’), the object is
          placed horizontally next to the other object.  If the value is
          ‘Y’ or ‘1’, it is placed vertically.

     ‘stencil’ (stencil):
          ‘ly:text-interface::print’

          The symbol to print.

     ‘X-offset’ (number):
          ‘ly:side-position-interface::x-aligned-side’

          The horizontal amount that this object is moved relative to
          its X-parent.

     ‘Y-extent’ (pair of numbers):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::stencil-height> >’

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

   This object supports the following interface(s): *note
font-interface::, *note grob-interface::, *note item-interface::, *note
side-position-interface::, *note stanza-number-interface:: and *note
text-interface::.


File: lilypond-internals.info,  Node: Stem,  Next: StemStub,  Prev: StanzaNumber,  Up: All layout objects

3.1.109 Stem
------------

Stem objects are created by: *note Span_stem_engraver:: and *note
Stem_engraver::.

   Standard settings:

     ‘beamlet-default-length’ (pair):
          '(1.1 . 1.1)

          A pair of numbers.  The first number specifies the default
          length of a beamlet that sticks out of the left hand side of
          this stem; the second number specifies the default length of
          the beamlet to the right.  The actual length of a beamlet is
          determined by taking either the default length or the length
          specified by ‘beamlet-max-length-proportion’, whichever is
          smaller.

     ‘beamlet-max-length-proportion’ (pair):
          '(0.75 . 0.75)

          The maximum length of a beamlet, as a proportion of the
          distance between two adjacent stems.

     ‘default-direction’ (direction):
          ‘ly:stem::calc-default-direction’

          Direction determined by note head positions.

     ‘details’ (list):
          '((lengths 3.5 3.5 3.5 4.25 5.0 6.0)
            (beamed-lengths 3.26 3.5 3.6)
            (beamed-minimum-free-lengths 1.83 1.5 1.25)
            (beamed-extreme-minimum-free-lengths 2.0 1.25)
            (stem-shorten 1.0 0.5 0.25))

          Alist of parameters for detailed grob behavior.  More
          information on the allowed parameters for a grob can be found
          by looking at the top of the Internals Reference page for each
          interface having a ‘details’ property.

     ‘direction’ (direction):
          ‘ly:stem::calc-direction’

          If ‘side-axis’ is ‘0’ (or ‘X’), then this property determines
          whether the object is placed ‘LEFT’, ‘CENTER’ or ‘RIGHT’ with
          respect to the other object.  Otherwise, it determines whether
          the object is placed ‘UP’, ‘CENTER’ or ‘DOWN’.  Numerical
          values may also be used: ‘UP’=‘1’, ‘DOWN’=‘-1’, ‘LEFT’=‘-1’,
          ‘RIGHT’=‘1’, ‘CENTER’=‘0’.

     ‘double-stem-separation’ (number):
          ‘0.5’

          The distance between the two stems of a half note in tablature
          when using ‘\tabFullNotation’, not counting the width of the
          stems themselves, expressed as a multiple of the default
          height of a staff-space in the traditional five-line staff.

     ‘duration-log’ (integer):
          ‘stem::calc-duration-log’

          The 2-log of the note head duration, i.e., ‘0’ = whole note,
          ‘1’ = half note, etc.

     ‘length’ (dimension, in staff space):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:stem::calc-length> #<primitive-procedure
          ly:stem::pure-calc-length> >’

          User override for the stem length of unbeamed stems.

     ‘neutral-direction’ (direction):
          ‘-1’

          Which direction to take in the center of the staff.

     ‘note-collision-threshold’ (dimension, in staff space):
          ‘1’

          Simultaneous notes that are this close or closer in units of
          ‘staff-space’ will be identified as vertically colliding.
          Used by ‘Stem’ grobs for notes in the same voice, and
          ‘NoteCollision’ grobs for notes in different voices.  Default
          value 1.

     ‘stem-begin-position’ (number):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:stem::calc-stem-begin-position> #<primitive-procedure
          ly:stem::pure-calc-stem-begin-position> >’

          User override for the begin position of a stem.

     ‘stencil’ (stencil):
          ‘ly:stem::print’

          The symbol to print.

     ‘thickness’ (number):
          ‘1.3’

          For grobs made up of lines, this is the thickness of the line.
          For slurs and ties, this is the distance between the two arcs
          of the curve’s outline at its thickest point, not counting the
          diameter of the virtual “pen” that draws the arcs.  This
          property is expressed as a multiple of the current staff-line
          thickness (i.e.  the visual output is influenced by changes to
          ‘STAFF.StaffSymbol.thickness’).

     ‘X-extent’ (pair of numbers):
          ‘ly:stem::width’

          Extent (size) in the X direction, measured in staff-space
          units, relative to object’s reference point.

     ‘X-offset’ (number):
          ‘ly:stem::offset-callback’

          The horizontal amount that this object is moved relative to
          its X-parent.

     ‘Y-extent’ (pair of numbers):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:stem::height> #<primitive-procedure ly:stem::pure-height>
          >’

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

     ‘Y-offset’ (number):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:staff-symbol-referencer::callback> >’

          The vertical amount that this object is moved relative to its
          Y-parent.

   This object supports the following interface(s): *note
grob-interface::, *note item-interface:: and *note stem-interface::.


File: lilypond-internals.info,  Node: StemStub,  Next: StemTremolo,  Prev: Stem,  Up: All layout objects

3.1.110 StemStub
----------------

StemStub objects are created by: *note Stem_engraver::.

   Standard settings:

     ‘extra-spacing-height’ (pair of numbers):
          ‘stem-stub::extra-spacing-height’

          In the horizontal spacing problem, we increase the height of
          each item by this amount (by adding the ‘car’ to the bottom of
          the item and adding the ‘cdr’ to the top of the item).  In
          order to make a grob infinitely high (to prevent the
          horizontal spacing problem from placing any other grobs above
          or below this grob), set this to ‘(-inf.0 . +inf.0)’.

     ‘X-extent’ (pair of numbers):
          ‘stem-stub::width’

          Extent (size) in the X direction, measured in staff-space
          units, relative to object’s reference point.

     ‘Y-extent’ (pair of numbers):
          ‘#<unpure-pure-container #f #<procedure stem-stub::pure-height
          (grob beg end)> >’

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

   This object supports the following interface(s): *note
grob-interface:: and *note item-interface::.


File: lilypond-internals.info,  Node: StemTremolo,  Next: StringNumber,  Prev: StemStub,  Up: All layout objects

3.1.111 StemTremolo
-------------------

StemTremolo objects are created by: *note Stem_engraver::.

   Standard settings:

     ‘beam-thickness’ (dimension, in staff space):
          ‘0.48’

          Beam thickness, measured in ‘staff-space’ units.

     ‘beam-width’ (dimension, in staff space):
          ‘ly:stem-tremolo::calc-width’

          Width of the tremolo sign.

     ‘direction’ (direction):
          ‘ly:stem-tremolo::calc-direction’

          If ‘side-axis’ is ‘0’ (or ‘X’), then this property determines
          whether the object is placed ‘LEFT’, ‘CENTER’ or ‘RIGHT’ with
          respect to the other object.  Otherwise, it determines whether
          the object is placed ‘UP’, ‘CENTER’ or ‘DOWN’.  Numerical
          values may also be used: ‘UP’=‘1’, ‘DOWN’=‘-1’, ‘LEFT’=‘-1’,
          ‘RIGHT’=‘1’, ‘CENTER’=‘0’.

     ‘parent-alignment-X’ (number):
          ‘0’

          Specify on which point of the parent the object is aligned.
          The value ‘-1’ means aligned on parent’s left edge,
          ‘0’ on center, and ‘1’ right edge, in X direction.  Other
          numerical values may also be specified - the unit is half the
          parent’s width.  If unset, the value from ‘self-alignment-X’
          property will be used.

     ‘shape’ (symbol):
          ‘ly:stem-tremolo::calc-shape’

          This setting determines what shape a grob has.  Valid choices
          depend on the ‘stencil’ callback reading this property.

     ‘slope’ (number):
          ‘ly:stem-tremolo::calc-slope’

          The slope of this object.

     ‘stencil’ (stencil):
          ‘ly:stem-tremolo::print’

          The symbol to print.

     ‘X-extent’ (pair of numbers):
          ‘ly:stem-tremolo::width’

          Extent (size) in the X direction, measured in staff-space
          units, relative to object’s reference point.

     ‘X-offset’ (number):
          ‘ly:self-alignment-interface::aligned-on-x-parent’

          The horizontal amount that this object is moved relative to
          its X-parent.

     ‘Y-extent’ (pair of numbers):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:grob::stencil-height> #<primitive-procedure
          ly:stem-tremolo::pure-height> >’

          Extent (size) in the Y direction, measured in staff-space
          units, relative to object’s reference point.

     ‘Y-offset’ (number):
          ‘#<unpure-pure-container #<primitive-procedure
          ly:stem-tremolo::calc-y-offset> #<primitive-procedure
          ly:stem-tremolo::pure-calc-y-offset> >’

          The vertical amount that this object is moved relative to its
          Y-parent.

   This object supports the following interface(s): *note
grob-interface::, *note item-interface::, *note
self-alignment-interface:: and *note stem-tremolo-interface::.

