This is lilypond-usage.info, produced by makeinfo version 6.1 from
usage.texi.

Copyright © 1999–2015 by the authors.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.1 or any later version published by the Free Software
     Foundation; with no Invariant Sections.  A copy of the license is
     included in the section entitled “GNU Free Documentation License”.


File: lilypond-usage.info,  Node: Top,  Next: Running lilypond,  Up: (dir)

LilyPond — Usage
****************

This file explains how to execute the programs distributed with LilyPond
version 2.19.65.  In addition, it suggests some “best practices” for
efficient usage.

* Menu:

* Running lilypond::               Operation.
* Updating files with convert-ly:: Updating input files.
* lilypond-book::                  Integrating text and music.
* External programs::              Mixing LilyPond and other programs.
* Suggestions for writing files::  Best practices and effective bug-fixing.

Appendices

* GNU Free Documentation License:: License of this document.
* LilyPond index::

   For more information about how this manual fits with the other
documentation, or to read this manual in other formats, see *note
(lilypond-web)Manuals::.

   If you are missing any manuals, the complete documentation can be
found at <http://lilypond.org/>.


File: lilypond-usage.info,  Node: Running lilypond,  Next: Updating files with convert-ly,  Prev: Top,  Up: Top

1 Running ‘lilypond’
********************

This chapter details the technicalities of running LilyPond.

* Menu:

* Normal usage::
* Command-line usage::
* Error messages::
* Common errors::


File: lilypond-usage.info,  Node: Normal usage,  Next: Command-line usage,  Up: Running lilypond

1.1 Normal usage
================

Most users run LilyPond through a GUI; if you have not done so already,
please read the *note (lilypond-learning)Tutorial::.  If you use an
alternate editor to write lilypond files, see the documentation for that
program.


File: lilypond-usage.info,  Node: Command-line usage,  Next: Error messages,  Prev: Normal usage,  Up: Running lilypond

1.2 Command-line usage
======================

This section contains extra information about using LilyPond on the
command-line.  This may be desirable to pass extra options to the
program.  In addition, there are certain extra ‘helper’ programs (such
as ‘midi2ly’) which are only available on the command-line.

   By ‘command-line’, we mean the command line in the operating system.
Windows users might be more familiar with the terms ‘DOS shell’ or
‘command shell’.  MacOS X users might be more familiar with the terms
‘terminal’ or ‘console’.  Some additional setup is required for MacOS X
users; please see *note (lilypond-web)MacOS X::.

   Describing how to use this part of an operating system is outside the
scope of this manual; please consult other documentation on this topic
if you are unfamiliar with the command-line.

* Menu:

* Invoking LilyPond::
* Basic command line options for LilyPond::
* Advanced command line options for LilyPond::
* Environment variables::
* LilyPond in chroot jail::


File: lilypond-usage.info,  Node: Invoking LilyPond,  Next: Basic command line options for LilyPond,  Up: Command-line usage

Invoking ‘lilypond’
-------------------

The ‘lilypond’ executable may be called as follows from the command
line.

     lilypond [OPTION]... FILE...

   When invoked with a filename that has no extension, the ‘.ly’
extension is tried first.  To read input from stdin, use a dash (‘-’)
for FILE.

   When ‘filename.ly’ is processed it will produce ‘filename.ps’ and
‘filename.pdf’ as output.  Several files can be specified; they will
each be processed independently.  (1)

   If ‘filename.ly’ contains more than one ‘\book’ block, then the rest
of the scores will be output in numbered files, starting with
‘filename-1.pdf’.  In addition, the value of ‘output-suffix’ will be
inserted between the basename and the number.  An input file containing

     #(define output-suffix "violin")
     \score { ... }
     #(define output-suffix "cello")
     \score { ... }

will output BASE‘-violin.pdf’ and BASE‘-cello-1.pdf’.

Using LilyPond with standard shell features
...........................................

Since LilyPond is a command line application, features of the ‘shell’
used for calling LilyPond can also be put to good use.

   For example:

     lilypond *.ly

will process all LilyPond files in the current directory.

   Redirecting the console output (e.g.  to a file) may also be useful:

     lilypond file.ly 1> stdout.txt

     lilypond file.ly 2> stderr.txt

     lilypond file.ly &> all.txt

Redirects ‘normal’ output, ‘errors’ only or ‘everything’, respectively,
to a text file.  Consult the documentation for your particular shell,
Command (Windows), Terminal or Console applications (MacOS X) to see if
output redirection is supported or if the syntax is different.

   The following example searches and processes all input files in the
current directory and all directories below it recursively.  The output
files will be located in the same directory that the command was run in,
rather than in the same directories as the original input files.

     find . -name '*.ly' -exec lilypond '{}' \;

This should also work for MacOS X users.

   A Windows user would run;

     forfiles /s /M *.ly /c "cmd /c lilypond @file"

entering these commands in a ‘command prompt’ usually found under ‘Start
> Accessories > Command Prompt’ or for version 8 users, by typing in the
search window ‘command prompt’.

   Alternatively, an explicit path to the top-level of your folder
containing all the sub-folders that have input files in them can be
stated using the ‘/p’ option;

     forfiles /s /p C:\Documents\MyScores /M *.ly /c "cmd /c lilypond @file"

   If there are spaces in the path to the top-level folder, then the
whole path needs to be inside double quotes;

     forfiles /s /p "C:\Documents\My Scores" /M *.ly /c "cmd /c lilypond @file"

   ---------- Footnotes ----------

   (1) The status of GUILE is not reset after processing a ‘.ly’ file,
so be careful not to change any system defaults from within Scheme.


File: lilypond-usage.info,  Node: Basic command line options for LilyPond,  Next: Advanced command line options for LilyPond,  Prev: Invoking LilyPond,  Up: Command-line usage

Basic command line options for LilyPond
---------------------------------------

The following options are supported:

‘-b, --bigpdfs’

     PDF files generated will be much larger than normal (due to little
     or no font optimization).  However, if two or more PDF files are
     included within ‘pdftex’, ‘xetex’ or ‘luatex’ documents they can
     then be processed further via ghostscript (merging duplicated font
     data) resulting in _significantly_ smaller PDF files.

          lilypond -b myfile

     Then run ‘ghostscript’;

          gs -q -sDEVICE=pdfwrite -o gsout.pdf myfile.pdf

     ‘pdfsizeopt.py’ can then be used to further optimize the size of
     file;

          pdfsizeopt.py --use-multivalent=no gsout.pdf final.pdf

‘-d, --define-default=VAR=VAL’
     See *note Advanced command line options for LilyPond::.

‘-e, --evaluate=EXPR’
     Evaluate the Scheme EXPR before parsing any ‘.ly’ files.  Multiple
     ‘-e’ options may be given, they will be evaluated sequentially.

     The expression will be evaluated in the ‘guile-user’ module, so if
     you want to use definitions in EXPR, use

          lilypond -e '(define-public a 42)'

     on the command-line, and include

          #(use-modules (guile-user))

     at the top of the ‘.ly’ file.

               Note: Windows users must use double quotes instead of
               single quotes.

‘-f, --format=FORMAT’
     which formats should be written.  Choices for ‘format’ are ‘ps’,
     ‘pdf’, and ‘png’.

     Example: ‘lilypond -fpng FILENAME.ly’

     For ‘svg’ and ‘eps’ formats use the ‘-dbackend’ option.  See *note
     Advanced command line options for LilyPond::.

‘-h, --help’
     Show a summary of usage.

‘-H, --header=FIELD’
     Dump a header field to file ‘BASENAME.FIELD’.

‘-i, --init=FILE’
     Set init file to FILE (default: ‘init.ly’).

‘-I, --include=DIRECTORY’
     Add DIRECTORY to the search path for input files.

     Multiple -I options may be given.  The search will start in the
     first defined directory, and if the file to be included is not
     found the search will continue in subsequent directories.

‘-j, --jail=USER,GROUP,JAIL,DIR’
     Run ‘lilypond’ in a chroot jail.

     The ‘--jail’ option provides a more flexible alternative to
     ‘-dsafe’, when LilyPond formatting is being provided via a web
     server, or whenever LilyPond executes commands sent by external
     sources (see *note Advanced command line options for LilyPond::).

     It works by changing the root of ‘lilypond’ to JAIL just before
     starting the actual compilation process.  The user and group are
     then changed to match those provided, and the current directory is
     changed to DIR.  This setup guarantees that it is not possible (at
     least in theory) to escape from the jail.  Note that for ‘--jail’
     to work, ‘lilypond’ must be run as root, which is usually
     accomplished in a safe way using ‘sudo’.

     Setting up a jail can be a relatively complex matter, as we must be
     sure that LilyPond is able to find whatever it needs to compile the
     source _inside_ the jail itself.  A typical chroot jail will
     comprise the following steps:

     Setting up a separate filesystem
          A separate filesystem should be created for LilyPond, so that
          it can be mounted with safe options such as ‘noexec’, ‘nodev’,
          and ‘nosuid’.  In this way, it is impossible to run
          executables or to write directly to a device from LilyPond.
          If you do not want to create a separate partition, just create
          a file of reasonable size and use it to mount a loop device.
          A separate filesystem also guarantees that LilyPond cannot
          write more space than it is allowed.

     Setting up a separate user
          A separate user and group (say, ‘lily’/‘lily’) with low
          privileges should be used to run LilyPond inside the jail.
          There should be a single directory writable by this user,
          which should be passed in DIR.

     Preparing the jail
          LilyPond needs to read a number of files while running.  All
          these files are to be copied into the jail, under the same
          path they appear in the real root filesystem.  The entire
          content of the LilyPond installation (e.g.,
          ‘/usr/share/lilypond’) should be copied.

          If problems arise, the simplest way to trace them down is to
          run LilyPond using ‘strace’, which will allow you to determine
          which files are missing.

     Running LilyPond
          In a jail mounted with ‘noexec’ it is impossible to execute
          any external program.  Therefore LilyPond must be run with a
          backend that does not require any such program.  As we have
          already mentioned, it must be run with superuser privileges
          (which, of course, it will lose immediately), possibly using
          ‘sudo’.  It is also good practice to limit the number of
          seconds of CPU time LilyPond can use (e.g., using
          ‘ulimit -t’), and, if your operating system supports it, the
          amount of memory that can be allocated.  Also see *note
          LilyPond in chroot jail::.

‘-l, --loglevel=LEVEL’
     Set the verbosity of the console output to LEVEL.  Possible values
     are:

     ‘NONE’
          No output at all, not even error messages.

     ‘ERROR’
          Only error messages, no warnings or progress messages.

     ‘WARN’
          Warnings and error messages, no progress.

     ‘BASIC_PROGRESS’
          Basic progress messages (success), warnings and errors.

     ‘PROGRESS’
          All progress messages, warnings and errors.

     ‘INFO (default)’
          Progress messages, warnings, errors and further execution
          information.

     ‘DEBUG’
          All possible messages, including verbose debug output.

‘-o, --output=FILE or FOLDER’
     Set the default output file to FILE or, if a folder with that name
     exists, direct the output to FOLDER, taking the file name from the
     input file.  The appropriate suffix will be added (e.g.  ‘.pdf’ for
     pdf) in both cases.

‘--ps’
     Generate PostScript.

‘--png’
     Generate pictures of each page, in PNG format.  This implies
     ‘--ps’.  The resolution in DPI of the image may be set with
          -dresolution=110

‘--pdf’
     Generate PDF. This implies ‘--ps’.

‘-v, --version’
     Show version information.

‘-V, --verbose’
     Be verbose: show full paths of all files read, and give timing
     information.

‘-w, --warranty’
     Show the warranty with which GNU LilyPond comes.  (It comes with
     *NO WARRANTY*!)


File: lilypond-usage.info,  Node: Advanced command line options for LilyPond,  Next: Environment variables,  Prev: Basic command line options for LilyPond,  Up: Command-line usage

Advanced command line options for LilyPond
------------------------------------------

‘-d[OPTION-NAME]=[VALUE],’
     –define-default=[OPTION-NAME]=[VALUE] This sets the equivalent
     internal Scheme function to VALUE.  For example;

          -dbackend=svg

     If a VALUE is not supplied, then the default value is used.  The
     prefix ‘no-’ may be added to OPTION-NAME to switch ‘off’ an option.
     For example;

          -dpoint-and-click=#f

     is the same as
          -dno-point-and-click

The following are supported along with their respective default values:

*Symbol*                 *Value*      *Explanation/Options*
                                      
‘anti-alias-factor’      ‘1’          Render at a higher resolution
                                      (using the given factor) and scale
                                      down the result to prevent
                                      ‘jaggies’ in ‘PNG’ images.
                                      
‘aux-files’              ‘#t’         Create ‘.tex’, ‘.texi’ and ‘.count’
                                      files when used with the ‘eps’
                                      backend option.
                                      
‘backend’                ‘ps’         This is the default setting.
                                      Postscript files (default) include
                                      ‘TTF’, ‘Type1’ and ‘OTF’ fonts.  No
                                      ‘subsetting’ of these fonts is
                                      done.  Be aware that using
                                      ‘oriental’ character sets can lead
                                      to very large file sizes.
                                      
                         ‘eps’        Used as default by the
                                      ‘lilypond-book’ command.  This
                                      dumps every page as both a single
                                      file with all pages and fonts
                                      included and as separate
                                      encapsulated postscript files for
                                      each page but without fonts
                                      included.
                                      
                         ‘null’       Do not output a printed score.
                                      This has the same effect as
                                      ‘-dno-print-pages’.
                                      
                         ‘scm’        This dumps out the raw, internal
                                      Scheme-based drawing commands.
                                      
                         ‘svg’        Scalable Vector Graphics.  A single
                                      SVG file is created for every page
                                      of output.  Music glyphs are
                                      encoded as vector graphics, but
                                      text fonts are _not_ embedded in
                                      the SVG files.  Any SVG viewer will
                                      therefore need the relevant text
                                      fonts to be available to it for
                                      proper rendering of both text and
                                      lyrics.  It is recommended to not
                                      use font ‘lists’ or ‘aliases’ in
                                      case an SVG viewer is unable to
                                      handle them.  When using _Web Open
                                      Font Format_ (WOFF) files the
                                      additional ‘--svg-woff’ switch is
                                      required.
                                      
‘check-internal-types’   ‘#f’         Check every property assignment for
                                      types.
                                      
‘clip-systems’           ‘#f’         Extract music fragments out of a
                                      score.  This requires that the
                                      ‘clip-regions’ function has been
                                      defined within the ‘\layout’ block.
                                      See
                                      *note (lilypond-notation)Extracting fragments of music::.
                                      No fragments are extracted though
                                      if used with the ‘-dno-print-pages’
                                      option.
                                      
‘datadir’                             Prefix for data files (read-only).
                                      
‘debug-gc’               ‘#f’         Dump memory debugging statistics.
                                      
‘debug-gc-assert-parsed-dead’‘#f’     For memory debugging: Ensure that
                                      all references to parsed objects
                                      are dead.  This is an internal
                                      option, and is switched on
                                      automatically for ‘`-ddebug-gc'’.
                                      
‘debug-lexer’            ‘#f’         Debug the flex lexer.
                                      
‘debug-page-breaking-scoring’‘#f’     Dump scores for many different page
                                      breaking configurations.
                                      
‘debug-parser’           ‘#f’         Debug the bison parser.
                                      
‘debug-property-callbacks’‘#f’        Debug cyclic callback chains.
                                      
‘debug-skylines’         ‘#f’         Debug skylines.
                                      
‘delete-intermediate-files’‘#t’       Delete the unusable, intermediate
                                      ‘.ps’ files created during
                                      compilation.
                                      
‘dump-cpu-profile’       ‘#f’         Dump timing information
                                      (system-dependent).
                                      
‘dump-profile’           ‘#f’         Dump memory and time information
                                      for each file.
                                      
‘dump-signatures’        ‘#f’         Dump output signatures of each
                                      system.  Used for regression
                                      testing.
                                      
‘embed-source-code’      ‘#f’         Embed the LilyPond source files
                                      inside the generated PDF document.
                                      
‘eps-box-padding’        ‘#f’         Pad left edge of the output EPS
                                      bounding box by the given amount
                                      (in mm).
                                      
‘font-export-dir’        ‘#f [dir]’   Directory for exporting fonts as
                                      PostScript files.
                                      
‘gs-load-fonts’          ‘#f’         Load fonts via Ghostscript.
                                      
‘gs-load-lily-fonts’     ‘#f’         Load only the LilyPond fonts via
                                      Ghostscript.
                                      
‘gs-never-embed-fonts’   ‘#f’         Make Ghostscript embed only
                                      TrueType fonts and no other font
                                      format.
                                      
‘gui’                    ‘#f’         Runs silently and redirect all
                                      output to a log file.

*Note to Windows users:* By default ‘lilypond.exe’ outputs all progress
information to the command window, ‘lilypond-windows.exe’ does not and
returns a prompt, with no progress information, immediately at the
command line.  The ‘-dgui’ option can be used in this case to redirect
output to a log file.

‘help’                   ‘#f’         Show this help.
                                      
‘include-book-title-preview’‘#t’      Include book titles in preview
                                      images.
                                      
‘include-eps-fonts’      ‘#t’         Include fonts in separate-system
                                      EPS files.
                                      
‘include-settings’       ‘#f’         Include file for global settings,
                                      this is included before the score
                                      is processed.
                                      
‘job-count’              ‘#f’         Process in parallel, using the
                                      given number of jobs.
                                      
‘log-file’               ‘#f          If string ‘FOO’ is given as a
                         [file]’      second argument, redirect output to
                                      the log file ‘FOO.log’.
                                      
‘max-markup-depth’       ‘1024’       Maximum depth for the markup tree.
                                      If a markup has more levels, assume
                                      it will not terminate on its own,
                                      print a warning and return a null
                                      markup instead.
                                      
‘midi-extension’         ‘"midi"’     Set the default file extension for
                                      MIDI output file to given string.
                                      
‘music-strings-to-paths’ ‘#f’         Convert text strings to paths when
                                      glyphs belong to a music font.
                                      
‘paper-size’             ‘\"a4\"’     Set default paper size.  Note the
                                      string must be enclosed in escaped
                                      double quotes.
                                      
‘pixmap-format’          ‘png16m’     Set GhostScript’s output format for
                                      pixel images.
                                      
‘point-and-click’        ‘#t’         Add ‘point & click’ links to PDF
                                      and SVG output.  See
                                      *note Point and click::.
                                      
‘preview’                ‘#f’         Create preview images in addition
                                      to normal output.

This option is supported by all backends; ‘pdf’, ‘png’, ‘ps’, ‘eps’ and
‘svg’, but not ‘scm’.  It generates an output file, in the form
‘myFile.preview.extension’, containing the titles and the first system
of music.  If ‘\book’ or ‘\bookpart’ blocks are used, the titles of
‘\book’, ‘\bookpart’ or ‘\score’ will appear in the output, including
the first system of every ‘\score’ block if the ‘\paper’ variable
‘print-all-headers’ is set to ‘#t’.

   To suppress the usual output, use the ‘-dprint-pages’ or
‘-dno-print-pages’ options according to your requirements.

‘print-pages’            ‘#t’         Generate full pages, the default.
                                      ‘-dno-print-pages’ is useful in
                                      combination with ‘-dpreview’.
                                      
‘profile-property-accesses’‘#f’       Keep statistics of ‘get_property()’
                                      function calls.
                                      
‘protected-scheme-parsing’‘#t’        Continue when errors in inline
                                      scheme are caught in the parser.
                                      If set to ‘#f’, halt on errors and
                                      print a stack trace.
                                      
‘read-file-list’         ‘#f          Specify name of a file which
                         [file]’      contains a list of input files to
                                      be processed.
                                      
‘relative-includes’      ‘#f’         When processing an ‘\include’
                                      command, look for the included file
                                      relative to the current file
                                      (instead of the root file).
                                      
‘resolution’             ‘101’        Set resolution for generating ‘PNG’
                                      pixmaps to given value (in dpi).
                                      
‘safe’                   ‘#f’         Do not trust the ‘.ly’ input.

When LilyPond formatting is available through a web server, either the
‘--safe’ or the ‘--jail’ option MUST be passed.  The ‘--safe’ option
will prevent inline Scheme code from wreaking havoc, e.g,

     #(s ystem "rm -rf /")  % too dangerous to write correctly
     {
       c4^$(ly:gulp-file "/etc/passwd") % malicious but not destructive
     }

   The ‘-dsafe’ option works by evaluating in-line Scheme expressions in
a special safe module.  This is derived from GUILE ‘safe-r5rs’ module,
but also adds a number of functions of the LilyPond API which are listed
in ‘scm/safe-lily.scm’.

   In addition, safe mode disallows ‘\include’ directives and disables
the use of backslashes in TeX strings.  It is also not possible to
import LilyPond variables into Scheme while in safe mode.

   ‘-dsafe’ does _not_ detect resource overuse, so it is still possible
to make the program hang indefinitely, for example by feeding cyclic
data structures into the backend.  Therefore, if using LilyPond on a
publicly accessible webserver, the process should be limited in both CPU
and memory usage.

   Safe mode will prevent many useful LilyPond snippets from being
compiled.

   The ‘--jail’ is an even more secure alternative, but requires more
work to set up.  See *note Basic command line options for LilyPond::.

‘separate-log-files’     ‘#f’         For input files ‘FILE1.ly’,
                                      ‘FILE2.ly’, etc.  output log data
                                      to files ‘FILE1.log’,
                                      ‘FILE2.log’...
                                      
‘show-available-fonts’   ‘#f’         List available font names.
                                      
‘strict-infinity-checking’‘#f’        Force a crash on encountering ‘Inf’
                                      and ‘NaN’ floating point
                                      exceptions.
                                      
‘strip-output-dir’       ‘#t’         Don’t use directories from input
                                      files while constructing output
                                      file names.
                                      
‘strokeadjust’           ‘#f’         Force PostScript stroke adjustment.
                                      This option is mostly relevant when
                                      a PDF is generated from PostScript
                                      output (stroke adjustment is
                                      usually enabled automatically for
                                      low-resolution bitmap devices).
                                      Without this option, PDF previewers
                                      tend to produce widely inconsistent
                                      stem widths at resolutions typical
                                      for screen display.  The option
                                      does not noticeably affect print
                                      quality and causes large file size
                                      increases in PDF files.
                                      
‘svg-woff’               ‘#f’         This option is required when using
                                      Web Open Font Format (WOFF) font
                                      files with the backend ‘svg’
                                      command.  A single SVG file is
                                      created for every page of output.
                                      Apart from LilyPond’s own music
                                      glyphs, no other font information
                                      will be included.  Any SVG viewer
                                      will therefore require the fonts be
                                      available to it for the proper
                                      rendering of both text and lyrics.
                                      It is also recommended not to use
                                      any font ‘aliases’ or ‘lists’ in
                                      case the SVG viewer cannot handle
                                      them.
                                      
‘trace-memory-frequency’ ‘#f’         Record Scheme cell usage this many
                                      times per second.  Dump the results
                                      to ‘FILE.stacks’ and ‘FILE.graph’.
                                      
‘trace-scheme-coverage’  ‘#f’         Record coverage of Scheme files in
                                      ‘FILE.cov’.
                                      
‘verbose’                ‘#f’         Verbose output, i.e.  loglevel at
                                      DEBUG (read-only).
                                      
‘warning-as-error’       ‘#f’         Change all warning and ‘programming
                                      error’ messages into errors.


File: lilypond-usage.info,  Node: Environment variables,  Next: LilyPond in chroot jail,  Prev: Advanced command line options for LilyPond,  Up: Command-line usage

Environment variables
---------------------

‘lilypond’ recognizes the following environment variables:
‘LILYPOND_DATADIR’
     This specifies a directory where locale messages and data files
     will be looked up by default.  The directory should contain
     subdirectories called ‘ly/’, ‘ps/’, ‘tex/’, etc.

‘LANG’
     This selects the language for the warning messages.

‘LILYPOND_LOGLEVEL’
     The default loglevel.  If LilyPond is called without an explicit
     loglevel (i.e.  no ‘--loglevel’ command line option), this value is
     used.

‘LILYPOND_GC_YIELD’
     A variable, as a percentage, that tunes memory management behavior.
     A higher values means the program uses more memory, a smaller value
     means more CPU time is used.  The default value is ‘70’.


File: lilypond-usage.info,  Node: LilyPond in chroot jail,  Prev: Environment variables,  Up: Command-line usage

LilyPond in chroot jail
-----------------------

Setting up the server to run LilyPond in a chroot jail is a complicated
task.  The steps are listed below.  Examples in the steps are from
Ubuntu GNU/Linux, and may require the use of ‘sudo’ as appropriate.

   • Install the necessary packages: LilyPond, GhostScript, and
     ImageMagick.

   • Create a new user by the name of ‘lily’:

          adduser lily

     This will create a new group for the ‘lily’ user as well, and a
     home folder, ‘/home/lily’

   • In the home folder of the ‘lily’ user create a file to use as a
     separate filesystem:

          dd if=/dev/zero of=/home/lily/loopfile bs=1k count= 200000

     This example creates a 200MB file for use as the jail filesystem.

   • Create a loop device, make a file system and mount it, then create
     a folder that can be written by the ‘lily’ user:

          mkdir /mnt/lilyloop
          losetup /dev/loop0 /home/lily/loopfile
          mkfs -t ext3 /dev/loop0 200000
          mount -t ext3 /dev/loop0 /mnt/lilyloop
          mkdir /mnt/lilyloop/lilyhome
          chown lily /mnt/lilyloop/lilyhome

   • In the configuration of the servers, the JAIL will be
     ‘/mnt/lilyloop’ and the DIR will be ‘/lilyhome’.

   • Create a big directory tree in the jail by copying the necessary
     files, as shown in the sample script below.

     You can use ‘sed’ to create the necessary copy commands for a given
     executable:

          for i in "/usr/local/lilypond/usr/bin/lilypond" "/bin/sh" "/usr/bin/;  \
            do ldd $i | sed 's/.*=> \/\(.*\/\)\([^(]*\).*/mkdir -p \1 \&\&  \
              cp -L \/\1\2 \1\2/' | sed 's/\t\/\(.*\/\)\(.*\) (.*)$/mkdir -p  \
                \1 \&\& cp -L \/\1\2 \1\2/' | sed '/.*=>.*/d'; done

Example script for 32-bit Ubuntu 8.04
-------------------------------------

     #!/bin/sh
     ## defaults set here

     username=lily
     home=/home
     loopdevice=/dev/loop0
     jaildir=/mnt/lilyloop
     # the prefix (without the leading slash!)
     lilyprefix=usr/local
     # the directory where lilypond is installed on the system
     lilydir=/$lilyprefix/lilypond/

     userhome=$home/$username
     loopfile=$userhome/loopfile
     adduser $username
     dd if=/dev/zero of=$loopfile bs=1k count=200000
     mkdir $jaildir
     losetup $loopdevice $loopfile
     mkfs -t ext3 $loopdevice 200000
     mount -t ext3 $loopdevice $jaildir
     mkdir $jaildir/lilyhome
     chown $username $jaildir/lilyhome
     cd $jaildir

     mkdir -p bin usr/bin usr/share usr/lib usr/share/fonts $lilyprefix tmp
     chmod a+w tmp

     cp -r -L $lilydir $lilyprefix
     cp -L /bin/sh /bin/rm bin
     cp -L /usr/bin/convert /usr/bin/gs usr/bin
     cp -L /usr/share/fonts/truetype usr/share/fonts

     # Now the library copying magic
     for i in "$lilydir/usr/bin/lilypond" "$lilydir/usr/bin/guile" "/bin/sh"  \
       "/bin/rm" "/usr/bin/gs" "/usr/bin/convert"; do ldd $i | sed 's/.*=>  \
         \/\(.*\/\)\([^(]*\).*/mkdir -p \1 \&\& cp -L \/\1\2 \1\2/' | sed  \
           's/\t\/\(.*\/\)\(.*\) (.*)$/mkdir -p \1 \&\& cp -L \/\1\2 \1\2/'  \
             | sed '/.*=>.*/d'; done | sh -s

     # The shared files for ghostscript...
           cp -L -r /usr/share/ghostscript usr/share
     # The shared files for ImageMagick
           cp -L -r /usr/lib/ImageMagick* usr/lib

     ### Now, assuming that you have test.ly in /mnt/lilyloop/lilyhome,
     ### you should be able to run:
     ### Note that /$lilyprefix/bin/lilypond is a script, which sets the
     ### LD_LIBRARY_PATH - this is crucial
           /$lilyprefix/bin/lilypond -jlily,lily,/mnt/lilyloop,/lilyhome test.ly


File: lilypond-usage.info,  Node: Error messages,  Next: Common errors,  Prev: Command-line usage,  Up: Running lilypond

1.3 Error messages
==================

Different error messages can appear while compiling a file:

_Warning_
     Something looks suspect.  If you are requesting something out of
     the ordinary then you will understand the message, and can ignore
     it.  However, warnings usually indicate that something is wrong
     with the input file.

_Error_
     Something is definitely wrong.  The current processing step
     (parsing, interpreting, or formatting) will be finished, but the
     next step will be skipped.

_Fatal error_
     Something is definitely wrong, and LilyPond cannot continue.  This
     happens rarely.  The most usual cause is misinstalled fonts.

_Scheme error_
     Errors that occur while executing Scheme code are caught by the
     Scheme interpreter.  If running with the verbose option (‘-V’ or
     ‘--verbose’) then a call trace of the offending function call is
     printed.

_Programming error_
     There was some internal inconsistency.  These error messages are
     intended to help the programmers and debuggers.  Usually, they can
     be ignored.  Sometimes, they come in such big quantities that they
     obscure other output.

_Aborted (core dumped)_
     This signals a serious programming error that caused the program to
     crash.  Such errors are considered critical.  If you stumble on
     one, send a bug-report.

   If warnings and errors can be linked to some part of the input file,
then error messages have the following form

     FILENAME:LINENO:COLUMNNO: MESSAGE
     OFFENDING INPUT LINE

   A line-break is inserted in the offending line to indicate the column
where the error was found.  For example,

     test.ly:2:19: error: not a duration: 5
       { c'4 e'
                5 g' }

   These locations are LilyPond’s best guess about where the warning or
error occurred, but (by their very nature) warnings and errors occur
when something unexpected happens.  If you can’t see an error in the
indicated line of your input file, try checking one or two lines above
the indicated position.

   Please note that diagnostics can be triggered at any point during the
many stages of processing.  For example if there are parts of the input
that are processed multiple times (i.e.  in midi and layout output), or
if the same music variable is used in multiple contexts the same message
may appear several times.  Diagnostics produced at a ‘late’ stage (i.e
bar checks) might also be issued multiple times.

   More information about errors is given in *note Common errors::.


File: lilypond-usage.info,  Node: Common errors,  Prev: Error messages,  Up: Running lilypond

1.4 Common errors
=================

The error conditions described below occur often, yet the cause is not
obvious or easily found.  Once seen and understood, they are easily
handled.

* Menu:

* Music runs off the page::
* An extra staff appears::
* Error message Unbound variable %::
* Error message FT_Get_Glyph_Name::
* Warning staff affinities should only decrease::
* Error message unexpected new::
* Warning this voice needs a voiceXx or shiftXx setting::


File: lilypond-usage.info,  Node: Music runs off the page,  Next: An extra staff appears,  Up: Common errors

Music runs off the page
-----------------------

Music running off the page over the right margin or appearing unduly
compressed is almost always due to entering an incorrect duration on a
note, causing the final note in a measure to extend over the bar line.
It is not invalid if the final note in a measure does not end on the
automatically entered bar line, as the note is simply assumed to carry
over into the next measure.  But if a long sequence of such carry-over
measures occurs the music can appear compressed or may flow off the page
because automatic line breaks can be inserted only at the end of
complete measures, i.e., where all notes end before or at the end of the
measure.

          Note: An incorrect duration can cause line breaks to be
          inhibited, leading to a line of highly compressed music or
          music which flows off the page.

   The incorrect duration can be found easily if bar checks are used,
see *note (lilypond-notation)Bar and bar number checks::.

   If you actually intend to have a series of such carry-over measures
you will need to insert an invisible bar line where you want the line to
break.  For details, see *note (lilypond-notation)Bar lines::.


File: lilypond-usage.info,  Node: An extra staff appears,  Next: Error message Unbound variable %,  Prev: Music runs off the page,  Up: Common errors

An extra staff appears
----------------------

If contexts are not created explicitly with ‘\new’ or ‘\context’, they
will be silently created as soon as a command is encountered which
cannot be applied to an existing context.  In simple scores the
automatic creation of contexts is useful, and most of the examples in
the LilyPond manuals take advantage of this simplification.  But
occasionally the silent creation of contexts can give rise to unexpected
new staves or scores.  For example, it might be expected that the
following code would cause all note heads within the following staff to
be colored red, but in fact it results in two staves with the note heads
remaining the default black in the lower staff.

     \override Staff.NoteHead.color = #red
     \new Staff { a' }
      [image src="lilypond/a3/lily-8a95f028.png" alt="[image of music]" text="image of music" ]

   This is because a ‘Staff’ context does not exist when the override is
processed, so one is implicitly created and the override is applied to
it, but then the ‘\new Staff’ command creates another, separate, staff
into which the notes are placed.  The correct code to color all note
heads red is

     \new Staff {
       \override Staff.NoteHead.color = #red
       a'
     }
      [image src="lilypond/1a/lily-c0a863c0.png" alt="[image of music]" text="image of music" ]


File: lilypond-usage.info,  Node: Error message Unbound variable %,  Next: Error message FT_Get_Glyph_Name,  Prev: An extra staff appears,  Up: Common errors

Error message Unbound variable %
--------------------------------

This error message will appear at the bottom of the console output or
log file together with a “GUILE signalled an error ...” message every
time a Scheme routine is called which (invalidly) contains a _LilyPond_
rather than a _Scheme_ comment.

   LilyPond comments begin with a percent sign, (‘%’), and must not be
used within Scheme routines.  Scheme comments begin with a semi-colon,
(‘;’).


File: lilypond-usage.info,  Node: Error message FT_Get_Glyph_Name,  Next: Warning staff affinities should only decrease,  Prev: Error message Unbound variable %,  Up: Common errors

Error message FT_Get_Glyph_Name
-------------------------------

This error messages appears in the console output or log file if an
input file contains a non-ASCII character and was not saved in UTF-8
encoding.  For details, see *note (lilypond-notation)Text encoding::.


File: lilypond-usage.info,  Node: Warning staff affinities should only decrease,  Next: Error message unexpected new,  Prev: Error message FT_Get_Glyph_Name,  Up: Common errors

Warning staff affinities should only decrease
---------------------------------------------

This warning can appear if there are no staves in the printed output,
for example if there are just a ‘ChordName’ context and a ‘Lyrics’
context as in a lead sheet.  The warning messages can be avoided by
making one of the contexts behave as a staff by inserting

     \override VerticalAxisGroup.staff-affinity = ##f

at its start.  For details, see “Spacing of non-staff lines” in *note
(lilypond-notation)Flexible vertical spacing within systems::.


File: lilypond-usage.info,  Node: Error message unexpected new,  Next: Warning this voice needs a voiceXx or shiftXx setting,  Prev: Warning staff affinities should only decrease,  Up: Common errors

Error message unexpected ‘\new’
-------------------------------

A ‘\score’ block must contain a _single_ music expression.  If instead
it contains several ‘\new Staff’, ‘\new StaffGroup’ or similar contexts
introduced with ‘\new’ without them being enclosed in either curly
brackets, ‘{ ... }’, or double angle brackets, ‘<< ... >>’, like this:

     \score {
       % Invalid! Generates error: syntax error, unexpected \new
       \new Staff { ... }
       \new Staff { ... }
     }

the error message will be produced.

   To avoid the error, enclose all the ‘\new’ statements in curly or
double angle brackets.

   Using curly brackets will introduce the ‘\new’ statements
sequentially:

     \score {
       {
         \new Staff { a' a' a' a' }
         \new Staff { g' g' g' g' }
       }
     }
      [image src="lilypond/2e/lily-9b22173f.png" alt="[image of music]" text="image of music" ]

but more likely you should be using double angle brackets so the new
staves are introduced in parallel, i.e.  simultaneously:

     \score {
       <<
         \new Staff { a' a' a' a' }
         \new Staff { g' g' g' g' }
       >>
     }
      [image src="lilypond/06/lily-77b293ac.png" alt="[image of music]" text="image of music" ]


File: lilypond-usage.info,  Node: Warning this voice needs a voiceXx or shiftXx setting,  Prev: Error message unexpected new,  Up: Common errors

Warning this voice needs a ‘\voiceXx’ or ‘\shiftXx’ setting
-----------------------------------------------------------

If notes from two different voices with stems in the same direction
occur at the same musical moment, but the voices have no voice-specific
shifts specified, the warning message ‘warning: this voice needs a
\voiceXx or \shiftXx setting’ will appear when compiling the LilyPond
file.  This warning will appear even when the notes have no visible
stems, e.g.  whole notes, if the stems for shorter notes at the same
pitch would be in the same direction.

   Remember that the stem direction depends on the position of the note
on the staff unless the stem direction is specified, for example by
using ‘\voiceOne’, etc.  In this case the warning will appear only when
the stems happen to be in the same direction, i.e.  when the notes are
in the same half of the staff.

   By placing the notes in voices with stem directions and shifts
specified, for example by using ‘\voiceOne’, etc., these warnings may be
avoided.

   Notes in higher numbered voices, ‘\voiceThree’ etc., are
automatically shifted to avoid clashing note columns.  This causes a
visible shift for notes with stems, but whole notes are not visibly
shifted unless an actual clash of the note heads occurs, or when the
voices cross over from their natural order (when ‘\voiceThree’ is higher
than ‘\voiceOne’, etc.)


See also
........

   *note (lilypond-learning)Explicitly instantiating voices::, *note
(lilypond-learning)Real music example::, *note
(lilypond-notation)Single-staff polyphony::, *note
(lilypond-notation)Collision resolution::.


File: lilypond-usage.info,  Node: Updating files with convert-ly,  Next: lilypond-book,  Prev: Running lilypond,  Up: Top

2 Updating files with ‘convert-ly’
**********************************

As LilyPond is improved, the syntax (input language) of some commands
and functions can change.  This can result in unexpected errors,
warnings or even wrong output when input files, previously created for
older versions of LilyPond are then used with later versions.

   To help with this the ‘convert-ly’ command can be used to upgrade
these older input files to use the newer syntax.

* Menu:

* Why does the syntax change?::
* Invoking convert-ly::
* Command line options for convert-ly::
* Problems running convert-ly::
* Manual conversions::
* Writing code to support multiple versions::


File: lilypond-usage.info,  Node: Why does the syntax change?,  Next: Invoking convert-ly,  Up: Updating files with convert-ly

2.1 Why does the syntax change?
===============================

Often, syntax changes are made to make the input simpler to both read
and write, but occasionally the changes are made to accommodate new
features or enhancements to existing functions.

   To illustrate this here is a real example:

   All ‘\paper’ and ‘\layout’ property names were supposed to be written
in the form ‘first-second-third’.  However, in LilyPond version 2.11.60,
it was noticed that the ‘printallheaders’ property did not follow this
convention.  Should this property be left alone (confusing new users
with an inconsistent format)?  Or should it be changed (annoying old
users with existing LilyPond input files)?

   The decision was made to change the name of the property to
‘print-all-headers’, and by using the ‘convert-ly’ command the old users
had a way to automatically update their existing input files.

   However, the ‘convert-ly’ command cannot always be used to manage all
syntax changes.  In versions of LilyPond before 2.4.2, accents and
non-English characters were entered using standard LaTeX notation.  For
example the French word for ‘Christmas’ was entered as ‘No\"el’.  But in
LilyPond 2.6 onwards, the special ‘ë’ must be entered directly as a
UTF-8 character.  The ‘convert-ly’ command cannot change LaTeX special
characters into UTF-8 characters, so older LilyPond input files have to
edited manually.

   The conversion rules of the ‘convert-ly’ command work using text
pattern-matching and replacement (rather than ‘understanding’ the
context of what it is changing within a given input file).  This has
several consequences:

   • The reliability of the conversion depends on the quality of each
     applied rule set and on the complexity of the respective change.
     Sometimes conversions may require additional, manual fixes, so the
     original input files should be kept for comparison just in case.

   • Only conversions to newer syntax changes are possible: there are no
     rule sets to go back to older versions of LilyPond.  So the input
     file should only be upgraded when older versions of LilyPond are no
     longer being maintained.  Again, the original input files should be
     kept just in case; perhaps using version control systems (i.e.
     Git) to help with maintaining multiple versions of your input
     files.

   • LilyPond is quite robust when processing ‘creatively’ placed or
     omitted whitespace, but the rules used by ‘convert-ly’ often make
     some stylistic assumptions.  Therefore following the input style as
     used in the LilyPond manuals is advised for painless upgrades,
     particularly as the examples in the manuals themselves are all
     upgraded using the ‘convert-ly’ command.


File: lilypond-usage.info,  Node: Invoking convert-ly,  Next: Command line options for convert-ly,  Prev: Why does the syntax change?,  Up: Updating files with convert-ly

2.2 Invoking ‘convert-ly’
=========================

The ‘convert-ly’ command uses the ‘\version’ number in the input file to
detect older versions.  In most cases, to upgrade your input file it is
sufficient just to run;

     convert-ly -e myfile.ly

in the directory containing the input file.  This will upgrade
‘myfile.ly’ in-place and preserve the original file by renaming it
‘myfile.ly~’.  The ‘\version’ number in the upgraded input file, along
with any required syntax updates, is also changed.

   When run, the ‘convert-ly’ command will output the version numbers of
which conversions have been made to.  If no version numbers are listed
in the output for the file, it is already up to date and using the
latest LilyPond syntax.

          Note: For each new version of LilyPond, a new ‘convert-ly’
          command is created, however not every version of LilyPond will
          need syntax changes for its input files from the version
          before.  This means that the ‘convert-ly’ command will only
          convert input files up to the latest syntax change it has and
          this, in turn, may mean that the ‘\version’ number left in the
          upgraded input file is sometimes earlier than the version of
          ‘convert-ly’ command itself.

   To convert all input files in a single directory use;

     convert-ly -e *.ly

   Linux and MacOS X users can both use the appropriate terminal
application, but MacOS X users can also execute this command directly
under the menu entry ‘Compile > Update syntax’.

   A Windows user would run the command;

     convert-ly.py -e *.ly

entering these commands in a ‘command prompt’ usually found under ‘Start
> Accessories > Command Prompt’ or for version 8 users, by typing in the
search window ‘command prompt’.

   To convert all input files that reside in different sets of
subdirectories;

     find . -name '*.ly' -exec convert-ly -e '{}' \;

   This example searches and converts all input files in the current
directory and all directories below it recursively.  The converted files
will be located in the same directory along with their renamed
originals.  This should also work for MacOS X users, although only via
the terminal app.

   Windows user would use;

     forfiles /s /M *.ly /c "cmd /c convert-ly.py -e @file"

   Alternatively, an explicit path to the top-level of your folder
containing all the sub-folders that have input files in them can be
stated using the ‘/p’ option;

     forfiles /s /p C:\Documents\MyScores /M *.ly /c "cmd /c convert-ly.py -e @file"

   If there are spaces in the path to the top-level folder, then the
whole path needs to be inside double quotes;

     forfiles /s /p "C:\Documents\My Scores" /M *.ly /c "cmd /c convert-ly.py -e @file"


File: lilypond-usage.info,  Node: Command line options for convert-ly,  Next: Problems running convert-ly,  Prev: Invoking convert-ly,  Up: Updating files with convert-ly

2.3 Command line options for ‘convert-ly’
=========================================

The program is invoked as follows:

     convert-ly [OPTION]... FILENAME...

   The following options can be given:

‘-d, --diff-version-update’
     increase the ‘\version’ string only if the file has actually been
     changed.  In that case, the version header will correspond to the
     version after the last actual change.  An unstable version number
     will be rounded up to the next stable version number unless that
     would exceed the target version number.  Without this option, the
     version will instead reflect the last _attempted_ conversion.

‘-e, --edit’
     Apply the conversions direct to the input file, modifying it
     in-place.  The original file is renamed as ‘myfile.ly~’.  This
     backup file may be a hidden file on some operating systems.
     Alternatively, if you want to specify a different name for the
     upgraded file without using the ‘-e’ options default ‘~’ appended
     to the old input file, the output can be redirected instead;

          convert-ly myfile.ly > mynewfile.ly

     Windows user would use;

          convert-ly.py myfile.ly > mynewfile.ly

‘-b, --backup-numbered’
     When used with the ‘-e’ option, number the backup files so that no
     previous version is overwritten.  The backup files may be hidden on
     some operating systems.

‘-f, --from=FROM-PATCHLEVEL’
     Set the version to convert from.  If this is not set, ‘convert-ly’
     will guess this, on the basis of ‘\version’ strings in the file.
     E.g.  ‘--from=2.10.25’

‘-h, --help’
     Print usage help.

‘-l LOGLEVEL, --loglevel=LOGLEVEL’
     Set the output verbosity to LOGLEVEL.  Possible values, in upper
     case, are ‘PROGRESS’ (the default), ‘NONE’, ‘WARNING’, ‘ERROR’ and
     ‘DEBUG’.

‘-n, --no-version’
     Normally, ‘convert-ly’ adds a ‘\version’ indicator to the output.
     Specifying this option suppresses this.

‘-s, --show-rules’
     Show all known conversions and exit.

‘-t, --to=TO-PATCHLEVEL’
     Explicitly set which ‘\version’ to convert to, otherwise the
     default is the most current value.  It must be higher than the
     starting version.

          convert-ly --to=2.14.1 myfile.ly

   To upgrade LilyPond fragments in texinfo files, use

     convert-ly --from=... --to=... --no-version *.itely

   To see the changes in the LilyPond syntax between two versions, use

     convert-ly --from=... --to=... -s


File: lilypond-usage.info,  Node: Problems running convert-ly,  Next: Manual conversions,  Prev: Command line options for convert-ly,  Up: Updating files with convert-ly

2.4 Problems running ‘convert-ly’
=================================

When running convert-ly in a Command Prompt window under Windows on a
file which has spaces in the filename or in the path to it, it is
necessary to surround the entire input file name with three (!)  sets of
double quotes:

     convert-ly """D:/My Scores/Ode.ly""" > "D:/My Scores/new Ode.ly"

   If the simple ‘convert-ly -e *.ly’ command fails because the expanded
command line becomes too long, the ‘convert-ly’ command may be placed in
a loop instead.  This example for UNIX will upgrade all ‘.ly’ files in
the current directory

     for f in *.ly; do convert-ly -e $f; done;

   In the Windows Command Prompt window the corresponding command is

     for %x in (*.ly) do convert-ly -e """%x"""

   Not all language changes are handled.  Only one output option can be
specified.  Automatically updating scheme and LilyPond scheme interfaces
is quite unlikely; be prepared to tweak scheme code manually.


File: lilypond-usage.info,  Node: Manual conversions,  Next: Writing code to support multiple versions,  Prev: Problems running convert-ly,  Up: Updating files with convert-ly

2.5 Manual conversions
======================

In theory, a program like ‘convert-ly’ could handle any syntax change.
After all, a computer program interprets the old version and the new
version, so another computer program can translate one file into
another(1).

   However, the LilyPond project has limited resources: not all
conversions are performed automatically.  Below is a list of known
problems.

1.6->2.0:
 Doesn't always convert figured bass correctly, specifically things like {<
>}.  Mats' comment on working around this:
   To be able to run convert-ly
   on it, I first replaced all occurrences of '{<' to some dummy like '{#'
   and similarly I replaced '>}' with '&}'.  After the conversion, I could
   then change back from '{ #' to '{ <' and from '& }' to '> }'.
 Doesn't convert all text markup correctly.  In the old markup syntax,
 it was possible to group a number of markup commands together within
parentheses, e.g.
   -#'((bold italic) "string")
   This will incorrectly be converted into
   -\markup{{\bold italic} "string"}
   instead of the correct
   -\markup{\bold \italic "string"}
2.0->2.2:
 Doesn't handle \partcombine
 Doesn't do \addlyrics => \lyricsto, this breaks some scores with multiple
stanzas.
2.0->2.4:
 \magnify isn't changed to \fontsize.
    - \magnify #m => \fontsize #f, where f = 6ln(m)/ln(2)
 remove-tag isn't changed.
    - \applyMusic #(remove-tag '. . .) => \keepWithTag #'. . .
 first-page-number isn't changed.
    - first-page-number no => print-first-page-number = ##f
 Line breaks in header strings aren't converted.
    - \\\\  as line break in \header strings => \markup \center-align <
      "First Line" "Second Line" >
 Crescendo and decrescendo terminators aren't converted.
    - \rced => \!
    - \rc => \!
2.2->2.4:
 \turnOff (used in \set Staff.VoltaBracket = \turnOff) is not properly
converted.
2.4.2->2.5.9
 \markup{ \center-align <{ ... }> } should be converted to:
 \markup{ \center-align {\line { ... }} }
 but now, \line is missing.
2.4->2.6
 Special LaTeX characters such as $~$ in text are not converted to UTF8.
2.8
 \score{} must now begin with a music expression.  Anything else
 (particularly \header{}) must come after the music.

   ---------- Footnotes ----------

   (1) At least, this is possible in any LilyPond file which does not
contain scheme.  If there is scheme in the file, then the LilyPond file
contains a Turing-complete language, and we run into problems with the
famous “Halting Problem” in computer science.


File: lilypond-usage.info,  Node: Writing code to support multiple versions,  Prev: Manual conversions,  Up: Updating files with convert-ly

2.6 Writing code to support multiple versions
=============================================

In some cases, especially when writing _library_ code it is desirable to
support multiple LilyPond versions across breaking syntax changes.  To
do this alternative portions of code can be wrapped into conditional
expressions depending on the currently executed LilyPond version.  The
Scheme function ‘ly:version?’ expects a comparison operator OP and a
reference version VER passed as a list of integers with up to three
elements.  Missing elements are ignored so ‘'(2 20)’ is equivalent to
_any_ version of the 2.20 line of versions.  Constructs like the
following are possible:

#(cond
  ((ly:version? > '(2 20))
   (ly:message "This is code to run for LilyPond after 2.20"))
  ((ly:version? = '(2 19 57))
   (ly:message "This will only be executed with LilyPond 2.19.57"))
  (else (ly:message "This will be executed in any other version")))

   Usually this will be integrated in library functions to allow
alternative syntax to be used, but it is also possible to use the
comparison directly within the music like in the following example:

{
  c' d' e' f'
  #(if (ly:version? = '(2 21))
       #{ \override NoteHead.color = #red #}
       #{ \override NoteHead.color = #blue #})
  g' a' b' c''
}

   *Note:* This function has been introduced in LilyPond 2.19.57, so it
is not possible to compare with versions earlier than that.


File: lilypond-usage.info,  Node: lilypond-book,  Next: External programs,  Prev: Updating files with convert-ly,  Up: Top

3 Running ‘lilypond-book’
*************************

If you want to add pictures of music to a document, you can simply do it
the way you would do with other types of pictures.  The pictures are
created separately, yielding PostScript output or PNG images, and those
are included into a LaTeX or HTML document.

   ‘lilypond-book’ provides a way to automate this process: This program
extracts snippets of music from your document, runs ‘lilypond’ on them,
and outputs the document with pictures substituted for the music.  The
line width and font size definitions for the music are adjusted to match
the layout of your document.

   This is a separate program from ‘lilypond’ itself, and is run on the
command line; for more information, see *note Command-line usage::.  If
you have trouble running ‘lilypond-book’ on Windows or Mac OS X using
the command line, then see either *note (lilypond-web)Windows:: or *note
(lilypond-web)MacOS X::.

   This procedure may be applied to LaTeX, HTML, Texinfo or DocBook
documents.

* Menu:

* An example of a musicological document::
* Integrating music and text::
* Music fragment options::
* Invoking lilypond-book::
* Filename extensions::
* lilypond-book templates::
* Sharing the table of contents::
* Alternate methods of mixing text and music::


File: lilypond-usage.info,  Node: An example of a musicological document,  Next: Integrating music and text,  Up: lilypond-book

3.1 An example of a musicological document
==========================================

Some texts contain music examples.  These texts are musicological
treatises, songbooks, or manuals like this.  Such texts can be made by
hand, simply by importing a PostScript figure into the word processor.
However, there is an automated procedure to reduce the amount of work
involved in HTML, LaTeX, Texinfo and DocBook documents.

   A script called ‘lilypond-book’ will extract the music fragments,
format them, and put back the resulting notation.  Here we show a small
example for use with LaTeX.  The example also contains explanatory text,
so we will not comment on it further.

Input
-----

     \documentclass[a4paper]{article}

     \begin{document}

     Documents for \verb+lilypond-book+ may freely mix music and text.
     For example,

     \begin{lilypond}
     \relative {
       c'2 e2 \tuplet 3/2 { f8 a b } a2 e4
     }
     \end{lilypond}

     Options are put in brackets.

     \begin{lilypond}[fragment,quote,staffsize=26,verbatim]
       c'4 f16
     \end{lilypond}

     Larger examples can be put into a separate file, and introduced with
     \verb+\lilypondfile+.

     \lilypondfile[quote,noindent]{screech-and-boink.ly}

     (If needed, replace @file{screech-and-boink.ly} by any @file{.ly} file
     you put in the same directory as this file.)

     \end{document}

Processing
----------

Save the code above to a file called ‘lilybook.lytex’, then in a
terminal run

     lilypond-book --output=out --pdf lilybook.lytex
     _lilypond-book (GNU LilyPond) 2.19.65 _
     _Reading lilybook.lytex..._
     _...lots of stuff deleted..._
     _Compiling lilybook.tex..._
     cd out
     pdflatex lilybook
     _...lots of stuff deleted..._
     xpdf lilybook
     _(replace xpdf by your favorite PDF viewer)_

   Running ‘lilypond-book’ and ‘latex’ creates a lot of temporary files,
which would clutter up the working directory.  To remedy this, use the
‘--output=DIR’ option.  It will create the files in a separate
subdirectory ‘dir’.

   Finally the result of the LaTeX example shown above.(1)  This
finishes the tutorial section.

Output
------

Documents for ‘lilypond-book’ may freely mix music and text.  For
example,

 [image src="lilypond/a5/lily-9a0b8bc2.png" alt="[image of music]" text="image of music" ]
   Options are put in brackets.

     c'4 f16
      [image src="lilypond/b7/lily-82a2c89b.png" alt="[image of music]" text="image of music" ]

   Larger examples can be put into a separate file, and introduced with
‘\lilypondfile’.

      [image src="lilypond/0a/lily-80d132fa.png" alt="[image of music]" text="image of music" ]

   If a ‘tagline’ is required, either default or custom, then the entire
snippet must be enclosed in a ‘\book { }’ construct.

\book{
  \header{
    title = "A scale in LilyPond"
  }

  \relative {
    c' d e f g a b c
  }
}
 [image src="lilypond/7e/lily-1c1e00f8.png" alt="[image of music]" text="image of music" ]
   ---------- Footnotes ----------

   (1) This tutorial is processed with Texinfo, so the example gives
slightly different results in layout.


File: lilypond-usage.info,  Node: Integrating music and text,  Next: Music fragment options,  Prev: An example of a musicological document,  Up: lilypond-book

3.2 Integrating music and text
==============================

Here we explain how to integrate LilyPond with various output formats.

* Menu:

* LaTeX::
* Texinfo::
* HTML::
* DocBook::


File: lilypond-usage.info,  Node: LaTeX,  Next: Texinfo,  Up: Integrating music and text

3.2.1 LaTeX
-----------

LaTeX is the de-facto standard for publishing layouts in the exact
sciences.  It is built on top of the TeX typesetting engine, providing
the best typography available anywhere.

   See _The Not So Short Introduction to LaTeX_
(http://www.ctan.org/tex-archive/info/lshort/english/) for an overview
on how to use LaTeX.

   ‘lilypond-book’ provides the following commands and environments to
include music in LaTeX files:

   • the ‘\lilypond{...}’ command, where you can directly enter short
     lilypond code

   • the ‘\begin{lilypond}...\end{lilypond}’ environment, where you can
     directly enter longer lilypond code

   • the ‘\lilypondfile{...}’ command to insert a lilypond file

   • the ‘\musicxmlfile{...}’ command to insert a MusicXML file, which
     will be processed by ‘musicxml2ly’ and ‘lilypond’.

   In the input file, music is specified with any of the following
commands:

     \begin{lilypond}[options,go,here]
       YOUR LILYPOND CODE
     \end{lilypond}

     \lilypond[options,go,here]{ YOUR LILYPOND CODE }

     \lilypondfile[options,go,here]{FILENAME}

     \musicxmlfile[options,go,here]{FILENAME}


   Additionally, ‘\lilypondversion’ displays the current version of
lilypond.  Running ‘lilypond-book’ yields a file that can be further
processed with LaTeX.

   We show some examples here.  The ‘lilypond’ environment

     \begin{lilypond}[quote,fragment,staffsize=26]
       c' d' e' f' g'2 g'2
     \end{lilypond}

produces

      [image src="lilypond/5a/lily-d67e1e90.png" alt="[image of music]" text="image of music" ]

   The short version

     \lilypond[quote,fragment,staffsize=11]{<c' e' g'>}

produces

      [image src="lilypond/d9/lily-f0683194.png" alt="[image of music]" text="image of music" ]

Currently, you cannot include ‘{’ or ‘}’ within ‘\lilypond{}’, so this
command is only useful with the ‘fragment’ option.

   The default line width of the music will be adjusted by examining the
commands in the document preamble, the part of the document before
‘\begin{document}’.  The ‘lilypond-book’ command sends these to LaTeX to
find out how wide the text is.  The line width for the music fragments
is then adjusted to the text width.  Note that this heuristic algorithm
can fail easily; in such cases it is necessary to use the ‘line-width’
music fragment option.

   Each snippet will call the following macros if they have been defined
by the user:

   • ‘\preLilyPondExample’ called before the music,

   • ‘\postLilyPondExample’ called after the music,

   • ‘\betweenLilyPondSystem[1]’ is called between systems if
     ‘lilypond-book’ has split the snippet into several PostScript
     files.  It must be defined as taking one parameter and will be
     passed the number of files already included in this snippet.  The
     default is to simply insert a ‘\linebreak’.


Selected Snippets
.................

Sometimes it is useful to display music elements (such as ties and
slurs) as if they continued after the end of the fragment.  This can be
done by breaking the staff and suppressing inclusion of the rest of the
LilyPond output.

   In LaTeX, define ‘\betweenLilyPondSystem’ in such a way that
inclusion of other systems is terminated once the required number of
systems are included.  Since ‘\betweenLilyPondSystem’ is first called
_after_ the first system, including only the first system is trivial.

     \def\betweenLilyPondSystem#1{\endinput}

     \begin{lilypond}[fragment]
       c'1\( e'( c'~ \break c' d) e f\)
     \end{lilypond}

   If a greater number of systems is requested, a TeX conditional must
be used before the ‘\endinput’.  In this example, replace ‘2’ by the
number of systems you want in the output.

     \def\betweenLilyPondSystem#1{
         \ifnum#1<2\else\expandafter\endinput\fi
     }

(Since ‘\endinput’ immediately stops the processing of the current input
file we need ‘\expandafter’ to delay the call of ‘\endinput’ after
executing ‘\fi’ so that the ‘\if’-‘\fi’ clause is balanced.)

   Remember that the definition of ‘\betweenLilyPondSystem’ is effective
until TeX quits the current group (such as the LaTeX environment) or is
overridden by another definition (which is, in most cases, for the rest
of the document).  To reset your definition, write

     \let\betweenLilyPondSystem\undefined

in your LaTeX source.

   This may be simplified by defining a TeX macro

     \def\onlyFirstNSystems#1{
         \def\betweenLilyPondSystem##1{%
           \ifnum##1<#1\else\expandafter\endinput\fi}
     }

and then saying only how many systems you want before each fragment,

     \onlyFirstNSystems{3}
     \begin{lilypond}...\end{lilypond}
     \onlyFirstNSystems{1}
     \begin{lilypond}...\end{lilypond}


See also
........

   There are specific ‘lilypond-book’ command line options and other
details to know when processing LaTeX documents, see *note Invoking
lilypond-book::.


File: lilypond-usage.info,  Node: Texinfo,  Next: HTML,  Prev: LaTeX,  Up: Integrating music and text

3.2.2 Texinfo
-------------

Texinfo is the standard format for documentation of the GNU project.  An
example of a Texinfo document is this manual.  The HTML, PDF, and Info
versions of the manual are made from the Texinfo document.

   ‘lilypond-book’ provides the following commands and environments to
include music into Texinfo files:

   • the ‘@lilypond{...}’ command, where you can directly enter short
     lilypond code

   • the ‘@lilypond...@end lilypond’ environment, where you can directly
     enter longer lilypond code

   • the ‘@lilypondfile{...}’ command to insert a lilypond file

   • the ‘@musicxmlfile{...}’ command to insert a MusicXML file, which
     will be processed by ‘musicxml2ly’ and ‘lilypond’.

   In the input file, music is specified with any of the following
commands

     @lilypond[options,go,here]
       YOUR LILYPOND CODE
     @end lilypond

     @lilypond[options,go,here]{ YOUR LILYPOND CODE }

     @lilypondfile[options,go,here]{FILENAME}

     @musicxmlfile[options,go,here]{FILENAME}

   Additionally, ‘@lilypondversion’ displays the current version of
lilypond.

   When ‘lilypond-book’ is run on it, this results in a Texinfo file
(with extension ‘.texi’) containing ‘@image’ tags for HTML, Info and
printed output.  ‘lilypond-book’ generates images of the music in EPS
and PDF formats for use in the printed output, and in PNG format for use
in HTML and Info output.

   We show two simple examples here.  A ‘lilypond’ environment

     @lilypond[fragment]
     c' d' e' f' g'2 g'
     @end lilypond

produces

 [image src="lilypond/49/lily-84022578.png" alt="[image of music]" text="image of music" ]
   The short version

     @lilypond[fragment,staffsize=11]{<c' e' g'>}

produces

 [image src="lilypond/0c/lily-92b92a6d.png" alt="[image of music]" text="image of music" ]
   Contrary to LaTeX, ‘@lilypond{...}’ does not generate an in-line
image.  It always gets a paragraph of its own.


File: lilypond-usage.info,  Node: HTML,  Next: DocBook,  Prev: Texinfo,  Up: Integrating music and text

3.2.3 HTML
----------

‘lilypond-book’ provides the following commands and environments to
include music in HTML files:

   • the ‘<lilypond ... />’ command, where you can directly enter short
     lilypond code

   • the ‘<lilyond>...</lilypond>’ environment, where you can directly
     enter longer lilypond code

   • the ‘<lilypondfile>...</lilypondfile>’ command to insert a lilypond
     file

   • the ‘<musicxmlfile>...</musicxmlfile>’ command to insert a MusicXML
     file, which will be processed by ‘musicxml2ly’ and ‘lilypond’.

   In the input file, music is specified with any of the following
commands:

     <lilypond options go here>
       YOUR LILYPOND CODE
     </lilypond>

     <lilypond options go here: YOUR LILYPOND CODE />

     <lilypondfile options go here>FILENAME</lilypondfile>

     <musicxmlfile options go here>FILENAME</musicxmlfile>

   For example, you can write
     <lilypond fragment relative=2>
     \key c \minor c4 es g2
     </lilypond>

‘lilypond-book’ then produces an HTML file with appropriate image tags
for the music fragments:

 [image src="lilypond/c9/lily-7a8f0874.png" alt="[image of music]" text="image of music" ]
   For inline pictures, use ‘<lilypond ... />’, where the options are
separated by a colon from the music, for example

     Some music in <lilypond relative=2: a b c/> a line of text.

   To include separate files, say

     <lilypondfile OPTION1 OPTION2 ...>FILENAME</lilypondfile>

   ‘<musicxmlfile>’ uses the same syntax as ‘<lilypondfile>’, but simply
references a MusicXML file rather than a LilyPond file.

   For a list of options to use with the ‘lilypond’ or ‘lilypondfile’
tags, see *note Music fragment options::.

   Additionally, ‘<lilypondversion/>’ displays the current version of
lilypond.


File: lilypond-usage.info,  Node: DocBook,  Prev: HTML,  Up: Integrating music and text

3.2.4 DocBook
-------------

For inserting LilyPond snippets it is good to keep the conformity of our
DocBook document, thus allowing us to use DocBook editors, validation
etc.  So we don’t use custom tags, only specify a convention based on
the standard DocBook elements.

Common conventions
------------------

For inserting all type of snippets we use the ‘mediaobject’ and
‘inlinemediaobject’ element, so our snippets can be formatted inline or
not inline.  The snippet formatting options are always provided in the
‘role’ property of the innermost element (see in next sections).  Tags
are chosen to allow DocBook editors format the content gracefully.  The
DocBook files to be processed with ‘lilypond-book’ should have the
extension ‘.lyxml’.

Including a LilyPond file
-------------------------

This is the most simple case.  We must use the ‘.ly’ extension for the
included file, and insert it as a standard ‘imageobject’, with the
following structure:

     <mediaobject>
       <imageobject>
         <imagedata fileref="music1.ly" role="printfilename" />
       </imageobject>
     </mediaobject>

   Note that you can use ‘mediaobject’ or ‘inlinemediaobject’ as the
outermost element as you wish.

Including LilyPond code
-----------------------

Including LilyPond code is possible by using a ‘programlisting’, where
the language is set to ‘lilypond’ with the following structure:

     <inlinemediaobject>
       <textobject>
         <programlisting language="lilypond" role="fragment verbatim staffsize=16 ragged-right relative=2">
     \context Staff \with {
       \remove "Time_signature_engraver"
       \remove "Clef_engraver"}
       { c4( fis) }
         </programlisting>
       </textobject>
     </inlinemediaobject>

   As you can see, the outermost element is a ‘mediaobject’ or
‘inlinemediaobject’, and there is a ‘textobject’ containing the
‘programlisting’ inside.

Processing the DocBook document
-------------------------------

Running ‘lilypond-book’ on our ‘.lyxml’ file will create a valid DocBook
document to be further processed with ‘.xml’ extension.  If you use
dblatex (http://dblatex.sourceforge.net), it will create a PDF file from
this document automatically.  For HTML (HTML Help, JavaHelp etc.)
generation you can use the official DocBook XSL stylesheets, however, it
is possible that you have to make some customization for it.


File: lilypond-usage.info,  Node: Music fragment options,  Next: Invoking lilypond-book,  Prev: Integrating music and text,  Up: lilypond-book

3.3 Music fragment options
==========================

In the following, a ‘LilyPond command’ refers to any command described
in the previous sections which is handled by ‘lilypond-book’ to produce
a music snippet.  For simplicity, LilyPond commands are only shown in
LaTeX syntax.

   Note that the option string is parsed from left to right; if an
option occurs multiple times, the last one is taken.

   The following options are available for LilyPond commands:

‘staffsize=HT’
     Set staff size to HT, which is measured in points.

‘ragged-right’
     Produce ragged-right lines with natural spacing, i.e.,
     ‘ragged-right = ##t’ is added to the LilyPond snippet.  Single-line
     snippets will always be typeset by default as ragged-right, unless
     ‘noragged-right’ is explicitly given.

‘noragged-right’
     For single-line snippets, allow the staff length to be stretched to
     equal that of the line width, i.e., ‘ragged-right = ##f’ is added
     to the LilyPond snippet.

‘line-width’
‘line-width=SIZE\UNIT’
     Set line width to SIZE, using UNIT as units.  UNIT is one of the
     following strings: ‘cm’, ‘mm’, ‘in’, or ‘pt’.  This option affects
     LilyPond output (this is, the staff length of the music snippet),
     not the text layout.

     If used without an argument, set line width to a default value (as
     computed with a heuristic algorithm).

     If no ‘line-width’ option is given, ‘lilypond-book’ tries to guess
     a default for ‘lilypond’ environments which don’t use the
     ‘ragged-right’ option.

‘papersize=STRING’
     Where STRING is a paper size defined in ‘scm/paper.scm’ i.e.  ‘a5’,
     ‘quarto’, ‘11x17’ etc.

     Values not defined in ‘scm/paper.scm’ will be ignored, a warning
     will be posted and the snippet will be printed using the default
     ‘a4’ size.

‘notime’
     Do not print the time signature, and turns off the timing (time
     signature, bar lines) in the score.

‘fragment’
     Make ‘lilypond-book’ add some boilerplate code so that you can
     simply enter, say,

          c'4

     without ‘\layout’, ‘\score’, etc.

‘nofragment’
     Do not add additional code to complete LilyPond code in music
     snippets.  Since this is the default, ‘nofragment’ is redundant
     normally.

‘indent=SIZE\UNIT’
     Set indentation of the first music system to SIZE, using UNIT as
     units.  UNIT is one of the following strings: ‘cm’, ‘mm’, ‘in’, or
     ‘pt’.  This option affects LilyPond, not the text layout.

‘noindent’
     Set indentation of the first music system to zero.  This option
     affects LilyPond, not the text layout.  Since no indentation is the
     default, ‘noindent’ is redundant normally.

‘quote’
     Reduce line length of a music snippet by 2*0.4in and put the output
     into a quotation block.  The value ‘0.4in’ can be controlled with
     the ‘exampleindent’ option.

‘exampleindent’
     Set the amount by which the ‘quote’ option indents a music snippet.

‘relative’
‘relative=N’
     Use relative octave mode.  By default, notes are specified relative
     to middle C. The optional integer argument specifies the octave of
     the starting note, where the default ‘1’ is middle C. ‘relative’
     option only works when ‘fragment’ option is set, so ‘fragment’ is
     automatically implied by ‘relative’, regardless of the presence of
     any ‘(no)fragment’ option in the source.

   LilyPond also uses ‘lilypond-book’ to produce its own documentation.
To do that, some more obscure music fragment options are available.

‘verbatim’
     The argument of a LilyPond command is copied to the output file and
     enclosed in a verbatim block, followed by any text given with the
     ‘intertext’ option (not implemented yet); then the actual music is
     displayed.  This option does not work well with ‘\lilypond{}’ if it
     is part of a paragraph.

     If ‘verbatim’ is used in a ‘lilypondfile’ command, it is possible
     to enclose verbatim only a part of the source file.  If the source
     file contain a comment containing ‘begin verbatim’ (without
     quotes), quoting the source in the verbatim block will start after
     the last occurrence of such a comment; similarly, quoting the
     source verbatim will stop just before the first occurrence of a
     comment containing ‘end verbatim’, if there is any.  In the
     following source file example, the music will be interpreted in
     relative mode, but the verbatim quote will not show the ‘relative’
     block, i.e.

          \relative { % begin verbatim
            c'4 e2 g4
            f2 e % end verbatim
          }

     will be printed with a verbatim block like

            c4 e2 g4
            f2 e

     If you would like to translate comments and variable names in
     verbatim output but not in the sources, you may set the environment
     variable ‘LYDOC_LOCALEDIR’ to a directory path; the directory
     should contain a tree of ‘.mo’ message catalogs with ‘lilypond-doc’
     as a domain.

‘addversion’
     (Only for Texinfo output.)  Prepend line ‘\version
     @w{"@version{}"}’ to ‘verbatim’ output.

‘texidoc’
     (Only for Texinfo output.)  If ‘lilypond’ is called with the
     ‘--header=texidoc’ option, and the file to be processed is called
     ‘foo.ly’, it creates a file ‘foo.texidoc’ if there is a ‘texidoc’
     field in the ‘\header’.  The ‘texidoc’ option makes ‘lilypond-book’
     include such files, adding its contents as a documentation block
     right before the music snippet (but outside the ‘example’
     environment generated by a ‘quote’ option).

     Assuming the file ‘foo.ly’ contains

          \header {
            texidoc = "This file demonstrates a single note."
          }
          { c'4 }

     and we have this in our Texinfo document ‘test.texinfo’

          @lilypondfile[texidoc]{foo.ly}

     the following command line gives the expected result

          lilypond-book --pdf --process="lilypond \
            -dbackend=eps --header=texidoc" test.texinfo

     Most LilyPond test documents (in the ‘input’ directory of the
     distribution) are small ‘.ly’ files which look exactly like this.

     For localization purpose, if the Texinfo document contains
     ‘@documentlanguage LANG’ and ‘foo.ly’ header contains a
     ‘texidocLANG’ field, and if ‘lilypond’ is called with
     ‘--header=texidocLANG’, then ‘foo.texidocLANG’ will be included
     instead of ‘foo.texidoc’.

‘doctitle’
     (Only for Texinfo output.)  This option works similarly to
     ‘texidoc’ option: if ‘lilypond’ is called with the
     ‘--header=doctitle’ option, and the file to be processed is called
     ‘foo.ly’ and contains a ‘doctitle’ field in the ‘\header’, it
     creates a file ‘foo.doctitle’.  When ‘doctitle’ option is used, the
     contents of ‘foo.doctitle’, which should be a single line of TEXT,
     is inserted in the Texinfo document as ‘@lydoctitle TEXT’.
     ‘@lydoctitle’ should be a macro defined in the Texinfo document.
     The same remark about ‘texidoc’ processing with localized languages
     also applies to ‘doctitle’.

‘nogettext’
     (Only for Texinfo output.)  Do not translate comments and variable
     names in the snippet quoted verbatim.

‘printfilename’
     If a LilyPond input file is included with ‘\lilypondfile’, print
     the file name right before the music snippet.  For HTML output,
     this is a link.  Only the base name of the file is printed, i.e.
     the directory part of the file path is stripped.


File: lilypond-usage.info,  Node: Invoking lilypond-book,  Next: Filename extensions,  Prev: Music fragment options,  Up: lilypond-book

3.4 Invoking ‘lilypond-book’
============================

‘lilypond-book’ produces a file with one of the following extensions:
‘.tex’, ‘.texi’, ‘.html’ or ‘.xml’, depending on the output format.  All
of ‘.tex’, ‘.texi’ and ‘.xml’ files need further processing.

Format-specific instructions
----------------------------

LaTeX
.....

There are two ways of processing your LaTeX document for printing or
publishing: getting a PDF file directly with PDFLaTeX, or getting a
PostScript file with LaTeX via a DVI to PostScript translator like
‘dvips’.  The first way is simpler and recommended(1), and whichever way
you use, you can easily convert between PostScript and PDF with tools,
like ‘ps2pdf’ and ‘pdf2ps’ included in Ghostscript package.

   To produce a PDF file through PDFLaTeX, use:

     lilypond-book --pdf yourfile.lytex
     pdflatex yourfile.tex

   To produce PDF output via LaTeX/‘dvips’/‘ps2pdf’:

     lilypond-book yourfile.lytex
     latex yourfile.tex
     dvips -Ppdf yourfile.dvi
     ps2pdf yourfile.ps

The ‘.dvi’ file created by this process will not contain note heads.
This is normal; if you follow the instructions, they will be included in
the ‘.ps’ and ‘.pdf’ files.

   Running ‘dvips’ may produce some warnings about fonts; these are
harmless and may be ignored.  If you are running ‘latex’ in twocolumn
mode, remember to add ‘-t landscape’ to the ‘dvips’ options.

   Environments such as;

     \begin{lilypond} ... \end{lilypond}

are not interpreted by LaTeX.  Instead, ‘lilypond-book’ extracts those
‘environments’ into files of its own and runs LilyPond on them.  It then
takes the resulting graphics and creates a ‘.tex’ file where the
‘\begin{lilypond}’...‘\end{lilypond}’ macros are then replaced by
‘graphics inclusion’ commands.  It is at this time that LaTeX is run
(although LaTeX will have run previously, it will have been,
effectively, on an ‘empty’ document in order to calculate things like
‘\linewidth’).


Known issues and warnings
.........................

The ‘\pageBreak’ command will not work within a ‘\begin{lilypond} ...
\end{lilypond}’ environment.

   Many ‘\paper’ block variables will also not work within a
‘\begin{lilypond} ... \end{lilypond}’ environment.  Use ‘\newcommand’
with ‘\betweenLilyPondSystem’ in the preamble;

     \newcommand{\betweenLilyPondSystem}[1]{\vspace{36mm}\linebreak}

Texinfo
.......

To produce a Texinfo document (in any output format), follow the normal
procedures for Texinfo; this is, either call ‘texi2pdf’ or ‘texi2dvi’ or
‘makeinfo’, depending on the output format you want to create.  *Note
(texinfo)Format with texi2dvi::, and *note (texinfo)Creating an Info
File::.

Command line options
--------------------

‘lilypond-book’ accepts the following command line options:

‘-f FORMAT’
‘--format=FORMAT’
     Specify the document type to process: ‘html’, ‘latex’, ‘texi’ (the
     default) or ‘docbook’.  If this option is missing, ‘lilypond-book’
     tries to detect the format automatically, see *note Filename
     extensions::.  Currently, ‘texi’ is the same as ‘texi-html’.

‘-F FILTER’
‘--filter=FILTER’
     Pipe snippets through FILTER.  ‘lilypond-book’ will not –filter and
     –process at the same time.  For example,

          lilypond-book --filter='convert-ly --from=2.0.0 -' my-book.tely

‘-h’
‘--help’
     Print a short help message.

‘-I DIR’
‘--include=DIR’
     Add DIR to the include path.  ‘lilypond-book’ also looks for
     already compiled snippets in the include path, and does not write
     them back to the output directory, so in some cases it is necessary
     to invoke further processing commands such as ‘makeinfo’ or ‘latex’
     with the same ‘-I DIR’ options.

‘-l LOGLEVEL’
‘--loglevel=LOGLEVEL’
     Set the output verbosity to LOGLEVEL.  Possible values are ‘NONE’,
     ‘ERROR’, ‘WARNING’, ‘PROGRESS’ (default) and ‘DEBUG’.  If this
     option is not used, and the environment variable
     ‘LILYPOND_BOOK_LOGLEVEL’ is set, its value is used as the loglevel.

‘-o DIR’
‘--output=DIR’
     Place generated files in directory DIR.  Running ‘lilypond-book’
     generates lots of small files that LilyPond will process.  To avoid
     all that garbage in the source directory, use the ‘--output’
     command line option, and change to that directory before running
     ‘latex’ or ‘makeinfo’.

          lilypond-book --output=out yourfile.lytex
          cd out
          ...

‘--skip-lily-check’
     Do not fail if no lilypond output is found.  It is used for
     LilyPond Info documentation without images.

‘--skip-png-check’
     Do not fail if no PNG images are found for EPS files.  It is used
     for LilyPond Info documentation without images.

‘--lily-output-dir=DIR’
     Write lily-XXX files to directory DIR, link into ‘--output’
     directory.  Use this option to save building time for documents in
     different directories which share a lot of identical snippets.

‘--lily-loglevel=LOGLEVEL’
     Set the output verbosity of the invoked ‘lilypond’ calls to
     LOGLEVEL.  Possible values are ‘NONE’, ‘ERROR’, ‘WARNING’,
     ‘BASIC_PROGRESS’, ‘PROGRESS’, ‘INFO’ (default) and ‘DEBUG’.  If
     this option is not used, and the environment variable
     ‘LILYPOND_LOGLEVEL’ is set, its value is used as the loglevel.

‘--info-images-dir=DIR’
     Format Texinfo output so that Info will look for images of music in
     DIR.

‘--latex-program=PROG’
     Run executable ‘prog’ instead of ‘latex’.  This is useful if your
     document is processed with ‘xelatex’, for example.

‘--left-padding=AMOUNT’
     Pad EPS boxes by this much.  AMOUNT is measured in millimeters, and
     is 3.0 by default.  This option should be used if the lines of
     music stick out of the right margin.

     The width of a tightly clipped system can vary, due to notation
     elements that stick into the left margin, such as bar numbers and
     instrument names.  This option will shorten each line and move each
     line to the right by the same amount.

‘-P COMMAND’
‘--process=COMMAND’
     Process LilyPond snippets using COMMAND.  The default command is
     ‘lilypond’.  ‘lilypond-book’ will not ‘--filter’ and ‘--process’ at
     the same time.

‘--pdf’
     Create PDF files for use with PDFLaTeX.

‘--redirect-lilypond-output’
     By default, output is displayed on the terminal.  This option
     redirects all output to log files in the same directory as the
     source files.

‘--use-source-file-names’
     Write snippet output files with the same base name as their source
     file.  This option works only for snippets included with
     ‘lilypondfile’ and only if directories implied by ‘--output-dir’
     and ‘--lily-output-dir’ options are different.

‘-V’
‘--verbose’
     Be verbose.  This is equivalent to ‘--loglevel=DEBUG’.

‘-v’
‘--version’
     Print version information.


Known issues and warnings
.........................

The Texinfo command ‘@pagesizes’ is not interpreted.  Similarly, LaTeX
commands that change margins and line widths after the preamble are
ignored.

   Only the first ‘\score’ of a LilyPond block is processed.

   ---------- Footnotes ----------

   (1) Note that PDFLaTeX and LaTeX may not be both usable to compile
any LaTeX document, that is why we explain the two ways.


File: lilypond-usage.info,  Node: Filename extensions,  Next: lilypond-book templates,  Prev: Invoking lilypond-book,  Up: lilypond-book

3.5 Filename extensions
=======================

You can use any filename extension for the input file, but if you do not
use the recommended extension for a particular format you may need to
manually specify the output format; for details, see *note Invoking
lilypond-book::.  Otherwise, ‘lilypond-book’ automatically selects the
output format based on the input filename’s extension.

     *extension*    *output format*
     ‘.html’        HTML
     ‘.htmly’       HTML
     ‘.itely’       Texinfo
     ‘.latex’       LaTeX
     ‘.lytex’       LaTeX
     ‘.lyxml’       DocBook
     ‘.tely’        Texinfo
     ‘.tex’         LaTeX
     ‘.texi’        Texinfo
     ‘.texinfo’     Texinfo
     ‘.xml’         HTML

   If you use the same filename extension for the input file than the
extension ‘lilypond-book’ uses for the output file, and if the input
file is in the same directory as ‘lilypond-book’ working directory, you
must use ‘--output’ option to make ‘lilypond-book’ running, otherwise it
will exit with an error message like “Output would overwrite input
file”.


File: lilypond-usage.info,  Node: lilypond-book templates,  Next: Sharing the table of contents,  Prev: Filename extensions,  Up: lilypond-book

3.6 lilypond-book templates
===========================

These templates are for use with ‘lilypond-book’.  If you’re not
familiar with this program, please refer to *note lilypond-book::.

3.6.1 LaTeX
-----------

You can include LilyPond fragments in a LaTeX document.

     \documentclass[]{article}

     \begin{document}

     Normal LaTeX text.

     \begin{lilypond}
     \relative {
       a'4 b c d
     }
     \end{lilypond}

     More LaTeX text, and options in square brackets.

     \begin{lilypond}[fragment,relative=2,quote,staffsize=26,verbatim]
     d4 c b a
     \end{lilypond}
     \end{document}

3.6.2 Texinfo
-------------

You can include LilyPond fragments in Texinfo; in fact, this entire
manual is written in Texinfo.

     \input texinfo @node Top
     @top

     Texinfo text

     @lilypond
     \relative {
       a4 b c d
     }
     @end lilypond

     More Texinfo text, and options in brackets.

     @lilypond[verbatim,fragment,ragged-right]
     d4 c b a
     @end lilypond

     @bye

3.6.3 html
----------

     <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
     <!-- header_tag -->
     <HTML>
     <body>

     <p>
     Documents for lilypond-book may freely mix music and text.  For
     example,
     <lilypond>
     \relative {
       a'4 b c d
     }
     </lilypond>
     </p>

     <p>
     Another bit of lilypond, this time with options:

     <lilypond fragment quote staffsize=26 verbatim>
     a4 b c d
     </lilypond>
     </p>

     </body>
     </html>



3.6.4 xelatex
-------------

\documentclass{article}
\usepackage{ifxetex}
\ifxetex
%xetex specific stuff
\usepackage{xunicode,fontspec,xltxtra}
\setmainfont[Numbers=OldStyle]{Times New Roman}
\setsansfont{Arial}
\else
%This can be empty if you are not going to use pdftex
\usepackage[T1]{fontenc}
\usepackage[utf8]{inputenc}
\usepackage{mathptmx}%Times
\usepackage{helvet}%Helvetica
\fi
%Here you can insert all packages that pdftex also understands
\usepackage[ngerman,finnish,english]{babel}
\usepackage{graphicx}

\begin{document}
\title{A short document with LilyPond and xelatex}
\maketitle

Normal \textbf{font} commands inside the \emph{text} work,
because they \textsf{are supported by \LaTeX{} and XeteX.}
If you want to use specific commands like \verb+\XeTeX+, you
should include them again in a \verb+\ifxetex+ environment.
You can use this to print the \ifxetex \XeTeX{} command \else
XeTeX command \fi which is not known to normal \LaTeX .

In normal text you can easily use LilyPond commands, like this:

\begin{lilypond}
{a2 b c'8 c' c' c'}
\end{lilypond}

\noindent
and so on.

The fonts of snippets set with LilyPond will have to be set from
inside
of the snippet.  For this you should read the AU on how to use
lilypond-book.

\selectlanguage{ngerman}
Auch Umlaute funktionieren ohne die \LaTeX -Befehle, wie auch alle
anderen
seltsamen Zeichen: __ ______, wenn sie von der Schriftart
unterst__tzt werden.
\end{document}


File: lilypond-usage.info,  Node: Sharing the table of contents,  Next: Alternate methods of mixing text and music,  Prev: lilypond-book templates,  Up: lilypond-book

3.7 Sharing the table of contents
=================================

These functions already exist in the OrchestralLily package:

     <http://repo.or.cz/w/orchestrallily.git>

   For greater flexibility in text handling, some users prefer to export
the table of contents from lilypond and read it into LaTeX.

Exporting the ToC from LilyPond
...............................

This assumes that your score has multiple movements in the same lilypond
output file.

     #(define (oly:create-toc-file layout pages)
       (let* ((label-table (ly:output-def-lookup layout 'label-page-table)))
         (if (not (null? label-table))
           (let* ((format-line (lambda (toc-item)
                  (let* ((label (car toc-item))
                         (text  (caddr toc-item))
                         (label-page (and (list? label-table)
                                          (assoc label label-table)))
                         (page (and label-page (cdr label-page))))
                    (format #f "~a, section, 1, {~a}, ~a" page text label))))
                  (formatted-toc-items (map format-line (toc-items)))
                  (whole-string (string-join formatted-toc-items ",\n"))
                  (output-name (ly:parser-output-name))
                  (outfilename (format "~a.toc" output-name))
                  (outfile (open-output-file outfilename)))
             (if (output-port? outfile)
                 (display whole-string outfile)
                 (ly:warning (_ "Unable to open output file ~a for the TOC information") outfilename))
             (close-output-port outfile)))))

     \paper {
       #(define (page-post-process layout pages) (oly:create-toc-file layout pages))
     }

Importing the ToC into LaTeX
............................

In LaTeX, the header should include:

     \usepackage{pdfpages}
     \includescore{nameofthescore}

where ‘\includescore’ is defined as:

     %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
     % \includescore{PossibleExtension}
     %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

     % Read in the TOC entries for a PDF file from the corresponding .toc file.
     % This requires some heave latex tweaking, since reading in things from a file
     % and inserting it into the arguments of a macro is not (easily) possible

     % Solution by Patrick Fimml on #latex on April 18, 2009:
     % \readfile{filename}{\variable}
     % reads in the contents of the file into \variable (undefined if file
     % doesn't exist)
     \newread\readfile@f
     \def\readfile@line#1{%
     {\catcode`\^^M=10\global\read\readfile@f to \readfile@tmp}%
     \edef\do{\noexpand\g@addto@macro{\noexpand#1}{\readfile@tmp}}\do%
     \ifeof\readfile@f\else%
     \readfile@line{#1}%
     \fi%
     }
     \def\readfile#1#2{%
     \openin\readfile@f=#1 %
     \ifeof\readfile@f%
     \typeout{No TOC file #1 available!}%
     \else%
     \gdef#2{}%
     \readfile@line{#2}%
     \fi
     \closein\readfile@f%
     }%


     \newcommand{\includescore}[1]{
     \def\oly@fname{\oly@basename\@ifmtarg{#1}{}{_#1}}
     \let\oly@addtotoc\undefined
     \readfile{\oly@xxxxxxxxx}{\oly@addtotoc}
     \ifx\oly@addtotoc\undefined
     \includepdf[pages=-]{\oly@fname}
     \else
     \edef\includeit{\noexpand\includepdf[pages=-,addtotoc={\oly@addtotoc}]
     {\oly@fname}}\includeit
     \fi
     }


File: lilypond-usage.info,  Node: Alternate methods of mixing text and music,  Prev: Sharing the table of contents,  Up: lilypond-book

3.8 Alternative methods of mixing text and music
================================================

Other means of mixing text and music (without ‘lilypond-book’) are
discussed in *note LilyPond output in other programs::.


File: lilypond-usage.info,  Node: External programs,  Next: Suggestions for writing files,  Prev: lilypond-book,  Up: Top

4 External programs
*******************

LilyPond can interact with other programs in various ways.

* Menu:

* Point and click::
* Text editor support::
* Converting from other formats::
* LilyPond output in other programs::
* Independent includes::


File: lilypond-usage.info,  Node: Point and click,  Next: Text editor support,  Up: External programs

4.1 Point and click
===================

Point and click lets you find notes in the input by clicking on them in
the PDF viewer.  This makes it easier to find input that causes some
error in the sheet music.

* Menu:

* Configuring the system for point and click::
* Enabling point and click::
* Selective point-and-click::


File: lilypond-usage.info,  Node: Configuring the system for point and click,  Next: Enabling point and click,  Up: Point and click

4.1.1 Configuring the system
----------------------------

When this functionality is active, LilyPond adds hyperlinks to PDF and
SVG files.  These hyperlinks are sent to a ‘URI helper’ or a
web-browser, which opens a text-editor with the cursor in the right
place.

   To make this chain work, you should configure your PDF viewer to
follow hyperlinks using the ‘lilypond-invoke-editor’ script supplied
with LilyPond.

   The program ‘lilypond-invoke-editor’ is a small helper program.  It
will invoke an editor for the special ‘textedit’ URIs, and run a web
browser for others.  It tests the environment variable ‘EDITOR’ for the
following patterns,

‘emacs’
     this will invoke
          emacsclient --no-wait +LINE:COLUMN FILE
‘gvim’
     this will invoke
          gvim --remote +:LINE:normCOLUMN FILE

‘nedit’
     this will invoke
            nc -noask +LINE FILE'

   The environment variable ‘LYEDITOR’ is used to override this.  It
contains the command line to start the editor, where ‘%(file)s’,
‘%(column)s’, ‘%(line)s’ is replaced with the file, column and line
respectively.  The setting

     emacsclient --no-wait +%(line)s:%(column)s %(file)s

for ‘LYEDITOR’ is equivalent to the standard emacsclient invocation.

* Menu:

* Using Xpdf for point and click::
* Using GNOME 2 for point and click::
* Using GNOME 3 for point and click::
* Extra configuration for Evince::


File: lilypond-usage.info,  Node: Using Xpdf for point and click,  Next: Using GNOME 2 for point and click,  Up: Configuring the system for point and click

Using Xpdf
..........

For Xpdf on UNIX, the following should be present in ‘xpdfrc’.  On UNIX,
this file is found either in ‘/etc/xpdfrc’ or as ‘$HOME/.xpdfrc’.

     urlCommand     "lilypond-invoke-editor %s"

   If you are using Ubuntu, it is likely that the version of Xpdf
installed with your system crashes on every PDF file: this state has
been persisting for several years and is due to library mismatches.
Your best bet is to install a current ‘xpdf’ package and the
corresponding ‘libpoppler’ package from Debian instead.  Once you have
tested that this works, you might want to use

     sudo apt-mark hold xpdf

in order to keep Ubuntu from overwriting it with the next ‘update’ of
its crashing package.


File: lilypond-usage.info,  Node: Using GNOME 2 for point and click,  Next: Using GNOME 3 for point and click,  Prev: Using Xpdf for point and click,  Up: Configuring the system for point and click

Using GNOME 2
.............

For using GNOME 2 (and PDF viewers integrated with it), the magic
invocation for telling the system about the ‘textedit:’ URI is;

     gconftool-2 -t string -s /desktop/gnome/url-handlers/textedit/command "lilypond-invoke-editor %s"
     gconftool-2 -s /desktop/gnome/url-handlers/textedit/needs_terminal false -t bool
     gconftool-2 -t bool -s /desktop/gnome/url-handlers/textedit/enabled true

   After that invocation;

     gnome-open textedit:///etc/issue:1:0:0

should call ‘lilypond-invoke-editor’ for opening files.


File: lilypond-usage.info,  Node: Using GNOME 3 for point and click,  Next: Extra configuration for Evince,  Prev: Using GNOME 2 for point and click,  Up: Configuring the system for point and click

Using GNOME 3
.............

In GNOME 3, URIs are handled by the ‘gvfs’ layer rather than by ‘gconf’.
Create a file in a local directory such as ‘/tmp’ that is called
‘lilypond-invoke-editor.desktop’ and has the contents;

     [Desktop Entry]
     Version=1.0
     Name=lilypond-invoke-editor
     GenericName=Textedit URI handler
     Comment=URI handler for textedit:
     Exec=lilypond-invoke-editor %u
     Terminal=false
     Type=Application
     MimeType=x-scheme-handler/textedit;
     Categories=Editor
     NoDisplay=true
   and then execute the commands
     xdg-desktop-menu install ./lilypond-invoke-editor.desktop
     xdg-mime default lilypond-invoke-editor.desktop x-scheme-handler/textedit

   After that invocation;

     gnome-open textedit:///etc/issue:1:0:0
should call ‘lilypond-invoke-editor’ for opening files.


File: lilypond-usage.info,  Node: Extra configuration for Evince,  Prev: Using GNOME 3 for point and click,  Up: Configuring the system for point and click

Extra configuration for Evince
..............................

If ‘gnome-open’ works, but Evince still refuses to open point and click
links due to denied permissions, you might need to change the Apparmor
profile of Evince which controls the kind of actions Evince is allowed
to perform.

   For Ubuntu, the process is to edit the file
‘/etc/apparmor.d/local/usr.bin.evince’ and append the following lines:

     # For Textedit links
     /usr/local/bin/lilypond-invoke-editor Cx -> sanitized_helper,

   After adding these lines, call

     sudo apparmor_parser -r -T -W /etc/apparmor.d/usr.bin.evince

Now Evince should be able to open point and click links.  It is likely
that similar configurations will work for other viewers.


File: lilypond-usage.info,  Node: Enabling point and click,  Next: Selective point-and-click,  Prev: Configuring the system for point and click,  Up: Point and click

Enabling point and click
------------------------

Point and click functionality is enabled by default when creating PDF or
SVG files.

   The point and click links enlarge the output files significantly.
For reducing the size of these (and PS) files, point and click may be
switched off by issuing

     \pointAndClickOff

in a ‘.ly’ file.  Point and click may be explicitly enabled with

     \pointAndClickOn

   Alternately, you may disable point and click with a command-line
option:

     lilypond -dno-point-and-click file.ly

          Note: You should always turn off point and click in any
          LilyPond files to be distributed to avoid including path
          information about your computer in the PDF file, which can
          pose a security risk.


File: lilypond-usage.info,  Node: Selective point-and-click,  Prev: Enabling point and click,  Up: Point and click

Selective point-and-click
-------------------------

For some interactive applications, it may be desirable to only include
certain point-and-click items.  For example, if somebody wanted to
create an application which played audio or video starting from a
particular note, it would be awkward if clicking on the note produced
the point-and-click location for an accidental or slur which occurred
over that note.

   This may be controlled by indicating which events to include:

   • Hard-coded in the ‘.ly’ file:

          \pointAndClickTypes #'note-event
          \relative {
            c'2\f( f)
          }

     or

          #(ly:set-option 'point-and-click 'note-event)
          \relative {
            c'2\f( f)
          }

   • Command-line:

          lilypond -dpoint-and-click=note-event   example.ly

   Multiple events can be included:

   • Hard-coded in the ‘.ly’ file:

          \pointAndClickTypes #'(note-event dynamic-event)
          \relative {
            c'2\f( f)
          }

     or

          #(ly:set-option 'point-and-click '(note-event dynamic-event))
          \relative {
            c'2\f( f)
          }

   • Command-line:

          lilypond \
            -e"(ly:set-option 'point-and-click '(note-event dynamic-event))" \
            example.ly


File: lilypond-usage.info,  Node: Text editor support,  Next: Converting from other formats,  Prev: Point and click,  Up: External programs

4.2 Text editor support
=======================

There is support for different text editors for LilyPond.

* Menu:

* Emacs mode::
* Vim mode::
* Other editors::


File: lilypond-usage.info,  Node: Emacs mode,  Next: Vim mode,  Up: Text editor support

Emacs mode
----------

Emacs has a ‘lilypond-mode’, which provides keyword autocompletion,
indentation, LilyPond specific parenthesis matching and syntax coloring,
handy compile short-cuts and reading LilyPond manuals using Info.  If
‘lilypond-mode’ is not installed on your platform, see below.

   An Emacs mode for entering music and running LilyPond is contained in
the source archive in the ‘elisp’ directory.  Do ‘make install’ to
install it to ELISPDIR.  The file ‘lilypond-init.el’ should be placed to
LOAD-PATH‘/site-start.d/’ or appended to your ‘~/.emacs’ or
‘~/.emacs.el’.

   As a user, you may want add your source path (e.g.  ‘~/site-lisp/’)
to your LOAD-PATH by appending the following line (as modified) to your
‘~/.emacs’

     (setq load-path (append (list (expand-file-name "~/site-lisp")) load-path))


File: lilypond-usage.info,  Node: Vim mode,  Next: Other editors,  Prev: Emacs mode,  Up: Text editor support

Vim mode
--------

For Vim (http://www.vim.org), a filetype plugin, indent mode, and
syntax-highlighting mode are available to use with LilyPond.  To enable
all of these features, create (or modify) your ‘$HOME/.vimrc’ to contain
these three lines, in order:

     filetype off
     set runtimepath+=/usr/local/share/lilypond/current/vim/
     filetype on
     syntax on

If LilyPond is not installed in the ‘/usr/local/’ directory, change the
path appropriately.  This topic is discussed in *note
(lilypond-learning)Other sources of information::.


File: lilypond-usage.info,  Node: Other editors,  Prev: Vim mode,  Up: Text editor support

Other editors
-------------

Other editors (both text and graphical) support LilyPond, but their
special configuration files are not distributed with LilyPond.  Consult
their documentation for more information.  Such editors are listed in
*note (lilypond-web)Easier editing::.


File: lilypond-usage.info,  Node: Converting from other formats,  Next: LilyPond output in other programs,  Prev: Text editor support,  Up: External programs

4.3 Converting from other formats
=================================

Music can be entered also by importing it from other formats.  This
chapter documents the tools included in the distribution to do so.
There are other tools that produce LilyPond input, for example GUI
sequencers and XML converters.  Refer to the website
(http://lilypond.org) for more details.

   These are separate programs from ‘lilypond’ itself, and are run on
the command line; see *note Command-line usage:: for more information.
If you have MacOS 10.3 or 10.4 and you have trouble running some of
these scripts, e.g.  ‘convert-ly’, see *note (lilypond-web)MacOS X::.


Known issues and warnings
.........................

We unfortunately do not have the resources to maintain these programs;
please consider them “as-is”.  Patches are appreciated, but bug reports
will almost certainly not be resolved.

* Menu:

* Invoking midi2ly::            Importing MIDI.
* Invoking musicxml2ly::        Importing MusicXML.
* Invoking abc2ly::             Importing ABC.
* Invoking etf2ly::             Importing Finale.
* Other formats::


File: lilypond-usage.info,  Node: Invoking midi2ly,  Next: Invoking musicxml2ly,  Up: Converting from other formats

4.3.1 Invoking ‘midi2ly’
------------------------

‘midi2ly’ translates a Type 1 MIDI file to a LilyPond source file.

   MIDI (Music Instrument Digital Interface) is a standard for digital
instruments: it specifies cabling, a serial protocol and a file format.
The MIDI file format is a de facto standard format for exporting music
from other programs, so this capability may come in useful when
importing files from a program that has a converter for a direct format.

   ‘midi2ly’ converts tracks into *note (lilypond-internals)Staff:: and
channels into *note (lilypond-internals)Voice:: contexts.  Relative mode
is used for pitches, durations are only written when necessary.

   It is possible to record a MIDI file using a digital keyboard, and
then convert it to ‘.ly’.  However, human players are not rhythmically
exact enough to make a MIDI to LY conversion trivial.  When invoked with
quantizing (‘-s’ and ‘-d’ options) ‘midi2ly’ tries to compensate for
these timing errors, but is not very good at this.  It is therefore not
recommended to use ‘midi2ly’ for human-generated midi files.

   It is invoked from the command-line as follows,

     midi2ly [OPTION]... MIDI-FILE

   Note that by ‘command-line’, we mean the command line of the
operating system.  See *note Converting from other formats::, for more
information about this.

   The following options are supported by ‘midi2ly’.

‘-a, --absolute-pitches’
     Print absolute pitches.

‘-d, --duration-quant=DUR’
     Quantize note durations on DUR.

‘-e, --explicit-durations’
     Print explicit durations.

‘-h, --help’
     Show summary of usage.

‘-k, --key=ACC[:MINOR]’
     Set default key.  ACC > 0 sets number of sharps; ACC < 0 sets
     number of flats.  A minor key is indicated by ‘:1’.

‘-o, --output=FILE’
     Write output to FILE.

‘-s, --start-quant=DUR’
     Quantize note starts on DUR.

‘-t, --allow-tuplet=DUR*NUM/DEN’
     Allow tuplet durations DUR*NUM/DEN.

‘-v, --verbose’
     Be verbose.

‘-V, --version’
     Print version number.

‘-w, --warranty’
     Show warranty and copyright.

‘-x, --text-lyrics’
     Treat every text as a lyric.


Known issues and warnings
.........................

Overlapping notes in an arpeggio will not be correctly rendered.  The
first note will be read and the others will be ignored.  Set them all to
a single duration and add phrase markings or pedal indicators.


File: lilypond-usage.info,  Node: Invoking musicxml2ly,  Next: Invoking abc2ly,  Prev: Invoking midi2ly,  Up: Converting from other formats

4.3.2 Invoking ‘musicxml2ly’
----------------------------

MusicXML (http://www.musicxml.org/) is an XML dialect for representing
music notation.

   ‘musicxml2ly’ extracts the notes, articulations, score structure,
lyrics, etc.  from part-wise MusicXML files, and writes them to a ‘.ly’
file and is invoked from the command-line as follows;

     musicxml2ly [OPTION]... XML-FILE

   Note that by ‘command-line’, we mean the command line of the
operating system.  See *note Converting from other formats::, for more
information about this.

   If the given filename is ‘-’, ‘musicxml2ly’ reads input from the
command line.

   The following options are supported by ‘musicxml2ly’:

‘-a, --absolute’
     convert pitches in absolute mode.

‘-h, --help’
     print usage and option summary.

‘-l, --language=LANG’
     use LANG for pitch names, e.g.  ’deutsch’ for note names in German.

‘--loglevel=LOGLEVEL’
     Set the output verbosity to LOGLEVEL.  Possible values are ‘NONE’,
     ‘ERROR’, ‘WARNING’, ‘PROGRESS’ (default) and ‘DEBUG’.

‘--lxml’
     use the lxml.etree Python package for XML-parsing; uses less memory
     and cpu time.

‘-m, --midi’
     activate midi-block.

‘-nd, --no-articulation-directions’
     do not convert directions (‘^’, ‘_’ or ‘-’) for articulations,
     dynamics, etc.

‘--no-beaming’
     do not convert beaming information, use LilyPond’s automatic
     beaming instead.

‘-o, --output=FILE’
     set output filename to FILE.  If FILE is ‘-’, the output will be
     printed on stdout.  If not given, XML-FILE‘.ly’ will be used.

‘-r, --relative’
     convert pitches in relative mode (default).

‘-v, --verbose’
     be verbose.

‘--version’
     print version information.

‘-z, --compressed’
     input file is a zip-compressed MusicXML file.


File: lilypond-usage.info,  Node: Invoking abc2ly,  Next: Invoking etf2ly,  Prev: Invoking musicxml2ly,  Up: Converting from other formats

4.3.3 Invoking ‘abc2ly’
-----------------------

          Note: This is not currently supported and may eventually be
          removed from future versions of LilyPond.

   ABC is a fairly simple ASCII based format.  It is described at the
ABC site:

     <http://www.walshaw.plus.com/abc/learn.html>.

   ‘abc2ly’ translates from ABC to LilyPond.  It is invoked as follows:

     abc2ly [OPTION]... ABC-FILE

   The following options are supported by ‘abc2ly’:

‘-b, --beams=None’
     preserve ABC’s notion of beams
‘-h, --help’
     this help
‘-o, --output=FILE’
     set output filename to FILE.
‘-s, --strict’
     be strict about success
‘--version’
     print version information.

   There is a rudimentary facility for adding LilyPond code to the ABC
source file.  For example;

     %%LY voices \set autoBeaming = ##f

   This will cause the text following the keyword ‘voices’ to be
inserted into the current voice of the LilyPond output file.

   Similarly,

     %%LY slyrics more words

   will cause the text following the ‘slyrics’ keyword to be inserted
into the current line of lyrics.


Known issues and warnings
.........................

The ABC standard is not very ‘standard’.  For extended features (e.g.,
polyphonic music) different conventions exist.

   Multiple tunes in one file cannot be converted.

   ABC synchronizes words and notes at the beginning of a line; ‘abc2ly’
does not.

   ‘abc2ly’ ignores the ABC beaming.


File: lilypond-usage.info,  Node: Invoking etf2ly,  Next: Other formats,  Prev: Invoking abc2ly,  Up: Converting from other formats

4.3.4 Invoking ‘etf2ly’
-----------------------

          Note: This is not currently supported and may eventually be
          removed from future versions of LilyPond.

   ETF (Enigma Transport Format) is a format used by Coda Music
Technology’s Finale product.  ‘etf2ly’ will convert part of an ETF file
to a ready-to-use LilyPond file.

   It is invoked from the command-line as follows;

     etf2ly [OPTION]... ETF-FILE

   Note that by ‘command-line’, we mean the command line of the
operating system.  See *note Converting from other formats::, for more
information about this.

   The following options are supported by ‘etf2ly’:

‘-h, --help’
     this help
‘-o, --output=FILE’
     set output filename to FILE
‘--version’
     version information


Known issues and warnings
.........................

The list of articulation scripts is incomplete.  Empty measures confuse
‘etf2ly’.  Sequences of grace notes are ended improperly.


File: lilypond-usage.info,  Node: Other formats,  Prev: Invoking etf2ly,  Up: Converting from other formats

4.3.5 Other formats
-------------------

LilyPond itself does not come with support for any other formats, but
some external tools can also generate LilyPond files.  These are listed
in *note (lilypond-web)Easier editing::.


File: lilypond-usage.info,  Node: LilyPond output in other programs,  Next: Independent includes,  Prev: Converting from other formats,  Up: External programs

4.4 LilyPond output in other programs
=====================================

This section shows methods to integrate text and music, different than
the automated method with ‘lilypond-book’.

* Menu:

* LuaTex::
* OpenOffice and LibreOffice::
* Other programs::


File: lilypond-usage.info,  Node: LuaTex,  Next: OpenOffice and LibreOffice,  Up: LilyPond output in other programs

4.4.1 LuaTex
------------

As well as ‘lilypond-book’ to integrate LilyPond output, there is an
alternative program that can be used when using LuaTex called lyluatex
(https://github.com/jperon/lyluatex/blob/master/README.en.md).


File: lilypond-usage.info,  Node: OpenOffice and LibreOffice,  Next: Other programs,  Prev: LuaTex,  Up: LilyPond output in other programs

4.4.2 OpenOffice and LibreOffice
--------------------------------

LilyPond notation can be added to OpenOffice.org and LibreOffice with
OOoLilyPond (http://ooolilypond.sourceforge.net), an OpenOffice.org
extension that converts LilyPond files into images within OpenOffice.org
documents.  Although this is no longer being developed, it appears to
still work with version 4.


File: lilypond-usage.info,  Node: Other programs,  Prev: OpenOffice and LibreOffice,  Up: LilyPond output in other programs

4.4.3 Other programs
--------------------

Other programs that can handle ‘PNG’, ‘EPS’, or ‘PDF’ formats should use
‘lilypond’ instead of ‘lilypond-book’.  Each LilyPond output file must
be created and inserted separately.  Consult the program’s own
documentation on how to insert files from other sources.

   To help reduce the white space around your LilyPond score, use the
following options;

     \paper{
       indent=0\mm
       line-width=120\mm
       oddFooterMarkup=##f
       oddHeaderMarkup=##f
       bookTitleMarkup = ##f
       scoreTitleMarkup = ##f
     }

     ... MUSIC ...

To produce ‘EPS’ images;

     lilypond -dbackend=eps -dno-gs-load-fonts -dinclude-eps-fonts myfile.ly

To produce ‘PNG’ images;

     lilypond -dbackend=eps -dno-gs-load-fonts -dinclude-eps-fonts --png myfile.ly

For transparent ‘PNG’ images

     lilypond -dbackend=eps -dno-gs-load-fonts -dinclude-eps-fonts -dpixmap-format=pngalpha --png myfile.ly

   If you need to quote many fragments from a large score, you can also
use the clip systems feature, see *note (lilypond-notation)Extracting
fragments of music::.


File: lilypond-usage.info,  Node: Independent includes,  Prev: LilyPond output in other programs,  Up: External programs

4.5 Independent ‘include’s
==========================

Some users have produced files that can be ‘\include’d with LilyPond to
produce certain effects and those listed below are part of the LilyPond
distribution.  Also see *note (lilypond-notation)Working with input
files::.

* Menu:

* MIDI articulation::


File: lilypond-usage.info,  Node: MIDI articulation,  Up: Independent includes

4.5.1 MIDI articulation
-----------------------

The Articulate (http://www.nicta.com.au/articulate) project is an
attempt to enhance LilyPond’s MIDI output and works by adjusting note
lengths (that are not under slurs) according to the articulation
markings attached to them.  For example, a ‘staccato’ halves the note
value, ‘tenuto’ gives a note its full duration and so on.  See *note
(lilypond-notation)Enhancing MIDI output::.


File: lilypond-usage.info,  Node: Suggestions for writing files,  Next: GNU Free Documentation License,  Prev: External programs,  Up: Top

5 Suggestions for writing files
*******************************

Now you’re ready to begin writing larger LilyPond input files – not just
the little examples in the tutorial, but whole pieces.  But how should
you go about doing it?

   As long as LilyPond can understand your input files and produce the
output that you want, it doesn’t matter what your input files look like.
However, there are a few other things to consider when writing LilyPond
input files.

   • What if you make a mistake?  The structure of a LilyPond file can
     make certain errors easier (or harder) to find.

   • What if you want to share your input files with somebody else?  In
     fact, what if you want to alter your own input files in a few
     years?  Some LilyPond input files are understandable at first
     glance; others may leave you scratching your head for an hour.

   • What if you want to upgrade your LilyPond file for use with a later
     version of LilyPond?  The input syntax changes occasionally as
     LilyPond improves.  Most changes can be done automatically with
     ‘convert-ly’, but some changes might require manual assistance.
     LilyPond input files can be structured in order to be easier (or
     harder) to update.

* Menu:

* General suggestions::
* Typesetting existing music::
* Large projects::
* Troubleshooting::
* Make and Makefiles::


File: lilypond-usage.info,  Node: General suggestions,  Next: Typesetting existing music,  Up: Suggestions for writing files

5.1 General suggestions
=======================

Here are a few suggestions that can help to avoid (and fix) the most
common problems when typesetting:

   • *Always include a ‘\version’ number in your input files* no matter
     how small they are.  This prevents having to remember which version
     of LilyPond the file was created with and is especially relevant
     when *note Updating files with convert-ly:: command (which requires
     the ‘\version’ statement to be present); or if sending your input
     files to other users (e.g.  when asking for help on the mail
     lists).  Note that all of the LilyPond templates contain ‘\version’
     numbers.

   • *For each line in your input file, write one bar of music*.  This
     will make debugging any problems in your input files much simpler.

   • *Include *note (lilypond-notation)Bar and bar number checks:: as
     well as *note (lilypond-notation)Octave checks::*.  Including
     ‘checks’ of this type in your input files will help pinpoint
     mistakes more quickly.  How often checks are added will depend on
     the complexity of the music being typeset.  For simple
     compositions, checks added at a few at strategic points within the
     music can be enough but for more complex music, with many voices
     and/or staves, checks may be better placed after every bar.

   • *Add comments within input files*.  References to musical themes
     (i.e.  ‘second theme in violins’, ‘fourth variation,’ etc.), or
     simply including bar numbers as comments, will make navigating the
     input file much simpler especically if something needs to be
     altered later on or if passing on LilyPond input files to another
     person.

   • *Add explicit note durations at the start of ‘sections’*.  For
     example, ‘c4 d e f’ instead of just ‘c d e f’ can make rearranging
     the music later on simpler.

   • *Learn to indent and align braces and parallel music*.  Many
     problems are often caused by either ‘missing’ braces.  Clearly
     indenting ‘opening’ and ‘closing’ braces (or ‘<<’ and ‘>>’
     indicators) will help avoid such problems.  For example;

          \new Staff {
            \relative {
              r4 g'8 g c8 c4 d |
              e4 r8 |
              % Ossia section
              <<
                { f8 c c | }
                \new Staff {
                  f8 f c |
                }
              >>
              r4 |
            }
          }

     is much easier to follow than;

          \new Staff { \relative { r4 g'8 g c4 c8 d | e4 r8
          % Ossia section
          << { f8 c c } \new Staff { f8 f c } >> r4 | } }

   • *Keep music and style separate* by putting overrides in the
     ‘\layout’ block;

          \score {
            ...MUSIC...
            \layout {
             \override TabStaff.Stemstencil = ##f
           }
          }

     This will not create a new context but it will apply when one is
     created.  Also see *note (lilypond-learning)Saving typing with
     variables and functions::, and *note (lilypond-learning)Style
     sheets::.


File: lilypond-usage.info,  Node: Typesetting existing music,  Next: Large projects,  Prev: General suggestions,  Up: Suggestions for writing files

5.2 Typesetting existing music
==============================

If you are entering music from an existing score (i.e., typesetting a
piece of existing sheet music),

   • Enter the manuscript (the physical copy of the music) into LilyPond
     one system at a time (but still only one bar per line of text), and
     check each system when you finish it.  You may use the
     ‘showLastLength’ or ‘showFirstLength’ properties to speed up
     processing – see *note (lilypond-notation)Skipping corrected
     music::.

   • Define ‘mBreak = { \break }’ and insert ‘\mBreak’ in the input file
     whenever the manuscript has a line break.  This makes it much
     easier to compare the LilyPond music to the original music.  When
     you are finished proofreading your score, you may define ‘mBreak =
     { }’ to remove all those line breaks.  This will allow LilyPond to
     place line breaks wherever it feels are best.

   • When entering a part for a transposing instrument into a variable,
     it is recommended that the notes are wrapped in

          \transpose c natural-pitch {...}

     (where ‘natural-pitch’ is the open pitch of the instrument) so that
     the music in the variable is effectively in C. You can transpose it
     back again when the variable is used, if required, but you might
     not want to (e.g., when printing a score in concert pitch,
     converting a trombone part from treble to bass clef, etc.)
     Mistakes in transpositions are less likely if all the music in
     variables is at a consistent pitch.

     Also, only ever transpose to/from C. That means that the only other
     keys you will use are the natural pitches of the instruments - bes
     for a B-flat trumpet, aes for an A-flat clarinet, etc.


File: lilypond-usage.info,  Node: Large projects,  Next: Troubleshooting,  Prev: Typesetting existing music,  Up: Suggestions for writing files

5.3 Large projects
==================

When working on a large project, having a clear structure to your
lilypond input files becomes vital.

   • *Use a variable for each voice*, with a minimum of structure inside
     the definition.  The structure of the ‘\score’ section is the most
     likely thing to change; the ‘violin’ definition is extremely
     unlikely to change in a new version of LilyPond.

          violin = \relative {
          g'4 c'8. e16
          }
          ...
          \score {
            \new GrandStaff {
              \new Staff {
                \violin
              }
            }
          }

   • *Separate tweaks from music definitions*.  This point was made
     previously, but for large projects it is absolutely vital.  We
     might need to change the definition of ‘fthenp’, but then we only
     need to do this once, and we can still avoid touching anything
     inside ‘violin’.

          fthenp = _\markup{
            \dynamic f \italic \small { 2nd } \hspace #0.1 \dynamic p }
          violin = \relative {
          g'4\fthenp c'8. e16
          }


File: lilypond-usage.info,  Node: Troubleshooting,  Next: Make and Makefiles,  Prev: Large projects,  Up: Suggestions for writing files

5.4 Troubleshooting
===================

Sooner or later, you will write a file that LilyPond cannot compile.
The messages that LilyPond gives may help you find the error, but in
many cases you need to do some investigation to determine the source of
the problem.

   The most powerful tools for this purpose are the single line comment
(indicated by ‘%’) and the block comment (indicated by ‘%{...%}’).  If
you don’t know where a problem is, start commenting out huge portions of
your input file.  After you comment out a section, try compiling the
file again.  If it works, then the problem must exist in the portion you
just commented.  If it doesn’t work, then keep on commenting out
material until you have something that works.

   In an extreme case, you might end up with only

     \score {
       <<
         % \melody
         % \harmony
         % \bass
       >>
       \layout{}
     }

(in other words, a file without any music)

   If that happens, don’t give up.  Uncomment a bit – say, the bass part
– and see if it works.  If it doesn’t work, then comment out all of the
bass music (but leave ‘\bass’ in the ‘\score’ uncommented.

     bass = \relative {
     %{
       c'4 c c c
       d d d d
     %}
     }

   Now start slowly uncommenting more and more of the ‘bass’ part until
you find the problem line.

   Another very useful debugging technique is constructing *note
(lilypond-web)Tiny examples::.


File: lilypond-usage.info,  Node: Make and Makefiles,  Prev: Troubleshooting,  Up: Suggestions for writing files

5.5 Make and Makefiles
======================

Pretty well all the platforms LilyPond can run on support a software
facility called ‘make’.  This software reads a special file called a
‘Makefile’ that defines what files depend on what others and what
commands you need to give the operating system to produce one file from
another.  For example the makefile would spell out how to produce
‘ballad.pdf’ and ‘ballad.midi’ from ‘ballad.ly’ by running LilyPond.

   There are times when it is a good idea to create a ‘Makefile’ for
your project, either for your own convenience or as a courtesy to others
who might have access to your source files.  This is true for very large
projects with many included files and different output options (e.g.
full score, parts, conductor’s score, piano reduction, etc.), or for
projects that require difficult commands to build them (such as
‘lilypond-book’ projects).  Makefiles vary greatly in complexity and
flexibility, according to the needs and skills of the authors.  The
program GNU Make comes installed on GNU/Linux distributions and on MacOS
X, and it is also available for Windows.

   See the *GNU Make Manual* for full details on using ‘make’, as what
follows here gives only a glimpse of what it can do.

   The commands to define rules in a makefile differ according to
platform; for instance the various forms of GNU/Linux and MacOS use
‘bash’, while Windows uses ‘cmd’.  Note that on MacOS X, you need to
configure the system to use the command-line interpreter.  Here are some
example makefiles, with versions for both GNU/Linux/MacOS and Windows.

   The first example is for an orchestral work in four movements with a
directory structure as follows:

     Symphony/
     |-- MIDI/
     |-- Makefile
     |-- Notes/
     |   |-- cello.ily
     |   |-- figures.ily
     |   |-- horn.ily
     |   |-- oboe.ily
     |   |-- trioString.ily
     |   |-- viola.ily
     |   |-- violinOne.ily
     |   `-- violinTwo.ily
     |-- PDF/
     |-- Parts/
     |   |-- symphony-cello.ly
     |   |-- symphony-horn.ly
     |   |-- symphony-oboes.ly
     |   |-- symphony-viola.ly
     |   |-- symphony-violinOne.ly
     |   `-- symphony-violinTwo.ly
     |-- Scores/
     |   |-- symphony.ly
     |   |-- symphonyI.ly
     |   |-- symphonyII.ly
     |   |-- symphonyIII.ly
     |   `-- symphonyIV.ly
     `-- symphonyDefs.ily

   The ‘.ly’ files in the ‘Scores’ and ‘Parts’ directories get their
notes from ‘.ily’ files in the ‘Notes’ directory:

     %%% top of file "symphony-cello.ly"
     \include ../symphonyDefs.ily
     \include ../Notes/cello.ily

   The makefile will have targets of ‘score’ (entire piece in full
score), ‘movements’ (individual movements in full score), and ‘parts’
(individual parts for performers).  There is also a target ‘archive’
that will create a tarball of the source files, suitable for sharing via
web or email.  Here is the makefile for GNU/Linux or MacOS X. It should
be saved with the name ‘Makefile’ in the top directory of the project:

          Note: When a target or pattern rule is defined, the subsequent
          lines must begin with tabs, not spaces.

     # the name stem of the output files
     piece = symphony
     # determine how many processors are present
     CPU_CORES=`cat /proc/cpuinfo | grep -m1 "cpu cores" | sed s/".*: "//`
     # The command to run lilypond
     LILY_CMD = lilypond -ddelete-intermediate-files \
                         -dno-point-and-click -djob-count=$(CPU_CORES)

     # The suffixes used in this Makefile.
     .SUFFIXES: .ly .ily .pdf .midi

     # Input and output files are searched in the directories listed in
     # the VPATH variable.  All of them are subdirectories of the current
     # directory (given by the GNU make variable `CURDIR').
     VPATH = \
       $(CURDIR)/Scores \
       $(CURDIR)/PDF \
       $(CURDIR)/Parts \
       $(CURDIR)/Notes

     # The pattern rule to create PDF and MIDI files from a LY input file.
     # The .pdf output files are put into the `PDF' subdirectory, and the
     # .midi files go into the `MIDI' subdirectory.
     %.pdf %.midi: %.ly
             $(LILY_CMD) $<; \           # this line begins with a tab
             if test -f "$*.pdf"; then \
                 mv "$*.pdf" PDF/; \
             fi; \
             if test -f "$*.midi"; then \
                 mv "$*.midi" MIDI/; \
             fi

     notes = \
       cello.ily \
       horn.ily \
       oboe.ily \
       viola.ily \
       violinOne.ily \
       violinTwo.ily

     # The dependencies of the movements.
     $(piece)I.pdf: $(piece)I.ly $(notes)
     $(piece)II.pdf: $(piece)II.ly $(notes)
     $(piece)III.pdf: $(piece)III.ly $(notes)
     $(piece)IV.pdf: $(piece)IV.ly $(notes)

     # The dependencies of the full score.
     $(piece).pdf: $(piece).ly $(notes)

     # The dependencies of the parts.
     $(piece)-cello.pdf: $(piece)-cello.ly cello.ily
     $(piece)-horn.pdf: $(piece)-horn.ly horn.ily
     $(piece)-oboes.pdf: $(piece)-oboes.ly oboe.ily
     $(piece)-viola.pdf: $(piece)-viola.ly viola.ily
     $(piece)-violinOne.pdf: $(piece)-violinOne.ly violinOne.ily
     $(piece)-violinTwo.pdf: $(piece)-violinTwo.ly violinTwo.ily

     # Type `make score' to generate the full score of all four
     # movements as one file.
     .PHONY: score
     score: $(piece).pdf

     # Type `make parts' to generate all parts.
     # Type `make foo.pdf' to generate the part for instrument `foo'.
     # Example: `make symphony-cello.pdf'.
     .PHONY: parts
     parts: $(piece)-cello.pdf \
            $(piece)-violinOne.pdf \
            $(piece)-violinTwo.pdf \
            $(piece)-viola.pdf \
            $(piece)-oboes.pdf \
            $(piece)-horn.pdf

     # Type `make movements' to generate files for the
     # four movements separately.
     .PHONY: movements
     movements: $(piece)I.pdf \
                $(piece)II.pdf \
                $(piece)III.pdf \
                $(piece)IV.pdf

     all: score parts movements

     archive:
             tar -cvvf stamitz.tar \       # this line begins with a tab
             --exclude=*pdf --exclude=*~ \
             --exclude=*midi --exclude=*.tar \
             ../Stamitz/*

   There are special complications on the Windows platform.  After
downloading and installing GNU Make for Windows, you must set the
correct path in the system’s environment variables so that the DOS shell
can find the Make program.  To do this, right-click on "My Computer,"
then choose ‘Properties’ and ‘Advanced’.  Click ‘Environment Variables’,
and then in the ‘System Variables’ pane, highlight ‘Path’, click ‘edit’,
and add the path to the GNU Make executable file, which will look
something like this:

     C:\Program Files\GnuWin32\bin

   The makefile itself has to be altered to handle different shell
commands and to deal with spaces that are present in some default system
directories.  The ‘archive’ target is eliminated since Windows does not
have the ‘tar’ command, and Windows also has a different default
extension for midi files.

     ## WINDOWS VERSION
     ##
     piece = symphony
     LILY_CMD = lilypond -ddelete-intermediate-files \
                         -dno-point-and-click \
                         -djob-count=$(NUMBER_OF_PROCESSORS)

     #get the 8.3 name of CURDIR (workaround for spaces in PATH)
     workdir = $(shell for /f "tokens=*" %%b in ("$(CURDIR)") \
               do @echo %%~sb)

     .SUFFIXES: .ly .ily .pdf .mid

     VPATH = \
       $(workdir)/Scores \
       $(workdir)/PDF \
       $(workdir)/Parts \
       $(workdir)/Notes

     %.pdf %.mid: %.ly
             $(LILY_CMD) $<      # this line begins with a tab
             if exist "$*.pdf"  move /Y "$*.pdf"  PDF/ # begin with tab
             if exist "$*.mid" move /Y "$*.mid" MIDI/  # begin with tab

     notes = \
       cello.ily \
       figures.ily \
       horn.ily \
       oboe.ily \
       trioString.ily \
       viola.ily \
       violinOne.ily \
       violinTwo.ily

     $(piece)I.pdf: $(piece)I.ly $(notes)
     $(piece)II.pdf: $(piece)II.ly $(notes)
     $(piece)III.pdf: $(piece)III.ly $(notes)
     $(piece)IV.pdf: $(piece)IV.ly $(notes)

     $(piece).pdf: $(piece).ly $(notes)

     $(piece)-cello.pdf: $(piece)-cello.ly cello.ily
     $(piece)-horn.pdf: $(piece)-horn.ly horn.ily
     $(piece)-oboes.pdf: $(piece)-oboes.ly oboe.ily
     $(piece)-viola.pdf: $(piece)-viola.ly viola.ily
     $(piece)-violinOne.pdf: $(piece)-violinOne.ly violinOne.ily
     $(piece)-violinTwo.pdf: $(piece)-violinTwo.ly violinTwo.ily

     .PHONY: score
     score: $(piece).pdf

     .PHONY: parts
     parts: $(piece)-cello.pdf \
            $(piece)-violinOne.pdf \
            $(piece)-violinTwo.pdf \
            $(piece)-viola.pdf \
            $(piece)-oboes.pdf \
            $(piece)-horn.pdf

     .PHONY: movements
     movements: $(piece)I.pdf \
                $(piece)II.pdf \
                $(piece)III.pdf \
                $(piece)IV.pdf

     all: score parts movements

   The next Makefile is for a ‘lilypond-book’ document done in LaTeX.
This project has an index, which requires that the ‘latex’ command be
run twice to update links.  Output files are all stored in the ‘out’
directory for .pdf output and in the ‘htmlout’ directory for the html
output.

     SHELL=/bin/sh
     FILE=myproject
     OUTDIR=out
     WEBDIR=htmlout
     VIEWER=acroread
     BROWSER=firefox
     LILYBOOK_PDF=lilypond-book --output=$(OUTDIR) --pdf $(FILE).lytex
     LILYBOOK_HTML=lilypond-book --output=$(WEBDIR) $(FILE).lytex
     PDF=cd $(OUTDIR) && pdflatex $(FILE)
     HTML=cd $(WEBDIR) && latex2html $(FILE)
     INDEX=cd $(OUTDIR) && makeindex $(FILE)
     PREVIEW=$(VIEWER) $(OUTDIR)/$(FILE).pdf &

     all: pdf web keep

     pdf:
             $(LILYBOOK_PDF)  # begin with tab
             $(PDF)           # begin with tab
             $(INDEX)         # begin with tab
             $(PDF)           # begin with tab
             $(PREVIEW)       # begin with tab

     web:
             $(LILYBOOK_HTML) # begin with tab
             $(HTML)          # begin with tab
             cp -R $(WEBDIR)/$(FILE)/ ./  # begin with tab
             $(BROWSER) $(FILE)/$(FILE).html &  # begin with tab

     keep: pdf
             cp $(OUTDIR)/$(FILE).pdf $(FILE).pdf  # begin with tab

     clean:
             rm -rf $(OUTDIR) # begin with tab

     web-clean:
             rm -rf $(WEBDIR) # begin with tab

     archive:
             tar -cvvf myproject.tar \ # begin this line with tab
             --exclude=out/* \
             --exclude=htmlout/* \
             --exclude=myproject/* \
             --exclude=*midi \
             --exclude=*pdf \
             --exclude=*~ \
             ../MyProject/*

   TODO: make this thing work on Windows

   The previous makefile does not work on Windows.  An alternative for
Windows users would be to create a simple batch file containing the
build commands.  This will not keep track of dependencies the way a
makefile does, but it at least reduces the build process to a single
command.  Save the following code as ‘build.bat’ or ‘build.cmd’.  The
batch file can be run at the DOS prompt or by simply double-clicking its
icon.

     lilypond-book --output=out --pdf myproject.lytex
     cd out
     pdflatex myproject
     makeindex myproject
     pdflatex myproject
     cd ..
     copy out\myproject.pdf MyProject.pdf


See also
........


   This manual: *note Command-line usage::, *note lilypond-book::


File: lilypond-usage.info,  Node: GNU Free Documentation License,  Next: LilyPond index,  Prev: Suggestions for writing files,  Up: Top

Appendix A GNU Free Documentation License
*****************************************

                     Version 1.3, 3 November 2008

     Copyright © 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
     <http://fsf.org/>

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

  0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     functional and useful document “free” in the sense of freedom: to
     assure everyone the effective freedom to copy and redistribute it,
     with or without modifying it, either commercially or
     noncommercially.  Secondarily, this License preserves for the
     author and publisher a way to get credit for their work, while not
     being considered responsible for modifications made by others.

     This License is a kind of “copyleft”, which means that derivative
     works of the document must themselves be free in the same sense.
     It complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for
     free software, because free software needs free documentation: a
     free program should come with manuals providing the same freedoms
     that the software does.  But this License is not limited to
     software manuals; it can be used for any textual work, regardless
     of subject matter or whether it is published as a printed book.  We
     recommend this License principally for works whose purpose is
     instruction or reference.

  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work, in any medium,
     that contains a notice placed by the copyright holder saying it can
     be distributed under the terms of this License.  Such a notice
     grants a world-wide, royalty-free license, unlimited in duration,
     to use that work under the conditions stated herein.  The
     “Document”, below, refers to any such manual or work.  Any member
     of the public is a licensee, and is addressed as “you”.  You accept
     the license if you copy, modify or distribute the work in a way
     requiring permission under copyright law.

     A “Modified Version” of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A “Secondary Section” is a named appendix or a front-matter section
     of the Document that deals exclusively with the relationship of the
     publishers or authors of the Document to the Document’s overall
     subject (or to related matters) and contains nothing that could
     fall directly within that overall subject.  (Thus, if the Document
     is in part a textbook of mathematics, a Secondary Section may not
     explain any mathematics.)  The relationship could be a matter of
     historical connection with the subject or with related matters, or
     of legal, commercial, philosophical, ethical or political position
     regarding them.

     The “Invariant Sections” are certain Secondary Sections whose
     titles are designated, as being those of Invariant Sections, in the
     notice that says that the Document is released under this License.
     If a section does not fit the above definition of Secondary then it
     is not allowed to be designated as Invariant.  The Document may
     contain zero Invariant Sections.  If the Document does not identify
     any Invariant Sections then there are none.

     The “Cover Texts” are certain short passages of text that are
     listed, as Front-Cover Texts or Back-Cover Texts, in the notice
     that says that the Document is released under this License.  A
     Front-Cover Text may be at most 5 words, and a Back-Cover Text may
     be at most 25 words.

     A “Transparent” copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, that is suitable for revising the document
     straightforwardly with generic text editors or (for images composed
     of pixels) generic paint programs or (for drawings) some widely
     available drawing editor, and that is suitable for input to text
     formatters or for automatic translation to a variety of formats
     suitable for input to text formatters.  A copy made in an otherwise
     Transparent file format whose markup, or absence of markup, has
     been arranged to thwart or discourage subsequent modification by
     readers is not Transparent.  An image format is not Transparent if
     used for any substantial amount of text.  A copy that is not
     “Transparent” is called “Opaque”.

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format,
     SGML or XML using a publicly available DTD, and standard-conforming
     simple HTML, PostScript or PDF designed for human modification.
     Examples of transparent image formats include PNG, XCF and JPG.
     Opaque formats include proprietary formats that can be read and
     edited only by proprietary word processors, SGML or XML for which
     the DTD and/or processing tools are not generally available, and
     the machine-generated HTML, PostScript or PDF produced by some word
     processors for output purposes only.

     The “Title Page” means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the
     material this License requires to appear in the title page.  For
     works in formats which do not have any title page as such, “Title
     Page” means the text near the most prominent appearance of the
     work’s title, preceding the beginning of the body of the text.

     The “publisher” means any person or entity that distributes copies
     of the Document to the public.

     A section “Entitled XYZ” means a named subunit of the Document
     whose title either is precisely XYZ or contains XYZ in parentheses
     following text that translates XYZ in another language.  (Here XYZ
     stands for a specific section name mentioned below, such as
     “Acknowledgements”, “Dedications”, “Endorsements”, or “History”.)
     To “Preserve the Title” of such a section when you modify the
     Document means that it remains a section “Entitled XYZ” according
     to this definition.

     The Document may include Warranty Disclaimers next to the notice
     which states that this License applies to the Document.  These
     Warranty Disclaimers are considered to be included by reference in
     this License, but only as regards disclaiming warranties: any other
     implication that these Warranty Disclaimers may have is void and
     has no effect on the meaning of this License.

  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License
     applies to the Document are reproduced in all copies, and that you
     add no other conditions whatsoever to those of this License.  You
     may not use technical measures to obstruct or control the reading
     or further copying of the copies you make or distribute.  However,
     you may accept compensation in exchange for copies.  If you
     distribute a large enough number of copies you must also follow the
     conditions in section 3.

     You may also lend copies, under the same conditions stated above,
     and you may publicly display copies.

  3. COPYING IN QUANTITY

     If you publish printed copies (or copies in media that commonly
     have printed covers) of the Document, numbering more than 100, and
     the Document’s license notice requires Cover Texts, you must
     enclose the copies in covers that carry, clearly and legibly, all
     these Cover Texts: Front-Cover Texts on the front cover, and
     Back-Cover Texts on the back cover.  Both covers must also clearly
     and legibly identify you as the publisher of these copies.  The
     front cover must present the full title with all words of the title
     equally prominent and visible.  You may add other material on the
     covers in addition.  Copying with changes limited to the covers, as
     long as they preserve the title of the Document and satisfy these
     conditions, can be treated as verbatim copying in other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto
     adjacent pages.

     If you publish or distribute Opaque copies of the Document
     numbering more than 100, you must either include a machine-readable
     Transparent copy along with each Opaque copy, or state in or with
     each Opaque copy a computer-network location from which the general
     network-using public has access to download using public-standard
     network protocols a complete Transparent copy of the Document, free
     of added material.  If you use the latter option, you must take
     reasonably prudent steps, when you begin distribution of Opaque
     copies in quantity, to ensure that this Transparent copy will
     remain thus accessible at the stated location until at least one
     year after the last time you distribute an Opaque copy (directly or
     through your agents or retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of
     the Document well before redistributing any large number of copies,
     to give them a chance to provide you with an updated version of the
     Document.

  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document
     under the conditions of sections 2 and 3 above, provided that you
     release the Modified Version under precisely this License, with the
     Modified Version filling the role of the Document, thus licensing
     distribution and modification of the Modified Version to whoever
     possesses a copy of it.  In addition, you must do these things in
     the Modified Version:

       A. Use in the Title Page (and on the covers, if any) a title
          distinct from that of the Document, and from those of previous
          versions (which should, if there were any, be listed in the
          History section of the Document).  You may use the same title
          as a previous version if the original publisher of that
          version gives permission.

       B. List on the Title Page, as authors, one or more persons or
          entities responsible for authorship of the modifications in
          the Modified Version, together with at least five of the
          principal authors of the Document (all of its principal
          authors, if it has fewer than five), unless they release you
          from this requirement.

       C. State on the Title page the name of the publisher of the
          Modified Version, as the publisher.

       D. Preserve all the copyright notices of the Document.

       E. Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.

       F. Include, immediately after the copyright notices, a license
          notice giving the public permission to use the Modified
          Version under the terms of this License, in the form shown in
          the Addendum below.

       G. Preserve in that license notice the full lists of Invariant
          Sections and required Cover Texts given in the Document’s
          license notice.

       H. Include an unaltered copy of this License.

       I. Preserve the section Entitled “History”, Preserve its Title,
          and add to it an item stating at least the title, year, new
          authors, and publisher of the Modified Version as given on the
          Title Page.  If there is no section Entitled “History” in the
          Document, create one stating the title, year, authors, and
          publisher of the Document as given on its Title Page, then add
          an item describing the Modified Version as stated in the
          previous sentence.

       J. Preserve the network location, if any, given in the Document
          for public access to a Transparent copy of the Document, and
          likewise the network locations given in the Document for
          previous versions it was based on.  These may be placed in the
          “History” section.  You may omit a network location for a work
          that was published at least four years before the Document
          itself, or if the original publisher of the version it refers
          to gives permission.

       K. For any section Entitled “Acknowledgements” or “Dedications”,
          Preserve the Title of the section, and preserve in the section
          all the substance and tone of each of the contributor
          acknowledgements and/or dedications given therein.

       L. Preserve all the Invariant Sections of the Document, unaltered
          in their text and in their titles.  Section numbers or the
          equivalent are not considered part of the section titles.

       M. Delete any section Entitled “Endorsements”.  Such a section
          may not be included in the Modified Version.

       N. Do not retitle any existing section to be Entitled
          “Endorsements” or to conflict in title with any Invariant
          Section.

       O. Preserve any Warranty Disclaimers.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no
     material copied from the Document, you may at your option designate
     some or all of these sections as invariant.  To do this, add their
     titles to the list of Invariant Sections in the Modified Version’s
     license notice.  These titles must be distinct from any other
     section titles.

     You may add a section Entitled “Endorsements”, provided it contains
     nothing but endorsements of your Modified Version by various
     parties—for example, statements of peer review or that the text has
     been approved by an organization as the authoritative definition of
     a standard.

     You may add a passage of up to five words as a Front-Cover Text,
     and a passage of up to 25 words as a Back-Cover Text, to the end of
     the list of Cover Texts in the Modified Version.  Only one passage
     of Front-Cover Text and one of Back-Cover Text may be added by (or
     through arrangements made by) any one entity.  If the Document
     already includes a cover text for the same cover, previously added
     by you or by arrangement made by the same entity you are acting on
     behalf of, you may not add another; but you may replace the old
     one, on explicit permission from the previous publisher that added
     the old one.

     The author(s) and publisher(s) of the Document do not by this
     License give permission to use their names for publicity for or to
     assert or imply endorsement of any Modified Version.

  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under
     this License, under the terms defined in section 4 above for
     modified versions, provided that you include in the combination all
     of the Invariant Sections of all of the original documents,
     unmodified, and list them all as Invariant Sections of your
     combined work in its license notice, and that you preserve all
     their Warranty Disclaimers.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name
     but different contents, make the title of each such section unique
     by adding at the end of it, in parentheses, the name of the
     original author or publisher of that section if known, or else a
     unique number.  Make the same adjustment to the section titles in
     the list of Invariant Sections in the license notice of the
     combined work.

     In the combination, you must combine any sections Entitled
     “History” in the various original documents, forming one section
     Entitled “History”; likewise combine any sections Entitled
     “Acknowledgements”, and any sections Entitled “Dedications”.  You
     must delete all sections Entitled “Endorsements.”

  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the
     rules of this License for verbatim copying of each of the documents
     in all other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert
     a copy of this License into the extracted document, and follow this
     License in all other respects regarding verbatim copying of that
     document.

  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other
     separate and independent documents or works, in or on a volume of a
     storage or distribution medium, is called an “aggregate” if the
     copyright resulting from the compilation is not used to limit the
     legal rights of the compilation’s users beyond what the individual
     works permit.  When the Document is included in an aggregate, this
     License does not apply to the other works in the aggregate which
     are not themselves derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one half
     of the entire aggregate, the Document’s Cover Texts may be placed
     on covers that bracket the Document within the aggregate, or the
     electronic equivalent of covers if the Document is in electronic
     form.  Otherwise they must appear on printed covers that bracket
     the whole aggregate.

  8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section
     4.  Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License, and all the license notices in the
     Document, and any Warranty Disclaimers, provided that you also
     include the original English version of this License and the
     original versions of those notices and disclaimers.  In case of a
     disagreement between the translation and the original version of
     this License or a notice or disclaimer, the original version will
     prevail.

     If a section in the Document is Entitled “Acknowledgements”,
     “Dedications”, or “History”, the requirement (section 4) to
     Preserve its Title (section 1) will typically require changing the
     actual title.

  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense, or distribute it is void,
     and will automatically terminate your rights under this License.

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly and
     finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from you
     under this License.  If your rights have been terminated and not
     permanently reinstated, receipt of a copy of some or all of the
     same material does not give you any rights to use it.

  10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of
     the GNU Free Documentation License from time to time.  Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns.  See
     <http://www.gnu.org/copyleft/>.

     Each version of the License is given a distinguishing version
     number.  If the Document specifies that a particular numbered
     version of this License “or any later version” applies to it, you
     have the option of following the terms and conditions either of
     that specified version or of any later version that has been
     published (not as a draft) by the Free Software Foundation.  If the
     Document does not specify a version number of this License, you may
     choose any version ever published (not as a draft) by the Free
     Software Foundation.  If the Document specifies that a proxy can
     decide which future versions of this License can be used, that
     proxy’s public statement of acceptance of a version permanently
     authorizes you to choose that version for the Document.

  11. RELICENSING

     “Massive Multiauthor Collaboration Site” (or “MMC Site”) means any
     World Wide Web server that publishes copyrightable works and also
     provides prominent facilities for anybody to edit those works.  A
     public wiki that anybody can edit is an example of such a server.
     A “Massive Multiauthor Collaboration” (or “MMC”) contained in the
     site means any set of copyrightable works thus published on the MMC
     site.

     “CC-BY-SA” means the Creative Commons Attribution-Share Alike 3.0
     license published by Creative Commons Corporation, a not-for-profit
     corporation with a principal place of business in San Francisco,
     California, as well as future copyleft versions of that license
     published by that same organization.

     “Incorporate” means to publish or republish a Document, in whole or
     in part, as part of another Document.

     An MMC is “eligible for relicensing” if it is licensed under this
     License, and if all works that were first published under this
     License somewhere other than this MMC, and subsequently
     incorporated in whole or in part into the MMC, (1) had no cover
     texts or invariant sections, and (2) were thus incorporated prior
     to November 1, 2008.

     The operator of an MMC Site may republish an MMC contained in the
     site under CC-BY-SA on the same site at any time before August 1,
     2009, provided the MMC is eligible for relicensing.

ADDENDUM: How to use this License for your documents
====================================================

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

       Copyright (C)  YEAR  YOUR NAME.
       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.3
       or any later version published by the Free Software Foundation;
       with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
       Texts.  A copy of the license is included in the section entitled ``GNU
       Free Documentation License''.

   If you have Invariant Sections, Front-Cover Texts and Back-Cover
Texts, replace the “with...Texts.” line with this:

         with the Invariant Sections being LIST THEIR TITLES, with
         the Front-Cover Texts being LIST, and with the Back-Cover Texts
         being LIST.

   If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

   If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of free
software license, such as the GNU General Public License, to permit
their use in free software.


File: lilypond-usage.info,  Node: LilyPond index,  Prev: GNU Free Documentation License,  Up: Top

Appendix B LilyPond index
*************************

 [index ]
* Menu:

* \header in LaTeX documents:            LaTeX.               (line  75)
* ABC:                                   Invoking abc2ly.     (line   9)
* Aborted (core dumped):                 Error messages.      (line  36)
* Articulate project:                    MIDI articulation.   (line   6)
* Bar and bar number checks:             Music runs off the page.
                                                              (line  22)
* Bar and bar number checks <1>:         General suggestions. (line  21)
* Bar lines:                             Music runs off the page.
                                                              (line  26)
* bigpdfs:                               Basic command line options for LilyPond.
                                                              (line   9)
* call trace:                            Error messages.      (line  24)
* chroot jail, running inside:           Basic command line options for LilyPond.
                                                              (line  73)
* Coda Technology:                       Invoking etf2ly.     (line   9)
* Collision resolution:                  Warning this voice needs a voiceXx or shiftXx setting.
                                                              (line  37)
* coloring, syntax:                      Text editor support. (line   6)
* command line options for lilypond:     Basic command line options for LilyPond.
                                                              (line   6)
* convert-ly:                            Updating files with convert-ly.
                                                              (line   6)
* convert-ly <1>:                        Why does the syntax change?.
                                                              (line   6)
* directory, redirect output:            Basic command line options for LilyPond.
                                                              (line 159)
* docbook:                               lilypond-book.       (line  26)
* DocBook, adding music:                 lilypond-book.       (line  26)
* documents, adding music:               lilypond-book.       (line  26)
* dvips:                                 Invoking lilypond-book.
                                                              (line  28)
* Easier editing:                        Other editors.       (line   8)
* Easier editing <1>:                    Other formats.       (line   8)
* editors:                               Text editor support. (line   6)
* emacs:                                 Text editor support. (line   6)
* Enhancing MIDI output:                 MIDI articulation.   (line  10)
* enigma:                                Invoking etf2ly.     (line   9)
* Enigma Transport Format:               Invoking etf2ly.     (line   9)
* error:                                 Error messages.      (line  15)
* error messages:                        Error messages.      (line   6)
* errors, message format:                Error messages.      (line  40)
* ETF:                                   Invoking etf2ly.     (line   9)
* Evince:                                Extra configuration for Evince.
                                                              (line   6)
* Explicitly instantiating voices:       Warning this voice needs a voiceXx or shiftXx setting.
                                                              (line  35)
* expression evaluation, Scheme:         Basic command line options for LilyPond.
                                                              (line  30)
* External programs, generating LilyPond files: Other formats.
                                                              (line   6)
* Extracting fragments of music:         Advanced command line options for LilyPond.
                                                              (line  82)
* Extracting fragments of music <1>:     Other programs.      (line  38)
* fatal error:                           Error messages.      (line  20)
* file searching:                        Basic command line options for LilyPond.
                                                              (line  66)
* file size, output:                     Enabling point and click.
                                                              (line   6)
* Finale:                                Invoking etf2ly.     (line   9)
* Flexible vertical spacing within systems: Warning staff affinities should only decrease.
                                                              (line  13)
* format, output:                        Basic command line options for LilyPond.
                                                              (line  48)
* fragments, music:                      Other programs.      (line  37)
* HTML:                                  lilypond-book.       (line  26)
* HTML, adding music:                    lilypond-book.       (line  26)
* invoking dvips:                        Invoking lilypond-book.
                                                              (line  28)
* Invoking lilypond:                     Basic command line options for LilyPond.
                                                              (line   6)
* LANG:                                  Environment variables.
                                                              (line   6)
* LaTex:                                 lilypond-book.       (line  26)
* LaTeX, adding music:                   lilypond-book.       (line  26)
* LibreOffice.org:                       OpenOffice and LibreOffice.
                                                              (line   6)
* LILYPOND_DATADIR:                      Environment variables.
                                                              (line   6)
* loglevel:                              Basic command line options for LilyPond.
                                                              (line 133)
* LuaTex:                                LuaTex.              (line   6)
* lyluatex:                              LuaTex.              (line   6)
* MacOS X:                               Command-line usage.  (line  15)
* MacOS X <1>:                           lilypond-book.       (line  20)
* MacOS X <2>:                           Converting from other formats.
                                                              (line  15)
* make:                                  Make and Makefiles.  (line   6)
* makefiles:                             Make and Makefiles.  (line   6)
* Manuals:                               Top.                 (line  24)
* MIDI:                                  Invoking midi2ly.    (line   6)
* MIDI <1>:                              MIDI articulation.   (line   6)
* modes, editor:                         Text editor support. (line   6)
* music fragments, quoting:              Other programs.      (line  37)
* musicology:                            An example of a musicological document.
                                                              (line   6)
* MusicXML:                              Invoking musicxml2ly.
                                                              (line   6)
* Octave checks:                         General suggestions. (line  22)
* OOoLilyPond:                           OpenOffice and LibreOffice.
                                                              (line   6)
* OpenOffice.org:                        OpenOffice and LibreOffice.
                                                              (line   6)
* options, command line:                 Basic command line options for LilyPond.
                                                              (line   6)
* Other sources of information:          Vim mode.            (line  17)
* outline fonts:                         Invoking lilypond-book.
                                                              (line  28)
* output, directory:                     Basic command line options for LilyPond.
                                                              (line 159)
* output, format:                        Basic command line options for LilyPond.
                                                              (line  48)
* output, PDF (Portable Document Format): Basic command line options for LilyPond.
                                                              (line 173)
* output, PNG (Portable Network Graphics): Basic command line options for LilyPond.
                                                              (line 168)
* output, PS (Postscript):               Basic command line options for LilyPond.
                                                              (line 165)
* output, setting filename:              Basic command line options for LilyPond.
                                                              (line 159)
* output, verbosity:                     Basic command line options for LilyPond.
                                                              (line 133)
* PDF (Portable Document Format), output: Basic command line options for LilyPond.
                                                              (line 173)
* PNG (Portable Network Graphics), output: Basic command line options for LilyPond.
                                                              (line 168)
* point and click:                       Point and click.     (line   6)
* point and click, command line:         Advanced command line options for LilyPond.
                                                              (line  16)
* Postscript (PS), output:               Basic command line options for LilyPond.
                                                              (line 165)
* preview image:                         HTML.                (line  61)
* Programming error:                     Error messages.      (line  30)
* PS (Postscript), output:               Basic command line options for LilyPond.
                                                              (line 165)
* quoting, music fragments:              Other programs.      (line  37)
* Real music example:                    Warning this voice needs a voiceXx or shiftXx setting.
                                                              (line  35)
* Saving typing with variables and functions: General suggestions.
                                                              (line  78)
* Scheme error:                          Error messages.      (line  24)
* Scheme, expression evaluation:         Basic command line options for LilyPond.
                                                              (line  30)
* search path:                           Basic command line options for LilyPond.
                                                              (line  66)
* Single-staff polyphony:                Warning this voice needs a voiceXx or shiftXx setting.
                                                              (line  36)
* Skipping corrected music:              Typesetting existing music.
                                                              (line  13)
* Staff:                                 Invoking midi2ly.    (line  14)
* Style sheets:                          General suggestions. (line  79)
* switches:                              Basic command line options for LilyPond.
                                                              (line   6)
* syntax coloring:                       Text editor support. (line   6)
* texi:                                  lilypond-book.       (line  26)
* texinfo:                               lilypond-book.       (line  26)
* texinfo <1>:                           lilypond-book.       (line  26)
* Texinfo, adding music:                 lilypond-book.       (line  26)
* Text encoding:                         Error message FT_Get_Glyph_Name.
                                                              (line   8)
* thumbnail:                             HTML.                (line  60)
* Tiny examples:                         Troubleshooting.     (line  46)
* titling and lilypond-book:             LaTeX.               (line  75)
* titling in HTML:                       HTML.                (line  61)
* trace, Scheme:                         Error messages.      (line  24)
* Tutorial:                              Normal usage.        (line   7)
* type1 fonts:                           Invoking lilypond-book.
                                                              (line  28)
* Updating a LilyPond file:              Updating files with convert-ly.
                                                              (line   6)
* updating old input files:              Why does the syntax change?.
                                                              (line   6)
* vim:                                   Text editor support. (line   6)
* Voice:                                 Invoking midi2ly.    (line  15)
* warning:                               Error messages.      (line   9)
* Windows:                               lilypond-book.       (line  20)
* Working with input files:              Independent includes.
                                                              (line   8)
* Xpdf:                                  Using Xpdf for point and click.
                                                              (line   6)



Tag Table:
Node: Top474
Node: Running lilypond1430
Node: Normal usage1741
Node: Command-line usage2099
Node: Invoking LilyPond3261
Ref: Invoking LilyPond-Footnote-16275
Node: Basic command line options for LilyPond6419
Node: Advanced command line options for LilyPond13542
Node: Environment variables32218
Node: LilyPond in chroot jail33206
Node: Error messages37027
Node: Common errors39708
Node: Music runs off the page40270
Node: An extra staff appears41589
Node: Error message Unbound variable %43117
Node: Error message FT_Get_Glyph_Name43752
Node: Warning staff affinities should only decrease44209
Node: Error message unexpected new44947
Node: Warning this voice needs a voiceXx or shiftXx setting46426
Node: Updating files with convert-ly48239
Node: Why does the syntax change?49038
Node: Invoking convert-ly51993
Node: Command line options for convert-ly54998
Node: Problems running convert-ly57752
Node: Manual conversions58921
Ref: Manual conversions-Footnote-161355
Node: Writing code to support multiple versions61619
Node: lilypond-book63198
Node: An example of a musicological document64639
Ref: An example of a musicological document-Footnote-167837
Node: Integrating music and text67945
Node: LaTeX68295
Node: Texinfo73451
Node: HTML75566
Node: DocBook77520
Node: Music fragment options80064
Node: Invoking lilypond-book88150
Ref: Invoking lilypond-book-Footnote-195896
Node: Filename extensions96024
Node: lilypond-book templates97310
Node: Sharing the table of contents100433
Node: Alternate methods of mixing text and music104018
Node: External programs104383
Node: Point and click104760
Node: Configuring the system for point and click105190
Node: Using Xpdf for point and click106766
Node: Using GNOME 2 for point and click107666
Node: Using GNOME 3 for point and click108432
Node: Extra configuration for Evince109490
Node: Enabling point and click110391
Node: Selective point-and-click111333
Node: Text editor support112758
Node: Emacs mode113065
Node: Vim mode114019
Node: Other editors114690
Node: Converting from other formats115062
Node: Invoking midi2ly116342
Node: Invoking musicxml2ly118951
Node: Invoking abc2ly121007
Node: Invoking etf2ly122657
Node: Other formats123771
Node: LilyPond output in other programs124107
Node: LuaTex124536
Node: OpenOffice and LibreOffice124890
Node: Other programs125408
Node: Independent includes126683
Node: MIDI articulation127124
Node: Suggestions for writing files127650
Node: General suggestions129172
Node: Typesetting existing music132470
Node: Large projects134409
Node: Troubleshooting135680
Node: Make and Makefiles137278
Node: GNU Free Documentation License149017
Node: LilyPond index174401

End Tag Table


Local Variables:
coding: utf-8
End:
